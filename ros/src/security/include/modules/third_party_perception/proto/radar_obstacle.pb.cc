// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/third_party_perception/proto/radar_obstacle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/third_party_perception/proto/radar_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace third_party_perception {
class RadarObstacleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RadarObstacle> {
} _RadarObstacle_default_instance_;
class RadarObstacles_RadarObstacleEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RadarObstacles::RadarObstacles_RadarObstacleEntry> {
} _RadarObstacles_RadarObstacleEntry_default_instance_;
class RadarObstaclesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RadarObstacles> {
} _RadarObstacles_default_instance_;

namespace protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, relative_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, relative_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, rcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, movable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, absolute_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, absolute_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacle, moving_frames_count_),
  4,
  0,
  1,
  6,
  5,
  7,
  8,
  9,
  10,
  2,
  3,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacles, radar_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacles, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarObstacles, error_code_),
  ~0u,
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 18, sizeof(RadarObstacle)},
  { 31, 39, sizeof(RadarObstacles)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RadarObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RadarObstacles_RadarObstacleEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RadarObstacles_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/third_party_perception/proto/radar_obstacle.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
file_level_metadata[1].reflection = RadarObstacles::RadarObstacles_RadarObstacleEntry::CreateReflection(file_level_metadata[1].descriptor, _RadarObstacles_RadarObstacleEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _RadarObstacle_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RadarObstacles_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2ferror_5fcode_2eproto::InitDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::apollo::perception::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::InitDefaults();
  _RadarObstacle_default_instance_.DefaultConstruct();
  _RadarObstacles_RadarObstacleEntry_default_instance_.DefaultConstruct();
  _RadarObstacles_default_instance_.DefaultConstruct();
  _RadarObstacle_default_instance_.get_mutable()->relative_position_ = const_cast< ::apollo::perception::Point*>(
      ::apollo::perception::Point::internal_default_instance());
  _RadarObstacle_default_instance_.get_mutable()->relative_velocity_ = const_cast< ::apollo::perception::Point*>(
      ::apollo::perception::Point::internal_default_instance());
  _RadarObstacle_default_instance_.get_mutable()->absolute_position_ = const_cast< ::apollo::perception::Point*>(
      ::apollo::perception::Point::internal_default_instance());
  _RadarObstacle_default_instance_.get_mutable()->absolute_velocity_ = const_cast< ::apollo::perception::Point*>(
      ::apollo::perception::Point::internal_default_instance());
  _RadarObstacles_RadarObstacleEntry_default_instance_.get_mutable()->set_default_instance(_RadarObstacles_RadarObstacleEntry_default_instance_.get_mutable());
  _RadarObstacles_RadarObstacleEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _RadarObstacles_default_instance_.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n9modules/third_party_perception/proto/r"
      "adar_obstacle.proto\022\035apollo.third_party_"
      "perception\032%modules/common/proto/error_c"
      "ode.proto\032!modules/common/proto/header.p"
      "roto\0322modules/perception/proto/perceptio"
      "n_obstacle.proto\"\367\002\n\rRadarObstacle\022\n\n\002id"
      "\030\001 \001(\005\0223\n\021relative_position\030\002 \001(\0132\030.apol"
      "lo.perception.Point\0223\n\021relative_velocity"
      "\030\003 \001(\0132\030.apollo.perception.Point\022\013\n\003rcs\030"
      "\004 \001(\001\022\017\n\007movable\030\005 \001(\010\022\r\n\005width\030\006 \001(\001\022\016\n"
      "\006length\030\007 \001(\001\022\016\n\006height\030\010 \001(\001\022\r\n\005theta\030\t"
      " \001(\001\0223\n\021absolute_position\030\n \001(\0132\030.apollo"
      ".perception.Point\0223\n\021absolute_velocity\030\013"
      " \001(\0132\030.apollo.perception.Point\022\r\n\005count\030"
      "\014 \001(\005\022\033\n\023moving_frames_count\030\r \001(\005\"\247\002\n\016R"
      "adarObstacles\022X\n\016radar_obstacle\030\001 \003(\0132@."
      "apollo.third_party_perception.RadarObsta"
      "cles.RadarObstacleEntry\022%\n\006header\030\002 \001(\0132"
      "\025.apollo.common.Header\0220\n\nerror_code\030\003 \001"
      "(\0162\030.apollo.common.ErrorCode:\002OK\032b\n\022Rada"
      "rObstacleEntry\022\013\n\003key\030\001 \001(\005\022;\n\005value\030\002 \001"
      "(\0132,.apollo.third_party_perception.Radar"
      "Obstacle:\0028\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 892);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/third_party_perception/proto/radar_obstacle.proto", &protobuf_RegisterTypes);
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2ferror_5fcode_2eproto::AddDescriptors();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::apollo::perception::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarObstacle::kIdFieldNumber;
const int RadarObstacle::kRelativePositionFieldNumber;
const int RadarObstacle::kRelativeVelocityFieldNumber;
const int RadarObstacle::kRcsFieldNumber;
const int RadarObstacle::kMovableFieldNumber;
const int RadarObstacle::kWidthFieldNumber;
const int RadarObstacle::kLengthFieldNumber;
const int RadarObstacle::kHeightFieldNumber;
const int RadarObstacle::kThetaFieldNumber;
const int RadarObstacle::kAbsolutePositionFieldNumber;
const int RadarObstacle::kAbsoluteVelocityFieldNumber;
const int RadarObstacle::kCountFieldNumber;
const int RadarObstacle::kMovingFramesCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarObstacle::RadarObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.third_party_perception.RadarObstacle)
}
RadarObstacle::RadarObstacle(const RadarObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_relative_position()) {
    relative_position_ = new ::apollo::perception::Point(*from.relative_position_);
  } else {
    relative_position_ = NULL;
  }
  if (from.has_relative_velocity()) {
    relative_velocity_ = new ::apollo::perception::Point(*from.relative_velocity_);
  } else {
    relative_velocity_ = NULL;
  }
  if (from.has_absolute_position()) {
    absolute_position_ = new ::apollo::perception::Point(*from.absolute_position_);
  } else {
    absolute_position_ = NULL;
  }
  if (from.has_absolute_velocity()) {
    absolute_velocity_ = new ::apollo::perception::Point(*from.absolute_velocity_);
  } else {
    absolute_velocity_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&moving_frames_count_) -
    reinterpret_cast<char*>(&id_) + sizeof(moving_frames_count_));
  // @@protoc_insertion_point(copy_constructor:apollo.third_party_perception.RadarObstacle)
}

void RadarObstacle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&relative_position_, 0, reinterpret_cast<char*>(&moving_frames_count_) -
    reinterpret_cast<char*>(&relative_position_) + sizeof(moving_frames_count_));
}

RadarObstacle::~RadarObstacle() {
  // @@protoc_insertion_point(destructor:apollo.third_party_perception.RadarObstacle)
  SharedDtor();
}

void RadarObstacle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete relative_position_;
  }
  if (this != internal_default_instance()) {
    delete relative_velocity_;
  }
  if (this != internal_default_instance()) {
    delete absolute_position_;
  }
  if (this != internal_default_instance()) {
    delete absolute_velocity_;
  }
}

void RadarObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarObstacle::descriptor() {
  protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RadarObstacle& RadarObstacle::default_instance() {
  protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

RadarObstacle* RadarObstacle::New(::google::protobuf::Arena* arena) const {
  RadarObstacle* n = new RadarObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.third_party_perception.RadarObstacle)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_relative_position()) {
      GOOGLE_DCHECK(relative_position_ != NULL);
      relative_position_->::apollo::perception::Point::Clear();
    }
    if (has_relative_velocity()) {
      GOOGLE_DCHECK(relative_velocity_ != NULL);
      relative_velocity_->::apollo::perception::Point::Clear();
    }
    if (has_absolute_position()) {
      GOOGLE_DCHECK(absolute_position_ != NULL);
      absolute_position_->::apollo::perception::Point::Clear();
    }
    if (has_absolute_velocity()) {
      GOOGLE_DCHECK(absolute_velocity_ != NULL);
      absolute_velocity_->::apollo::perception::Point::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&id_) + sizeof(width_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&length_, 0, reinterpret_cast<char*>(&moving_frames_count_) -
      reinterpret_cast<char*>(&length_) + sizeof(moving_frames_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RadarObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.third_party_perception.RadarObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.Point relative_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relative_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.Point relative_velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relative_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rcs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_rcs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool movable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_movable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &movable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.Point absolute_position = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_absolute_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.Point absolute_velocity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_absolute_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 moving_frames_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_moving_frames_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moving_frames_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.third_party_perception.RadarObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.third_party_perception.RadarObstacle)
  return false;
#undef DO_
}

void RadarObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.third_party_perception.RadarObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .apollo.perception.Point relative_position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->relative_position_, output);
  }

  // optional .apollo.perception.Point relative_velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->relative_velocity_, output);
  }

  // optional double rcs = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rcs(), output);
  }

  // optional bool movable = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->movable(), output);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double length = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->length(), output);
  }

  // optional double height = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->height(), output);
  }

  // optional double theta = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->theta(), output);
  }

  // optional .apollo.perception.Point absolute_position = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->absolute_position_, output);
  }

  // optional .apollo.perception.Point absolute_velocity = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->absolute_velocity_, output);
  }

  // optional int32 count = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->count(), output);
  }

  // optional int32 moving_frames_count = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->moving_frames_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.third_party_perception.RadarObstacle)
}

::google::protobuf::uint8* RadarObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.third_party_perception.RadarObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .apollo.perception.Point relative_position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->relative_position_, deterministic, target);
  }

  // optional .apollo.perception.Point relative_velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->relative_velocity_, deterministic, target);
  }

  // optional double rcs = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rcs(), target);
  }

  // optional bool movable = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->movable(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double length = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->length(), target);
  }

  // optional double height = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->height(), target);
  }

  // optional double theta = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->theta(), target);
  }

  // optional .apollo.perception.Point absolute_position = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->absolute_position_, deterministic, target);
  }

  // optional .apollo.perception.Point absolute_velocity = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->absolute_velocity_, deterministic, target);
  }

  // optional int32 count = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->count(), target);
  }

  // optional int32 moving_frames_count = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->moving_frames_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.third_party_perception.RadarObstacle)
  return target;
}

size_t RadarObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.third_party_perception.RadarObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.perception.Point relative_position = 2;
    if (has_relative_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relative_position_);
    }

    // optional .apollo.perception.Point relative_velocity = 3;
    if (has_relative_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relative_velocity_);
    }

    // optional .apollo.perception.Point absolute_position = 10;
    if (has_absolute_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->absolute_position_);
    }

    // optional .apollo.perception.Point absolute_velocity = 11;
    if (has_absolute_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->absolute_velocity_);
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool movable = 5;
    if (has_movable()) {
      total_size += 1 + 1;
    }

    // optional double rcs = 4;
    if (has_rcs()) {
      total_size += 1 + 8;
    }

    // optional double width = 6;
    if (has_width()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional double length = 7;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double height = 8;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional double theta = 9;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional int32 count = 12;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 moving_frames_count = 13;
    if (has_moving_frames_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moving_frames_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.third_party_perception.RadarObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.third_party_perception.RadarObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.third_party_perception.RadarObstacle)
    MergeFrom(*source);
  }
}

void RadarObstacle::MergeFrom(const RadarObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.third_party_perception.RadarObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_relative_position()->::apollo::perception::Point::MergeFrom(from.relative_position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_relative_velocity()->::apollo::perception::Point::MergeFrom(from.relative_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_absolute_position()->::apollo::perception::Point::MergeFrom(from.absolute_position());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_absolute_velocity()->::apollo::perception::Point::MergeFrom(from.absolute_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      movable_ = from.movable_;
    }
    if (cached_has_bits & 0x00000040u) {
      rcs_ = from.rcs_;
    }
    if (cached_has_bits & 0x00000080u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000200u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000800u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00001000u) {
      moving_frames_count_ = from.moving_frames_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.third_party_perception.RadarObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarObstacle::CopyFrom(const RadarObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.third_party_perception.RadarObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarObstacle::IsInitialized() const {
  return true;
}

void RadarObstacle::Swap(RadarObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarObstacle::InternalSwap(RadarObstacle* other) {
  std::swap(relative_position_, other->relative_position_);
  std::swap(relative_velocity_, other->relative_velocity_);
  std::swap(absolute_position_, other->absolute_position_);
  std::swap(absolute_velocity_, other->absolute_velocity_);
  std::swap(id_, other->id_);
  std::swap(movable_, other->movable_);
  std::swap(rcs_, other->rcs_);
  std::swap(width_, other->width_);
  std::swap(length_, other->length_);
  std::swap(height_, other->height_);
  std::swap(theta_, other->theta_);
  std::swap(count_, other->count_);
  std::swap(moving_frames_count_, other->moving_frames_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarObstacle::GetMetadata() const {
  protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarObstacle

// optional int32 id = 1;
bool RadarObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RadarObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void RadarObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void RadarObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 RadarObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.id)
  return id_;
}
void RadarObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.id)
}

// optional .apollo.perception.Point relative_position = 2;
bool RadarObstacle::has_relative_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarObstacle::set_has_relative_position() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarObstacle::clear_has_relative_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarObstacle::clear_relative_position() {
  if (relative_position_ != NULL) relative_position_->::apollo::perception::Point::Clear();
  clear_has_relative_position();
}
const ::apollo::perception::Point& RadarObstacle::relative_position() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.relative_position)
  return relative_position_ != NULL ? *relative_position_
                         : *::apollo::perception::Point::internal_default_instance();
}
::apollo::perception::Point* RadarObstacle::mutable_relative_position() {
  set_has_relative_position();
  if (relative_position_ == NULL) {
    relative_position_ = new ::apollo::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.third_party_perception.RadarObstacle.relative_position)
  return relative_position_;
}
::apollo::perception::Point* RadarObstacle::release_relative_position() {
  // @@protoc_insertion_point(field_release:apollo.third_party_perception.RadarObstacle.relative_position)
  clear_has_relative_position();
  ::apollo::perception::Point* temp = relative_position_;
  relative_position_ = NULL;
  return temp;
}
void RadarObstacle::set_allocated_relative_position(::apollo::perception::Point* relative_position) {
  delete relative_position_;
  relative_position_ = relative_position;
  if (relative_position) {
    set_has_relative_position();
  } else {
    clear_has_relative_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.third_party_perception.RadarObstacle.relative_position)
}

// optional .apollo.perception.Point relative_velocity = 3;
bool RadarObstacle::has_relative_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarObstacle::set_has_relative_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarObstacle::clear_has_relative_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarObstacle::clear_relative_velocity() {
  if (relative_velocity_ != NULL) relative_velocity_->::apollo::perception::Point::Clear();
  clear_has_relative_velocity();
}
const ::apollo::perception::Point& RadarObstacle::relative_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.relative_velocity)
  return relative_velocity_ != NULL ? *relative_velocity_
                         : *::apollo::perception::Point::internal_default_instance();
}
::apollo::perception::Point* RadarObstacle::mutable_relative_velocity() {
  set_has_relative_velocity();
  if (relative_velocity_ == NULL) {
    relative_velocity_ = new ::apollo::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.third_party_perception.RadarObstacle.relative_velocity)
  return relative_velocity_;
}
::apollo::perception::Point* RadarObstacle::release_relative_velocity() {
  // @@protoc_insertion_point(field_release:apollo.third_party_perception.RadarObstacle.relative_velocity)
  clear_has_relative_velocity();
  ::apollo::perception::Point* temp = relative_velocity_;
  relative_velocity_ = NULL;
  return temp;
}
void RadarObstacle::set_allocated_relative_velocity(::apollo::perception::Point* relative_velocity) {
  delete relative_velocity_;
  relative_velocity_ = relative_velocity;
  if (relative_velocity) {
    set_has_relative_velocity();
  } else {
    clear_has_relative_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.third_party_perception.RadarObstacle.relative_velocity)
}

// optional double rcs = 4;
bool RadarObstacle::has_rcs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RadarObstacle::set_has_rcs() {
  _has_bits_[0] |= 0x00000040u;
}
void RadarObstacle::clear_has_rcs() {
  _has_bits_[0] &= ~0x00000040u;
}
void RadarObstacle::clear_rcs() {
  rcs_ = 0;
  clear_has_rcs();
}
double RadarObstacle::rcs() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.rcs)
  return rcs_;
}
void RadarObstacle::set_rcs(double value) {
  set_has_rcs();
  rcs_ = value;
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.rcs)
}

// optional bool movable = 5;
bool RadarObstacle::has_movable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RadarObstacle::set_has_movable() {
  _has_bits_[0] |= 0x00000020u;
}
void RadarObstacle::clear_has_movable() {
  _has_bits_[0] &= ~0x00000020u;
}
void RadarObstacle::clear_movable() {
  movable_ = false;
  clear_has_movable();
}
bool RadarObstacle::movable() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.movable)
  return movable_;
}
void RadarObstacle::set_movable(bool value) {
  set_has_movable();
  movable_ = value;
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.movable)
}

// optional double width = 6;
bool RadarObstacle::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RadarObstacle::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
void RadarObstacle::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
void RadarObstacle::clear_width() {
  width_ = 0;
  clear_has_width();
}
double RadarObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.width)
  return width_;
}
void RadarObstacle::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.width)
}

// optional double length = 7;
bool RadarObstacle::has_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RadarObstacle::set_has_length() {
  _has_bits_[0] |= 0x00000100u;
}
void RadarObstacle::clear_has_length() {
  _has_bits_[0] &= ~0x00000100u;
}
void RadarObstacle::clear_length() {
  length_ = 0;
  clear_has_length();
}
double RadarObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.length)
  return length_;
}
void RadarObstacle::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.length)
}

// optional double height = 8;
bool RadarObstacle::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RadarObstacle::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
void RadarObstacle::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
void RadarObstacle::clear_height() {
  height_ = 0;
  clear_has_height();
}
double RadarObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.height)
  return height_;
}
void RadarObstacle::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.height)
}

// optional double theta = 9;
bool RadarObstacle::has_theta() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RadarObstacle::set_has_theta() {
  _has_bits_[0] |= 0x00000400u;
}
void RadarObstacle::clear_has_theta() {
  _has_bits_[0] &= ~0x00000400u;
}
void RadarObstacle::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
double RadarObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.theta)
  return theta_;
}
void RadarObstacle::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.theta)
}

// optional .apollo.perception.Point absolute_position = 10;
bool RadarObstacle::has_absolute_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RadarObstacle::set_has_absolute_position() {
  _has_bits_[0] |= 0x00000004u;
}
void RadarObstacle::clear_has_absolute_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void RadarObstacle::clear_absolute_position() {
  if (absolute_position_ != NULL) absolute_position_->::apollo::perception::Point::Clear();
  clear_has_absolute_position();
}
const ::apollo::perception::Point& RadarObstacle::absolute_position() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.absolute_position)
  return absolute_position_ != NULL ? *absolute_position_
                         : *::apollo::perception::Point::internal_default_instance();
}
::apollo::perception::Point* RadarObstacle::mutable_absolute_position() {
  set_has_absolute_position();
  if (absolute_position_ == NULL) {
    absolute_position_ = new ::apollo::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.third_party_perception.RadarObstacle.absolute_position)
  return absolute_position_;
}
::apollo::perception::Point* RadarObstacle::release_absolute_position() {
  // @@protoc_insertion_point(field_release:apollo.third_party_perception.RadarObstacle.absolute_position)
  clear_has_absolute_position();
  ::apollo::perception::Point* temp = absolute_position_;
  absolute_position_ = NULL;
  return temp;
}
void RadarObstacle::set_allocated_absolute_position(::apollo::perception::Point* absolute_position) {
  delete absolute_position_;
  absolute_position_ = absolute_position;
  if (absolute_position) {
    set_has_absolute_position();
  } else {
    clear_has_absolute_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.third_party_perception.RadarObstacle.absolute_position)
}

// optional .apollo.perception.Point absolute_velocity = 11;
bool RadarObstacle::has_absolute_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RadarObstacle::set_has_absolute_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
void RadarObstacle::clear_has_absolute_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
void RadarObstacle::clear_absolute_velocity() {
  if (absolute_velocity_ != NULL) absolute_velocity_->::apollo::perception::Point::Clear();
  clear_has_absolute_velocity();
}
const ::apollo::perception::Point& RadarObstacle::absolute_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.absolute_velocity)
  return absolute_velocity_ != NULL ? *absolute_velocity_
                         : *::apollo::perception::Point::internal_default_instance();
}
::apollo::perception::Point* RadarObstacle::mutable_absolute_velocity() {
  set_has_absolute_velocity();
  if (absolute_velocity_ == NULL) {
    absolute_velocity_ = new ::apollo::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:apollo.third_party_perception.RadarObstacle.absolute_velocity)
  return absolute_velocity_;
}
::apollo::perception::Point* RadarObstacle::release_absolute_velocity() {
  // @@protoc_insertion_point(field_release:apollo.third_party_perception.RadarObstacle.absolute_velocity)
  clear_has_absolute_velocity();
  ::apollo::perception::Point* temp = absolute_velocity_;
  absolute_velocity_ = NULL;
  return temp;
}
void RadarObstacle::set_allocated_absolute_velocity(::apollo::perception::Point* absolute_velocity) {
  delete absolute_velocity_;
  absolute_velocity_ = absolute_velocity;
  if (absolute_velocity) {
    set_has_absolute_velocity();
  } else {
    clear_has_absolute_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.third_party_perception.RadarObstacle.absolute_velocity)
}

// optional int32 count = 12;
bool RadarObstacle::has_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RadarObstacle::set_has_count() {
  _has_bits_[0] |= 0x00000800u;
}
void RadarObstacle::clear_has_count() {
  _has_bits_[0] &= ~0x00000800u;
}
void RadarObstacle::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 RadarObstacle::count() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.count)
  return count_;
}
void RadarObstacle::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.count)
}

// optional int32 moving_frames_count = 13;
bool RadarObstacle::has_moving_frames_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RadarObstacle::set_has_moving_frames_count() {
  _has_bits_[0] |= 0x00001000u;
}
void RadarObstacle::clear_has_moving_frames_count() {
  _has_bits_[0] &= ~0x00001000u;
}
void RadarObstacle::clear_moving_frames_count() {
  moving_frames_count_ = 0;
  clear_has_moving_frames_count();
}
::google::protobuf::int32 RadarObstacle::moving_frames_count() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.moving_frames_count)
  return moving_frames_count_;
}
void RadarObstacle::set_moving_frames_count(::google::protobuf::int32 value) {
  set_has_moving_frames_count();
  moving_frames_count_ = value;
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.moving_frames_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

RadarObstacles::RadarObstacles_RadarObstacleEntry::RadarObstacles_RadarObstacleEntry() {}
RadarObstacles::RadarObstacles_RadarObstacleEntry::RadarObstacles_RadarObstacleEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata RadarObstacles::RadarObstacles_RadarObstacleEntry::GetMetadata() const {
  protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::file_level_metadata[1];
}
void RadarObstacles::RadarObstacles_RadarObstacleEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void RadarObstacles::RadarObstacles_RadarObstacleEntry::MergeFrom(const RadarObstacles_RadarObstacleEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarObstacles::kRadarObstacleFieldNumber;
const int RadarObstacles::kHeaderFieldNumber;
const int RadarObstacles::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarObstacles::RadarObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.third_party_perception.RadarObstacles)
}
RadarObstacles::RadarObstacles(const RadarObstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radar_obstacle_.MergeFrom(from.radar_obstacle_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:apollo.third_party_perception.RadarObstacles)
}

void RadarObstacles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&header_) + sizeof(error_code_));
}

RadarObstacles::~RadarObstacles() {
  // @@protoc_insertion_point(destructor:apollo.third_party_perception.RadarObstacles)
  SharedDtor();
}

void RadarObstacles::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RadarObstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarObstacles::descriptor() {
  protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RadarObstacles& RadarObstacles::default_instance() {
  protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

RadarObstacles* RadarObstacles::New(::google::protobuf::Arena* arena) const {
  RadarObstacles* n = new RadarObstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.third_party_perception.RadarObstacles)
  radar_obstacle_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::apollo::common::Header::Clear();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RadarObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.third_party_perception.RadarObstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .apollo.third_party_perception.RadarObstacle> radar_obstacle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          RadarObstacles_RadarObstacleEntry::Parser< ::google::protobuf::internal::MapField<
              RadarObstacles_RadarObstacleEntry,
              ::google::protobuf::int32, ::apollo::third_party_perception::RadarObstacle,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::third_party_perception::RadarObstacle > > parser(&radar_obstacle_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Header header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::apollo::common::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.third_party_perception.RadarObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.third_party_perception.RadarObstacles)
  return false;
#undef DO_
}

void RadarObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.third_party_perception.RadarObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .apollo.third_party_perception.RadarObstacle> radar_obstacle = 1;
  if (!this->radar_obstacle().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::third_party_perception::RadarObstacle >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->radar_obstacle().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->radar_obstacle().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::third_party_perception::RadarObstacle >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::third_party_perception::RadarObstacle >::const_iterator
          it = this->radar_obstacle().begin();
          it != this->radar_obstacle().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RadarObstacles_RadarObstacleEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(radar_obstacle_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<RadarObstacles_RadarObstacleEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::third_party_perception::RadarObstacle >::const_iterator
          it = this->radar_obstacle().begin();
          it != this->radar_obstacle().end(); ++it) {
        entry.reset(radar_obstacle_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.third_party_perception.RadarObstacles)
}

::google::protobuf::uint8* RadarObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.third_party_perception.RadarObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .apollo.third_party_perception.RadarObstacle> radar_obstacle = 1;
  if (!this->radar_obstacle().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::third_party_perception::RadarObstacle >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->radar_obstacle().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->radar_obstacle().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::third_party_perception::RadarObstacle >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::third_party_perception::RadarObstacle >::const_iterator
          it = this->radar_obstacle().begin();
          it != this->radar_obstacle().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RadarObstacles_RadarObstacleEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(radar_obstacle_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<RadarObstacles_RadarObstacleEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::third_party_perception::RadarObstacle >::const_iterator
          it = this->radar_obstacle().begin();
          it != this->radar_obstacle().end(); ++it) {
        entry.reset(radar_obstacle_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, deterministic, target);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.third_party_perception.RadarObstacles)
  return target;
}

size_t RadarObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.third_party_perception.RadarObstacles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // map<int32, .apollo.third_party_perception.RadarObstacle> radar_obstacle = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->radar_obstacle_size());
  {
    ::google::protobuf::scoped_ptr<RadarObstacles_RadarObstacleEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::third_party_perception::RadarObstacle >::const_iterator
        it = this->radar_obstacle().begin();
        it != this->radar_obstacle().end(); ++it) {
      entry.reset(radar_obstacle_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.Header header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.third_party_perception.RadarObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarObstacles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.third_party_perception.RadarObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.third_party_perception.RadarObstacles)
    MergeFrom(*source);
  }
}

void RadarObstacles::MergeFrom(const RadarObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.third_party_perception.RadarObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  radar_obstacle_.MergeFrom(from.radar_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.third_party_perception.RadarObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarObstacles::CopyFrom(const RadarObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.third_party_perception.RadarObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarObstacles::IsInitialized() const {
  return true;
}

void RadarObstacles::Swap(RadarObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarObstacles::InternalSwap(RadarObstacles* other) {
  radar_obstacle_.Swap(&other->radar_obstacle_);
  std::swap(header_, other->header_);
  std::swap(error_code_, other->error_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarObstacles::GetMetadata() const {
  protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarObstacles

// map<int32, .apollo.third_party_perception.RadarObstacle> radar_obstacle = 1;
int RadarObstacles::radar_obstacle_size() const {
  return radar_obstacle_.size();
}
void RadarObstacles::clear_radar_obstacle() {
  radar_obstacle_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::third_party_perception::RadarObstacle >&
RadarObstacles::radar_obstacle() const {
  // @@protoc_insertion_point(field_map:apollo.third_party_perception.RadarObstacles.radar_obstacle)
  return radar_obstacle_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::third_party_perception::RadarObstacle >*
RadarObstacles::mutable_radar_obstacle() {
  // @@protoc_insertion_point(field_mutable_map:apollo.third_party_perception.RadarObstacles.radar_obstacle)
  return radar_obstacle_.MutableMap();
}

// optional .apollo.common.Header header = 2;
bool RadarObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarObstacles::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& RadarObstacles::header() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacles.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* RadarObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.third_party_perception.RadarObstacles.header)
  return header_;
}
::apollo::common::Header* RadarObstacles::release_header() {
  // @@protoc_insertion_point(field_release:apollo.third_party_perception.RadarObstacles.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void RadarObstacles::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.third_party_perception.RadarObstacles.header)
}

// optional .apollo.common.ErrorCode error_code = 3 [default = OK];
bool RadarObstacles::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarObstacles::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarObstacles::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarObstacles::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::apollo::common::ErrorCode RadarObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacles.error_code)
  return static_cast< ::apollo::common::ErrorCode >(error_code_);
}
void RadarObstacles::set_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacles.error_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace third_party_perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
