// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/measure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/localization/proto/measure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {
class IntegMeasureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IntegMeasure> {
} _IntegMeasure_default_instance_;

namespace protobuf_modules_2flocalization_2fproto_2fmeasure_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegMeasure, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegMeasure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegMeasure, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegMeasure, measure_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegMeasure, frame_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegMeasure, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegMeasure, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegMeasure, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegMeasure, zone_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegMeasure, is_have_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegMeasure, is_gnss_double_antenna_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegMeasure, measure_covar_),
  0,
  3,
  4,
  1,
  2,
  5,
  6,
  7,
  8,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 15, sizeof(IntegMeasure)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_IntegMeasure_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/localization/proto/measure.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _IntegMeasure_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  _IntegMeasure_default_instance_.DefaultConstruct();
  _IntegMeasure_default_instance_.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _IntegMeasure_default_instance_.get_mutable()->position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  _IntegMeasure_default_instance_.get_mutable()->velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n(modules/localization/proto/measure.pro"
      "to\022\023apollo.localization\032!modules/common/"
      "proto/header.proto\032#modules/common/proto"
      "/geometry.proto\"\326\004\n\014IntegMeasure\022%\n\006head"
      "er\030\001 \001(\0132\025.apollo.common.Header\022C\n\014measu"
      "re_type\030\002 \001(\0162-.apollo.localization.Inte"
      "gMeasure.MeasureType\022\?\n\nframe_type\030\003 \001(\016"
      "2+.apollo.localization.IntegMeasure.Fram"
      "eType\022(\n\010position\030\004 \001(\0132\026.apollo.common."
      "Point3D\022(\n\010velocity\030\005 \001(\0132\026.apollo.commo"
      "n.Point3D\022\013\n\003yaw\030\006 \001(\001\022\017\n\007zone_id\030\007 \001(\005\022"
      "\030\n\020is_have_variance\030\010 \001(\010\022\036\n\026is_gnss_dou"
      "ble_antenna\030\t \001(\010\022\031\n\rmeasure_covar\030\n \003(\001"
      "B\002\020\001\"\232\001\n\013MeasureType\022\021\n\rGNSS_POS_ONLY\020\000\022"
      "\020\n\014GNSS_POS_VEL\020\001\022\017\n\013GNSS_POS_XY\020\002\022\021\n\rGN"
      "SS_VEL_ONLY\020\003\022\023\n\017POINT_CLOUD_POS\020\004\022\025\n\021OD"
      "OMETER_VEL_ONLY\020\005\022\026\n\022VEHICLE_CONSTRAINT\020"
      "\006\"5\n\tFrameType\022\007\n\003ENU\020\000\022\010\n\004ECEF\020\001\022\007\n\003UTM"
      "\020\002\022\014\n\010ODOMETER\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 736);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/localization/proto/measure.proto", &protobuf_RegisterTypes);
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2flocalization_2fproto_2fmeasure_2eproto

const ::google::protobuf::EnumDescriptor* IntegMeasure_MeasureType_descriptor() {
  protobuf_modules_2flocalization_2fproto_2fmeasure_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2flocalization_2fproto_2fmeasure_2eproto::file_level_enum_descriptors[0];
}
bool IntegMeasure_MeasureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IntegMeasure_MeasureType IntegMeasure::GNSS_POS_ONLY;
const IntegMeasure_MeasureType IntegMeasure::GNSS_POS_VEL;
const IntegMeasure_MeasureType IntegMeasure::GNSS_POS_XY;
const IntegMeasure_MeasureType IntegMeasure::GNSS_VEL_ONLY;
const IntegMeasure_MeasureType IntegMeasure::POINT_CLOUD_POS;
const IntegMeasure_MeasureType IntegMeasure::ODOMETER_VEL_ONLY;
const IntegMeasure_MeasureType IntegMeasure::VEHICLE_CONSTRAINT;
const IntegMeasure_MeasureType IntegMeasure::MeasureType_MIN;
const IntegMeasure_MeasureType IntegMeasure::MeasureType_MAX;
const int IntegMeasure::MeasureType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* IntegMeasure_FrameType_descriptor() {
  protobuf_modules_2flocalization_2fproto_2fmeasure_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2flocalization_2fproto_2fmeasure_2eproto::file_level_enum_descriptors[1];
}
bool IntegMeasure_FrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IntegMeasure_FrameType IntegMeasure::ENU;
const IntegMeasure_FrameType IntegMeasure::ECEF;
const IntegMeasure_FrameType IntegMeasure::UTM;
const IntegMeasure_FrameType IntegMeasure::ODOMETER;
const IntegMeasure_FrameType IntegMeasure::FrameType_MIN;
const IntegMeasure_FrameType IntegMeasure::FrameType_MAX;
const int IntegMeasure::FrameType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntegMeasure::kHeaderFieldNumber;
const int IntegMeasure::kMeasureTypeFieldNumber;
const int IntegMeasure::kFrameTypeFieldNumber;
const int IntegMeasure::kPositionFieldNumber;
const int IntegMeasure::kVelocityFieldNumber;
const int IntegMeasure::kYawFieldNumber;
const int IntegMeasure::kZoneIdFieldNumber;
const int IntegMeasure::kIsHaveVarianceFieldNumber;
const int IntegMeasure::kIsGnssDoubleAntennaFieldNumber;
const int IntegMeasure::kMeasureCovarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntegMeasure::IntegMeasure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2flocalization_2fproto_2fmeasure_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.IntegMeasure)
}
IntegMeasure::IntegMeasure(const IntegMeasure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      measure_covar_(from.measure_covar_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::apollo::common::Point3D(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::apollo::common::Point3D(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  ::memcpy(&measure_type_, &from.measure_type_,
    reinterpret_cast<char*>(&is_gnss_double_antenna_) -
    reinterpret_cast<char*>(&measure_type_) + sizeof(is_gnss_double_antenna_));
  // @@protoc_insertion_point(copy_constructor:apollo.localization.IntegMeasure)
}

void IntegMeasure::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&is_gnss_double_antenna_) -
    reinterpret_cast<char*>(&header_) + sizeof(is_gnss_double_antenna_));
}

IntegMeasure::~IntegMeasure() {
  // @@protoc_insertion_point(destructor:apollo.localization.IntegMeasure)
  SharedDtor();
}

void IntegMeasure::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete position_;
  }
  if (this != internal_default_instance()) {
    delete velocity_;
  }
}

void IntegMeasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegMeasure::descriptor() {
  protobuf_modules_2flocalization_2fproto_2fmeasure_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2flocalization_2fproto_2fmeasure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IntegMeasure& IntegMeasure::default_instance() {
  protobuf_modules_2flocalization_2fproto_2fmeasure_2eproto::InitDefaults();
  return *internal_default_instance();
}

IntegMeasure* IntegMeasure::New(::google::protobuf::Arena* arena) const {
  IntegMeasure* n = new IntegMeasure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntegMeasure::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.IntegMeasure)
  measure_covar_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::apollo::common::Header::Clear();
    }
    if (has_position()) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::apollo::common::Point3D::Clear();
    }
    if (has_velocity()) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::apollo::common::Point3D::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&measure_type_, 0, reinterpret_cast<char*>(&is_have_variance_) -
      reinterpret_cast<char*>(&measure_type_) + sizeof(is_have_variance_));
  }
  is_gnss_double_antenna_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IntegMeasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.IntegMeasure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.IntegMeasure.MeasureType measure_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::IntegMeasure_MeasureType_IsValid(value)) {
            set_measure_type(static_cast< ::apollo::localization::IntegMeasure_MeasureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.IntegMeasure.FrameType frame_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::IntegMeasure_FrameType_IsValid(value)) {
            set_frame_type(static_cast< ::apollo::localization::IntegMeasure_FrameType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yaw = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 zone_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_zone_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zone_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_have_variance = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_is_have_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_have_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_gnss_double_antenna = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_is_gnss_double_antenna();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gnss_double_antenna_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double measure_covar = 10 [packed = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_measure_covar())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(81u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 82u, input, this->mutable_measure_covar())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.IntegMeasure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.IntegMeasure)
  return false;
#undef DO_
}

void IntegMeasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.IntegMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.localization.IntegMeasure.MeasureType measure_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->measure_type(), output);
  }

  // optional .apollo.localization.IntegMeasure.FrameType frame_type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->frame_type(), output);
  }

  // optional .apollo.common.Point3D position = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->position_, output);
  }

  // optional .apollo.common.Point3D velocity = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->velocity_, output);
  }

  // optional double yaw = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->yaw(), output);
  }

  // optional int32 zone_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->zone_id(), output);
  }

  // optional bool is_have_variance = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_have_variance(), output);
  }

  // optional bool is_gnss_double_antenna = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_gnss_double_antenna(), output);
  }

  // repeated double measure_covar = 10 [packed = true];
  if (this->measure_covar_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_measure_covar_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->measure_covar().data(), this->measure_covar_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.IntegMeasure)
}

::google::protobuf::uint8* IntegMeasure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.IntegMeasure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional .apollo.localization.IntegMeasure.MeasureType measure_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->measure_type(), target);
  }

  // optional .apollo.localization.IntegMeasure.FrameType frame_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->frame_type(), target);
  }

  // optional .apollo.common.Point3D position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->position_, deterministic, target);
  }

  // optional .apollo.common.Point3D velocity = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->velocity_, deterministic, target);
  }

  // optional double yaw = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->yaw(), target);
  }

  // optional int32 zone_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->zone_id(), target);
  }

  // optional bool is_have_variance = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_have_variance(), target);
  }

  // optional bool is_gnss_double_antenna = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_gnss_double_antenna(), target);
  }

  // repeated double measure_covar = 10 [packed = true];
  if (this->measure_covar_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _measure_covar_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->measure_covar_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.IntegMeasure)
  return target;
}

size_t IntegMeasure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.IntegMeasure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double measure_covar = 10 [packed = true];
  {
    unsigned int count = this->measure_covar_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _measure_covar_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.common.Point3D position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .apollo.common.Point3D velocity = 5;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional .apollo.localization.IntegMeasure.MeasureType measure_type = 2;
    if (has_measure_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->measure_type());
    }

    // optional .apollo.localization.IntegMeasure.FrameType frame_type = 3;
    if (has_frame_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->frame_type());
    }

    // optional double yaw = 6;
    if (has_yaw()) {
      total_size += 1 + 8;
    }

    // optional int32 zone_id = 7;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zone_id());
    }

    // optional bool is_have_variance = 8;
    if (has_is_have_variance()) {
      total_size += 1 + 1;
    }

  }
  // optional bool is_gnss_double_antenna = 9;
  if (has_is_gnss_double_antenna()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegMeasure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.IntegMeasure)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegMeasure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntegMeasure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.IntegMeasure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.IntegMeasure)
    MergeFrom(*source);
  }
}

void IntegMeasure::MergeFrom(const IntegMeasure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.IntegMeasure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  measure_covar_.MergeFrom(from.measure_covar_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_position()->::apollo::common::Point3D::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_velocity()->::apollo::common::Point3D::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      measure_type_ = from.measure_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      frame_type_ = from.frame_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      yaw_ = from.yaw_;
    }
    if (cached_has_bits & 0x00000040u) {
      zone_id_ = from.zone_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_have_variance_ = from.is_have_variance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_is_gnss_double_antenna(from.is_gnss_double_antenna());
  }
}

void IntegMeasure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.IntegMeasure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegMeasure::CopyFrom(const IntegMeasure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.IntegMeasure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegMeasure::IsInitialized() const {
  return true;
}

void IntegMeasure::Swap(IntegMeasure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntegMeasure::InternalSwap(IntegMeasure* other) {
  measure_covar_.InternalSwap(&other->measure_covar_);
  std::swap(header_, other->header_);
  std::swap(position_, other->position_);
  std::swap(velocity_, other->velocity_);
  std::swap(measure_type_, other->measure_type_);
  std::swap(frame_type_, other->frame_type_);
  std::swap(yaw_, other->yaw_);
  std::swap(zone_id_, other->zone_id_);
  std::swap(is_have_variance_, other->is_have_variance_);
  std::swap(is_gnss_double_antenna_, other->is_gnss_double_antenna_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntegMeasure::GetMetadata() const {
  protobuf_modules_2flocalization_2fproto_2fmeasure_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2flocalization_2fproto_2fmeasure_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntegMeasure

// optional .apollo.common.Header header = 1;
bool IntegMeasure::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IntegMeasure::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void IntegMeasure::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void IntegMeasure::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& IntegMeasure::header() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* IntegMeasure::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.IntegMeasure.header)
  return header_;
}
::apollo::common::Header* IntegMeasure::release_header() {
  // @@protoc_insertion_point(field_release:apollo.localization.IntegMeasure.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void IntegMeasure::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.IntegMeasure.header)
}

// optional .apollo.localization.IntegMeasure.MeasureType measure_type = 2;
bool IntegMeasure::has_measure_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IntegMeasure::set_has_measure_type() {
  _has_bits_[0] |= 0x00000008u;
}
void IntegMeasure::clear_has_measure_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void IntegMeasure::clear_measure_type() {
  measure_type_ = 0;
  clear_has_measure_type();
}
::apollo::localization::IntegMeasure_MeasureType IntegMeasure::measure_type() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.measure_type)
  return static_cast< ::apollo::localization::IntegMeasure_MeasureType >(measure_type_);
}
void IntegMeasure::set_measure_type(::apollo::localization::IntegMeasure_MeasureType value) {
  assert(::apollo::localization::IntegMeasure_MeasureType_IsValid(value));
  set_has_measure_type();
  measure_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.measure_type)
}

// optional .apollo.localization.IntegMeasure.FrameType frame_type = 3;
bool IntegMeasure::has_frame_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IntegMeasure::set_has_frame_type() {
  _has_bits_[0] |= 0x00000010u;
}
void IntegMeasure::clear_has_frame_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void IntegMeasure::clear_frame_type() {
  frame_type_ = 0;
  clear_has_frame_type();
}
::apollo::localization::IntegMeasure_FrameType IntegMeasure::frame_type() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.frame_type)
  return static_cast< ::apollo::localization::IntegMeasure_FrameType >(frame_type_);
}
void IntegMeasure::set_frame_type(::apollo::localization::IntegMeasure_FrameType value) {
  assert(::apollo::localization::IntegMeasure_FrameType_IsValid(value));
  set_has_frame_type();
  frame_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.frame_type)
}

// optional .apollo.common.Point3D position = 4;
bool IntegMeasure::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IntegMeasure::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void IntegMeasure::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void IntegMeasure::clear_position() {
  if (position_ != NULL) position_->::apollo::common::Point3D::Clear();
  clear_has_position();
}
const ::apollo::common::Point3D& IntegMeasure::position() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.position)
  return position_ != NULL ? *position_
                         : *::apollo::common::Point3D::internal_default_instance();
}
::apollo::common::Point3D* IntegMeasure::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.IntegMeasure.position)
  return position_;
}
::apollo::common::Point3D* IntegMeasure::release_position() {
  // @@protoc_insertion_point(field_release:apollo.localization.IntegMeasure.position)
  clear_has_position();
  ::apollo::common::Point3D* temp = position_;
  position_ = NULL;
  return temp;
}
void IntegMeasure::set_allocated_position(::apollo::common::Point3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.IntegMeasure.position)
}

// optional .apollo.common.Point3D velocity = 5;
bool IntegMeasure::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IntegMeasure::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
void IntegMeasure::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
void IntegMeasure::clear_velocity() {
  if (velocity_ != NULL) velocity_->::apollo::common::Point3D::Clear();
  clear_has_velocity();
}
const ::apollo::common::Point3D& IntegMeasure::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::apollo::common::Point3D::internal_default_instance();
}
::apollo::common::Point3D* IntegMeasure::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.IntegMeasure.velocity)
  return velocity_;
}
::apollo::common::Point3D* IntegMeasure::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.localization.IntegMeasure.velocity)
  clear_has_velocity();
  ::apollo::common::Point3D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void IntegMeasure::set_allocated_velocity(::apollo::common::Point3D* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.IntegMeasure.velocity)
}

// optional double yaw = 6;
bool IntegMeasure::has_yaw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IntegMeasure::set_has_yaw() {
  _has_bits_[0] |= 0x00000020u;
}
void IntegMeasure::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000020u;
}
void IntegMeasure::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
double IntegMeasure::yaw() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.yaw)
  return yaw_;
}
void IntegMeasure::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.yaw)
}

// optional int32 zone_id = 7;
bool IntegMeasure::has_zone_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IntegMeasure::set_has_zone_id() {
  _has_bits_[0] |= 0x00000040u;
}
void IntegMeasure::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void IntegMeasure::clear_zone_id() {
  zone_id_ = 0;
  clear_has_zone_id();
}
::google::protobuf::int32 IntegMeasure::zone_id() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.zone_id)
  return zone_id_;
}
void IntegMeasure::set_zone_id(::google::protobuf::int32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.zone_id)
}

// optional bool is_have_variance = 8;
bool IntegMeasure::has_is_have_variance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IntegMeasure::set_has_is_have_variance() {
  _has_bits_[0] |= 0x00000080u;
}
void IntegMeasure::clear_has_is_have_variance() {
  _has_bits_[0] &= ~0x00000080u;
}
void IntegMeasure::clear_is_have_variance() {
  is_have_variance_ = false;
  clear_has_is_have_variance();
}
bool IntegMeasure::is_have_variance() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.is_have_variance)
  return is_have_variance_;
}
void IntegMeasure::set_is_have_variance(bool value) {
  set_has_is_have_variance();
  is_have_variance_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.is_have_variance)
}

// optional bool is_gnss_double_antenna = 9;
bool IntegMeasure::has_is_gnss_double_antenna() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void IntegMeasure::set_has_is_gnss_double_antenna() {
  _has_bits_[0] |= 0x00000100u;
}
void IntegMeasure::clear_has_is_gnss_double_antenna() {
  _has_bits_[0] &= ~0x00000100u;
}
void IntegMeasure::clear_is_gnss_double_antenna() {
  is_gnss_double_antenna_ = false;
  clear_has_is_gnss_double_antenna();
}
bool IntegMeasure::is_gnss_double_antenna() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.is_gnss_double_antenna)
  return is_gnss_double_antenna_;
}
void IntegMeasure::set_is_gnss_double_antenna(bool value) {
  set_has_is_gnss_double_antenna();
  is_gnss_double_antenna_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.is_gnss_double_antenna)
}

// repeated double measure_covar = 10 [packed = true];
int IntegMeasure::measure_covar_size() const {
  return measure_covar_.size();
}
void IntegMeasure::clear_measure_covar() {
  measure_covar_.Clear();
}
double IntegMeasure::measure_covar(int index) const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.measure_covar)
  return measure_covar_.Get(index);
}
void IntegMeasure::set_measure_covar(int index, double value) {
  measure_covar_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.measure_covar)
}
void IntegMeasure::add_measure_covar(double value) {
  measure_covar_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.localization.IntegMeasure.measure_covar)
}
const ::google::protobuf::RepeatedField< double >&
IntegMeasure::measure_covar() const {
  // @@protoc_insertion_point(field_list:apollo.localization.IntegMeasure.measure_covar)
  return measure_covar_;
}
::google::protobuf::RepeatedField< double >*
IntegMeasure::mutable_measure_covar() {
  // @@protoc_insertion_point(field_mutable_list:apollo.localization.IntegMeasure.measure_covar)
  return &measure_covar_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
