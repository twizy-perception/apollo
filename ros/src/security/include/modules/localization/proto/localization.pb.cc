// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/localization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/localization/proto/localization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {
class UncertaintyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Uncertainty> {
} _Uncertainty_default_instance_;
class LocalizationEstimateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LocalizationEstimate> {
} _LocalizationEstimate_default_instance_;
class LocalizationStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LocalizationStatus> {
} _LocalizationStatus_default_instance_;

namespace protobuf_modules_2flocalization_2fproto_2flocalization_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, position_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, orientation_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, linear_velocity_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, linear_acceleration_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, angular_velocity_std_dev_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, uncertainty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, measurement_time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, fusion_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, gnss_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, lidar_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, measurement_time_),
  0,
  1,
  2,
  4,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(Uncertainty)},
  { 15, 24, sizeof(LocalizationEstimate)},
  { 28, 38, sizeof(LocalizationStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Uncertainty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LocalizationEstimate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LocalizationStatus_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/localization/proto/localization.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Uncertainty_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LocalizationEstimate_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LocalizationStatus_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::apollo::localization::protobuf_modules_2flocalization_2fproto_2fpose_2eproto::InitDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  _Uncertainty_default_instance_.DefaultConstruct();
  _LocalizationEstimate_default_instance_.DefaultConstruct();
  _LocalizationStatus_default_instance_.DefaultConstruct();
  _Uncertainty_default_instance_.get_mutable()->position_std_dev_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  _Uncertainty_default_instance_.get_mutable()->orientation_std_dev_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  _Uncertainty_default_instance_.get_mutable()->linear_velocity_std_dev_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  _Uncertainty_default_instance_.get_mutable()->linear_acceleration_std_dev_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  _Uncertainty_default_instance_.get_mutable()->angular_velocity_std_dev_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  _LocalizationEstimate_default_instance_.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _LocalizationEstimate_default_instance_.get_mutable()->pose_ = const_cast< ::apollo::localization::Pose*>(
      ::apollo::localization::Pose::internal_default_instance());
  _LocalizationEstimate_default_instance_.get_mutable()->uncertainty_ = const_cast< ::apollo::localization::Uncertainty*>(
      ::apollo::localization::Uncertainty::internal_default_instance());
  _LocalizationStatus_default_instance_.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n-modules/localization/proto/localizatio"
      "n.proto\022\023apollo.localization\032!modules/co"
      "mmon/proto/header.proto\032%modules/localiz"
      "ation/proto/pose.proto\032#modules/common/p"
      "roto/geometry.proto\"\244\002\n\013Uncertainty\0220\n\020p"
      "osition_std_dev\030\001 \001(\0132\026.apollo.common.Po"
      "int3D\0223\n\023orientation_std_dev\030\002 \001(\0132\026.apo"
      "llo.common.Point3D\0227\n\027linear_velocity_st"
      "d_dev\030\003 \001(\0132\026.apollo.common.Point3D\022;\n\033l"
      "inear_acceleration_std_dev\030\004 \001(\0132\026.apoll"
      "o.common.Point3D\0228\n\030angular_velocity_std"
      "_dev\030\005 \001(\0132\026.apollo.common.Point3D\"\267\001\n\024L"
      "ocalizationEstimate\022%\n\006header\030\001 \001(\0132\025.ap"
      "ollo.common.Header\022\'\n\004pose\030\002 \001(\0132\031.apoll"
      "o.localization.Pose\0225\n\013uncertainty\030\003 \001(\013"
      "2 .apollo.localization.Uncertainty\022\030\n\020me"
      "asurement_time\030\004 \001(\001\"\200\002\n\022LocalizationSta"
      "tus\022%\n\006header\030\001 \001(\0132\025.apollo.common.Head"
      "er\0228\n\rfusion_status\030\002 \001(\0162!.apollo.local"
      "ization.MeasureState\0226\n\013gnss_status\030\003 \001("
      "\0162!.apollo.localization.MeasureState\0227\n\014"
      "lidar_status\030\004 \001(\0162!.apollo.localization"
      ".MeasureState\022\030\n\020measurement_time\030\005 \001(\001*"
      "@\n\014MeasureState\022\r\n\tNOT_VALID\020\000\022\016\n\nNOT_ST"
      "ABLE\020\001\022\006\n\002OK\020\002\022\t\n\005VALID\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 985);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/localization/proto/localization.proto", &protobuf_RegisterTypes);
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::apollo::localization::protobuf_modules_2flocalization_2fproto_2fpose_2eproto::AddDescriptors();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2flocalization_2fproto_2flocalization_2eproto

const ::google::protobuf::EnumDescriptor* MeasureState_descriptor() {
  protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::file_level_enum_descriptors[0];
}
bool MeasureState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uncertainty::kPositionStdDevFieldNumber;
const int Uncertainty::kOrientationStdDevFieldNumber;
const int Uncertainty::kLinearVelocityStdDevFieldNumber;
const int Uncertainty::kLinearAccelerationStdDevFieldNumber;
const int Uncertainty::kAngularVelocityStdDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uncertainty::Uncertainty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.Uncertainty)
}
Uncertainty::Uncertainty(const Uncertainty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position_std_dev()) {
    position_std_dev_ = new ::apollo::common::Point3D(*from.position_std_dev_);
  } else {
    position_std_dev_ = NULL;
  }
  if (from.has_orientation_std_dev()) {
    orientation_std_dev_ = new ::apollo::common::Point3D(*from.orientation_std_dev_);
  } else {
    orientation_std_dev_ = NULL;
  }
  if (from.has_linear_velocity_std_dev()) {
    linear_velocity_std_dev_ = new ::apollo::common::Point3D(*from.linear_velocity_std_dev_);
  } else {
    linear_velocity_std_dev_ = NULL;
  }
  if (from.has_linear_acceleration_std_dev()) {
    linear_acceleration_std_dev_ = new ::apollo::common::Point3D(*from.linear_acceleration_std_dev_);
  } else {
    linear_acceleration_std_dev_ = NULL;
  }
  if (from.has_angular_velocity_std_dev()) {
    angular_velocity_std_dev_ = new ::apollo::common::Point3D(*from.angular_velocity_std_dev_);
  } else {
    angular_velocity_std_dev_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.localization.Uncertainty)
}

void Uncertainty::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_std_dev_, 0, reinterpret_cast<char*>(&angular_velocity_std_dev_) -
    reinterpret_cast<char*>(&position_std_dev_) + sizeof(angular_velocity_std_dev_));
}

Uncertainty::~Uncertainty() {
  // @@protoc_insertion_point(destructor:apollo.localization.Uncertainty)
  SharedDtor();
}

void Uncertainty::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_std_dev_;
  }
  if (this != internal_default_instance()) {
    delete orientation_std_dev_;
  }
  if (this != internal_default_instance()) {
    delete linear_velocity_std_dev_;
  }
  if (this != internal_default_instance()) {
    delete linear_acceleration_std_dev_;
  }
  if (this != internal_default_instance()) {
    delete angular_velocity_std_dev_;
  }
}

void Uncertainty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uncertainty::descriptor() {
  protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Uncertainty& Uncertainty::default_instance() {
  protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::InitDefaults();
  return *internal_default_instance();
}

Uncertainty* Uncertainty::New(::google::protobuf::Arena* arena) const {
  Uncertainty* n = new Uncertainty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Uncertainty::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.Uncertainty)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_position_std_dev()) {
      GOOGLE_DCHECK(position_std_dev_ != NULL);
      position_std_dev_->::apollo::common::Point3D::Clear();
    }
    if (has_orientation_std_dev()) {
      GOOGLE_DCHECK(orientation_std_dev_ != NULL);
      orientation_std_dev_->::apollo::common::Point3D::Clear();
    }
    if (has_linear_velocity_std_dev()) {
      GOOGLE_DCHECK(linear_velocity_std_dev_ != NULL);
      linear_velocity_std_dev_->::apollo::common::Point3D::Clear();
    }
    if (has_linear_acceleration_std_dev()) {
      GOOGLE_DCHECK(linear_acceleration_std_dev_ != NULL);
      linear_acceleration_std_dev_->::apollo::common::Point3D::Clear();
    }
    if (has_angular_velocity_std_dev()) {
      GOOGLE_DCHECK(angular_velocity_std_dev_ != NULL);
      angular_velocity_std_dev_->::apollo::common::Point3D::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Uncertainty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.Uncertainty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Point3D position_std_dev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D orientation_std_dev = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.Uncertainty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.Uncertainty)
  return false;
#undef DO_
}

void Uncertainty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.Uncertainty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Point3D position_std_dev = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_std_dev_, output);
  }

  // optional .apollo.common.Point3D orientation_std_dev = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_std_dev_, output);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->linear_velocity_std_dev_, output);
  }

  // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->linear_acceleration_std_dev_, output);
  }

  // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->angular_velocity_std_dev_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.Uncertainty)
}

::google::protobuf::uint8* Uncertainty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.Uncertainty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Point3D position_std_dev = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_std_dev_, deterministic, target);
  }

  // optional .apollo.common.Point3D orientation_std_dev = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orientation_std_dev_, deterministic, target);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->linear_velocity_std_dev_, deterministic, target);
  }

  // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->linear_acceleration_std_dev_, deterministic, target);
  }

  // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->angular_velocity_std_dev_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.Uncertainty)
  return target;
}

size_t Uncertainty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.Uncertainty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.common.Point3D position_std_dev = 1;
    if (has_position_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_std_dev_);
    }

    // optional .apollo.common.Point3D orientation_std_dev = 2;
    if (has_orientation_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orientation_std_dev_);
    }

    // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
    if (has_linear_velocity_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_velocity_std_dev_);
    }

    // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
    if (has_linear_acceleration_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_acceleration_std_dev_);
    }

    // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
    if (has_angular_velocity_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angular_velocity_std_dev_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uncertainty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.Uncertainty)
  GOOGLE_DCHECK_NE(&from, this);
  const Uncertainty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Uncertainty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.Uncertainty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.Uncertainty)
    MergeFrom(*source);
  }
}

void Uncertainty::MergeFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.Uncertainty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position_std_dev()->::apollo::common::Point3D::MergeFrom(from.position_std_dev());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_orientation_std_dev()->::apollo::common::Point3D::MergeFrom(from.orientation_std_dev());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_linear_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from.linear_velocity_std_dev());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_linear_acceleration_std_dev()->::apollo::common::Point3D::MergeFrom(from.linear_acceleration_std_dev());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_angular_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from.angular_velocity_std_dev());
    }
  }
}

void Uncertainty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uncertainty::CopyFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uncertainty::IsInitialized() const {
  return true;
}

void Uncertainty::Swap(Uncertainty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uncertainty::InternalSwap(Uncertainty* other) {
  std::swap(position_std_dev_, other->position_std_dev_);
  std::swap(orientation_std_dev_, other->orientation_std_dev_);
  std::swap(linear_velocity_std_dev_, other->linear_velocity_std_dev_);
  std::swap(linear_acceleration_std_dev_, other->linear_acceleration_std_dev_);
  std::swap(angular_velocity_std_dev_, other->angular_velocity_std_dev_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Uncertainty::GetMetadata() const {
  protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Uncertainty

// optional .apollo.common.Point3D position_std_dev = 1;
bool Uncertainty::has_position_std_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Uncertainty::set_has_position_std_dev() {
  _has_bits_[0] |= 0x00000001u;
}
void Uncertainty::clear_has_position_std_dev() {
  _has_bits_[0] &= ~0x00000001u;
}
void Uncertainty::clear_position_std_dev() {
  if (position_std_dev_ != NULL) position_std_dev_->::apollo::common::Point3D::Clear();
  clear_has_position_std_dev();
}
const ::apollo::common::Point3D& Uncertainty::position_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.position_std_dev)
  return position_std_dev_ != NULL ? *position_std_dev_
                         : *::apollo::common::Point3D::internal_default_instance();
}
::apollo::common::Point3D* Uncertainty::mutable_position_std_dev() {
  set_has_position_std_dev();
  if (position_std_dev_ == NULL) {
    position_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.position_std_dev)
  return position_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_position_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.position_std_dev)
  clear_has_position_std_dev();
  ::apollo::common::Point3D* temp = position_std_dev_;
  position_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_position_std_dev(::apollo::common::Point3D* position_std_dev) {
  delete position_std_dev_;
  position_std_dev_ = position_std_dev;
  if (position_std_dev) {
    set_has_position_std_dev();
  } else {
    clear_has_position_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.position_std_dev)
}

// optional .apollo.common.Point3D orientation_std_dev = 2;
bool Uncertainty::has_orientation_std_dev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Uncertainty::set_has_orientation_std_dev() {
  _has_bits_[0] |= 0x00000002u;
}
void Uncertainty::clear_has_orientation_std_dev() {
  _has_bits_[0] &= ~0x00000002u;
}
void Uncertainty::clear_orientation_std_dev() {
  if (orientation_std_dev_ != NULL) orientation_std_dev_->::apollo::common::Point3D::Clear();
  clear_has_orientation_std_dev();
}
const ::apollo::common::Point3D& Uncertainty::orientation_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.orientation_std_dev)
  return orientation_std_dev_ != NULL ? *orientation_std_dev_
                         : *::apollo::common::Point3D::internal_default_instance();
}
::apollo::common::Point3D* Uncertainty::mutable_orientation_std_dev() {
  set_has_orientation_std_dev();
  if (orientation_std_dev_ == NULL) {
    orientation_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.orientation_std_dev)
  return orientation_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_orientation_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.orientation_std_dev)
  clear_has_orientation_std_dev();
  ::apollo::common::Point3D* temp = orientation_std_dev_;
  orientation_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_orientation_std_dev(::apollo::common::Point3D* orientation_std_dev) {
  delete orientation_std_dev_;
  orientation_std_dev_ = orientation_std_dev;
  if (orientation_std_dev) {
    set_has_orientation_std_dev();
  } else {
    clear_has_orientation_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.orientation_std_dev)
}

// optional .apollo.common.Point3D linear_velocity_std_dev = 3;
bool Uncertainty::has_linear_velocity_std_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Uncertainty::set_has_linear_velocity_std_dev() {
  _has_bits_[0] |= 0x00000004u;
}
void Uncertainty::clear_has_linear_velocity_std_dev() {
  _has_bits_[0] &= ~0x00000004u;
}
void Uncertainty::clear_linear_velocity_std_dev() {
  if (linear_velocity_std_dev_ != NULL) linear_velocity_std_dev_->::apollo::common::Point3D::Clear();
  clear_has_linear_velocity_std_dev();
}
const ::apollo::common::Point3D& Uncertainty::linear_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.linear_velocity_std_dev)
  return linear_velocity_std_dev_ != NULL ? *linear_velocity_std_dev_
                         : *::apollo::common::Point3D::internal_default_instance();
}
::apollo::common::Point3D* Uncertainty::mutable_linear_velocity_std_dev() {
  set_has_linear_velocity_std_dev();
  if (linear_velocity_std_dev_ == NULL) {
    linear_velocity_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.linear_velocity_std_dev)
  return linear_velocity_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.linear_velocity_std_dev)
  clear_has_linear_velocity_std_dev();
  ::apollo::common::Point3D* temp = linear_velocity_std_dev_;
  linear_velocity_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_linear_velocity_std_dev(::apollo::common::Point3D* linear_velocity_std_dev) {
  delete linear_velocity_std_dev_;
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  if (linear_velocity_std_dev) {
    set_has_linear_velocity_std_dev();
  } else {
    clear_has_linear_velocity_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.linear_velocity_std_dev)
}

// optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
bool Uncertainty::has_linear_acceleration_std_dev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Uncertainty::set_has_linear_acceleration_std_dev() {
  _has_bits_[0] |= 0x00000008u;
}
void Uncertainty::clear_has_linear_acceleration_std_dev() {
  _has_bits_[0] &= ~0x00000008u;
}
void Uncertainty::clear_linear_acceleration_std_dev() {
  if (linear_acceleration_std_dev_ != NULL) linear_acceleration_std_dev_->::apollo::common::Point3D::Clear();
  clear_has_linear_acceleration_std_dev();
}
const ::apollo::common::Point3D& Uncertainty::linear_acceleration_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.linear_acceleration_std_dev)
  return linear_acceleration_std_dev_ != NULL ? *linear_acceleration_std_dev_
                         : *::apollo::common::Point3D::internal_default_instance();
}
::apollo::common::Point3D* Uncertainty::mutable_linear_acceleration_std_dev() {
  set_has_linear_acceleration_std_dev();
  if (linear_acceleration_std_dev_ == NULL) {
    linear_acceleration_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.linear_acceleration_std_dev)
  return linear_acceleration_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_linear_acceleration_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.linear_acceleration_std_dev)
  clear_has_linear_acceleration_std_dev();
  ::apollo::common::Point3D* temp = linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_linear_acceleration_std_dev(::apollo::common::Point3D* linear_acceleration_std_dev) {
  delete linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = linear_acceleration_std_dev;
  if (linear_acceleration_std_dev) {
    set_has_linear_acceleration_std_dev();
  } else {
    clear_has_linear_acceleration_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.linear_acceleration_std_dev)
}

// optional .apollo.common.Point3D angular_velocity_std_dev = 5;
bool Uncertainty::has_angular_velocity_std_dev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Uncertainty::set_has_angular_velocity_std_dev() {
  _has_bits_[0] |= 0x00000010u;
}
void Uncertainty::clear_has_angular_velocity_std_dev() {
  _has_bits_[0] &= ~0x00000010u;
}
void Uncertainty::clear_angular_velocity_std_dev() {
  if (angular_velocity_std_dev_ != NULL) angular_velocity_std_dev_->::apollo::common::Point3D::Clear();
  clear_has_angular_velocity_std_dev();
}
const ::apollo::common::Point3D& Uncertainty::angular_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.angular_velocity_std_dev)
  return angular_velocity_std_dev_ != NULL ? *angular_velocity_std_dev_
                         : *::apollo::common::Point3D::internal_default_instance();
}
::apollo::common::Point3D* Uncertainty::mutable_angular_velocity_std_dev() {
  set_has_angular_velocity_std_dev();
  if (angular_velocity_std_dev_ == NULL) {
    angular_velocity_std_dev_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.angular_velocity_std_dev)
  return angular_velocity_std_dev_;
}
::apollo::common::Point3D* Uncertainty::release_angular_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.angular_velocity_std_dev)
  clear_has_angular_velocity_std_dev();
  ::apollo::common::Point3D* temp = angular_velocity_std_dev_;
  angular_velocity_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_angular_velocity_std_dev(::apollo::common::Point3D* angular_velocity_std_dev) {
  delete angular_velocity_std_dev_;
  angular_velocity_std_dev_ = angular_velocity_std_dev;
  if (angular_velocity_std_dev) {
    set_has_angular_velocity_std_dev();
  } else {
    clear_has_angular_velocity_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.angular_velocity_std_dev)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationEstimate::kHeaderFieldNumber;
const int LocalizationEstimate::kPoseFieldNumber;
const int LocalizationEstimate::kUncertaintyFieldNumber;
const int LocalizationEstimate::kMeasurementTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationEstimate::LocalizationEstimate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.LocalizationEstimate)
}
LocalizationEstimate::LocalizationEstimate(const LocalizationEstimate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::apollo::localization::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_uncertainty()) {
    uncertainty_ = new ::apollo::localization::Uncertainty(*from.uncertainty_);
  } else {
    uncertainty_ = NULL;
  }
  measurement_time_ = from.measurement_time_;
  // @@protoc_insertion_point(copy_constructor:apollo.localization.LocalizationEstimate)
}

void LocalizationEstimate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&measurement_time_) -
    reinterpret_cast<char*>(&header_) + sizeof(measurement_time_));
}

LocalizationEstimate::~LocalizationEstimate() {
  // @@protoc_insertion_point(destructor:apollo.localization.LocalizationEstimate)
  SharedDtor();
}

void LocalizationEstimate::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete pose_;
  }
  if (this != internal_default_instance()) {
    delete uncertainty_;
  }
}

void LocalizationEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationEstimate::descriptor() {
  protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalizationEstimate& LocalizationEstimate::default_instance() {
  protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocalizationEstimate* LocalizationEstimate::New(::google::protobuf::Arena* arena) const {
  LocalizationEstimate* n = new LocalizationEstimate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.LocalizationEstimate)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::apollo::common::Header::Clear();
    }
    if (has_pose()) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::apollo::localization::Pose::Clear();
    }
    if (has_uncertainty()) {
      GOOGLE_DCHECK(uncertainty_ != NULL);
      uncertainty_->::apollo::localization::Uncertainty::Clear();
    }
  }
  measurement_time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalizationEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.LocalizationEstimate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.Pose pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.Uncertainty uncertainty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uncertainty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measurement_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_measurement_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.LocalizationEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.LocalizationEstimate)
  return false;
#undef DO_
}

void LocalizationEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.LocalizationEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.localization.Pose pose = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  // optional .apollo.localization.Uncertainty uncertainty = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->uncertainty_, output);
  }

  // optional double measurement_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->measurement_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.LocalizationEstimate)
}

::google::protobuf::uint8* LocalizationEstimate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.LocalizationEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional .apollo.localization.Pose pose = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, deterministic, target);
  }

  // optional .apollo.localization.Uncertainty uncertainty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->uncertainty_, deterministic, target);
  }

  // optional double measurement_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->measurement_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.LocalizationEstimate)
  return target;
}

size_t LocalizationEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.LocalizationEstimate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.localization.Pose pose = 2;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .apollo.localization.Uncertainty uncertainty = 3;
    if (has_uncertainty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uncertainty_);
    }

    // optional double measurement_time = 4;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationEstimate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.LocalizationEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationEstimate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalizationEstimate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.LocalizationEstimate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.LocalizationEstimate)
    MergeFrom(*source);
  }
}

void LocalizationEstimate::MergeFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.LocalizationEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pose()->::apollo::localization::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_uncertainty()->::apollo::localization::Uncertainty::MergeFrom(from.uncertainty());
    }
    if (cached_has_bits & 0x00000008u) {
      measurement_time_ = from.measurement_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocalizationEstimate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.LocalizationEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationEstimate::CopyFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.LocalizationEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationEstimate::IsInitialized() const {
  return true;
}

void LocalizationEstimate::Swap(LocalizationEstimate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationEstimate::InternalSwap(LocalizationEstimate* other) {
  std::swap(header_, other->header_);
  std::swap(pose_, other->pose_);
  std::swap(uncertainty_, other->uncertainty_);
  std::swap(measurement_time_, other->measurement_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalizationEstimate::GetMetadata() const {
  protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalizationEstimate

// optional .apollo.common.Header header = 1;
bool LocalizationEstimate::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocalizationEstimate::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void LocalizationEstimate::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocalizationEstimate::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& LocalizationEstimate::header() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* LocalizationEstimate::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.header)
  return header_;
}
::apollo::common::Header* LocalizationEstimate::release_header() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.header)
}

// optional .apollo.localization.Pose pose = 2;
bool LocalizationEstimate::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocalizationEstimate::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
void LocalizationEstimate::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocalizationEstimate::clear_pose() {
  if (pose_ != NULL) pose_->::apollo::localization::Pose::Clear();
  clear_has_pose();
}
const ::apollo::localization::Pose& LocalizationEstimate::pose() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.pose)
  return pose_ != NULL ? *pose_
                         : *::apollo::localization::Pose::internal_default_instance();
}
::apollo::localization::Pose* LocalizationEstimate::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::apollo::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.pose)
  return pose_;
}
::apollo::localization::Pose* LocalizationEstimate::release_pose() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.pose)
  clear_has_pose();
  ::apollo::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_pose(::apollo::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.pose)
}

// optional .apollo.localization.Uncertainty uncertainty = 3;
bool LocalizationEstimate::has_uncertainty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LocalizationEstimate::set_has_uncertainty() {
  _has_bits_[0] |= 0x00000004u;
}
void LocalizationEstimate::clear_has_uncertainty() {
  _has_bits_[0] &= ~0x00000004u;
}
void LocalizationEstimate::clear_uncertainty() {
  if (uncertainty_ != NULL) uncertainty_->::apollo::localization::Uncertainty::Clear();
  clear_has_uncertainty();
}
const ::apollo::localization::Uncertainty& LocalizationEstimate::uncertainty() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.uncertainty)
  return uncertainty_ != NULL ? *uncertainty_
                         : *::apollo::localization::Uncertainty::internal_default_instance();
}
::apollo::localization::Uncertainty* LocalizationEstimate::mutable_uncertainty() {
  set_has_uncertainty();
  if (uncertainty_ == NULL) {
    uncertainty_ = new ::apollo::localization::Uncertainty;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.uncertainty)
  return uncertainty_;
}
::apollo::localization::Uncertainty* LocalizationEstimate::release_uncertainty() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.uncertainty)
  clear_has_uncertainty();
  ::apollo::localization::Uncertainty* temp = uncertainty_;
  uncertainty_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_uncertainty(::apollo::localization::Uncertainty* uncertainty) {
  delete uncertainty_;
  uncertainty_ = uncertainty;
  if (uncertainty) {
    set_has_uncertainty();
  } else {
    clear_has_uncertainty();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.uncertainty)
}

// optional double measurement_time = 4;
bool LocalizationEstimate::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LocalizationEstimate::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000008u;
}
void LocalizationEstimate::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void LocalizationEstimate::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
double LocalizationEstimate::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.measurement_time)
  return measurement_time_;
}
void LocalizationEstimate::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationEstimate.measurement_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationStatus::kHeaderFieldNumber;
const int LocalizationStatus::kFusionStatusFieldNumber;
const int LocalizationStatus::kGnssStatusFieldNumber;
const int LocalizationStatus::kLidarStatusFieldNumber;
const int LocalizationStatus::kMeasurementTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationStatus::LocalizationStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.LocalizationStatus)
}
LocalizationStatus::LocalizationStatus(const LocalizationStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&fusion_status_, &from.fusion_status_,
    reinterpret_cast<char*>(&lidar_status_) -
    reinterpret_cast<char*>(&fusion_status_) + sizeof(lidar_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.localization.LocalizationStatus)
}

void LocalizationStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&lidar_status_) -
    reinterpret_cast<char*>(&header_) + sizeof(lidar_status_));
}

LocalizationStatus::~LocalizationStatus() {
  // @@protoc_insertion_point(destructor:apollo.localization.LocalizationStatus)
  SharedDtor();
}

void LocalizationStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void LocalizationStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationStatus::descriptor() {
  protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalizationStatus& LocalizationStatus::default_instance() {
  protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocalizationStatus* LocalizationStatus::New(::google::protobuf::Arena* arena) const {
  LocalizationStatus* n = new LocalizationStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.LocalizationStatus)
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::apollo::common::Header::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&fusion_status_, 0, reinterpret_cast<char*>(&lidar_status_) -
      reinterpret_cast<char*>(&fusion_status_) + sizeof(lidar_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalizationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.LocalizationStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.MeasureState fusion_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::MeasureState_IsValid(value)) {
            set_fusion_status(static_cast< ::apollo::localization::MeasureState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.MeasureState gnss_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::MeasureState_IsValid(value)) {
            set_gnss_status(static_cast< ::apollo::localization::MeasureState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.MeasureState lidar_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::MeasureState_IsValid(value)) {
            set_lidar_status(static_cast< ::apollo::localization::MeasureState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measurement_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_measurement_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.LocalizationStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.LocalizationStatus)
  return false;
#undef DO_
}

void LocalizationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.LocalizationStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.localization.MeasureState fusion_status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->fusion_status(), output);
  }

  // optional .apollo.localization.MeasureState gnss_status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gnss_status(), output);
  }

  // optional .apollo.localization.MeasureState lidar_status = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->lidar_status(), output);
  }

  // optional double measurement_time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->measurement_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.LocalizationStatus)
}

::google::protobuf::uint8* LocalizationStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.LocalizationStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional .apollo.localization.MeasureState fusion_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->fusion_status(), target);
  }

  // optional .apollo.localization.MeasureState gnss_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gnss_status(), target);
  }

  // optional .apollo.localization.MeasureState lidar_status = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->lidar_status(), target);
  }

  // optional double measurement_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->measurement_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.LocalizationStatus)
  return target;
}

size_t LocalizationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.LocalizationStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.localization.MeasureState fusion_status = 2;
    if (has_fusion_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fusion_status());
    }

    // optional .apollo.localization.MeasureState gnss_status = 3;
    if (has_gnss_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_status());
    }

    // optional double measurement_time = 5;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional .apollo.localization.MeasureState lidar_status = 4;
    if (has_lidar_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lidar_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.LocalizationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalizationStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.LocalizationStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.LocalizationStatus)
    MergeFrom(*source);
  }
}

void LocalizationStatus::MergeFrom(const LocalizationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.LocalizationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      fusion_status_ = from.fusion_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      gnss_status_ = from.gnss_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      lidar_status_ = from.lidar_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocalizationStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.LocalizationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationStatus::CopyFrom(const LocalizationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.LocalizationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationStatus::IsInitialized() const {
  return true;
}

void LocalizationStatus::Swap(LocalizationStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationStatus::InternalSwap(LocalizationStatus* other) {
  std::swap(header_, other->header_);
  std::swap(fusion_status_, other->fusion_status_);
  std::swap(gnss_status_, other->gnss_status_);
  std::swap(measurement_time_, other->measurement_time_);
  std::swap(lidar_status_, other->lidar_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalizationStatus::GetMetadata() const {
  protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalizationStatus

// optional .apollo.common.Header header = 1;
bool LocalizationStatus::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocalizationStatus::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void LocalizationStatus::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocalizationStatus::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& LocalizationStatus::header() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* LocalizationStatus::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationStatus.header)
  return header_;
}
::apollo::common::Header* LocalizationStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationStatus.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void LocalizationStatus::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationStatus.header)
}

// optional .apollo.localization.MeasureState fusion_status = 2;
bool LocalizationStatus::has_fusion_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocalizationStatus::set_has_fusion_status() {
  _has_bits_[0] |= 0x00000002u;
}
void LocalizationStatus::clear_has_fusion_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocalizationStatus::clear_fusion_status() {
  fusion_status_ = 0;
  clear_has_fusion_status();
}
::apollo::localization::MeasureState LocalizationStatus::fusion_status() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.fusion_status)
  return static_cast< ::apollo::localization::MeasureState >(fusion_status_);
}
void LocalizationStatus::set_fusion_status(::apollo::localization::MeasureState value) {
  assert(::apollo::localization::MeasureState_IsValid(value));
  set_has_fusion_status();
  fusion_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationStatus.fusion_status)
}

// optional .apollo.localization.MeasureState gnss_status = 3;
bool LocalizationStatus::has_gnss_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LocalizationStatus::set_has_gnss_status() {
  _has_bits_[0] |= 0x00000004u;
}
void LocalizationStatus::clear_has_gnss_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void LocalizationStatus::clear_gnss_status() {
  gnss_status_ = 0;
  clear_has_gnss_status();
}
::apollo::localization::MeasureState LocalizationStatus::gnss_status() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.gnss_status)
  return static_cast< ::apollo::localization::MeasureState >(gnss_status_);
}
void LocalizationStatus::set_gnss_status(::apollo::localization::MeasureState value) {
  assert(::apollo::localization::MeasureState_IsValid(value));
  set_has_gnss_status();
  gnss_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationStatus.gnss_status)
}

// optional .apollo.localization.MeasureState lidar_status = 4;
bool LocalizationStatus::has_lidar_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LocalizationStatus::set_has_lidar_status() {
  _has_bits_[0] |= 0x00000010u;
}
void LocalizationStatus::clear_has_lidar_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void LocalizationStatus::clear_lidar_status() {
  lidar_status_ = 0;
  clear_has_lidar_status();
}
::apollo::localization::MeasureState LocalizationStatus::lidar_status() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.lidar_status)
  return static_cast< ::apollo::localization::MeasureState >(lidar_status_);
}
void LocalizationStatus::set_lidar_status(::apollo::localization::MeasureState value) {
  assert(::apollo::localization::MeasureState_IsValid(value));
  set_has_lidar_status();
  lidar_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationStatus.lidar_status)
}

// optional double measurement_time = 5;
bool LocalizationStatus::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LocalizationStatus::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000008u;
}
void LocalizationStatus::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void LocalizationStatus::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
double LocalizationStatus::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.measurement_time)
  return measurement_time_;
}
void LocalizationStatus::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationStatus.measurement_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
