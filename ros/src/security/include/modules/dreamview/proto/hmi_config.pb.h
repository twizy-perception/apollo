// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_config.proto

#ifndef PROTOBUF_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace apollo {
namespace dreamview {
class Component;
class ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
class Component_SupportedCommandsEntry;
class Component_SupportedCommandsEntryDefaultTypeInternal;
extern Component_SupportedCommandsEntryDefaultTypeInternal _Component_SupportedCommandsEntry_default_instance_;
class HMIConfig;
class HMIConfigDefaultTypeInternal;
extern HMIConfigDefaultTypeInternal _HMIConfig_default_instance_;
class HMIConfig_AvailableMapsEntry;
class HMIConfig_AvailableMapsEntryDefaultTypeInternal;
extern HMIConfig_AvailableMapsEntryDefaultTypeInternal _HMIConfig_AvailableMapsEntry_default_instance_;
class HMIConfig_AvailableVehiclesEntry;
class HMIConfig_AvailableVehiclesEntryDefaultTypeInternal;
extern HMIConfig_AvailableVehiclesEntryDefaultTypeInternal _HMIConfig_AvailableVehiclesEntry_default_instance_;
class HMIConfig_HardwareEntry;
class HMIConfig_HardwareEntryDefaultTypeInternal;
extern HMIConfig_HardwareEntryDefaultTypeInternal _HMIConfig_HardwareEntry_default_instance_;
class HMIConfig_ModesEntry;
class HMIConfig_ModesEntryDefaultTypeInternal;
extern HMIConfig_ModesEntryDefaultTypeInternal _HMIConfig_ModesEntry_default_instance_;
class HMIConfig_ModulesEntry;
class HMIConfig_ModulesEntryDefaultTypeInternal;
extern HMIConfig_ModulesEntryDefaultTypeInternal _HMIConfig_ModulesEntry_default_instance_;
class HMIConfig_ToolsEntry;
class HMIConfig_ToolsEntryDefaultTypeInternal;
extern HMIConfig_ToolsEntryDefaultTypeInternal _HMIConfig_ToolsEntry_default_instance_;
class Mode;
class ModeDefaultTypeInternal;
extern ModeDefaultTypeInternal _Mode_default_instance_;
class VehicleData;
class VehicleDataDefaultTypeInternal;
extern VehicleDataDefaultTypeInternal _VehicleData_default_instance_;
class VehicleData_DataFile;
class VehicleData_DataFileDefaultTypeInternal;
extern VehicleData_DataFileDefaultTypeInternal _VehicleData_DataFile_default_instance_;
}  // namespace dreamview
}  // namespace apollo

namespace apollo {
namespace dreamview {

namespace protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto

// ===================================================================


// -------------------------------------------------------------------

class Component : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Component) */ {
 public:
  Component();
  virtual ~Component();

  Component(const Component& from);

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Component& default_instance();

  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Component* other);

  // implements Message ----------------------------------------------

  inline Component* New() const PROTOBUF_FINAL { return New(NULL); }

  Component* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Component* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> supported_commands = 3;
  int supported_commands_size() const;
  void clear_supported_commands();
  static const int kSupportedCommandsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      supported_commands() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_supported_commands();

  // optional string display_name = 1;
  bool has_display_name() const;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 1;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // optional string path = 2;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Component)
 private:
  void set_has_display_name();
  void clear_has_display_name();
  void set_has_path();
  void clear_has_path();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  public:
  class Component_SupportedCommandsEntry : public ::google::protobuf::internal::MapEntry<Component_SupportedCommandsEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Component_SupportedCommandsEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    Component_SupportedCommandsEntry();
    Component_SupportedCommandsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Component_SupportedCommandsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Component_SupportedCommandsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      Component_SupportedCommandsEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > supported_commands_;
  private:
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Mode) */ {
 public:
  Mode();
  virtual ~Mode();

  Mode(const Mode& from);

  inline Mode& operator=(const Mode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mode& default_instance();

  static inline const Mode* internal_default_instance() {
    return reinterpret_cast<const Mode*>(
               &_Mode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Mode* other);

  // implements Message ----------------------------------------------

  inline Mode* New() const PROTOBUF_FINAL { return New(NULL); }

  Mode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Mode& from);
  void MergeFrom(const Mode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Mode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string live_modules = 1;
  int live_modules_size() const;
  void clear_live_modules();
  static const int kLiveModulesFieldNumber = 1;
  const ::std::string& live_modules(int index) const;
  ::std::string* mutable_live_modules(int index);
  void set_live_modules(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_live_modules(int index, ::std::string&& value);
  #endif
  void set_live_modules(int index, const char* value);
  void set_live_modules(int index, const char* value, size_t size);
  ::std::string* add_live_modules();
  void add_live_modules(const ::std::string& value);
  #if LANG_CXX11
  void add_live_modules(::std::string&& value);
  #endif
  void add_live_modules(const char* value);
  void add_live_modules(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& live_modules() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_live_modules();

  // repeated string live_hardware = 2;
  int live_hardware_size() const;
  void clear_live_hardware();
  static const int kLiveHardwareFieldNumber = 2;
  const ::std::string& live_hardware(int index) const;
  ::std::string* mutable_live_hardware(int index);
  void set_live_hardware(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_live_hardware(int index, ::std::string&& value);
  #endif
  void set_live_hardware(int index, const char* value);
  void set_live_hardware(int index, const char* value, size_t size);
  ::std::string* add_live_hardware();
  void add_live_hardware(const ::std::string& value);
  #if LANG_CXX11
  void add_live_hardware(::std::string&& value);
  #endif
  void add_live_hardware(const char* value);
  void add_live_hardware(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& live_hardware() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_live_hardware();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Mode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> live_modules_;
  ::google::protobuf::RepeatedPtrField< ::std::string> live_hardware_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class HMIConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.HMIConfig) */ {
 public:
  HMIConfig();
  virtual ~HMIConfig();

  HMIConfig(const HMIConfig& from);

  inline HMIConfig& operator=(const HMIConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HMIConfig& default_instance();

  static inline const HMIConfig* internal_default_instance() {
    return reinterpret_cast<const HMIConfig*>(
               &_HMIConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(HMIConfig* other);

  // implements Message ----------------------------------------------

  inline HMIConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  HMIConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HMIConfig& from);
  void MergeFrom(const HMIConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HMIConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .apollo.dreamview.Component> modules = 1;
  int modules_size() const;
  void clear_modules();
  static const int kModulesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
      modules() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
      mutable_modules();

  // map<string, .apollo.dreamview.Component> hardware = 2;
  int hardware_size() const;
  void clear_hardware();
  static const int kHardwareFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
      hardware() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
      mutable_hardware();

  // map<string, .apollo.dreamview.Component> tools = 3;
  int tools_size() const;
  void clear_tools();
  static const int kToolsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
      tools() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
      mutable_tools();

  // map<string, string> available_maps = 4;
  int available_maps_size() const;
  void clear_available_maps();
  static const int kAvailableMapsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      available_maps() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_available_maps();

  // map<string, string> available_vehicles = 5;
  int available_vehicles_size() const;
  void clear_available_vehicles();
  static const int kAvailableVehiclesFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      available_vehicles() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_available_vehicles();

  // map<string, .apollo.dreamview.Mode> modes = 6;
  int modes_size() const;
  void clear_modes();
  static const int kModesFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >&
      modes() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >*
      mutable_modes();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.HMIConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  public:
  class HMIConfig_ModulesEntry : public ::google::protobuf::internal::MapEntry<HMIConfig_ModulesEntry, 
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<HMIConfig_ModulesEntry, 
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    HMIConfig_ModulesEntry();
    HMIConfig_ModulesEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const HMIConfig_ModulesEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_HMIConfig_ModulesEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      HMIConfig_ModulesEntry,
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > modules_;
  private:
  public:
  class HMIConfig_HardwareEntry : public ::google::protobuf::internal::MapEntry<HMIConfig_HardwareEntry, 
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<HMIConfig_HardwareEntry, 
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    HMIConfig_HardwareEntry();
    HMIConfig_HardwareEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const HMIConfig_HardwareEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_HMIConfig_HardwareEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      HMIConfig_HardwareEntry,
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > hardware_;
  private:
  public:
  class HMIConfig_ToolsEntry : public ::google::protobuf::internal::MapEntry<HMIConfig_ToolsEntry, 
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<HMIConfig_ToolsEntry, 
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    HMIConfig_ToolsEntry();
    HMIConfig_ToolsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const HMIConfig_ToolsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_HMIConfig_ToolsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      HMIConfig_ToolsEntry,
      ::std::string, ::apollo::dreamview::Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > tools_;
  private:
  public:
  class HMIConfig_AvailableMapsEntry : public ::google::protobuf::internal::MapEntry<HMIConfig_AvailableMapsEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<HMIConfig_AvailableMapsEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    HMIConfig_AvailableMapsEntry();
    HMIConfig_AvailableMapsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const HMIConfig_AvailableMapsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_HMIConfig_AvailableMapsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      HMIConfig_AvailableMapsEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > available_maps_;
  private:
  public:
  class HMIConfig_AvailableVehiclesEntry : public ::google::protobuf::internal::MapEntry<HMIConfig_AvailableVehiclesEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<HMIConfig_AvailableVehiclesEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    HMIConfig_AvailableVehiclesEntry();
    HMIConfig_AvailableVehiclesEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const HMIConfig_AvailableVehiclesEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_HMIConfig_AvailableVehiclesEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      HMIConfig_AvailableVehiclesEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > available_vehicles_;
  private:
  public:
  class HMIConfig_ModesEntry : public ::google::protobuf::internal::MapEntry<HMIConfig_ModesEntry, 
      ::std::string, ::apollo::dreamview::Mode,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<HMIConfig_ModesEntry, 
      ::std::string, ::apollo::dreamview::Mode,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    HMIConfig_ModesEntry();
    HMIConfig_ModesEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const HMIConfig_ModesEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_HMIConfig_ModesEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      HMIConfig_ModesEntry,
      ::std::string, ::apollo::dreamview::Mode,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > modes_;
  private:
  friend struct protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleData_DataFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.VehicleData.DataFile) */ {
 public:
  VehicleData_DataFile();
  virtual ~VehicleData_DataFile();

  VehicleData_DataFile(const VehicleData_DataFile& from);

  inline VehicleData_DataFile& operator=(const VehicleData_DataFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleData_DataFile& default_instance();

  static inline const VehicleData_DataFile* internal_default_instance() {
    return reinterpret_cast<const VehicleData_DataFile*>(
               &_VehicleData_DataFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(VehicleData_DataFile* other);

  // implements Message ----------------------------------------------

  inline VehicleData_DataFile* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleData_DataFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VehicleData_DataFile& from);
  void MergeFrom(const VehicleData_DataFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VehicleData_DataFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source_path = 1;
  bool has_source_path() const;
  void clear_source_path();
  static const int kSourcePathFieldNumber = 1;
  const ::std::string& source_path() const;
  void set_source_path(const ::std::string& value);
  #if LANG_CXX11
  void set_source_path(::std::string&& value);
  #endif
  void set_source_path(const char* value);
  void set_source_path(const char* value, size_t size);
  ::std::string* mutable_source_path();
  ::std::string* release_source_path();
  void set_allocated_source_path(::std::string* source_path);

  // optional string dest_path = 2;
  bool has_dest_path() const;
  void clear_dest_path();
  static const int kDestPathFieldNumber = 2;
  const ::std::string& dest_path() const;
  void set_dest_path(const ::std::string& value);
  #if LANG_CXX11
  void set_dest_path(::std::string&& value);
  #endif
  void set_dest_path(const char* value);
  void set_dest_path(const char* value, size_t size);
  ::std::string* mutable_dest_path();
  ::std::string* release_dest_path();
  void set_allocated_dest_path(::std::string* dest_path);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.VehicleData.DataFile)
 private:
  void set_has_source_path();
  void clear_has_source_path();
  void set_has_dest_path();
  void clear_has_dest_path();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_path_;
  ::google::protobuf::internal::ArenaStringPtr dest_path_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.VehicleData) */ {
 public:
  VehicleData();
  virtual ~VehicleData();

  VehicleData(const VehicleData& from);

  inline VehicleData& operator=(const VehicleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleData& default_instance();

  static inline const VehicleData* internal_default_instance() {
    return reinterpret_cast<const VehicleData*>(
               &_VehicleData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(VehicleData* other);

  // implements Message ----------------------------------------------

  inline VehicleData* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VehicleData& from);
  void MergeFrom(const VehicleData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VehicleData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VehicleData_DataFile DataFile;

  // accessors -------------------------------------------------------

  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  int data_files_size() const;
  void clear_data_files();
  static const int kDataFilesFieldNumber = 1;
  const ::apollo::dreamview::VehicleData_DataFile& data_files(int index) const;
  ::apollo::dreamview::VehicleData_DataFile* mutable_data_files(int index);
  ::apollo::dreamview::VehicleData_DataFile* add_data_files();
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >*
      mutable_data_files();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >&
      data_files() const;

  // @@protoc_insertion_point(class_scope:apollo.dreamview.VehicleData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile > data_files_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// Component

// optional string display_name = 1;
inline bool Component::has_display_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Component::set_has_display_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Component::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Component::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_name();
}
inline const ::std::string& Component::display_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Component.display_name)
  return display_name_.GetNoArena();
}
inline void Component::set_display_name(const ::std::string& value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Component.display_name)
}
#if LANG_CXX11
inline void Component::set_display_name(::std::string&& value) {
  set_has_display_name();
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Component.display_name)
}
#endif
inline void Component::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Component.display_name)
}
inline void Component::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Component.display_name)
}
inline ::std::string* Component::mutable_display_name() {
  set_has_display_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Component.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Component::release_display_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Component.display_name)
  clear_has_display_name();
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Component::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    set_has_display_name();
  } else {
    clear_has_display_name();
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Component.display_name)
}

// optional string path = 2;
inline bool Component::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Component::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Component::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Component::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& Component::path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Component.path)
  return path_.GetNoArena();
}
inline void Component::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Component.path)
}
#if LANG_CXX11
inline void Component::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Component.path)
}
#endif
inline void Component::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Component.path)
}
inline void Component::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Component.path)
}
inline ::std::string* Component::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Component.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Component::release_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Component.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Component::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Component.path)
}

// map<string, string> supported_commands = 3;
inline int Component::supported_commands_size() const {
  return supported_commands_.size();
}
inline void Component::clear_supported_commands() {
  supported_commands_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Component::supported_commands() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.Component.supported_commands)
  return supported_commands_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Component::mutable_supported_commands() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.Component.supported_commands)
  return supported_commands_.MutableMap();
}

// -------------------------------------------------------------------

// Mode

// repeated string live_modules = 1;
inline int Mode::live_modules_size() const {
  return live_modules_.size();
}
inline void Mode::clear_live_modules() {
  live_modules_.Clear();
}
inline const ::std::string& Mode::live_modules(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Mode.live_modules)
  return live_modules_.Get(index);
}
inline ::std::string* Mode::mutable_live_modules(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Mode.live_modules)
  return live_modules_.Mutable(index);
}
inline void Mode::set_live_modules(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.Mode.live_modules)
  live_modules_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Mode::set_live_modules(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.Mode.live_modules)
  live_modules_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Mode::set_live_modules(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  live_modules_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Mode.live_modules)
}
inline void Mode::set_live_modules(int index, const char* value, size_t size) {
  live_modules_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Mode.live_modules)
}
inline ::std::string* Mode::add_live_modules() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.Mode.live_modules)
  return live_modules_.Add();
}
inline void Mode::add_live_modules(const ::std::string& value) {
  live_modules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.Mode.live_modules)
}
#if LANG_CXX11
inline void Mode::add_live_modules(::std::string&& value) {
  live_modules_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.Mode.live_modules)
}
#endif
inline void Mode::add_live_modules(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  live_modules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.Mode.live_modules)
}
inline void Mode::add_live_modules(const char* value, size_t size) {
  live_modules_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.Mode.live_modules)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mode::live_modules() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Mode.live_modules)
  return live_modules_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Mode::mutable_live_modules() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Mode.live_modules)
  return &live_modules_;
}

// repeated string live_hardware = 2;
inline int Mode::live_hardware_size() const {
  return live_hardware_.size();
}
inline void Mode::clear_live_hardware() {
  live_hardware_.Clear();
}
inline const ::std::string& Mode::live_hardware(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Mode.live_hardware)
  return live_hardware_.Get(index);
}
inline ::std::string* Mode::mutable_live_hardware(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Mode.live_hardware)
  return live_hardware_.Mutable(index);
}
inline void Mode::set_live_hardware(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.Mode.live_hardware)
  live_hardware_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Mode::set_live_hardware(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.Mode.live_hardware)
  live_hardware_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Mode::set_live_hardware(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  live_hardware_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Mode.live_hardware)
}
inline void Mode::set_live_hardware(int index, const char* value, size_t size) {
  live_hardware_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Mode.live_hardware)
}
inline ::std::string* Mode::add_live_hardware() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.Mode.live_hardware)
  return live_hardware_.Add();
}
inline void Mode::add_live_hardware(const ::std::string& value) {
  live_hardware_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.Mode.live_hardware)
}
#if LANG_CXX11
inline void Mode::add_live_hardware(::std::string&& value) {
  live_hardware_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.Mode.live_hardware)
}
#endif
inline void Mode::add_live_hardware(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  live_hardware_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.Mode.live_hardware)
}
inline void Mode::add_live_hardware(const char* value, size_t size) {
  live_hardware_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.Mode.live_hardware)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mode::live_hardware() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Mode.live_hardware)
  return live_hardware_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Mode::mutable_live_hardware() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Mode.live_hardware)
  return &live_hardware_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HMIConfig

// map<string, .apollo.dreamview.Component> modules = 1;
inline int HMIConfig::modules_size() const {
  return modules_.size();
}
inline void HMIConfig::clear_modules() {
  modules_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
HMIConfig::modules() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.modules)
  return modules_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
HMIConfig::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.modules)
  return modules_.MutableMap();
}

// map<string, .apollo.dreamview.Component> hardware = 2;
inline int HMIConfig::hardware_size() const {
  return hardware_.size();
}
inline void HMIConfig::clear_hardware() {
  hardware_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
HMIConfig::hardware() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.hardware)
  return hardware_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
HMIConfig::mutable_hardware() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.hardware)
  return hardware_.MutableMap();
}

// map<string, .apollo.dreamview.Component> tools = 3;
inline int HMIConfig::tools_size() const {
  return tools_.size();
}
inline void HMIConfig::clear_tools() {
  tools_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >&
HMIConfig::tools() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.tools)
  return tools_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Component >*
HMIConfig::mutable_tools() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.tools)
  return tools_.MutableMap();
}

// map<string, string> available_maps = 4;
inline int HMIConfig::available_maps_size() const {
  return available_maps_.size();
}
inline void HMIConfig::clear_available_maps() {
  available_maps_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HMIConfig::available_maps() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.available_maps)
  return available_maps_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HMIConfig::mutable_available_maps() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.available_maps)
  return available_maps_.MutableMap();
}

// map<string, string> available_vehicles = 5;
inline int HMIConfig::available_vehicles_size() const {
  return available_vehicles_.size();
}
inline void HMIConfig::clear_available_vehicles() {
  available_vehicles_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HMIConfig::available_vehicles() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.available_vehicles)
  return available_vehicles_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HMIConfig::mutable_available_vehicles() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.available_vehicles)
  return available_vehicles_.MutableMap();
}

// map<string, .apollo.dreamview.Mode> modes = 6;
inline int HMIConfig::modes_size() const {
  return modes_.size();
}
inline void HMIConfig::clear_modes() {
  modes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >&
HMIConfig::modes() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.modes)
  return modes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Mode >*
HMIConfig::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.modes)
  return modes_.MutableMap();
}

// -------------------------------------------------------------------

// VehicleData_DataFile

// optional string source_path = 1;
inline bool VehicleData_DataFile::has_source_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleData_DataFile::set_has_source_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleData_DataFile::clear_has_source_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleData_DataFile::clear_source_path() {
  source_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_path();
}
inline const ::std::string& VehicleData_DataFile::source_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.DataFile.source_path)
  return source_path_.GetNoArena();
}
inline void VehicleData_DataFile::set_source_path(const ::std::string& value) {
  set_has_source_path();
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.VehicleData.DataFile.source_path)
}
#if LANG_CXX11
inline void VehicleData_DataFile::set_source_path(::std::string&& value) {
  set_has_source_path();
  source_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.VehicleData.DataFile.source_path)
}
#endif
inline void VehicleData_DataFile::set_source_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_path();
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.VehicleData.DataFile.source_path)
}
inline void VehicleData_DataFile::set_source_path(const char* value, size_t size) {
  set_has_source_path();
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.VehicleData.DataFile.source_path)
}
inline ::std::string* VehicleData_DataFile::mutable_source_path() {
  set_has_source_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.DataFile.source_path)
  return source_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleData_DataFile::release_source_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VehicleData.DataFile.source_path)
  clear_has_source_path();
  return source_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleData_DataFile::set_allocated_source_path(::std::string* source_path) {
  if (source_path != NULL) {
    set_has_source_path();
  } else {
    clear_has_source_path();
  }
  source_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_path);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VehicleData.DataFile.source_path)
}

// optional string dest_path = 2;
inline bool VehicleData_DataFile::has_dest_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleData_DataFile::set_has_dest_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleData_DataFile::clear_has_dest_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleData_DataFile::clear_dest_path() {
  dest_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_path();
}
inline const ::std::string& VehicleData_DataFile::dest_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.DataFile.dest_path)
  return dest_path_.GetNoArena();
}
inline void VehicleData_DataFile::set_dest_path(const ::std::string& value) {
  set_has_dest_path();
  dest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.VehicleData.DataFile.dest_path)
}
#if LANG_CXX11
inline void VehicleData_DataFile::set_dest_path(::std::string&& value) {
  set_has_dest_path();
  dest_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.VehicleData.DataFile.dest_path)
}
#endif
inline void VehicleData_DataFile::set_dest_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dest_path();
  dest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.VehicleData.DataFile.dest_path)
}
inline void VehicleData_DataFile::set_dest_path(const char* value, size_t size) {
  set_has_dest_path();
  dest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.VehicleData.DataFile.dest_path)
}
inline ::std::string* VehicleData_DataFile::mutable_dest_path() {
  set_has_dest_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.DataFile.dest_path)
  return dest_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleData_DataFile::release_dest_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VehicleData.DataFile.dest_path)
  clear_has_dest_path();
  return dest_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleData_DataFile::set_allocated_dest_path(::std::string* dest_path) {
  if (dest_path != NULL) {
    set_has_dest_path();
  } else {
    clear_has_dest_path();
  }
  dest_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_path);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VehicleData.DataFile.dest_path)
}

// -------------------------------------------------------------------

// VehicleData

// repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
inline int VehicleData::data_files_size() const {
  return data_files_.size();
}
inline void VehicleData::clear_data_files() {
  data_files_.Clear();
}
inline const ::apollo::dreamview::VehicleData_DataFile& VehicleData::data_files(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.data_files)
  return data_files_.Get(index);
}
inline ::apollo::dreamview::VehicleData_DataFile* VehicleData::mutable_data_files(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.data_files)
  return data_files_.Mutable(index);
}
inline ::apollo::dreamview::VehicleData_DataFile* VehicleData::add_data_files() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.VehicleData.data_files)
  return data_files_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >*
VehicleData::mutable_data_files() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.VehicleData.data_files)
  return &data_files_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >&
VehicleData::data_files() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.VehicleData.data_files)
  return data_files_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto__INCLUDED
