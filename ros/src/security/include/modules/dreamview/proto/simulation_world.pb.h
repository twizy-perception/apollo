// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/simulation_world.proto

#ifndef PROTOBUF_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto__INCLUDED
#define PROTOBUF_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/monitor_log/proto/monitor_log.pb.h"
#include "modules/planning/proto/decision.pb.h"
#include "modules/planning/proto/planning.pb.h"
// @@protoc_insertion_point(includes)
namespace apollo {
namespace common {
namespace monitor {
class MonitorMessage;
class MonitorMessageDefaultTypeInternal;
extern MonitorMessageDefaultTypeInternal _MonitorMessage_default_instance_;
class MonitorMessageItem;
class MonitorMessageItemDefaultTypeInternal;
extern MonitorMessageItemDefaultTypeInternal _MonitorMessageItem_default_instance_;
}  // namespace monitor
}  // namespace common
namespace dreamview {
class Decision;
class DecisionDefaultTypeInternal;
extern DecisionDefaultTypeInternal _Decision_default_instance_;
class DelaysInMs;
class DelaysInMsDefaultTypeInternal;
extern DelaysInMsDefaultTypeInternal _DelaysInMs_default_instance_;
class Latency;
class LatencyDefaultTypeInternal;
extern LatencyDefaultTypeInternal _Latency_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class PolygonPoint;
class PolygonPointDefaultTypeInternal;
extern PolygonPointDefaultTypeInternal _PolygonPoint_default_instance_;
class Prediction;
class PredictionDefaultTypeInternal;
extern PredictionDefaultTypeInternal _Prediction_default_instance_;
class RoutePath;
class RoutePathDefaultTypeInternal;
extern RoutePathDefaultTypeInternal _RoutePath_default_instance_;
class SimulationWorld;
class SimulationWorldDefaultTypeInternal;
extern SimulationWorldDefaultTypeInternal _SimulationWorld_default_instance_;
}  // namespace dreamview
namespace planning {
class ADCPathPoint;
class ADCPathPointDefaultTypeInternal;
extern ADCPathPointDefaultTypeInternal _ADCPathPoint_default_instance_;
class ADCSignals;
class ADCSignalsDefaultTypeInternal;
extern ADCSignalsDefaultTypeInternal _ADCSignals_default_instance_;
class ADCTrajectory;
class ADCTrajectoryDefaultTypeInternal;
extern ADCTrajectoryDefaultTypeInternal _ADCTrajectory_default_instance_;
class ADCTrajectoryPoint;
class ADCTrajectoryPointDefaultTypeInternal;
extern ADCTrajectoryPointDefaultTypeInternal _ADCTrajectoryPoint_default_instance_;
class DecisionResult;
class DecisionResultDefaultTypeInternal;
extern DecisionResultDefaultTypeInternal _DecisionResult_default_instance_;
class EStop;
class EStopDefaultTypeInternal;
extern EStopDefaultTypeInternal _EStop_default_instance_;
class EmergencyStopCruiseToStop;
class EmergencyStopCruiseToStopDefaultTypeInternal;
extern EmergencyStopCruiseToStopDefaultTypeInternal _EmergencyStopCruiseToStop_default_instance_;
class EmergencyStopHardBrake;
class EmergencyStopHardBrakeDefaultTypeInternal;
extern EmergencyStopHardBrakeDefaultTypeInternal _EmergencyStopHardBrake_default_instance_;
class LatencyStats;
class LatencyStatsDefaultTypeInternal;
extern LatencyStatsDefaultTypeInternal _LatencyStats_default_instance_;
class MainChangeLane;
class MainChangeLaneDefaultTypeInternal;
extern MainChangeLaneDefaultTypeInternal _MainChangeLane_default_instance_;
class MainCruise;
class MainCruiseDefaultTypeInternal;
extern MainCruiseDefaultTypeInternal _MainCruise_default_instance_;
class MainDecision;
class MainDecisionDefaultTypeInternal;
extern MainDecisionDefaultTypeInternal _MainDecision_default_instance_;
class MainEmergencyStop;
class MainEmergencyStopDefaultTypeInternal;
extern MainEmergencyStopDefaultTypeInternal _MainEmergencyStop_default_instance_;
class MainMissionComplete;
class MainMissionCompleteDefaultTypeInternal;
extern MainMissionCompleteDefaultTypeInternal _MainMissionComplete_default_instance_;
class MainNotReady;
class MainNotReadyDefaultTypeInternal;
extern MainNotReadyDefaultTypeInternal _MainNotReady_default_instance_;
class MainParking;
class MainParkingDefaultTypeInternal;
extern MainParkingDefaultTypeInternal _MainParking_default_instance_;
class MainStop;
class MainStopDefaultTypeInternal;
extern MainStopDefaultTypeInternal _MainStop_default_instance_;
class ObjectAvoid;
class ObjectAvoidDefaultTypeInternal;
extern ObjectAvoidDefaultTypeInternal _ObjectAvoid_default_instance_;
class ObjectDecision;
class ObjectDecisionDefaultTypeInternal;
extern ObjectDecisionDefaultTypeInternal _ObjectDecision_default_instance_;
class ObjectDecisionType;
class ObjectDecisionTypeDefaultTypeInternal;
extern ObjectDecisionTypeDefaultTypeInternal _ObjectDecisionType_default_instance_;
class ObjectDecisions;
class ObjectDecisionsDefaultTypeInternal;
extern ObjectDecisionsDefaultTypeInternal _ObjectDecisions_default_instance_;
class ObjectFollow;
class ObjectFollowDefaultTypeInternal;
extern ObjectFollowDefaultTypeInternal _ObjectFollow_default_instance_;
class ObjectIgnore;
class ObjectIgnoreDefaultTypeInternal;
extern ObjectIgnoreDefaultTypeInternal _ObjectIgnore_default_instance_;
class ObjectNudge;
class ObjectNudgeDefaultTypeInternal;
extern ObjectNudgeDefaultTypeInternal _ObjectNudge_default_instance_;
class ObjectOvertake;
class ObjectOvertakeDefaultTypeInternal;
extern ObjectOvertakeDefaultTypeInternal _ObjectOvertake_default_instance_;
class ObjectSidePass;
class ObjectSidePassDefaultTypeInternal;
extern ObjectSidePassDefaultTypeInternal _ObjectSidePass_default_instance_;
class ObjectStop;
class ObjectStopDefaultTypeInternal;
extern ObjectStopDefaultTypeInternal _ObjectStop_default_instance_;
class ObjectYield;
class ObjectYieldDefaultTypeInternal;
extern ObjectYieldDefaultTypeInternal _ObjectYield_default_instance_;
class TargetLane;
class TargetLaneDefaultTypeInternal;
extern TargetLaneDefaultTypeInternal _TargetLane_default_instance_;
class TaskStats;
class TaskStatsDefaultTypeInternal;
extern TaskStatsDefaultTypeInternal _TaskStats_default_instance_;
}  // namespace planning
}  // namespace apollo

namespace apollo {
namespace dreamview {

namespace protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto

enum Decision_Type {
  Decision_Type_IGNORE = 0,
  Decision_Type_STOP = 1,
  Decision_Type_NUDGE = 2,
  Decision_Type_YIELD = 3,
  Decision_Type_OVERTAKE = 4,
  Decision_Type_FOLLOW = 5,
  Decision_Type_SIDEPASS = 6
};
bool Decision_Type_IsValid(int value);
const Decision_Type Decision_Type_Type_MIN = Decision_Type_IGNORE;
const Decision_Type Decision_Type_Type_MAX = Decision_Type_SIDEPASS;
const int Decision_Type_Type_ARRAYSIZE = Decision_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Decision_Type_descriptor();
inline const ::std::string& Decision_Type_Name(Decision_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Decision_Type_descriptor(), value);
}
inline bool Decision_Type_Parse(
    const ::std::string& name, Decision_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Decision_Type>(
    Decision_Type_descriptor(), name, value);
}
enum Decision_StopReasonCode {
  Decision_StopReasonCode_STOP_REASON_HEAD_VEHICLE = 1,
  Decision_StopReasonCode_STOP_REASON_DESTINATION = 2,
  Decision_StopReasonCode_STOP_REASON_PEDESTRIAN = 3,
  Decision_StopReasonCode_STOP_REASON_OBSTACLE = 4,
  Decision_StopReasonCode_STOP_REASON_SIGNAL = 100,
  Decision_StopReasonCode_STOP_REASON_STOP_SIGN = 101,
  Decision_StopReasonCode_STOP_REASON_YIELD_SIGN = 102,
  Decision_StopReasonCode_STOP_REASON_CLEAR_ZONE = 103,
  Decision_StopReasonCode_STOP_REASON_CROSSWALK = 104,
  Decision_StopReasonCode_STOP_REASON_EMERGENCY = 105,
  Decision_StopReasonCode_STOP_REASON_NOT_READY = 106
};
bool Decision_StopReasonCode_IsValid(int value);
const Decision_StopReasonCode Decision_StopReasonCode_StopReasonCode_MIN = Decision_StopReasonCode_STOP_REASON_HEAD_VEHICLE;
const Decision_StopReasonCode Decision_StopReasonCode_StopReasonCode_MAX = Decision_StopReasonCode_STOP_REASON_NOT_READY;
const int Decision_StopReasonCode_StopReasonCode_ARRAYSIZE = Decision_StopReasonCode_StopReasonCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Decision_StopReasonCode_descriptor();
inline const ::std::string& Decision_StopReasonCode_Name(Decision_StopReasonCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Decision_StopReasonCode_descriptor(), value);
}
inline bool Decision_StopReasonCode_Parse(
    const ::std::string& name, Decision_StopReasonCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Decision_StopReasonCode>(
    Decision_StopReasonCode_descriptor(), name, value);
}
enum Object_DisengageType {
  Object_DisengageType_DISENGAGE_NONE = 0,
  Object_DisengageType_DISENGAGE_UNKNOWN = 1,
  Object_DisengageType_DISENGAGE_MANUAL = 2,
  Object_DisengageType_DISENGAGE_EMERGENCY = 3,
  Object_DisengageType_DISENGAGE_AUTO_STEER_ONLY = 4,
  Object_DisengageType_DISENGAGE_AUTO_SPEED_ONLY = 5,
  Object_DisengageType_DISENGAGE_CHASSIS_ERROR = 6
};
bool Object_DisengageType_IsValid(int value);
const Object_DisengageType Object_DisengageType_DisengageType_MIN = Object_DisengageType_DISENGAGE_NONE;
const Object_DisengageType Object_DisengageType_DisengageType_MAX = Object_DisengageType_DISENGAGE_CHASSIS_ERROR;
const int Object_DisengageType_DisengageType_ARRAYSIZE = Object_DisengageType_DisengageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Object_DisengageType_descriptor();
inline const ::std::string& Object_DisengageType_Name(Object_DisengageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Object_DisengageType_descriptor(), value);
}
inline bool Object_DisengageType_Parse(
    const ::std::string& name, Object_DisengageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Object_DisengageType>(
    Object_DisengageType_descriptor(), name, value);
}
enum Object_Type {
  Object_Type_UNKNOWN = 0,
  Object_Type_UNKNOWN_MOVABLE = 1,
  Object_Type_UNKNOWN_UNMOVABLE = 2,
  Object_Type_PEDESTRIAN = 3,
  Object_Type_BICYCLE = 4,
  Object_Type_VEHICLE = 5,
  Object_Type_VIRTUAL = 6
};
bool Object_Type_IsValid(int value);
const Object_Type Object_Type_Type_MIN = Object_Type_UNKNOWN;
const Object_Type Object_Type_Type_MAX = Object_Type_VIRTUAL;
const int Object_Type_Type_ARRAYSIZE = Object_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Object_Type_descriptor();
inline const ::std::string& Object_Type_Name(Object_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Object_Type_descriptor(), value);
}
inline bool Object_Type_Parse(
    const ::std::string& name, Object_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Object_Type>(
    Object_Type_descriptor(), name, value);
}
// ===================================================================

class PolygonPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.PolygonPoint) */ {
 public:
  PolygonPoint();
  virtual ~PolygonPoint();

  PolygonPoint(const PolygonPoint& from);

  inline PolygonPoint& operator=(const PolygonPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PolygonPoint& default_instance();

  static inline const PolygonPoint* internal_default_instance() {
    return reinterpret_cast<const PolygonPoint*>(
               &_PolygonPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PolygonPoint* other);

  // implements Message ----------------------------------------------

  inline PolygonPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  PolygonPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PolygonPoint& from);
  void MergeFrom(const PolygonPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PolygonPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3 [default = 0];
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.PolygonPoint)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Prediction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Prediction) */ {
 public:
  Prediction();
  virtual ~Prediction();

  Prediction(const Prediction& from);

  inline Prediction& operator=(const Prediction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Prediction& default_instance();

  static inline const Prediction* internal_default_instance() {
    return reinterpret_cast<const Prediction*>(
               &_Prediction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Prediction* other);

  // implements Message ----------------------------------------------

  inline Prediction* New() const PROTOBUF_FINAL { return New(NULL); }

  Prediction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Prediction& from);
  void MergeFrom(const Prediction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Prediction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
  int predicted_trajectory_size() const;
  void clear_predicted_trajectory();
  static const int kPredictedTrajectoryFieldNumber = 2;
  const ::apollo::dreamview::PolygonPoint& predicted_trajectory(int index) const;
  ::apollo::dreamview::PolygonPoint* mutable_predicted_trajectory(int index);
  ::apollo::dreamview::PolygonPoint* add_predicted_trajectory();
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
      mutable_predicted_trajectory();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
      predicted_trajectory() const;

  // optional double probability = 1;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 1;
  double probability() const;
  void set_probability(double value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Prediction)
 private:
  void set_has_probability();
  void clear_has_probability();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint > predicted_trajectory_;
  double probability_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Decision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Decision) */ {
 public:
  Decision();
  virtual ~Decision();

  Decision(const Decision& from);

  inline Decision& operator=(const Decision& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Decision& default_instance();

  static inline const Decision* internal_default_instance() {
    return reinterpret_cast<const Decision*>(
               &_Decision_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Decision* other);

  // implements Message ----------------------------------------------

  inline Decision* New() const PROTOBUF_FINAL { return New(NULL); }

  Decision* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Decision& from);
  void MergeFrom(const Decision& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Decision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Decision_Type Type;
  static const Type IGNORE =
    Decision_Type_IGNORE;
  static const Type STOP =
    Decision_Type_STOP;
  static const Type NUDGE =
    Decision_Type_NUDGE;
  static const Type YIELD =
    Decision_Type_YIELD;
  static const Type OVERTAKE =
    Decision_Type_OVERTAKE;
  static const Type FOLLOW =
    Decision_Type_FOLLOW;
  static const Type SIDEPASS =
    Decision_Type_SIDEPASS;
  static inline bool Type_IsValid(int value) {
    return Decision_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Decision_Type_Type_MIN;
  static const Type Type_MAX =
    Decision_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Decision_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Decision_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Decision_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Decision_Type_Parse(name, value);
  }

  typedef Decision_StopReasonCode StopReasonCode;
  static const StopReasonCode STOP_REASON_HEAD_VEHICLE =
    Decision_StopReasonCode_STOP_REASON_HEAD_VEHICLE;
  static const StopReasonCode STOP_REASON_DESTINATION =
    Decision_StopReasonCode_STOP_REASON_DESTINATION;
  static const StopReasonCode STOP_REASON_PEDESTRIAN =
    Decision_StopReasonCode_STOP_REASON_PEDESTRIAN;
  static const StopReasonCode STOP_REASON_OBSTACLE =
    Decision_StopReasonCode_STOP_REASON_OBSTACLE;
  static const StopReasonCode STOP_REASON_SIGNAL =
    Decision_StopReasonCode_STOP_REASON_SIGNAL;
  static const StopReasonCode STOP_REASON_STOP_SIGN =
    Decision_StopReasonCode_STOP_REASON_STOP_SIGN;
  static const StopReasonCode STOP_REASON_YIELD_SIGN =
    Decision_StopReasonCode_STOP_REASON_YIELD_SIGN;
  static const StopReasonCode STOP_REASON_CLEAR_ZONE =
    Decision_StopReasonCode_STOP_REASON_CLEAR_ZONE;
  static const StopReasonCode STOP_REASON_CROSSWALK =
    Decision_StopReasonCode_STOP_REASON_CROSSWALK;
  static const StopReasonCode STOP_REASON_EMERGENCY =
    Decision_StopReasonCode_STOP_REASON_EMERGENCY;
  static const StopReasonCode STOP_REASON_NOT_READY =
    Decision_StopReasonCode_STOP_REASON_NOT_READY;
  static inline bool StopReasonCode_IsValid(int value) {
    return Decision_StopReasonCode_IsValid(value);
  }
  static const StopReasonCode StopReasonCode_MIN =
    Decision_StopReasonCode_StopReasonCode_MIN;
  static const StopReasonCode StopReasonCode_MAX =
    Decision_StopReasonCode_StopReasonCode_MAX;
  static const int StopReasonCode_ARRAYSIZE =
    Decision_StopReasonCode_StopReasonCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StopReasonCode_descriptor() {
    return Decision_StopReasonCode_descriptor();
  }
  static inline const ::std::string& StopReasonCode_Name(StopReasonCode value) {
    return Decision_StopReasonCode_Name(value);
  }
  static inline bool StopReasonCode_Parse(const ::std::string& name,
      StopReasonCode* value) {
    return Decision_StopReasonCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  int polygon_point_size() const;
  void clear_polygon_point();
  static const int kPolygonPointFieldNumber = 2;
  const ::apollo::dreamview::PolygonPoint& polygon_point(int index) const;
  ::apollo::dreamview::PolygonPoint* mutable_polygon_point(int index);
  ::apollo::dreamview::PolygonPoint* add_polygon_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
      mutable_polygon_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
      polygon_point() const;

  // optional double heading = 3;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  double heading() const;
  void set_heading(double value);

  // optional double latitude = 4;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 5;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 5;
  double longitude() const;
  void set_longitude(double value);

  // optional double position_x = 6;
  bool has_position_x() const;
  void clear_position_x();
  static const int kPositionXFieldNumber = 6;
  double position_x() const;
  void set_position_x(double value);

  // optional double position_y = 7;
  bool has_position_y() const;
  void clear_position_y();
  static const int kPositionYFieldNumber = 7;
  double position_y() const;
  void set_position_y(double value);

  // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::apollo::dreamview::Decision_Type type() const;
  void set_type(::apollo::dreamview::Decision_Type value);

  // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
  bool has_stopreason() const;
  void clear_stopreason();
  static const int kStopReasonFieldNumber = 11;
  ::apollo::dreamview::Decision_StopReasonCode stopreason() const;
  void set_stopreason(::apollo::dreamview::Decision_StopReasonCode value);

  // optional double length = 8 [default = 2.8];
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 8;
  double length() const;
  void set_length(double value);

  // optional double width = 9 [default = 1.4];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 9;
  double width() const;
  void set_width(double value);

  // optional double height = 10 [default = 1.8];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 10;
  double height() const;
  void set_height(double value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Decision)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_heading();
  void clear_has_heading();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_position_x();
  void clear_has_position_x();
  void set_has_position_y();
  void clear_has_position_y();
  void set_has_length();
  void clear_has_length();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_stopreason();
  void clear_has_stopreason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint > polygon_point_;
  double heading_;
  double latitude_;
  double longitude_;
  double position_x_;
  double position_y_;
  int type_;
  int stopreason_;
  double length_;
  double width_;
  double height_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Object* other);

  // implements Message ----------------------------------------------

  inline Object* New() const PROTOBUF_FINAL { return New(NULL); }

  Object* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Object_DisengageType DisengageType;
  static const DisengageType DISENGAGE_NONE =
    Object_DisengageType_DISENGAGE_NONE;
  static const DisengageType DISENGAGE_UNKNOWN =
    Object_DisengageType_DISENGAGE_UNKNOWN;
  static const DisengageType DISENGAGE_MANUAL =
    Object_DisengageType_DISENGAGE_MANUAL;
  static const DisengageType DISENGAGE_EMERGENCY =
    Object_DisengageType_DISENGAGE_EMERGENCY;
  static const DisengageType DISENGAGE_AUTO_STEER_ONLY =
    Object_DisengageType_DISENGAGE_AUTO_STEER_ONLY;
  static const DisengageType DISENGAGE_AUTO_SPEED_ONLY =
    Object_DisengageType_DISENGAGE_AUTO_SPEED_ONLY;
  static const DisengageType DISENGAGE_CHASSIS_ERROR =
    Object_DisengageType_DISENGAGE_CHASSIS_ERROR;
  static inline bool DisengageType_IsValid(int value) {
    return Object_DisengageType_IsValid(value);
  }
  static const DisengageType DisengageType_MIN =
    Object_DisengageType_DisengageType_MIN;
  static const DisengageType DisengageType_MAX =
    Object_DisengageType_DisengageType_MAX;
  static const int DisengageType_ARRAYSIZE =
    Object_DisengageType_DisengageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DisengageType_descriptor() {
    return Object_DisengageType_descriptor();
  }
  static inline const ::std::string& DisengageType_Name(DisengageType value) {
    return Object_DisengageType_Name(value);
  }
  static inline bool DisengageType_Parse(const ::std::string& name,
      DisengageType* value) {
    return Object_DisengageType_Parse(name, value);
  }

  typedef Object_Type Type;
  static const Type UNKNOWN =
    Object_Type_UNKNOWN;
  static const Type UNKNOWN_MOVABLE =
    Object_Type_UNKNOWN_MOVABLE;
  static const Type UNKNOWN_UNMOVABLE =
    Object_Type_UNKNOWN_UNMOVABLE;
  static const Type PEDESTRIAN =
    Object_Type_PEDESTRIAN;
  static const Type BICYCLE =
    Object_Type_BICYCLE;
  static const Type VEHICLE =
    Object_Type_VEHICLE;
  static const Type VIRTUAL =
    Object_Type_VIRTUAL;
  static inline bool Type_IsValid(int value) {
    return Object_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Object_Type_Type_MIN;
  static const Type Type_MAX =
    Object_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Object_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Object_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Object_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Object_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  int polygon_point_size() const;
  void clear_polygon_point();
  static const int kPolygonPointFieldNumber = 2;
  const ::apollo::dreamview::PolygonPoint& polygon_point(int index) const;
  ::apollo::dreamview::PolygonPoint* mutable_polygon_point(int index);
  ::apollo::dreamview::PolygonPoint* add_polygon_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
      mutable_polygon_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
      polygon_point() const;

  // repeated string signal_set = 17;
  int signal_set_size() const;
  void clear_signal_set();
  static const int kSignalSetFieldNumber = 17;
  const ::std::string& signal_set(int index) const;
  ::std::string* mutable_signal_set(int index);
  void set_signal_set(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_signal_set(int index, ::std::string&& value);
  #endif
  void set_signal_set(int index, const char* value);
  void set_signal_set(int index, const char* value, size_t size);
  ::std::string* add_signal_set();
  void add_signal_set(const ::std::string& value);
  #if LANG_CXX11
  void add_signal_set(::std::string&& value);
  #endif
  void add_signal_set(const char* value);
  void add_signal_set(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& signal_set() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_signal_set();

  // repeated .apollo.dreamview.Decision decision = 20;
  int decision_size() const;
  void clear_decision();
  static const int kDecisionFieldNumber = 20;
  const ::apollo::dreamview::Decision& decision(int index) const;
  ::apollo::dreamview::Decision* mutable_decision(int index);
  ::apollo::dreamview::Decision* add_decision();
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Decision >*
      mutable_decision();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Decision >&
      decision() const;

  // repeated .apollo.dreamview.Prediction prediction = 26;
  int prediction_size() const;
  void clear_prediction();
  static const int kPredictionFieldNumber = 26;
  const ::apollo::dreamview::Prediction& prediction(int index) const;
  ::apollo::dreamview::Prediction* mutable_prediction(int index);
  ::apollo::dreamview::Prediction* add_prediction();
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Prediction >*
      mutable_prediction();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Prediction >&
      prediction() const;

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string current_signal = 18;
  bool has_current_signal() const;
  void clear_current_signal();
  static const int kCurrentSignalFieldNumber = 18;
  const ::std::string& current_signal() const;
  void set_current_signal(const ::std::string& value);
  #if LANG_CXX11
  void set_current_signal(::std::string&& value);
  #endif
  void set_current_signal(const char* value);
  void set_current_signal(const char* value, size_t size);
  ::std::string* mutable_current_signal();
  ::std::string* release_current_signal();
  void set_allocated_current_signal(::std::string* current_signal);

  // optional .apollo.planning.DecisionResult adc_decision_result = 29;
  bool has_adc_decision_result() const;
  void clear_adc_decision_result();
  static const int kAdcDecisionResultFieldNumber = 29;
  const ::apollo::planning::DecisionResult& adc_decision_result() const;
  ::apollo::planning::DecisionResult* mutable_adc_decision_result();
  ::apollo::planning::DecisionResult* release_adc_decision_result();
  void set_allocated_adc_decision_result(::apollo::planning::DecisionResult* adc_decision_result);

  // optional .apollo.planning.ADCTrajectory adc_trajectory = 31;
  bool has_adc_trajectory() const;
  void clear_adc_trajectory();
  static const int kAdcTrajectoryFieldNumber = 31;
  const ::apollo::planning::ADCTrajectory& adc_trajectory() const;
  ::apollo::planning::ADCTrajectory* mutable_adc_trajectory();
  ::apollo::planning::ADCTrajectory* release_adc_trajectory();
  void set_allocated_adc_trajectory(::apollo::planning::ADCTrajectory* adc_trajectory);

  // optional double heading = 3;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  double heading() const;
  void set_heading(double value);

  // optional double latitude = 4;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 5;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 5;
  double longitude() const;
  void set_longitude(double value);

  // optional double position_x = 6;
  bool has_position_x() const;
  void clear_position_x();
  static const int kPositionXFieldNumber = 6;
  double position_x() const;
  void set_position_x(double value);

  // optional double position_y = 7;
  bool has_position_y() const;
  void clear_position_y();
  static const int kPositionYFieldNumber = 7;
  double position_y() const;
  void set_position_y(double value);

  // optional double speed = 11;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 11;
  double speed() const;
  void set_speed(double value);

  // optional double speed_acceleration = 12;
  bool has_speed_acceleration() const;
  void clear_speed_acceleration();
  static const int kSpeedAccelerationFieldNumber = 12;
  double speed_acceleration() const;
  void set_speed_acceleration(double value);

  // optional double speed_jerk = 13;
  bool has_speed_jerk() const;
  void clear_speed_jerk();
  static const int kSpeedJerkFieldNumber = 13;
  double speed_jerk() const;
  void set_speed_jerk(double value);

  // optional double spin = 14;
  bool has_spin() const;
  void clear_spin();
  static const int kSpinFieldNumber = 14;
  double spin() const;
  void set_spin(double value);

  // optional double spin_acceleration = 15;
  bool has_spin_acceleration() const;
  void clear_spin_acceleration();
  static const int kSpinAccelerationFieldNumber = 15;
  double spin_acceleration() const;
  void set_spin_acceleration(double value);

  // optional double spin_jerk = 16;
  bool has_spin_jerk() const;
  void clear_spin_jerk();
  static const int kSpinJerkFieldNumber = 16;
  double spin_jerk() const;
  void set_spin_jerk(double value);

  // optional double timestamp_sec = 19;
  bool has_timestamp_sec() const;
  void clear_timestamp_sec();
  static const int kTimestampSecFieldNumber = 19;
  double timestamp_sec() const;
  void set_timestamp_sec(double value);

  // optional double throttle_percentage = 21;
  bool has_throttle_percentage() const;
  void clear_throttle_percentage();
  static const int kThrottlePercentageFieldNumber = 21;
  double throttle_percentage() const;
  void set_throttle_percentage(double value);

  // optional double brake_percentage = 22;
  bool has_brake_percentage() const;
  void clear_brake_percentage();
  static const int kBrakePercentageFieldNumber = 22;
  double brake_percentage() const;
  void set_brake_percentage(double value);

  // optional double steering_angle = 23;
  bool has_steering_angle() const;
  void clear_steering_angle();
  static const int kSteeringAngleFieldNumber = 23;
  double steering_angle() const;
  void set_steering_angle(double value);

  // optional .apollo.dreamview.Object.DisengageType disengage_type = 24;
  bool has_disengage_type() const;
  void clear_disengage_type();
  static const int kDisengageTypeFieldNumber = 24;
  ::apollo::dreamview::Object_DisengageType disengage_type() const;
  void set_disengage_type(::apollo::dreamview::Object_DisengageType value);

  // optional .apollo.dreamview.Object.Type type = 25;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 25;
  ::apollo::dreamview::Object_Type type() const;
  void set_type(::apollo::dreamview::Object_Type value);

  // optional double speed_heading = 30;
  bool has_speed_heading() const;
  void clear_speed_heading();
  static const int kSpeedHeadingFieldNumber = 30;
  double speed_heading() const;
  void set_speed_heading(double value);

  // optional double length = 8 [default = 2.8];
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 8;
  double length() const;
  void set_length(double value);

  // optional double width = 9 [default = 1.4];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 9;
  double width() const;
  void set_width(double value);

  // optional double height = 10 [default = 1.8];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 10;
  double height() const;
  void set_height(double value);

  // optional double confidence = 27 [default = 1];
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 27;
  double confidence() const;
  void set_confidence(double value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Object)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_heading();
  void clear_has_heading();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_position_x();
  void clear_has_position_x();
  void set_has_position_y();
  void clear_has_position_y();
  void set_has_length();
  void clear_has_length();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_speed();
  void clear_has_speed();
  void set_has_speed_acceleration();
  void clear_has_speed_acceleration();
  void set_has_speed_jerk();
  void clear_has_speed_jerk();
  void set_has_spin();
  void clear_has_spin();
  void set_has_spin_acceleration();
  void clear_has_spin_acceleration();
  void set_has_spin_jerk();
  void clear_has_spin_jerk();
  void set_has_speed_heading();
  void clear_has_speed_heading();
  void set_has_current_signal();
  void clear_has_current_signal();
  void set_has_timestamp_sec();
  void clear_has_timestamp_sec();
  void set_has_adc_decision_result();
  void clear_has_adc_decision_result();
  void set_has_adc_trajectory();
  void clear_has_adc_trajectory();
  void set_has_throttle_percentage();
  void clear_has_throttle_percentage();
  void set_has_brake_percentage();
  void clear_has_brake_percentage();
  void set_has_steering_angle();
  void clear_has_steering_angle();
  void set_has_disengage_type();
  void clear_has_disengage_type();
  void set_has_type();
  void clear_has_type();
  void set_has_confidence();
  void clear_has_confidence();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint > polygon_point_;
  ::google::protobuf::RepeatedPtrField< ::std::string> signal_set_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Decision > decision_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Prediction > prediction_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr current_signal_;
  ::apollo::planning::DecisionResult* adc_decision_result_;
  ::apollo::planning::ADCTrajectory* adc_trajectory_;
  double heading_;
  double latitude_;
  double longitude_;
  double position_x_;
  double position_y_;
  double speed_;
  double speed_acceleration_;
  double speed_jerk_;
  double spin_;
  double spin_acceleration_;
  double spin_jerk_;
  double timestamp_sec_;
  double throttle_percentage_;
  double brake_percentage_;
  double steering_angle_;
  int disengage_type_;
  int type_;
  double speed_heading_;
  double length_;
  double width_;
  double height_;
  double confidence_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelaysInMs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.DelaysInMs) */ {
 public:
  DelaysInMs();
  virtual ~DelaysInMs();

  DelaysInMs(const DelaysInMs& from);

  inline DelaysInMs& operator=(const DelaysInMs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelaysInMs& default_instance();

  static inline const DelaysInMs* internal_default_instance() {
    return reinterpret_cast<const DelaysInMs*>(
               &_DelaysInMs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DelaysInMs* other);

  // implements Message ----------------------------------------------

  inline DelaysInMs* New() const PROTOBUF_FINAL { return New(NULL); }

  DelaysInMs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelaysInMs& from);
  void MergeFrom(const DelaysInMs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelaysInMs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double chassis = 1;
  bool has_chassis() const;
  void clear_chassis();
  static const int kChassisFieldNumber = 1;
  double chassis() const;
  void set_chassis(double value);

  // optional double localization = 3;
  bool has_localization() const;
  void clear_localization();
  static const int kLocalizationFieldNumber = 3;
  double localization() const;
  void set_localization(double value);

  // optional double perception_obstacle = 4;
  bool has_perception_obstacle() const;
  void clear_perception_obstacle();
  static const int kPerceptionObstacleFieldNumber = 4;
  double perception_obstacle() const;
  void set_perception_obstacle(double value);

  // optional double planning = 5;
  bool has_planning() const;
  void clear_planning();
  static const int kPlanningFieldNumber = 5;
  double planning() const;
  void set_planning(double value);

  // optional double prediction = 7;
  bool has_prediction() const;
  void clear_prediction();
  static const int kPredictionFieldNumber = 7;
  double prediction() const;
  void set_prediction(double value);

  // optional double traffic_light = 8;
  bool has_traffic_light() const;
  void clear_traffic_light();
  static const int kTrafficLightFieldNumber = 8;
  double traffic_light() const;
  void set_traffic_light(double value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.DelaysInMs)
 private:
  void set_has_chassis();
  void clear_has_chassis();
  void set_has_localization();
  void clear_has_localization();
  void set_has_perception_obstacle();
  void clear_has_perception_obstacle();
  void set_has_planning();
  void clear_has_planning();
  void set_has_prediction();
  void clear_has_prediction();
  void set_has_traffic_light();
  void clear_has_traffic_light();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double chassis_;
  double localization_;
  double perception_obstacle_;
  double planning_;
  double prediction_;
  double traffic_light_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoutePath : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.RoutePath) */ {
 public:
  RoutePath();
  virtual ~RoutePath();

  RoutePath(const RoutePath& from);

  inline RoutePath& operator=(const RoutePath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoutePath& default_instance();

  static inline const RoutePath* internal_default_instance() {
    return reinterpret_cast<const RoutePath*>(
               &_RoutePath_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RoutePath* other);

  // implements Message ----------------------------------------------

  inline RoutePath* New() const PROTOBUF_FINAL { return New(NULL); }

  RoutePath* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoutePath& from);
  void MergeFrom(const RoutePath& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoutePath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.dreamview.PolygonPoint point = 1;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::apollo::dreamview::PolygonPoint& point(int index) const;
  ::apollo::dreamview::PolygonPoint* mutable_point(int index);
  ::apollo::dreamview::PolygonPoint* add_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
      point() const;

  // @@protoc_insertion_point(class_scope:apollo.dreamview.RoutePath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint > point_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Latency : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Latency) */ {
 public:
  Latency();
  virtual ~Latency();

  Latency(const Latency& from);

  inline Latency& operator=(const Latency& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Latency& default_instance();

  static inline const Latency* internal_default_instance() {
    return reinterpret_cast<const Latency*>(
               &_Latency_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Latency* other);

  // implements Message ----------------------------------------------

  inline Latency* New() const PROTOBUF_FINAL { return New(NULL); }

  Latency* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Latency& from);
  void MergeFrom(const Latency& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Latency* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double planning = 1;
  bool has_planning() const;
  void clear_planning();
  static const int kPlanningFieldNumber = 1;
  double planning() const;
  void set_planning(double value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Latency)
 private:
  void set_has_planning();
  void clear_has_planning();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double planning_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimulationWorld : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.SimulationWorld) */ {
 public:
  SimulationWorld();
  virtual ~SimulationWorld();

  SimulationWorld(const SimulationWorld& from);

  inline SimulationWorld& operator=(const SimulationWorld& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimulationWorld& default_instance();

  static inline const SimulationWorld* internal_default_instance() {
    return reinterpret_cast<const SimulationWorld*>(
               &_SimulationWorld_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SimulationWorld* other);

  // implements Message ----------------------------------------------

  inline SimulationWorld* New() const PROTOBUF_FINAL { return New(NULL); }

  SimulationWorld* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimulationWorld& from);
  void MergeFrom(const SimulationWorld& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimulationWorld* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.dreamview.Object object = 3;
  int object_size() const;
  void clear_object();
  static const int kObjectFieldNumber = 3;
  const ::apollo::dreamview::Object& object(int index) const;
  ::apollo::dreamview::Object* mutable_object(int index);
  ::apollo::dreamview::Object* add_object();
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object >*
      mutable_object();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object >&
      object() const;

  // repeated .apollo.dreamview.RoutePath route_path = 7;
  int route_path_size() const;
  void clear_route_path();
  static const int kRoutePathFieldNumber = 7;
  const ::apollo::dreamview::RoutePath& route_path(int index) const;
  ::apollo::dreamview::RoutePath* mutable_route_path(int index);
  ::apollo::dreamview::RoutePath* add_route_path();
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::RoutePath >*
      mutable_route_path();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::RoutePath >&
      route_path() const;

  // repeated .apollo.dreamview.Object planning_trajectory = 9;
  int planning_trajectory_size() const;
  void clear_planning_trajectory();
  static const int kPlanningTrajectoryFieldNumber = 9;
  const ::apollo::dreamview::Object& planning_trajectory(int index) const;
  ::apollo::dreamview::Object* mutable_planning_trajectory(int index);
  ::apollo::dreamview::Object* add_planning_trajectory();
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object >*
      mutable_planning_trajectory();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object >&
      planning_trajectory() const;

  // optional .apollo.dreamview.Object auto_driving_car = 4;
  bool has_auto_driving_car() const;
  void clear_auto_driving_car();
  static const int kAutoDrivingCarFieldNumber = 4;
  const ::apollo::dreamview::Object& auto_driving_car() const;
  ::apollo::dreamview::Object* mutable_auto_driving_car();
  ::apollo::dreamview::Object* release_auto_driving_car();
  void set_allocated_auto_driving_car(::apollo::dreamview::Object* auto_driving_car);

  // optional .apollo.dreamview.Object traffic_signal = 6;
  bool has_traffic_signal() const;
  void clear_traffic_signal();
  static const int kTrafficSignalFieldNumber = 6;
  const ::apollo::dreamview::Object& traffic_signal() const;
  ::apollo::dreamview::Object* mutable_traffic_signal();
  ::apollo::dreamview::Object* release_traffic_signal();
  void set_allocated_traffic_signal(::apollo::dreamview::Object* traffic_signal);

  // optional .apollo.dreamview.Object main_stop = 10;
  bool has_main_stop() const;
  void clear_main_stop();
  static const int kMainStopFieldNumber = 10;
  const ::apollo::dreamview::Object& main_stop() const;
  ::apollo::dreamview::Object* mutable_main_stop();
  ::apollo::dreamview::Object* release_main_stop();
  void set_allocated_main_stop(::apollo::dreamview::Object* main_stop);

  // optional .apollo.dreamview.DelaysInMs delay = 12;
  bool has_delay() const;
  void clear_delay();
  static const int kDelayFieldNumber = 12;
  const ::apollo::dreamview::DelaysInMs& delay() const;
  ::apollo::dreamview::DelaysInMs* mutable_delay();
  ::apollo::dreamview::DelaysInMs* release_delay();
  void set_allocated_delay(::apollo::dreamview::DelaysInMs* delay);

  // optional .apollo.common.monitor.MonitorMessage monitor = 13;
  bool has_monitor() const;
  void clear_monitor();
  static const int kMonitorFieldNumber = 13;
  const ::apollo::common::monitor::MonitorMessage& monitor() const;
  ::apollo::common::monitor::MonitorMessage* mutable_monitor();
  ::apollo::common::monitor::MonitorMessage* release_monitor();
  void set_allocated_monitor(::apollo::common::monitor::MonitorMessage* monitor);

  // optional .apollo.dreamview.Latency latency = 15;
  bool has_latency() const;
  void clear_latency();
  static const int kLatencyFieldNumber = 15;
  const ::apollo::dreamview::Latency& latency() const;
  ::apollo::dreamview::Latency* mutable_latency();
  ::apollo::dreamview::Latency* release_latency();
  void set_allocated_latency(::apollo::dreamview::Latency* latency);

  // optional double timestamp_sec = 1;
  bool has_timestamp_sec() const;
  void clear_timestamp_sec();
  static const int kTimestampSecFieldNumber = 1;
  double timestamp_sec() const;
  void set_timestamp_sec(double value);

  // optional double routing_time = 8;
  bool has_routing_time() const;
  void clear_routing_time();
  static const int kRoutingTimeFieldNumber = 8;
  double routing_time() const;
  void set_routing_time(double value);

  // optional double speed_limit = 11;
  bool has_speed_limit() const;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 11;
  double speed_limit() const;
  void set_speed_limit(double value);

  // optional uint32 sequence_num = 2;
  bool has_sequence_num() const;
  void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 2;
  ::google::protobuf::uint32 sequence_num() const;
  void set_sequence_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.SimulationWorld)
 private:
  void set_has_timestamp_sec();
  void clear_has_timestamp_sec();
  void set_has_sequence_num();
  void clear_has_sequence_num();
  void set_has_auto_driving_car();
  void clear_has_auto_driving_car();
  void set_has_traffic_signal();
  void clear_has_traffic_signal();
  void set_has_routing_time();
  void clear_has_routing_time();
  void set_has_main_stop();
  void clear_has_main_stop();
  void set_has_speed_limit();
  void clear_has_speed_limit();
  void set_has_delay();
  void clear_has_delay();
  void set_has_monitor();
  void clear_has_monitor();
  void set_has_latency();
  void clear_has_latency();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object > object_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::RoutePath > route_path_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object > planning_trajectory_;
  ::apollo::dreamview::Object* auto_driving_car_;
  ::apollo::dreamview::Object* traffic_signal_;
  ::apollo::dreamview::Object* main_stop_;
  ::apollo::dreamview::DelaysInMs* delay_;
  ::apollo::common::monitor::MonitorMessage* monitor_;
  ::apollo::dreamview::Latency* latency_;
  double timestamp_sec_;
  double routing_time_;
  double speed_limit_;
  ::google::protobuf::uint32 sequence_num_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PolygonPoint

// optional double x = 1;
inline bool PolygonPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolygonPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PolygonPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PolygonPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double PolygonPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PolygonPoint.x)
  return x_;
}
inline void PolygonPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.PolygonPoint.x)
}

// optional double y = 2;
inline bool PolygonPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolygonPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PolygonPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PolygonPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double PolygonPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PolygonPoint.y)
  return y_;
}
inline void PolygonPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.PolygonPoint.y)
}

// optional double z = 3 [default = 0];
inline bool PolygonPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolygonPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PolygonPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PolygonPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double PolygonPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PolygonPoint.z)
  return z_;
}
inline void PolygonPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.PolygonPoint.z)
}

// -------------------------------------------------------------------

// Prediction

// optional double probability = 1;
inline bool Prediction::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Prediction::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Prediction::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Prediction::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline double Prediction::probability() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Prediction.probability)
  return probability_;
}
inline void Prediction::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Prediction.probability)
}

// repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
inline int Prediction::predicted_trajectory_size() const {
  return predicted_trajectory_.size();
}
inline void Prediction::clear_predicted_trajectory() {
  predicted_trajectory_.Clear();
}
inline const ::apollo::dreamview::PolygonPoint& Prediction::predicted_trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Prediction.predicted_trajectory)
  return predicted_trajectory_.Get(index);
}
inline ::apollo::dreamview::PolygonPoint* Prediction::mutable_predicted_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Prediction.predicted_trajectory)
  return predicted_trajectory_.Mutable(index);
}
inline ::apollo::dreamview::PolygonPoint* Prediction::add_predicted_trajectory() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Prediction.predicted_trajectory)
  return predicted_trajectory_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
Prediction::mutable_predicted_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Prediction.predicted_trajectory)
  return &predicted_trajectory_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
Prediction::predicted_trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Prediction.predicted_trajectory)
  return predicted_trajectory_;
}

// -------------------------------------------------------------------

// Decision

// optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
inline bool Decision::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Decision::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Decision::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Decision::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::dreamview::Decision_Type Decision::type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.type)
  return static_cast< ::apollo::dreamview::Decision_Type >(type_);
}
inline void Decision::set_type(::apollo::dreamview::Decision_Type value) {
  assert(::apollo::dreamview::Decision_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.type)
}

// repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
inline int Decision::polygon_point_size() const {
  return polygon_point_.size();
}
inline void Decision::clear_polygon_point() {
  polygon_point_.Clear();
}
inline const ::apollo::dreamview::PolygonPoint& Decision::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.polygon_point)
  return polygon_point_.Get(index);
}
inline ::apollo::dreamview::PolygonPoint* Decision::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Decision.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::apollo::dreamview::PolygonPoint* Decision::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Decision.polygon_point)
  return polygon_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
Decision::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Decision.polygon_point)
  return &polygon_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
Decision::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Decision.polygon_point)
  return polygon_point_;
}

// optional double heading = 3;
inline bool Decision::has_heading() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Decision::set_has_heading() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Decision::clear_has_heading() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Decision::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double Decision::heading() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.heading)
  return heading_;
}
inline void Decision::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.heading)
}

// optional double latitude = 4;
inline bool Decision::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Decision::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Decision::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Decision::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double Decision::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.latitude)
  return latitude_;
}
inline void Decision::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.latitude)
}

// optional double longitude = 5;
inline bool Decision::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Decision::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Decision::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Decision::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double Decision::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.longitude)
  return longitude_;
}
inline void Decision::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.longitude)
}

// optional double position_x = 6;
inline bool Decision::has_position_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Decision::set_has_position_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Decision::clear_has_position_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Decision::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
inline double Decision::position_x() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.position_x)
  return position_x_;
}
inline void Decision::set_position_x(double value) {
  set_has_position_x();
  position_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.position_x)
}

// optional double position_y = 7;
inline bool Decision::has_position_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Decision::set_has_position_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Decision::clear_has_position_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Decision::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
inline double Decision::position_y() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.position_y)
  return position_y_;
}
inline void Decision::set_position_y(double value) {
  set_has_position_y();
  position_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.position_y)
}

// optional double length = 8 [default = 2.8];
inline bool Decision::has_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Decision::set_has_length() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Decision::clear_has_length() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Decision::clear_length() {
  length_ = 2.8;
  clear_has_length();
}
inline double Decision::length() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.length)
  return length_;
}
inline void Decision::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.length)
}

// optional double width = 9 [default = 1.4];
inline bool Decision::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Decision::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Decision::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Decision::clear_width() {
  width_ = 1.4;
  clear_has_width();
}
inline double Decision::width() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.width)
  return width_;
}
inline void Decision::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.width)
}

// optional double height = 10 [default = 1.8];
inline bool Decision::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Decision::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Decision::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Decision::clear_height() {
  height_ = 1.8;
  clear_has_height();
}
inline double Decision::height() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.height)
  return height_;
}
inline void Decision::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.height)
}

// optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
inline bool Decision::has_stopreason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Decision::set_has_stopreason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Decision::clear_has_stopreason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Decision::clear_stopreason() {
  stopreason_ = 1;
  clear_has_stopreason();
}
inline ::apollo::dreamview::Decision_StopReasonCode Decision::stopreason() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.stopReason)
  return static_cast< ::apollo::dreamview::Decision_StopReasonCode >(stopreason_);
}
inline void Decision::set_stopreason(::apollo::dreamview::Decision_StopReasonCode value) {
  assert(::apollo::dreamview::Decision_StopReasonCode_IsValid(value));
  set_has_stopreason();
  stopreason_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.stopReason)
}

// -------------------------------------------------------------------

// Object

// optional string id = 1;
inline bool Object::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Object::id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.id)
  return id_.GetNoArena();
}
inline void Object::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.id)
}
#if LANG_CXX11
inline void Object::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Object.id)
}
#endif
inline void Object::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Object.id)
}
inline void Object::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Object.id)
}
inline ::std::string* Object::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_id() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Object.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Object.id)
}

// repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
inline int Object::polygon_point_size() const {
  return polygon_point_.size();
}
inline void Object::clear_polygon_point() {
  polygon_point_.Clear();
}
inline const ::apollo::dreamview::PolygonPoint& Object::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.polygon_point)
  return polygon_point_.Get(index);
}
inline ::apollo::dreamview::PolygonPoint* Object::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::apollo::dreamview::PolygonPoint* Object::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.polygon_point)
  return polygon_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
Object::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Object.polygon_point)
  return &polygon_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
Object::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Object.polygon_point)
  return polygon_point_;
}

// optional double heading = 3;
inline bool Object::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Object::set_has_heading() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Object::clear_has_heading() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Object::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double Object::heading() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.heading)
  return heading_;
}
inline void Object::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.heading)
}

// optional double latitude = 4;
inline bool Object::has_latitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Object::set_has_latitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Object::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Object::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double Object::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.latitude)
  return latitude_;
}
inline void Object::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.latitude)
}

// optional double longitude = 5;
inline bool Object::has_longitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Object::set_has_longitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Object::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Object::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double Object::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.longitude)
  return longitude_;
}
inline void Object::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.longitude)
}

// optional double position_x = 6;
inline bool Object::has_position_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Object::set_has_position_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Object::clear_has_position_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Object::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
inline double Object::position_x() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.position_x)
  return position_x_;
}
inline void Object::set_position_x(double value) {
  set_has_position_x();
  position_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.position_x)
}

// optional double position_y = 7;
inline bool Object::has_position_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Object::set_has_position_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Object::clear_has_position_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Object::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
inline double Object::position_y() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.position_y)
  return position_y_;
}
inline void Object::set_position_y(double value) {
  set_has_position_y();
  position_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.position_y)
}

// optional double length = 8 [default = 2.8];
inline bool Object::has_length() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Object::set_has_length() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Object::clear_has_length() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Object::clear_length() {
  length_ = 2.8;
  clear_has_length();
}
inline double Object::length() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.length)
  return length_;
}
inline void Object::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.length)
}

// optional double width = 9 [default = 1.4];
inline bool Object::has_width() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Object::set_has_width() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Object::clear_has_width() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Object::clear_width() {
  width_ = 1.4;
  clear_has_width();
}
inline double Object::width() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.width)
  return width_;
}
inline void Object::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.width)
}

// optional double height = 10 [default = 1.8];
inline bool Object::has_height() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Object::set_has_height() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Object::clear_has_height() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Object::clear_height() {
  height_ = 1.8;
  clear_has_height();
}
inline double Object::height() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.height)
  return height_;
}
inline void Object::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.height)
}

// optional double speed = 11;
inline bool Object::has_speed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Object::set_has_speed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Object::clear_has_speed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Object::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double Object::speed() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.speed)
  return speed_;
}
inline void Object::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.speed)
}

// optional double speed_acceleration = 12;
inline bool Object::has_speed_acceleration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Object::set_has_speed_acceleration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Object::clear_has_speed_acceleration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Object::clear_speed_acceleration() {
  speed_acceleration_ = 0;
  clear_has_speed_acceleration();
}
inline double Object::speed_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.speed_acceleration)
  return speed_acceleration_;
}
inline void Object::set_speed_acceleration(double value) {
  set_has_speed_acceleration();
  speed_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.speed_acceleration)
}

// optional double speed_jerk = 13;
inline bool Object::has_speed_jerk() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Object::set_has_speed_jerk() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Object::clear_has_speed_jerk() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Object::clear_speed_jerk() {
  speed_jerk_ = 0;
  clear_has_speed_jerk();
}
inline double Object::speed_jerk() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.speed_jerk)
  return speed_jerk_;
}
inline void Object::set_speed_jerk(double value) {
  set_has_speed_jerk();
  speed_jerk_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.speed_jerk)
}

// optional double spin = 14;
inline bool Object::has_spin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Object::set_has_spin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Object::clear_has_spin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Object::clear_spin() {
  spin_ = 0;
  clear_has_spin();
}
inline double Object::spin() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.spin)
  return spin_;
}
inline void Object::set_spin(double value) {
  set_has_spin();
  spin_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.spin)
}

// optional double spin_acceleration = 15;
inline bool Object::has_spin_acceleration() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Object::set_has_spin_acceleration() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Object::clear_has_spin_acceleration() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Object::clear_spin_acceleration() {
  spin_acceleration_ = 0;
  clear_has_spin_acceleration();
}
inline double Object::spin_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.spin_acceleration)
  return spin_acceleration_;
}
inline void Object::set_spin_acceleration(double value) {
  set_has_spin_acceleration();
  spin_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.spin_acceleration)
}

// optional double spin_jerk = 16;
inline bool Object::has_spin_jerk() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Object::set_has_spin_jerk() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Object::clear_has_spin_jerk() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Object::clear_spin_jerk() {
  spin_jerk_ = 0;
  clear_has_spin_jerk();
}
inline double Object::spin_jerk() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.spin_jerk)
  return spin_jerk_;
}
inline void Object::set_spin_jerk(double value) {
  set_has_spin_jerk();
  spin_jerk_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.spin_jerk)
}

// optional double speed_heading = 30;
inline bool Object::has_speed_heading() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Object::set_has_speed_heading() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Object::clear_has_speed_heading() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Object::clear_speed_heading() {
  speed_heading_ = 0;
  clear_has_speed_heading();
}
inline double Object::speed_heading() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.speed_heading)
  return speed_heading_;
}
inline void Object::set_speed_heading(double value) {
  set_has_speed_heading();
  speed_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.speed_heading)
}

// repeated string signal_set = 17;
inline int Object::signal_set_size() const {
  return signal_set_.size();
}
inline void Object::clear_signal_set() {
  signal_set_.Clear();
}
inline const ::std::string& Object::signal_set(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.signal_set)
  return signal_set_.Get(index);
}
inline ::std::string* Object::mutable_signal_set(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.signal_set)
  return signal_set_.Mutable(index);
}
inline void Object::set_signal_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.signal_set)
  signal_set_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Object::set_signal_set(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.signal_set)
  signal_set_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Object::set_signal_set(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  signal_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Object.signal_set)
}
inline void Object::set_signal_set(int index, const char* value, size_t size) {
  signal_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Object.signal_set)
}
inline ::std::string* Object::add_signal_set() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.Object.signal_set)
  return signal_set_.Add();
}
inline void Object::add_signal_set(const ::std::string& value) {
  signal_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.signal_set)
}
#if LANG_CXX11
inline void Object::add_signal_set(::std::string&& value) {
  signal_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.signal_set)
}
#endif
inline void Object::add_signal_set(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  signal_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.Object.signal_set)
}
inline void Object::add_signal_set(const char* value, size_t size) {
  signal_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.Object.signal_set)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Object::signal_set() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Object.signal_set)
  return signal_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Object::mutable_signal_set() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Object.signal_set)
  return &signal_set_;
}

// optional string current_signal = 18;
inline bool Object::has_current_signal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Object::set_has_current_signal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Object::clear_has_current_signal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Object::clear_current_signal() {
  current_signal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_current_signal();
}
inline const ::std::string& Object::current_signal() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.current_signal)
  return current_signal_.GetNoArena();
}
inline void Object::set_current_signal(const ::std::string& value) {
  set_has_current_signal();
  current_signal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.current_signal)
}
#if LANG_CXX11
inline void Object::set_current_signal(::std::string&& value) {
  set_has_current_signal();
  current_signal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Object.current_signal)
}
#endif
inline void Object::set_current_signal(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_current_signal();
  current_signal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Object.current_signal)
}
inline void Object::set_current_signal(const char* value, size_t size) {
  set_has_current_signal();
  current_signal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Object.current_signal)
}
inline ::std::string* Object::mutable_current_signal() {
  set_has_current_signal();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.current_signal)
  return current_signal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_current_signal() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Object.current_signal)
  clear_has_current_signal();
  return current_signal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_current_signal(::std::string* current_signal) {
  if (current_signal != NULL) {
    set_has_current_signal();
  } else {
    clear_has_current_signal();
  }
  current_signal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_signal);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Object.current_signal)
}

// optional double timestamp_sec = 19;
inline bool Object::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Object::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Object::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Object::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
inline double Object::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.timestamp_sec)
  return timestamp_sec_;
}
inline void Object::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.timestamp_sec)
}

// repeated .apollo.dreamview.Decision decision = 20;
inline int Object::decision_size() const {
  return decision_.size();
}
inline void Object::clear_decision() {
  decision_.Clear();
}
inline const ::apollo::dreamview::Decision& Object::decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.decision)
  return decision_.Get(index);
}
inline ::apollo::dreamview::Decision* Object::mutable_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.decision)
  return decision_.Mutable(index);
}
inline ::apollo::dreamview::Decision* Object::add_decision() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.decision)
  return decision_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Decision >*
Object::mutable_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Object.decision)
  return &decision_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Decision >&
Object::decision() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Object.decision)
  return decision_;
}

// optional .apollo.planning.DecisionResult adc_decision_result = 29;
inline bool Object::has_adc_decision_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Object::set_has_adc_decision_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Object::clear_has_adc_decision_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Object::clear_adc_decision_result() {
  if (adc_decision_result_ != NULL) adc_decision_result_->::apollo::planning::DecisionResult::Clear();
  clear_has_adc_decision_result();
}
inline const ::apollo::planning::DecisionResult& Object::adc_decision_result() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.adc_decision_result)
  return adc_decision_result_ != NULL ? *adc_decision_result_
                         : *::apollo::planning::DecisionResult::internal_default_instance();
}
inline ::apollo::planning::DecisionResult* Object::mutable_adc_decision_result() {
  set_has_adc_decision_result();
  if (adc_decision_result_ == NULL) {
    adc_decision_result_ = new ::apollo::planning::DecisionResult;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.adc_decision_result)
  return adc_decision_result_;
}
inline ::apollo::planning::DecisionResult* Object::release_adc_decision_result() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Object.adc_decision_result)
  clear_has_adc_decision_result();
  ::apollo::planning::DecisionResult* temp = adc_decision_result_;
  adc_decision_result_ = NULL;
  return temp;
}
inline void Object::set_allocated_adc_decision_result(::apollo::planning::DecisionResult* adc_decision_result) {
  delete adc_decision_result_;
  adc_decision_result_ = adc_decision_result;
  if (adc_decision_result) {
    set_has_adc_decision_result();
  } else {
    clear_has_adc_decision_result();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Object.adc_decision_result)
}

// optional .apollo.planning.ADCTrajectory adc_trajectory = 31;
inline bool Object::has_adc_trajectory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Object::set_has_adc_trajectory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Object::clear_has_adc_trajectory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Object::clear_adc_trajectory() {
  if (adc_trajectory_ != NULL) adc_trajectory_->::apollo::planning::ADCTrajectory::Clear();
  clear_has_adc_trajectory();
}
inline const ::apollo::planning::ADCTrajectory& Object::adc_trajectory() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.adc_trajectory)
  return adc_trajectory_ != NULL ? *adc_trajectory_
                         : *::apollo::planning::ADCTrajectory::internal_default_instance();
}
inline ::apollo::planning::ADCTrajectory* Object::mutable_adc_trajectory() {
  set_has_adc_trajectory();
  if (adc_trajectory_ == NULL) {
    adc_trajectory_ = new ::apollo::planning::ADCTrajectory;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.adc_trajectory)
  return adc_trajectory_;
}
inline ::apollo::planning::ADCTrajectory* Object::release_adc_trajectory() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Object.adc_trajectory)
  clear_has_adc_trajectory();
  ::apollo::planning::ADCTrajectory* temp = adc_trajectory_;
  adc_trajectory_ = NULL;
  return temp;
}
inline void Object::set_allocated_adc_trajectory(::apollo::planning::ADCTrajectory* adc_trajectory) {
  delete adc_trajectory_;
  adc_trajectory_ = adc_trajectory;
  if (adc_trajectory) {
    set_has_adc_trajectory();
  } else {
    clear_has_adc_trajectory();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Object.adc_trajectory)
}

// optional double throttle_percentage = 21;
inline bool Object::has_throttle_percentage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Object::set_has_throttle_percentage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Object::clear_has_throttle_percentage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Object::clear_throttle_percentage() {
  throttle_percentage_ = 0;
  clear_has_throttle_percentage();
}
inline double Object::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.throttle_percentage)
  return throttle_percentage_;
}
inline void Object::set_throttle_percentage(double value) {
  set_has_throttle_percentage();
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.throttle_percentage)
}

// optional double brake_percentage = 22;
inline bool Object::has_brake_percentage() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Object::set_has_brake_percentage() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Object::clear_has_brake_percentage() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Object::clear_brake_percentage() {
  brake_percentage_ = 0;
  clear_has_brake_percentage();
}
inline double Object::brake_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.brake_percentage)
  return brake_percentage_;
}
inline void Object::set_brake_percentage(double value) {
  set_has_brake_percentage();
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.brake_percentage)
}

// optional double steering_angle = 23;
inline bool Object::has_steering_angle() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Object::set_has_steering_angle() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Object::clear_has_steering_angle() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Object::clear_steering_angle() {
  steering_angle_ = 0;
  clear_has_steering_angle();
}
inline double Object::steering_angle() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.steering_angle)
  return steering_angle_;
}
inline void Object::set_steering_angle(double value) {
  set_has_steering_angle();
  steering_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.steering_angle)
}

// optional .apollo.dreamview.Object.DisengageType disengage_type = 24;
inline bool Object::has_disengage_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Object::set_has_disengage_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Object::clear_has_disengage_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Object::clear_disengage_type() {
  disengage_type_ = 0;
  clear_has_disengage_type();
}
inline ::apollo::dreamview::Object_DisengageType Object::disengage_type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.disengage_type)
  return static_cast< ::apollo::dreamview::Object_DisengageType >(disengage_type_);
}
inline void Object::set_disengage_type(::apollo::dreamview::Object_DisengageType value) {
  assert(::apollo::dreamview::Object_DisengageType_IsValid(value));
  set_has_disengage_type();
  disengage_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.disengage_type)
}

// optional .apollo.dreamview.Object.Type type = 25;
inline bool Object::has_type() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Object::set_has_type() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Object::clear_has_type() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Object::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::dreamview::Object_Type Object::type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.type)
  return static_cast< ::apollo::dreamview::Object_Type >(type_);
}
inline void Object::set_type(::apollo::dreamview::Object_Type value) {
  assert(::apollo::dreamview::Object_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.type)
}

// repeated .apollo.dreamview.Prediction prediction = 26;
inline int Object::prediction_size() const {
  return prediction_.size();
}
inline void Object::clear_prediction() {
  prediction_.Clear();
}
inline const ::apollo::dreamview::Prediction& Object::prediction(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.prediction)
  return prediction_.Get(index);
}
inline ::apollo::dreamview::Prediction* Object::mutable_prediction(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.prediction)
  return prediction_.Mutable(index);
}
inline ::apollo::dreamview::Prediction* Object::add_prediction() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.prediction)
  return prediction_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Prediction >*
Object::mutable_prediction() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Object.prediction)
  return &prediction_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Prediction >&
Object::prediction() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Object.prediction)
  return prediction_;
}

// optional double confidence = 27 [default = 1];
inline bool Object::has_confidence() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Object::set_has_confidence() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Object::clear_has_confidence() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Object::clear_confidence() {
  confidence_ = 1;
  clear_has_confidence();
}
inline double Object::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.confidence)
  return confidence_;
}
inline void Object::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.confidence)
}

// -------------------------------------------------------------------

// DelaysInMs

// optional double chassis = 1;
inline bool DelaysInMs::has_chassis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelaysInMs::set_has_chassis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelaysInMs::clear_has_chassis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelaysInMs::clear_chassis() {
  chassis_ = 0;
  clear_has_chassis();
}
inline double DelaysInMs::chassis() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.chassis)
  return chassis_;
}
inline void DelaysInMs::set_chassis(double value) {
  set_has_chassis();
  chassis_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.chassis)
}

// optional double localization = 3;
inline bool DelaysInMs::has_localization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelaysInMs::set_has_localization() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelaysInMs::clear_has_localization() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelaysInMs::clear_localization() {
  localization_ = 0;
  clear_has_localization();
}
inline double DelaysInMs::localization() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.localization)
  return localization_;
}
inline void DelaysInMs::set_localization(double value) {
  set_has_localization();
  localization_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.localization)
}

// optional double perception_obstacle = 4;
inline bool DelaysInMs::has_perception_obstacle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelaysInMs::set_has_perception_obstacle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelaysInMs::clear_has_perception_obstacle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelaysInMs::clear_perception_obstacle() {
  perception_obstacle_ = 0;
  clear_has_perception_obstacle();
}
inline double DelaysInMs::perception_obstacle() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.perception_obstacle)
  return perception_obstacle_;
}
inline void DelaysInMs::set_perception_obstacle(double value) {
  set_has_perception_obstacle();
  perception_obstacle_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.perception_obstacle)
}

// optional double planning = 5;
inline bool DelaysInMs::has_planning() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DelaysInMs::set_has_planning() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DelaysInMs::clear_has_planning() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DelaysInMs::clear_planning() {
  planning_ = 0;
  clear_has_planning();
}
inline double DelaysInMs::planning() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.planning)
  return planning_;
}
inline void DelaysInMs::set_planning(double value) {
  set_has_planning();
  planning_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.planning)
}

// optional double prediction = 7;
inline bool DelaysInMs::has_prediction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DelaysInMs::set_has_prediction() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DelaysInMs::clear_has_prediction() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DelaysInMs::clear_prediction() {
  prediction_ = 0;
  clear_has_prediction();
}
inline double DelaysInMs::prediction() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.prediction)
  return prediction_;
}
inline void DelaysInMs::set_prediction(double value) {
  set_has_prediction();
  prediction_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.prediction)
}

// optional double traffic_light = 8;
inline bool DelaysInMs::has_traffic_light() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DelaysInMs::set_has_traffic_light() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DelaysInMs::clear_has_traffic_light() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DelaysInMs::clear_traffic_light() {
  traffic_light_ = 0;
  clear_has_traffic_light();
}
inline double DelaysInMs::traffic_light() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.traffic_light)
  return traffic_light_;
}
inline void DelaysInMs::set_traffic_light(double value) {
  set_has_traffic_light();
  traffic_light_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.traffic_light)
}

// -------------------------------------------------------------------

// RoutePath

// repeated .apollo.dreamview.PolygonPoint point = 1;
inline int RoutePath::point_size() const {
  return point_.size();
}
inline void RoutePath::clear_point() {
  point_.Clear();
}
inline const ::apollo::dreamview::PolygonPoint& RoutePath::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.RoutePath.point)
  return point_.Get(index);
}
inline ::apollo::dreamview::PolygonPoint* RoutePath::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.RoutePath.point)
  return point_.Mutable(index);
}
inline ::apollo::dreamview::PolygonPoint* RoutePath::add_point() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.RoutePath.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
RoutePath::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.RoutePath.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
RoutePath::point() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.RoutePath.point)
  return point_;
}

// -------------------------------------------------------------------

// Latency

// optional double planning = 1;
inline bool Latency::has_planning() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Latency::set_has_planning() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Latency::clear_has_planning() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Latency::clear_planning() {
  planning_ = 0;
  clear_has_planning();
}
inline double Latency::planning() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Latency.planning)
  return planning_;
}
inline void Latency::set_planning(double value) {
  set_has_planning();
  planning_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Latency.planning)
}

// -------------------------------------------------------------------

// SimulationWorld

// optional double timestamp_sec = 1;
inline bool SimulationWorld::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SimulationWorld::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SimulationWorld::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SimulationWorld::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
inline double SimulationWorld::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.timestamp_sec)
  return timestamp_sec_;
}
inline void SimulationWorld::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.timestamp_sec)
}

// optional uint32 sequence_num = 2;
inline bool SimulationWorld::has_sequence_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SimulationWorld::set_has_sequence_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SimulationWorld::clear_has_sequence_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SimulationWorld::clear_sequence_num() {
  sequence_num_ = 0u;
  clear_has_sequence_num();
}
inline ::google::protobuf::uint32 SimulationWorld::sequence_num() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.sequence_num)
  return sequence_num_;
}
inline void SimulationWorld::set_sequence_num(::google::protobuf::uint32 value) {
  set_has_sequence_num();
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.sequence_num)
}

// repeated .apollo.dreamview.Object object = 3;
inline int SimulationWorld::object_size() const {
  return object_.size();
}
inline void SimulationWorld::clear_object() {
  object_.Clear();
}
inline const ::apollo::dreamview::Object& SimulationWorld::object(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.object)
  return object_.Get(index);
}
inline ::apollo::dreamview::Object* SimulationWorld::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.object)
  return object_.Mutable(index);
}
inline ::apollo::dreamview::Object* SimulationWorld::add_object() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimulationWorld.object)
  return object_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object >*
SimulationWorld::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimulationWorld.object)
  return &object_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object >&
SimulationWorld::object() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimulationWorld.object)
  return object_;
}

// optional .apollo.dreamview.Object auto_driving_car = 4;
inline bool SimulationWorld::has_auto_driving_car() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimulationWorld::set_has_auto_driving_car() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimulationWorld::clear_has_auto_driving_car() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimulationWorld::clear_auto_driving_car() {
  if (auto_driving_car_ != NULL) auto_driving_car_->::apollo::dreamview::Object::Clear();
  clear_has_auto_driving_car();
}
inline const ::apollo::dreamview::Object& SimulationWorld::auto_driving_car() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.auto_driving_car)
  return auto_driving_car_ != NULL ? *auto_driving_car_
                         : *::apollo::dreamview::Object::internal_default_instance();
}
inline ::apollo::dreamview::Object* SimulationWorld::mutable_auto_driving_car() {
  set_has_auto_driving_car();
  if (auto_driving_car_ == NULL) {
    auto_driving_car_ = new ::apollo::dreamview::Object;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.auto_driving_car)
  return auto_driving_car_;
}
inline ::apollo::dreamview::Object* SimulationWorld::release_auto_driving_car() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.auto_driving_car)
  clear_has_auto_driving_car();
  ::apollo::dreamview::Object* temp = auto_driving_car_;
  auto_driving_car_ = NULL;
  return temp;
}
inline void SimulationWorld::set_allocated_auto_driving_car(::apollo::dreamview::Object* auto_driving_car) {
  delete auto_driving_car_;
  auto_driving_car_ = auto_driving_car;
  if (auto_driving_car) {
    set_has_auto_driving_car();
  } else {
    clear_has_auto_driving_car();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.auto_driving_car)
}

// optional .apollo.dreamview.Object traffic_signal = 6;
inline bool SimulationWorld::has_traffic_signal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimulationWorld::set_has_traffic_signal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimulationWorld::clear_has_traffic_signal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimulationWorld::clear_traffic_signal() {
  if (traffic_signal_ != NULL) traffic_signal_->::apollo::dreamview::Object::Clear();
  clear_has_traffic_signal();
}
inline const ::apollo::dreamview::Object& SimulationWorld::traffic_signal() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.traffic_signal)
  return traffic_signal_ != NULL ? *traffic_signal_
                         : *::apollo::dreamview::Object::internal_default_instance();
}
inline ::apollo::dreamview::Object* SimulationWorld::mutable_traffic_signal() {
  set_has_traffic_signal();
  if (traffic_signal_ == NULL) {
    traffic_signal_ = new ::apollo::dreamview::Object;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.traffic_signal)
  return traffic_signal_;
}
inline ::apollo::dreamview::Object* SimulationWorld::release_traffic_signal() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.traffic_signal)
  clear_has_traffic_signal();
  ::apollo::dreamview::Object* temp = traffic_signal_;
  traffic_signal_ = NULL;
  return temp;
}
inline void SimulationWorld::set_allocated_traffic_signal(::apollo::dreamview::Object* traffic_signal) {
  delete traffic_signal_;
  traffic_signal_ = traffic_signal;
  if (traffic_signal) {
    set_has_traffic_signal();
  } else {
    clear_has_traffic_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.traffic_signal)
}

// repeated .apollo.dreamview.RoutePath route_path = 7;
inline int SimulationWorld::route_path_size() const {
  return route_path_.size();
}
inline void SimulationWorld::clear_route_path() {
  route_path_.Clear();
}
inline const ::apollo::dreamview::RoutePath& SimulationWorld::route_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.route_path)
  return route_path_.Get(index);
}
inline ::apollo::dreamview::RoutePath* SimulationWorld::mutable_route_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.route_path)
  return route_path_.Mutable(index);
}
inline ::apollo::dreamview::RoutePath* SimulationWorld::add_route_path() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimulationWorld.route_path)
  return route_path_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::RoutePath >*
SimulationWorld::mutable_route_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimulationWorld.route_path)
  return &route_path_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::RoutePath >&
SimulationWorld::route_path() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimulationWorld.route_path)
  return route_path_;
}

// optional double routing_time = 8;
inline bool SimulationWorld::has_routing_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SimulationWorld::set_has_routing_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SimulationWorld::clear_has_routing_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SimulationWorld::clear_routing_time() {
  routing_time_ = 0;
  clear_has_routing_time();
}
inline double SimulationWorld::routing_time() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.routing_time)
  return routing_time_;
}
inline void SimulationWorld::set_routing_time(double value) {
  set_has_routing_time();
  routing_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.routing_time)
}

// repeated .apollo.dreamview.Object planning_trajectory = 9;
inline int SimulationWorld::planning_trajectory_size() const {
  return planning_trajectory_.size();
}
inline void SimulationWorld::clear_planning_trajectory() {
  planning_trajectory_.Clear();
}
inline const ::apollo::dreamview::Object& SimulationWorld::planning_trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.planning_trajectory)
  return planning_trajectory_.Get(index);
}
inline ::apollo::dreamview::Object* SimulationWorld::mutable_planning_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.planning_trajectory)
  return planning_trajectory_.Mutable(index);
}
inline ::apollo::dreamview::Object* SimulationWorld::add_planning_trajectory() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimulationWorld.planning_trajectory)
  return planning_trajectory_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object >*
SimulationWorld::mutable_planning_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimulationWorld.planning_trajectory)
  return &planning_trajectory_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Object >&
SimulationWorld::planning_trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimulationWorld.planning_trajectory)
  return planning_trajectory_;
}

// optional .apollo.dreamview.Object main_stop = 10;
inline bool SimulationWorld::has_main_stop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimulationWorld::set_has_main_stop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimulationWorld::clear_has_main_stop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SimulationWorld::clear_main_stop() {
  if (main_stop_ != NULL) main_stop_->::apollo::dreamview::Object::Clear();
  clear_has_main_stop();
}
inline const ::apollo::dreamview::Object& SimulationWorld::main_stop() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.main_stop)
  return main_stop_ != NULL ? *main_stop_
                         : *::apollo::dreamview::Object::internal_default_instance();
}
inline ::apollo::dreamview::Object* SimulationWorld::mutable_main_stop() {
  set_has_main_stop();
  if (main_stop_ == NULL) {
    main_stop_ = new ::apollo::dreamview::Object;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.main_stop)
  return main_stop_;
}
inline ::apollo::dreamview::Object* SimulationWorld::release_main_stop() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.main_stop)
  clear_has_main_stop();
  ::apollo::dreamview::Object* temp = main_stop_;
  main_stop_ = NULL;
  return temp;
}
inline void SimulationWorld::set_allocated_main_stop(::apollo::dreamview::Object* main_stop) {
  delete main_stop_;
  main_stop_ = main_stop;
  if (main_stop) {
    set_has_main_stop();
  } else {
    clear_has_main_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.main_stop)
}

// optional double speed_limit = 11;
inline bool SimulationWorld::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SimulationWorld::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SimulationWorld::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SimulationWorld::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
inline double SimulationWorld::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.speed_limit)
  return speed_limit_;
}
inline void SimulationWorld::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.speed_limit)
}

// optional .apollo.dreamview.DelaysInMs delay = 12;
inline bool SimulationWorld::has_delay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimulationWorld::set_has_delay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SimulationWorld::clear_has_delay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SimulationWorld::clear_delay() {
  if (delay_ != NULL) delay_->::apollo::dreamview::DelaysInMs::Clear();
  clear_has_delay();
}
inline const ::apollo::dreamview::DelaysInMs& SimulationWorld::delay() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.delay)
  return delay_ != NULL ? *delay_
                         : *::apollo::dreamview::DelaysInMs::internal_default_instance();
}
inline ::apollo::dreamview::DelaysInMs* SimulationWorld::mutable_delay() {
  set_has_delay();
  if (delay_ == NULL) {
    delay_ = new ::apollo::dreamview::DelaysInMs;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.delay)
  return delay_;
}
inline ::apollo::dreamview::DelaysInMs* SimulationWorld::release_delay() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.delay)
  clear_has_delay();
  ::apollo::dreamview::DelaysInMs* temp = delay_;
  delay_ = NULL;
  return temp;
}
inline void SimulationWorld::set_allocated_delay(::apollo::dreamview::DelaysInMs* delay) {
  delete delay_;
  delay_ = delay;
  if (delay) {
    set_has_delay();
  } else {
    clear_has_delay();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.delay)
}

// optional .apollo.common.monitor.MonitorMessage monitor = 13;
inline bool SimulationWorld::has_monitor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimulationWorld::set_has_monitor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SimulationWorld::clear_has_monitor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SimulationWorld::clear_monitor() {
  if (monitor_ != NULL) monitor_->::apollo::common::monitor::MonitorMessage::Clear();
  clear_has_monitor();
}
inline const ::apollo::common::monitor::MonitorMessage& SimulationWorld::monitor() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.monitor)
  return monitor_ != NULL ? *monitor_
                         : *::apollo::common::monitor::MonitorMessage::internal_default_instance();
}
inline ::apollo::common::monitor::MonitorMessage* SimulationWorld::mutable_monitor() {
  set_has_monitor();
  if (monitor_ == NULL) {
    monitor_ = new ::apollo::common::monitor::MonitorMessage;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.monitor)
  return monitor_;
}
inline ::apollo::common::monitor::MonitorMessage* SimulationWorld::release_monitor() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.monitor)
  clear_has_monitor();
  ::apollo::common::monitor::MonitorMessage* temp = monitor_;
  monitor_ = NULL;
  return temp;
}
inline void SimulationWorld::set_allocated_monitor(::apollo::common::monitor::MonitorMessage* monitor) {
  delete monitor_;
  monitor_ = monitor;
  if (monitor) {
    set_has_monitor();
  } else {
    clear_has_monitor();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.monitor)
}

// optional .apollo.dreamview.Latency latency = 15;
inline bool SimulationWorld::has_latency() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimulationWorld::set_has_latency() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SimulationWorld::clear_has_latency() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SimulationWorld::clear_latency() {
  if (latency_ != NULL) latency_->::apollo::dreamview::Latency::Clear();
  clear_has_latency();
}
inline const ::apollo::dreamview::Latency& SimulationWorld::latency() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.latency)
  return latency_ != NULL ? *latency_
                         : *::apollo::dreamview::Latency::internal_default_instance();
}
inline ::apollo::dreamview::Latency* SimulationWorld::mutable_latency() {
  set_has_latency();
  if (latency_ == NULL) {
    latency_ = new ::apollo::dreamview::Latency;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.latency)
  return latency_;
}
inline ::apollo::dreamview::Latency* SimulationWorld::release_latency() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.latency)
  clear_has_latency();
  ::apollo::dreamview::Latency* temp = latency_;
  latency_ = NULL;
  return temp;
}
inline void SimulationWorld::set_allocated_latency(::apollo::dreamview::Latency* latency) {
  delete latency_;
  latency_ = latency;
  if (latency) {
    set_has_latency();
  } else {
    clear_has_latency();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.latency)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dreamview
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::dreamview::Decision_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::Decision_Type>() {
  return ::apollo::dreamview::Decision_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::dreamview::Decision_StopReasonCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::Decision_StopReasonCode>() {
  return ::apollo::dreamview::Decision_StopReasonCode_descriptor();
}
template <> struct is_proto_enum< ::apollo::dreamview::Object_DisengageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::Object_DisengageType>() {
  return ::apollo::dreamview::Object_DisengageType_descriptor();
}
template <> struct is_proto_enum< ::apollo::dreamview::Object_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::Object_Type>() {
  return ::apollo::dreamview::Object_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto__INCLUDED
