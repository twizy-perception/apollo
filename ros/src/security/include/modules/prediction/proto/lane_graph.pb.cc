// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/lane_graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/prediction/proto/lane_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace prediction {
class LanePointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LanePoint> {
} _LanePoint_default_instance_;
class LaneSegmentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneSegment> {
} _LaneSegment_default_instance_;
class NearbyObstacleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NearbyObstacle> {
} _NearbyObstacle_default_instance_;
class LaneSequenceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneSequence> {
} _LaneSequence_default_instance_;
class LaneGraphDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneGraph> {
} _LaneGraph_default_instance_;

namespace protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, relative_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, relative_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePoint, angle_diff_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, end_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, lane_turn_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, lane_point_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyObstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyObstacle, s_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, lane_sequence_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, lane_segment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, nearby_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSequence, acceleration_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneGraph, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneGraph, lane_sequence_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(LanePoint)},
  { 17, 27, sizeof(LaneSegment)},
  { 32, 39, sizeof(NearbyObstacle)},
  { 41, 53, sizeof(LaneSequence)},
  { 60, 66, sizeof(LaneGraph)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LanePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NearbyObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneSequence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneGraph_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/prediction/proto/lane_graph.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _LanePoint_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LaneSegment_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _NearbyObstacle_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LaneSequence_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _LaneGraph_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  _LanePoint_default_instance_.DefaultConstruct();
  _LaneSegment_default_instance_.DefaultConstruct();
  _NearbyObstacle_default_instance_.DefaultConstruct();
  _LaneSequence_default_instance_.DefaultConstruct();
  _LaneGraph_default_instance_.DefaultConstruct();
  _LanePoint_default_instance_.get_mutable()->position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n)modules/prediction/proto/lane_graph.pr"
      "oto\022\021apollo.prediction\032#modules/common/p"
      "roto/geometry.proto\"\240\001\n\tLanePoint\022(\n\010pos"
      "ition\030\001 \001(\0132\026.apollo.common.Point3D\022\022\n\007h"
      "eading\030\002 \001(\001:\0010\022\020\n\005width\030\003 \001(\001:\0010\022\025\n\nrel"
      "ative_s\030\004 \001(\001:\0010\022\025\n\nrelative_l\030\005 \001(\001:\0010\022"
      "\025\n\nangle_diff\030\006 \001(\001:\0010\"\221\001\n\013LaneSegment\022\017"
      "\n\007lane_id\030\001 \001(\t\022\022\n\007start_s\030\002 \001(\001:\0010\022\020\n\005e"
      "nd_s\030\003 \001(\001:\0010\022\031\n\016lane_turn_type\030\004 \001(\r:\0010"
      "\0220\n\nlane_point\030\005 \003(\0132\034.apollo.prediction"
      ".LanePoint\"\'\n\016NearbyObstacle\022\n\n\002id\030\001 \001(\005"
      "\022\t\n\001s\030\002 \001(\001\"\357\001\n\014LaneSequence\022\030\n\020lane_seq"
      "uence_id\030\001 \001(\005\0224\n\014lane_segment\030\002 \003(\0132\036.a"
      "pollo.prediction.LaneSegment\022:\n\017nearby_o"
      "bstacle\030\003 \003(\0132!.apollo.prediction.Nearby"
      "Obstacle\022\020\n\010features\030\004 \003(\001\022\020\n\005label\030\005 \001("
      "\005:\0010\022\026\n\013probability\030\006 \001(\001:\0010\022\027\n\014accelera"
      "tion\030\007 \001(\001:\0010\"C\n\tLaneGraph\0226\n\rlane_seque"
      "nce\030\001 \003(\0132\037.apollo.prediction.LaneSequen"
      "ce"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 762);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/prediction/proto/lane_graph.proto", &protobuf_RegisterTypes);
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LanePoint::kPositionFieldNumber;
const int LanePoint::kHeadingFieldNumber;
const int LanePoint::kWidthFieldNumber;
const int LanePoint::kRelativeSFieldNumber;
const int LanePoint::kRelativeLFieldNumber;
const int LanePoint::kAngleDiffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LanePoint::LanePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LanePoint)
}
LanePoint::LanePoint(const LanePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::apollo::common::Point3D(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&heading_, &from.heading_,
    reinterpret_cast<char*>(&angle_diff_) -
    reinterpret_cast<char*>(&heading_) + sizeof(angle_diff_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LanePoint)
}

void LanePoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&angle_diff_) -
    reinterpret_cast<char*>(&position_) + sizeof(angle_diff_));
}

LanePoint::~LanePoint() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LanePoint)
  SharedDtor();
}

void LanePoint::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
}

void LanePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LanePoint::descriptor() {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LanePoint& LanePoint::default_instance() {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

LanePoint* LanePoint::New(::google::protobuf::Arena* arena) const {
  LanePoint* n = new LanePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LanePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LanePoint)
  if (has_position()) {
    GOOGLE_DCHECK(position_ != NULL);
    position_->::apollo::common::Point3D::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&heading_, 0, reinterpret_cast<char*>(&angle_diff_) -
      reinterpret_cast<char*>(&heading_) + sizeof(angle_diff_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LanePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LanePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Point3D position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_s = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_relative_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_l = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_relative_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double angle_diff = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_angle_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LanePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LanePoint)
  return false;
#undef DO_
}

void LanePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LanePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Point3D position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional double heading = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->heading(), output);
  }

  // optional double width = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->width(), output);
  }

  // optional double relative_s = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relative_s(), output);
  }

  // optional double relative_l = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->relative_l(), output);
  }

  // optional double angle_diff = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->angle_diff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LanePoint)
}

::google::protobuf::uint8* LanePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LanePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Point3D position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, deterministic, target);
  }

  // optional double heading = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->heading(), target);
  }

  // optional double width = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->width(), target);
  }

  // optional double relative_s = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->relative_s(), target);
  }

  // optional double relative_l = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->relative_l(), target);
  }

  // optional double angle_diff = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->angle_diff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LanePoint)
  return target;
}

size_t LanePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LanePoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .apollo.common.Point3D position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional double heading = 2 [default = 0];
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double width = 3 [default = 0];
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double relative_s = 4 [default = 0];
    if (has_relative_s()) {
      total_size += 1 + 8;
    }

    // optional double relative_l = 5 [default = 0];
    if (has_relative_l()) {
      total_size += 1 + 8;
    }

    // optional double angle_diff = 6 [default = 0];
    if (has_angle_diff()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LanePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LanePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LanePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LanePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LanePoint)
    MergeFrom(*source);
  }
}

void LanePoint::MergeFrom(const LanePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LanePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::apollo::common::Point3D::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      relative_s_ = from.relative_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      relative_l_ = from.relative_l_;
    }
    if (cached_has_bits & 0x00000020u) {
      angle_diff_ = from.angle_diff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LanePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LanePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanePoint::CopyFrom(const LanePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LanePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanePoint::IsInitialized() const {
  return true;
}

void LanePoint::Swap(LanePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LanePoint::InternalSwap(LanePoint* other) {
  std::swap(position_, other->position_);
  std::swap(heading_, other->heading_);
  std::swap(width_, other->width_);
  std::swap(relative_s_, other->relative_s_);
  std::swap(relative_l_, other->relative_l_);
  std::swap(angle_diff_, other->angle_diff_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LanePoint::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LanePoint

// optional .apollo.common.Point3D position = 1;
bool LanePoint::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LanePoint::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void LanePoint::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void LanePoint::clear_position() {
  if (position_ != NULL) position_->::apollo::common::Point3D::Clear();
  clear_has_position();
}
const ::apollo::common::Point3D& LanePoint::position() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.position)
  return position_ != NULL ? *position_
                         : *::apollo::common::Point3D::internal_default_instance();
}
::apollo::common::Point3D* LanePoint::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LanePoint.position)
  return position_;
}
::apollo::common::Point3D* LanePoint::release_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LanePoint.position)
  clear_has_position();
  ::apollo::common::Point3D* temp = position_;
  position_ = NULL;
  return temp;
}
void LanePoint::set_allocated_position(::apollo::common::Point3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LanePoint.position)
}

// optional double heading = 2 [default = 0];
bool LanePoint::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LanePoint::set_has_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void LanePoint::clear_has_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void LanePoint::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
double LanePoint::heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.heading)
  return heading_;
}
void LanePoint::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.heading)
}

// optional double width = 3 [default = 0];
bool LanePoint::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LanePoint::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void LanePoint::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void LanePoint::clear_width() {
  width_ = 0;
  clear_has_width();
}
double LanePoint::width() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.width)
  return width_;
}
void LanePoint::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.width)
}

// optional double relative_s = 4 [default = 0];
bool LanePoint::has_relative_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LanePoint::set_has_relative_s() {
  _has_bits_[0] |= 0x00000008u;
}
void LanePoint::clear_has_relative_s() {
  _has_bits_[0] &= ~0x00000008u;
}
void LanePoint::clear_relative_s() {
  relative_s_ = 0;
  clear_has_relative_s();
}
double LanePoint::relative_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.relative_s)
  return relative_s_;
}
void LanePoint::set_relative_s(double value) {
  set_has_relative_s();
  relative_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.relative_s)
}

// optional double relative_l = 5 [default = 0];
bool LanePoint::has_relative_l() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LanePoint::set_has_relative_l() {
  _has_bits_[0] |= 0x00000010u;
}
void LanePoint::clear_has_relative_l() {
  _has_bits_[0] &= ~0x00000010u;
}
void LanePoint::clear_relative_l() {
  relative_l_ = 0;
  clear_has_relative_l();
}
double LanePoint::relative_l() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.relative_l)
  return relative_l_;
}
void LanePoint::set_relative_l(double value) {
  set_has_relative_l();
  relative_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.relative_l)
}

// optional double angle_diff = 6 [default = 0];
bool LanePoint::has_angle_diff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LanePoint::set_has_angle_diff() {
  _has_bits_[0] |= 0x00000020u;
}
void LanePoint::clear_has_angle_diff() {
  _has_bits_[0] &= ~0x00000020u;
}
void LanePoint::clear_angle_diff() {
  angle_diff_ = 0;
  clear_has_angle_diff();
}
double LanePoint::angle_diff() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.angle_diff)
  return angle_diff_;
}
void LanePoint::set_angle_diff(double value) {
  set_has_angle_diff();
  angle_diff_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.angle_diff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSegment::kLaneIdFieldNumber;
const int LaneSegment::kStartSFieldNumber;
const int LaneSegment::kEndSFieldNumber;
const int LaneSegment::kLaneTurnTypeFieldNumber;
const int LaneSegment::kLanePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSegment::LaneSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneSegment)
}
LaneSegment::LaneSegment(const LaneSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lane_point_(from.lane_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lane_id()) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&start_s_, &from.start_s_,
    reinterpret_cast<char*>(&lane_turn_type_) -
    reinterpret_cast<char*>(&start_s_) + sizeof(lane_turn_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneSegment)
}

void LaneSegment::SharedCtor() {
  _cached_size_ = 0;
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, reinterpret_cast<char*>(&lane_turn_type_) -
    reinterpret_cast<char*>(&start_s_) + sizeof(lane_turn_type_));
}

LaneSegment::~LaneSegment() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneSegment)
  SharedDtor();
}

void LaneSegment::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneSegment::descriptor() {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneSegment& LaneSegment::default_instance() {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneSegment* LaneSegment::New(::google::protobuf::Arena* arena) const {
  LaneSegment* n = new LaneSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneSegment)
  lane_point_.Clear();
  if (has_lane_id()) {
    GOOGLE_DCHECK(!lane_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*lane_id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&start_s_, 0, reinterpret_cast<char*>(&lane_turn_type_) -
      reinterpret_cast<char*>(&start_s_) + sizeof(lane_turn_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LaneSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), this->lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.LaneSegment.lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double start_s = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_start_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_s = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_end_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane_turn_type = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_lane_turn_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_turn_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.LanePoint lane_point = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LaneSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LaneSegment)
  return false;
#undef DO_
}

void LaneSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LaneSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneSegment.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // optional double start_s = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_s(), output);
  }

  // optional double end_s = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->end_s(), output);
  }

  // optional uint32 lane_turn_type = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lane_turn_type(), output);
  }

  // repeated .apollo.prediction.LanePoint lane_point = 5;
  for (unsigned int i = 0, n = this->lane_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lane_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LaneSegment)
}

::google::protobuf::uint8* LaneSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneSegment.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // optional double start_s = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_s(), target);
  }

  // optional double end_s = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->end_s(), target);
  }

  // optional uint32 lane_turn_type = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lane_turn_type(), target);
  }

  // repeated .apollo.prediction.LanePoint lane_point = 5;
  for (unsigned int i = 0, n = this->lane_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->lane_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneSegment)
  return target;
}

size_t LaneSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.prediction.LanePoint lane_point = 5;
  {
    unsigned int count = this->lane_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_point(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string lane_id = 1;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double start_s = 2 [default = 0];
    if (has_start_s()) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3 [default = 0];
    if (has_end_s()) {
      total_size += 1 + 8;
    }

    // optional uint32 lane_turn_type = 4 [default = 0];
    if (has_lane_turn_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane_turn_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneSegment)
    MergeFrom(*source);
  }
}

void LaneSegment::MergeFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_point_.MergeFrom(from.lane_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      lane_turn_type_ = from.lane_turn_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSegment::CopyFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegment::IsInitialized() const {
  return true;
}

void LaneSegment::Swap(LaneSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSegment::InternalSwap(LaneSegment* other) {
  lane_point_.InternalSwap(&other->lane_point_);
  lane_id_.Swap(&other->lane_id_);
  std::swap(start_s_, other->start_s_);
  std::swap(end_s_, other->end_s_);
  std::swap(lane_turn_type_, other->lane_turn_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneSegment::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneSegment

// optional string lane_id = 1;
bool LaneSegment::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneSegment::set_has_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneSegment::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneSegment::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
const ::std::string& LaneSegment::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_id)
  return lane_id_.GetNoArena();
}
void LaneSegment::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.lane_id)
}
#if LANG_CXX11
void LaneSegment::set_lane_id(::std::string&& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.LaneSegment.lane_id)
}
#endif
void LaneSegment::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.LaneSegment.lane_id)
}
void LaneSegment::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.LaneSegment.lane_id)
}
::std::string* LaneSegment::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSegment.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LaneSegment::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LaneSegment.lane_id)
  clear_has_lane_id();
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LaneSegment::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LaneSegment.lane_id)
}

// optional double start_s = 2 [default = 0];
bool LaneSegment::has_start_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneSegment::set_has_start_s() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneSegment::clear_has_start_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneSegment::clear_start_s() {
  start_s_ = 0;
  clear_has_start_s();
}
double LaneSegment::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.start_s)
  return start_s_;
}
void LaneSegment::set_start_s(double value) {
  set_has_start_s();
  start_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.start_s)
}

// optional double end_s = 3 [default = 0];
bool LaneSegment::has_end_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneSegment::set_has_end_s() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneSegment::clear_has_end_s() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneSegment::clear_end_s() {
  end_s_ = 0;
  clear_has_end_s();
}
double LaneSegment::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.end_s)
  return end_s_;
}
void LaneSegment::set_end_s(double value) {
  set_has_end_s();
  end_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.end_s)
}

// optional uint32 lane_turn_type = 4 [default = 0];
bool LaneSegment::has_lane_turn_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaneSegment::set_has_lane_turn_type() {
  _has_bits_[0] |= 0x00000008u;
}
void LaneSegment::clear_has_lane_turn_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaneSegment::clear_lane_turn_type() {
  lane_turn_type_ = 0u;
  clear_has_lane_turn_type();
}
::google::protobuf::uint32 LaneSegment::lane_turn_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_turn_type)
  return lane_turn_type_;
}
void LaneSegment::set_lane_turn_type(::google::protobuf::uint32 value) {
  set_has_lane_turn_type();
  lane_turn_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.lane_turn_type)
}

// repeated .apollo.prediction.LanePoint lane_point = 5;
int LaneSegment::lane_point_size() const {
  return lane_point_.size();
}
void LaneSegment::clear_lane_point() {
  lane_point_.Clear();
}
const ::apollo::prediction::LanePoint& LaneSegment::lane_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_point)
  return lane_point_.Get(index);
}
::apollo::prediction::LanePoint* LaneSegment::mutable_lane_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSegment.lane_point)
  return lane_point_.Mutable(index);
}
::apollo::prediction::LanePoint* LaneSegment::add_lane_point() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSegment.lane_point)
  return lane_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
LaneSegment::mutable_lane_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSegment.lane_point)
  return &lane_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
LaneSegment::lane_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSegment.lane_point)
  return lane_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NearbyObstacle::kIdFieldNumber;
const int NearbyObstacle::kSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NearbyObstacle::NearbyObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.NearbyObstacle)
}
NearbyObstacle::NearbyObstacle(const NearbyObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&s_) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.NearbyObstacle)
}

void NearbyObstacle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&s_) + sizeof(id_));
}

NearbyObstacle::~NearbyObstacle() {
  // @@protoc_insertion_point(destructor:apollo.prediction.NearbyObstacle)
  SharedDtor();
}

void NearbyObstacle::SharedDtor() {
}

void NearbyObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NearbyObstacle::descriptor() {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NearbyObstacle& NearbyObstacle::default_instance() {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

NearbyObstacle* NearbyObstacle::New(::google::protobuf::Arena* arena) const {
  NearbyObstacle* n = new NearbyObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NearbyObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.NearbyObstacle)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&s_, 0, reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&s_) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NearbyObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.NearbyObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.NearbyObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.NearbyObstacle)
  return false;
#undef DO_
}

void NearbyObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.NearbyObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double s = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.NearbyObstacle)
}

::google::protobuf::uint8* NearbyObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.NearbyObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double s = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.NearbyObstacle)
  return target;
}

size_t NearbyObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.NearbyObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double s = 2;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NearbyObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.NearbyObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const NearbyObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NearbyObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.NearbyObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.NearbyObstacle)
    MergeFrom(*source);
  }
}

void NearbyObstacle::MergeFrom(const NearbyObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.NearbyObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NearbyObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.NearbyObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearbyObstacle::CopyFrom(const NearbyObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.NearbyObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearbyObstacle::IsInitialized() const {
  return true;
}

void NearbyObstacle::Swap(NearbyObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NearbyObstacle::InternalSwap(NearbyObstacle* other) {
  std::swap(s_, other->s_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NearbyObstacle::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NearbyObstacle

// optional int32 id = 1;
bool NearbyObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NearbyObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void NearbyObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void NearbyObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 NearbyObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NearbyObstacle.id)
  return id_;
}
void NearbyObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.NearbyObstacle.id)
}

// optional double s = 2;
bool NearbyObstacle::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NearbyObstacle::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void NearbyObstacle::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void NearbyObstacle::clear_s() {
  s_ = 0;
  clear_has_s();
}
double NearbyObstacle::s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NearbyObstacle.s)
  return s_;
}
void NearbyObstacle::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.NearbyObstacle.s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSequence::kLaneSequenceIdFieldNumber;
const int LaneSequence::kLaneSegmentFieldNumber;
const int LaneSequence::kNearbyObstacleFieldNumber;
const int LaneSequence::kFeaturesFieldNumber;
const int LaneSequence::kLabelFieldNumber;
const int LaneSequence::kProbabilityFieldNumber;
const int LaneSequence::kAccelerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSequence::LaneSequence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneSequence)
}
LaneSequence::LaneSequence(const LaneSequence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lane_segment_(from.lane_segment_),
      nearby_obstacle_(from.nearby_obstacle_),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_sequence_id_, &from.lane_sequence_id_,
    reinterpret_cast<char*>(&acceleration_) -
    reinterpret_cast<char*>(&lane_sequence_id_) + sizeof(acceleration_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneSequence)
}

void LaneSequence::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lane_sequence_id_, 0, reinterpret_cast<char*>(&acceleration_) -
    reinterpret_cast<char*>(&lane_sequence_id_) + sizeof(acceleration_));
}

LaneSequence::~LaneSequence() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneSequence)
  SharedDtor();
}

void LaneSequence::SharedDtor() {
}

void LaneSequence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneSequence::descriptor() {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneSequence& LaneSequence::default_instance() {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneSequence* LaneSequence::New(::google::protobuf::Arena* arena) const {
  LaneSequence* n = new LaneSequence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneSequence)
  lane_segment_.Clear();
  nearby_obstacle_.Clear();
  features_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&lane_sequence_id_, 0, reinterpret_cast<char*>(&acceleration_) -
      reinterpret_cast<char*>(&lane_sequence_id_) + sizeof(acceleration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneSequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LaneSequence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lane_sequence_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lane_sequence_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.LaneSegment lane_segment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_segment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nearby_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double features = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33u, input, this->mutable_features())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_features())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 label = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double probability = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceleration = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LaneSequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LaneSequence)
  return false;
#undef DO_
}

void LaneSequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LaneSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_sequence_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lane_sequence_id(), output);
  }

  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  for (unsigned int i = 0, n = this->lane_segment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lane_segment(i), output);
  }

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  for (unsigned int i = 0, n = this->nearby_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nearby_obstacle(i), output);
  }

  // repeated double features = 4;
  for (int i = 0, n = this->features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->features(i), output);
  }

  // optional int32 label = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }

  // optional double probability = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->probability(), output);
  }

  // optional double acceleration = 7 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acceleration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LaneSequence)
}

::google::protobuf::uint8* LaneSequence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_sequence_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lane_sequence_id(), target);
  }

  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  for (unsigned int i = 0, n = this->lane_segment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lane_segment(i), deterministic, target);
  }

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  for (unsigned int i = 0, n = this->nearby_obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->nearby_obstacle(i), deterministic, target);
  }

  // repeated double features = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(4, this->features_, target);

  // optional int32 label = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }

  // optional double probability = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->probability(), target);
  }

  // optional double acceleration = 7 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acceleration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneSequence)
  return target;
}

size_t LaneSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneSequence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  {
    unsigned int count = this->lane_segment_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_segment(i));
    }
  }

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  {
    unsigned int count = this->nearby_obstacle_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nearby_obstacle(i));
    }
  }

  // repeated double features = 4;
  {
    unsigned int count = this->features_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->features_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 lane_sequence_id = 1;
    if (has_lane_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_sequence_id());
    }

    // optional int32 label = 5 [default = 0];
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional double probability = 6 [default = 0];
    if (has_probability()) {
      total_size += 1 + 8;
    }

    // optional double acceleration = 7 [default = 0];
    if (has_acceleration()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneSequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneSequence)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSequence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSequence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneSequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneSequence)
    MergeFrom(*source);
  }
}

void LaneSequence::MergeFrom(const LaneSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneSequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_segment_.MergeFrom(from.lane_segment_);
  nearby_obstacle_.MergeFrom(from.nearby_obstacle_);
  features_.MergeFrom(from.features_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      lane_sequence_id_ = from.lane_sequence_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000004u) {
      probability_ = from.probability_;
    }
    if (cached_has_bits & 0x00000008u) {
      acceleration_ = from.acceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneSequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSequence::CopyFrom(const LaneSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSequence::IsInitialized() const {
  return true;
}

void LaneSequence::Swap(LaneSequence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSequence::InternalSwap(LaneSequence* other) {
  lane_segment_.InternalSwap(&other->lane_segment_);
  nearby_obstacle_.InternalSwap(&other->nearby_obstacle_);
  features_.InternalSwap(&other->features_);
  std::swap(lane_sequence_id_, other->lane_sequence_id_);
  std::swap(label_, other->label_);
  std::swap(probability_, other->probability_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneSequence::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneSequence

// optional int32 lane_sequence_id = 1;
bool LaneSequence::has_lane_sequence_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneSequence::set_has_lane_sequence_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneSequence::clear_has_lane_sequence_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneSequence::clear_lane_sequence_id() {
  lane_sequence_id_ = 0;
  clear_has_lane_sequence_id();
}
::google::protobuf::int32 LaneSequence::lane_sequence_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.lane_sequence_id)
  return lane_sequence_id_;
}
void LaneSequence::set_lane_sequence_id(::google::protobuf::int32 value) {
  set_has_lane_sequence_id();
  lane_sequence_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.lane_sequence_id)
}

// repeated .apollo.prediction.LaneSegment lane_segment = 2;
int LaneSequence::lane_segment_size() const {
  return lane_segment_.size();
}
void LaneSequence::clear_lane_segment() {
  lane_segment_.Clear();
}
const ::apollo::prediction::LaneSegment& LaneSequence::lane_segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_.Get(index);
}
::apollo::prediction::LaneSegment* LaneSequence::mutable_lane_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_.Mutable(index);
}
::apollo::prediction::LaneSegment* LaneSequence::add_lane_segment() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment >*
LaneSequence::mutable_lane_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.lane_segment)
  return &lane_segment_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment >&
LaneSequence::lane_segment() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_;
}

// repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
int LaneSequence::nearby_obstacle_size() const {
  return nearby_obstacle_.size();
}
void LaneSequence::clear_nearby_obstacle() {
  nearby_obstacle_.Clear();
}
const ::apollo::prediction::NearbyObstacle& LaneSequence::nearby_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_.Get(index);
}
::apollo::prediction::NearbyObstacle* LaneSequence::mutable_nearby_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_.Mutable(index);
}
::apollo::prediction::NearbyObstacle* LaneSequence::add_nearby_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
LaneSequence::mutable_nearby_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.nearby_obstacle)
  return &nearby_obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
LaneSequence::nearby_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_;
}

// repeated double features = 4;
int LaneSequence::features_size() const {
  return features_.size();
}
void LaneSequence::clear_features() {
  features_.Clear();
}
double LaneSequence::features(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.features)
  return features_.Get(index);
}
void LaneSequence::set_features(int index, double value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.features)
}
void LaneSequence::add_features(double value) {
  features_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.features)
}
const ::google::protobuf::RepeatedField< double >&
LaneSequence::features() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.features)
  return features_;
}
::google::protobuf::RepeatedField< double >*
LaneSequence::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.features)
  return &features_;
}

// optional int32 label = 5 [default = 0];
bool LaneSequence::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneSequence::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneSequence::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneSequence::clear_label() {
  label_ = 0;
  clear_has_label();
}
::google::protobuf::int32 LaneSequence::label() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.label)
  return label_;
}
void LaneSequence::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.label)
}

// optional double probability = 6 [default = 0];
bool LaneSequence::has_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneSequence::set_has_probability() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneSequence::clear_has_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneSequence::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
double LaneSequence::probability() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.probability)
  return probability_;
}
void LaneSequence::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.probability)
}

// optional double acceleration = 7 [default = 0];
bool LaneSequence::has_acceleration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaneSequence::set_has_acceleration() {
  _has_bits_[0] |= 0x00000008u;
}
void LaneSequence::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaneSequence::clear_acceleration() {
  acceleration_ = 0;
  clear_has_acceleration();
}
double LaneSequence::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.acceleration)
  return acceleration_;
}
void LaneSequence::set_acceleration(double value) {
  set_has_acceleration();
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.acceleration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneGraph::kLaneSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneGraph::LaneGraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneGraph)
}
LaneGraph::LaneGraph(const LaneGraph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lane_sequence_(from.lane_sequence_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneGraph)
}

void LaneGraph::SharedCtor() {
  _cached_size_ = 0;
}

LaneGraph::~LaneGraph() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneGraph)
  SharedDtor();
}

void LaneGraph::SharedDtor() {
}

void LaneGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneGraph::descriptor() {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneGraph& LaneGraph::default_instance() {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneGraph* LaneGraph::New(::google::protobuf::Arena* arena) const {
  LaneGraph* n = new LaneGraph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneGraph)
  lane_sequence_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LaneGraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LaneGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LaneGraph)
  return false;
#undef DO_
}

void LaneGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LaneGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  for (unsigned int i = 0, n = this->lane_sequence_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lane_sequence(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LaneGraph)
}

::google::protobuf::uint8* LaneGraph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  for (unsigned int i = 0, n = this->lane_sequence_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lane_sequence(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneGraph)
  return target;
}

size_t LaneGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneGraph)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  {
    unsigned int count = this->lane_sequence_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_sequence(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneGraph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneGraph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneGraph)
    MergeFrom(*source);
  }
}

void LaneGraph::MergeFrom(const LaneGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_sequence_.MergeFrom(from.lane_sequence_);
}

void LaneGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneGraph::CopyFrom(const LaneGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneGraph::IsInitialized() const {
  return true;
}

void LaneGraph::Swap(LaneGraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneGraph::InternalSwap(LaneGraph* other) {
  lane_sequence_.InternalSwap(&other->lane_sequence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneGraph::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneGraph

// repeated .apollo.prediction.LaneSequence lane_sequence = 1;
int LaneGraph::lane_sequence_size() const {
  return lane_sequence_.size();
}
void LaneGraph::clear_lane_sequence() {
  lane_sequence_.Clear();
}
const ::apollo::prediction::LaneSequence& LaneGraph::lane_sequence(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_.Get(index);
}
::apollo::prediction::LaneSequence* LaneGraph::mutable_lane_sequence(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_.Mutable(index);
}
::apollo::prediction::LaneSequence* LaneGraph::add_lane_sequence() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence >*
LaneGraph::mutable_lane_sequence() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneGraph.lane_sequence)
  return &lane_sequence_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence >&
LaneGraph::lane_sequence() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
