// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/prediction_conf.proto

#ifndef PROTOBUF_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto__INCLUDED
#define PROTOBUF_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/perception/proto/perception_obstacle.pb.h"
// @@protoc_insertion_point(includes)
namespace apollo {
namespace perception {
class PerceptionObstacle;
class PerceptionObstacleDefaultTypeInternal;
extern PerceptionObstacleDefaultTypeInternal _PerceptionObstacle_default_instance_;
class PerceptionObstacles;
class PerceptionObstaclesDefaultTypeInternal;
extern PerceptionObstaclesDefaultTypeInternal _PerceptionObstacles_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
}  // namespace perception
namespace prediction {
class ObstacleConf;
class ObstacleConfDefaultTypeInternal;
extern ObstacleConfDefaultTypeInternal _ObstacleConf_default_instance_;
class PredictionConf;
class PredictionConfDefaultTypeInternal;
extern PredictionConfDefaultTypeInternal _PredictionConf_default_instance_;
}  // namespace prediction
}  // namespace apollo

namespace apollo {
namespace prediction {

namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto

enum ObstacleConf_ObstacleStatus {
  ObstacleConf_ObstacleStatus_ON_LANE = 0,
  ObstacleConf_ObstacleStatus_OFF_LANE = 1,
  ObstacleConf_ObstacleStatus_STATIONARY = 3,
  ObstacleConf_ObstacleStatus_MOVING = 4
};
bool ObstacleConf_ObstacleStatus_IsValid(int value);
const ObstacleConf_ObstacleStatus ObstacleConf_ObstacleStatus_ObstacleStatus_MIN = ObstacleConf_ObstacleStatus_ON_LANE;
const ObstacleConf_ObstacleStatus ObstacleConf_ObstacleStatus_ObstacleStatus_MAX = ObstacleConf_ObstacleStatus_MOVING;
const int ObstacleConf_ObstacleStatus_ObstacleStatus_ARRAYSIZE = ObstacleConf_ObstacleStatus_ObstacleStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObstacleConf_ObstacleStatus_descriptor();
inline const ::std::string& ObstacleConf_ObstacleStatus_Name(ObstacleConf_ObstacleStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObstacleConf_ObstacleStatus_descriptor(), value);
}
inline bool ObstacleConf_ObstacleStatus_Parse(
    const ::std::string& name, ObstacleConf_ObstacleStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObstacleConf_ObstacleStatus>(
    ObstacleConf_ObstacleStatus_descriptor(), name, value);
}
enum ObstacleConf_EvaluatorType {
  ObstacleConf_EvaluatorType_MLP_EVALUATOR = 0,
  ObstacleConf_EvaluatorType_RNN_EVALUATOR = 1
};
bool ObstacleConf_EvaluatorType_IsValid(int value);
const ObstacleConf_EvaluatorType ObstacleConf_EvaluatorType_EvaluatorType_MIN = ObstacleConf_EvaluatorType_MLP_EVALUATOR;
const ObstacleConf_EvaluatorType ObstacleConf_EvaluatorType_EvaluatorType_MAX = ObstacleConf_EvaluatorType_RNN_EVALUATOR;
const int ObstacleConf_EvaluatorType_EvaluatorType_ARRAYSIZE = ObstacleConf_EvaluatorType_EvaluatorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObstacleConf_EvaluatorType_descriptor();
inline const ::std::string& ObstacleConf_EvaluatorType_Name(ObstacleConf_EvaluatorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObstacleConf_EvaluatorType_descriptor(), value);
}
inline bool ObstacleConf_EvaluatorType_Parse(
    const ::std::string& name, ObstacleConf_EvaluatorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObstacleConf_EvaluatorType>(
    ObstacleConf_EvaluatorType_descriptor(), name, value);
}
enum ObstacleConf_PredictorType {
  ObstacleConf_PredictorType_LANE_SEQUENCE_PREDICTOR = 0,
  ObstacleConf_PredictorType_FREE_MOVE_PREDICTOR = 1,
  ObstacleConf_PredictorType_REGIONAL_PREDICTOR = 2,
  ObstacleConf_PredictorType_MOVE_SEQUENCE_PREDICTOR = 3
};
bool ObstacleConf_PredictorType_IsValid(int value);
const ObstacleConf_PredictorType ObstacleConf_PredictorType_PredictorType_MIN = ObstacleConf_PredictorType_LANE_SEQUENCE_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf_PredictorType_PredictorType_MAX = ObstacleConf_PredictorType_MOVE_SEQUENCE_PREDICTOR;
const int ObstacleConf_PredictorType_PredictorType_ARRAYSIZE = ObstacleConf_PredictorType_PredictorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObstacleConf_PredictorType_descriptor();
inline const ::std::string& ObstacleConf_PredictorType_Name(ObstacleConf_PredictorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObstacleConf_PredictorType_descriptor(), value);
}
inline bool ObstacleConf_PredictorType_Parse(
    const ::std::string& name, ObstacleConf_PredictorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObstacleConf_PredictorType>(
    ObstacleConf_PredictorType_descriptor(), name, value);
}
// ===================================================================

class ObstacleConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.ObstacleConf) */ {
 public:
  ObstacleConf();
  virtual ~ObstacleConf();

  ObstacleConf(const ObstacleConf& from);

  inline ObstacleConf& operator=(const ObstacleConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleConf& default_instance();

  static inline const ObstacleConf* internal_default_instance() {
    return reinterpret_cast<const ObstacleConf*>(
               &_ObstacleConf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ObstacleConf* other);

  // implements Message ----------------------------------------------

  inline ObstacleConf* New() const PROTOBUF_FINAL { return New(NULL); }

  ObstacleConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ObstacleConf& from);
  void MergeFrom(const ObstacleConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ObstacleConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ObstacleConf_ObstacleStatus ObstacleStatus;
  static const ObstacleStatus ON_LANE =
    ObstacleConf_ObstacleStatus_ON_LANE;
  static const ObstacleStatus OFF_LANE =
    ObstacleConf_ObstacleStatus_OFF_LANE;
  static const ObstacleStatus STATIONARY =
    ObstacleConf_ObstacleStatus_STATIONARY;
  static const ObstacleStatus MOVING =
    ObstacleConf_ObstacleStatus_MOVING;
  static inline bool ObstacleStatus_IsValid(int value) {
    return ObstacleConf_ObstacleStatus_IsValid(value);
  }
  static const ObstacleStatus ObstacleStatus_MIN =
    ObstacleConf_ObstacleStatus_ObstacleStatus_MIN;
  static const ObstacleStatus ObstacleStatus_MAX =
    ObstacleConf_ObstacleStatus_ObstacleStatus_MAX;
  static const int ObstacleStatus_ARRAYSIZE =
    ObstacleConf_ObstacleStatus_ObstacleStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ObstacleStatus_descriptor() {
    return ObstacleConf_ObstacleStatus_descriptor();
  }
  static inline const ::std::string& ObstacleStatus_Name(ObstacleStatus value) {
    return ObstacleConf_ObstacleStatus_Name(value);
  }
  static inline bool ObstacleStatus_Parse(const ::std::string& name,
      ObstacleStatus* value) {
    return ObstacleConf_ObstacleStatus_Parse(name, value);
  }

  typedef ObstacleConf_EvaluatorType EvaluatorType;
  static const EvaluatorType MLP_EVALUATOR =
    ObstacleConf_EvaluatorType_MLP_EVALUATOR;
  static const EvaluatorType RNN_EVALUATOR =
    ObstacleConf_EvaluatorType_RNN_EVALUATOR;
  static inline bool EvaluatorType_IsValid(int value) {
    return ObstacleConf_EvaluatorType_IsValid(value);
  }
  static const EvaluatorType EvaluatorType_MIN =
    ObstacleConf_EvaluatorType_EvaluatorType_MIN;
  static const EvaluatorType EvaluatorType_MAX =
    ObstacleConf_EvaluatorType_EvaluatorType_MAX;
  static const int EvaluatorType_ARRAYSIZE =
    ObstacleConf_EvaluatorType_EvaluatorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EvaluatorType_descriptor() {
    return ObstacleConf_EvaluatorType_descriptor();
  }
  static inline const ::std::string& EvaluatorType_Name(EvaluatorType value) {
    return ObstacleConf_EvaluatorType_Name(value);
  }
  static inline bool EvaluatorType_Parse(const ::std::string& name,
      EvaluatorType* value) {
    return ObstacleConf_EvaluatorType_Parse(name, value);
  }

  typedef ObstacleConf_PredictorType PredictorType;
  static const PredictorType LANE_SEQUENCE_PREDICTOR =
    ObstacleConf_PredictorType_LANE_SEQUENCE_PREDICTOR;
  static const PredictorType FREE_MOVE_PREDICTOR =
    ObstacleConf_PredictorType_FREE_MOVE_PREDICTOR;
  static const PredictorType REGIONAL_PREDICTOR =
    ObstacleConf_PredictorType_REGIONAL_PREDICTOR;
  static const PredictorType MOVE_SEQUENCE_PREDICTOR =
    ObstacleConf_PredictorType_MOVE_SEQUENCE_PREDICTOR;
  static inline bool PredictorType_IsValid(int value) {
    return ObstacleConf_PredictorType_IsValid(value);
  }
  static const PredictorType PredictorType_MIN =
    ObstacleConf_PredictorType_PredictorType_MIN;
  static const PredictorType PredictorType_MAX =
    ObstacleConf_PredictorType_PredictorType_MAX;
  static const int PredictorType_ARRAYSIZE =
    ObstacleConf_PredictorType_PredictorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PredictorType_descriptor() {
    return ObstacleConf_PredictorType_descriptor();
  }
  static inline const ::std::string& PredictorType_Name(PredictorType value) {
    return ObstacleConf_PredictorType_Name(value);
  }
  static inline bool PredictorType_Parse(const ::std::string& name,
      PredictorType* value) {
    return ObstacleConf_PredictorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
  bool has_obstacle_type() const;
  void clear_obstacle_type();
  static const int kObstacleTypeFieldNumber = 1;
  ::apollo::perception::PerceptionObstacle_Type obstacle_type() const;
  void set_obstacle_type(::apollo::perception::PerceptionObstacle_Type value);

  // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
  bool has_obstacle_status() const;
  void clear_obstacle_status();
  static const int kObstacleStatusFieldNumber = 2;
  ::apollo::prediction::ObstacleConf_ObstacleStatus obstacle_status() const;
  void set_obstacle_status(::apollo::prediction::ObstacleConf_ObstacleStatus value);

  // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
  bool has_evaluator_type() const;
  void clear_evaluator_type();
  static const int kEvaluatorTypeFieldNumber = 3;
  ::apollo::prediction::ObstacleConf_EvaluatorType evaluator_type() const;
  void set_evaluator_type(::apollo::prediction::ObstacleConf_EvaluatorType value);

  // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
  bool has_predictor_type() const;
  void clear_predictor_type();
  static const int kPredictorTypeFieldNumber = 4;
  ::apollo::prediction::ObstacleConf_PredictorType predictor_type() const;
  void set_predictor_type(::apollo::prediction::ObstacleConf_PredictorType value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.ObstacleConf)
 private:
  void set_has_obstacle_type();
  void clear_has_obstacle_type();
  void set_has_obstacle_status();
  void clear_has_obstacle_status();
  void set_has_evaluator_type();
  void clear_has_evaluator_type();
  void set_has_predictor_type();
  void clear_has_predictor_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int obstacle_type_;
  int obstacle_status_;
  int evaluator_type_;
  int predictor_type_;
  friend struct protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PredictionConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.PredictionConf) */ {
 public:
  PredictionConf();
  virtual ~PredictionConf();

  PredictionConf(const PredictionConf& from);

  inline PredictionConf& operator=(const PredictionConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictionConf& default_instance();

  static inline const PredictionConf* internal_default_instance() {
    return reinterpret_cast<const PredictionConf*>(
               &_PredictionConf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PredictionConf* other);

  // implements Message ----------------------------------------------

  inline PredictionConf* New() const PROTOBUF_FINAL { return New(NULL); }

  PredictionConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PredictionConf& from);
  void MergeFrom(const PredictionConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PredictionConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
  int obstacle_conf_size() const;
  void clear_obstacle_conf();
  static const int kObstacleConfFieldNumber = 1;
  const ::apollo::prediction::ObstacleConf& obstacle_conf(int index) const;
  ::apollo::prediction::ObstacleConf* mutable_obstacle_conf(int index);
  ::apollo::prediction::ObstacleConf* add_obstacle_conf();
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::ObstacleConf >*
      mutable_obstacle_conf();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::ObstacleConf >&
      obstacle_conf() const;

  // @@protoc_insertion_point(class_scope:apollo.prediction.PredictionConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::ObstacleConf > obstacle_conf_;
  friend struct protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleConf

// optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
inline bool ObstacleConf::has_obstacle_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleConf::set_has_obstacle_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObstacleConf::clear_has_obstacle_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObstacleConf::clear_obstacle_type() {
  obstacle_type_ = 0;
  clear_has_obstacle_type();
}
inline ::apollo::perception::PerceptionObstacle_Type ObstacleConf::obstacle_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.obstacle_type)
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(obstacle_type_);
}
inline void ObstacleConf::set_obstacle_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  set_has_obstacle_type();
  obstacle_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.obstacle_type)
}

// optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
inline bool ObstacleConf::has_obstacle_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleConf::set_has_obstacle_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObstacleConf::clear_has_obstacle_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObstacleConf::clear_obstacle_status() {
  obstacle_status_ = 0;
  clear_has_obstacle_status();
}
inline ::apollo::prediction::ObstacleConf_ObstacleStatus ObstacleConf::obstacle_status() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.obstacle_status)
  return static_cast< ::apollo::prediction::ObstacleConf_ObstacleStatus >(obstacle_status_);
}
inline void ObstacleConf::set_obstacle_status(::apollo::prediction::ObstacleConf_ObstacleStatus value) {
  assert(::apollo::prediction::ObstacleConf_ObstacleStatus_IsValid(value));
  set_has_obstacle_status();
  obstacle_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.obstacle_status)
}

// optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
inline bool ObstacleConf::has_evaluator_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleConf::set_has_evaluator_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObstacleConf::clear_has_evaluator_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObstacleConf::clear_evaluator_type() {
  evaluator_type_ = 0;
  clear_has_evaluator_type();
}
inline ::apollo::prediction::ObstacleConf_EvaluatorType ObstacleConf::evaluator_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.evaluator_type)
  return static_cast< ::apollo::prediction::ObstacleConf_EvaluatorType >(evaluator_type_);
}
inline void ObstacleConf::set_evaluator_type(::apollo::prediction::ObstacleConf_EvaluatorType value) {
  assert(::apollo::prediction::ObstacleConf_EvaluatorType_IsValid(value));
  set_has_evaluator_type();
  evaluator_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.evaluator_type)
}

// optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
inline bool ObstacleConf::has_predictor_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObstacleConf::set_has_predictor_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObstacleConf::clear_has_predictor_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObstacleConf::clear_predictor_type() {
  predictor_type_ = 0;
  clear_has_predictor_type();
}
inline ::apollo::prediction::ObstacleConf_PredictorType ObstacleConf::predictor_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.predictor_type)
  return static_cast< ::apollo::prediction::ObstacleConf_PredictorType >(predictor_type_);
}
inline void ObstacleConf::set_predictor_type(::apollo::prediction::ObstacleConf_PredictorType value) {
  assert(::apollo::prediction::ObstacleConf_PredictorType_IsValid(value));
  set_has_predictor_type();
  predictor_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.predictor_type)
}

// -------------------------------------------------------------------

// PredictionConf

// repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
inline int PredictionConf::obstacle_conf_size() const {
  return obstacle_conf_.size();
}
inline void PredictionConf::clear_obstacle_conf() {
  obstacle_conf_.Clear();
}
inline const ::apollo::prediction::ObstacleConf& PredictionConf::obstacle_conf(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_.Get(index);
}
inline ::apollo::prediction::ObstacleConf* PredictionConf::mutable_obstacle_conf(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_.Mutable(index);
}
inline ::apollo::prediction::ObstacleConf* PredictionConf::add_obstacle_conf() {
  // @@protoc_insertion_point(field_add:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::ObstacleConf >*
PredictionConf::mutable_obstacle_conf() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.PredictionConf.obstacle_conf)
  return &obstacle_conf_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::ObstacleConf >&
PredictionConf::obstacle_conf() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace prediction
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::prediction::ObstacleConf_ObstacleStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleConf_ObstacleStatus>() {
  return ::apollo::prediction::ObstacleConf_ObstacleStatus_descriptor();
}
template <> struct is_proto_enum< ::apollo::prediction::ObstacleConf_EvaluatorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleConf_EvaluatorType>() {
  return ::apollo::prediction::ObstacleConf_EvaluatorType_descriptor();
}
template <> struct is_proto_enum< ::apollo::prediction::ObstacleConf_PredictorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleConf_PredictorType>() {
  return ::apollo::prediction::ObstacleConf_PredictorType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto__INCLUDED
