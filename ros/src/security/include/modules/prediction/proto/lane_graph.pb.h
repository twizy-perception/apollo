// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/lane_graph.proto

#ifndef PROTOBUF_modules_2fprediction_2fproto_2flane_5fgraph_2eproto__INCLUDED
#define PROTOBUF_modules_2fprediction_2fproto_2flane_5fgraph_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
namespace apollo {
namespace common {
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointENU;
class PointENUDefaultTypeInternal;
extern PointENUDefaultTypeInternal _PointENU_default_instance_;
class PointLLH;
class PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
}  // namespace common
namespace prediction {
class LaneGraph;
class LaneGraphDefaultTypeInternal;
extern LaneGraphDefaultTypeInternal _LaneGraph_default_instance_;
class LanePoint;
class LanePointDefaultTypeInternal;
extern LanePointDefaultTypeInternal _LanePoint_default_instance_;
class LaneSegment;
class LaneSegmentDefaultTypeInternal;
extern LaneSegmentDefaultTypeInternal _LaneSegment_default_instance_;
class LaneSequence;
class LaneSequenceDefaultTypeInternal;
extern LaneSequenceDefaultTypeInternal _LaneSequence_default_instance_;
class NearbyObstacle;
class NearbyObstacleDefaultTypeInternal;
extern NearbyObstacleDefaultTypeInternal _NearbyObstacle_default_instance_;
}  // namespace prediction
}  // namespace apollo

namespace apollo {
namespace prediction {

namespace protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto

// ===================================================================

class LanePoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LanePoint) */ {
 public:
  LanePoint();
  virtual ~LanePoint();

  LanePoint(const LanePoint& from);

  inline LanePoint& operator=(const LanePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LanePoint& default_instance();

  static inline const LanePoint* internal_default_instance() {
    return reinterpret_cast<const LanePoint*>(
               &_LanePoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LanePoint* other);

  // implements Message ----------------------------------------------

  inline LanePoint* New() const PROTOBUF_FINAL { return New(NULL); }

  LanePoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LanePoint& from);
  void MergeFrom(const LanePoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LanePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Point3D position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::apollo::common::Point3D& position() const;
  ::apollo::common::Point3D* mutable_position();
  ::apollo::common::Point3D* release_position();
  void set_allocated_position(::apollo::common::Point3D* position);

  // optional double heading = 2 [default = 0];
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 2;
  double heading() const;
  void set_heading(double value);

  // optional double width = 3 [default = 0];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  double width() const;
  void set_width(double value);

  // optional double relative_s = 4 [default = 0];
  bool has_relative_s() const;
  void clear_relative_s();
  static const int kRelativeSFieldNumber = 4;
  double relative_s() const;
  void set_relative_s(double value);

  // optional double relative_l = 5 [default = 0];
  bool has_relative_l() const;
  void clear_relative_l();
  static const int kRelativeLFieldNumber = 5;
  double relative_l() const;
  void set_relative_l(double value);

  // optional double angle_diff = 6 [default = 0];
  bool has_angle_diff() const;
  void clear_angle_diff();
  static const int kAngleDiffFieldNumber = 6;
  double angle_diff() const;
  void set_angle_diff(double value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.LanePoint)
 private:
  void set_has_position();
  void clear_has_position();
  void set_has_heading();
  void clear_has_heading();
  void set_has_width();
  void clear_has_width();
  void set_has_relative_s();
  void clear_has_relative_s();
  void set_has_relative_l();
  void clear_has_relative_l();
  void set_has_angle_diff();
  void clear_has_angle_diff();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::apollo::common::Point3D* position_;
  double heading_;
  double width_;
  double relative_s_;
  double relative_l_;
  double angle_diff_;
  friend struct protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneSegment) */ {
 public:
  LaneSegment();
  virtual ~LaneSegment();

  LaneSegment(const LaneSegment& from);

  inline LaneSegment& operator=(const LaneSegment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneSegment& default_instance();

  static inline const LaneSegment* internal_default_instance() {
    return reinterpret_cast<const LaneSegment*>(
               &_LaneSegment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LaneSegment* other);

  // implements Message ----------------------------------------------

  inline LaneSegment* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneSegment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneSegment& from);
  void MergeFrom(const LaneSegment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.prediction.LanePoint lane_point = 5;
  int lane_point_size() const;
  void clear_lane_point();
  static const int kLanePointFieldNumber = 5;
  const ::apollo::prediction::LanePoint& lane_point(int index) const;
  ::apollo::prediction::LanePoint* mutable_lane_point(int index);
  ::apollo::prediction::LanePoint* add_lane_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
      mutable_lane_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
      lane_point() const;

  // optional string lane_id = 1;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 1;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // optional double start_s = 2 [default = 0];
  bool has_start_s() const;
  void clear_start_s();
  static const int kStartSFieldNumber = 2;
  double start_s() const;
  void set_start_s(double value);

  // optional double end_s = 3 [default = 0];
  bool has_end_s() const;
  void clear_end_s();
  static const int kEndSFieldNumber = 3;
  double end_s() const;
  void set_end_s(double value);

  // optional uint32 lane_turn_type = 4 [default = 0];
  bool has_lane_turn_type() const;
  void clear_lane_turn_type();
  static const int kLaneTurnTypeFieldNumber = 4;
  ::google::protobuf::uint32 lane_turn_type() const;
  void set_lane_turn_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneSegment)
 private:
  void set_has_lane_id();
  void clear_has_lane_id();
  void set_has_start_s();
  void clear_has_start_s();
  void set_has_end_s();
  void clear_has_end_s();
  void set_has_lane_turn_type();
  void clear_has_lane_turn_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint > lane_point_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  double start_s_;
  double end_s_;
  ::google::protobuf::uint32 lane_turn_type_;
  friend struct protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NearbyObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.NearbyObstacle) */ {
 public:
  NearbyObstacle();
  virtual ~NearbyObstacle();

  NearbyObstacle(const NearbyObstacle& from);

  inline NearbyObstacle& operator=(const NearbyObstacle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NearbyObstacle& default_instance();

  static inline const NearbyObstacle* internal_default_instance() {
    return reinterpret_cast<const NearbyObstacle*>(
               &_NearbyObstacle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NearbyObstacle* other);

  // implements Message ----------------------------------------------

  inline NearbyObstacle* New() const PROTOBUF_FINAL { return New(NULL); }

  NearbyObstacle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NearbyObstacle& from);
  void MergeFrom(const NearbyObstacle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NearbyObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double s = 2;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 2;
  double s() const;
  void set_s(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.NearbyObstacle)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_s();
  void clear_has_s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double s_;
  ::google::protobuf::int32 id_;
  friend struct protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneSequence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneSequence) */ {
 public:
  LaneSequence();
  virtual ~LaneSequence();

  LaneSequence(const LaneSequence& from);

  inline LaneSequence& operator=(const LaneSequence& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneSequence& default_instance();

  static inline const LaneSequence* internal_default_instance() {
    return reinterpret_cast<const LaneSequence*>(
               &_LaneSequence_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LaneSequence* other);

  // implements Message ----------------------------------------------

  inline LaneSequence* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneSequence* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneSequence& from);
  void MergeFrom(const LaneSequence& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneSequence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  int lane_segment_size() const;
  void clear_lane_segment();
  static const int kLaneSegmentFieldNumber = 2;
  const ::apollo::prediction::LaneSegment& lane_segment(int index) const;
  ::apollo::prediction::LaneSegment* mutable_lane_segment(int index);
  ::apollo::prediction::LaneSegment* add_lane_segment();
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment >*
      mutable_lane_segment();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment >&
      lane_segment() const;

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  int nearby_obstacle_size() const;
  void clear_nearby_obstacle();
  static const int kNearbyObstacleFieldNumber = 3;
  const ::apollo::prediction::NearbyObstacle& nearby_obstacle(int index) const;
  ::apollo::prediction::NearbyObstacle* mutable_nearby_obstacle(int index);
  ::apollo::prediction::NearbyObstacle* add_nearby_obstacle();
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
      mutable_nearby_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
      nearby_obstacle() const;

  // repeated double features = 4;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 4;
  double features(int index) const;
  void set_features(int index, double value);
  void add_features(double value);
  const ::google::protobuf::RepeatedField< double >&
      features() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_features();

  // optional int32 lane_sequence_id = 1;
  bool has_lane_sequence_id() const;
  void clear_lane_sequence_id();
  static const int kLaneSequenceIdFieldNumber = 1;
  ::google::protobuf::int32 lane_sequence_id() const;
  void set_lane_sequence_id(::google::protobuf::int32 value);

  // optional int32 label = 5 [default = 0];
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // optional double probability = 6 [default = 0];
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 6;
  double probability() const;
  void set_probability(double value);

  // optional double acceleration = 7 [default = 0];
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 7;
  double acceleration() const;
  void set_acceleration(double value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneSequence)
 private:
  void set_has_lane_sequence_id();
  void clear_has_lane_sequence_id();
  void set_has_label();
  void clear_has_label();
  void set_has_probability();
  void clear_has_probability();
  void set_has_acceleration();
  void clear_has_acceleration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment > lane_segment_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle > nearby_obstacle_;
  ::google::protobuf::RepeatedField< double > features_;
  ::google::protobuf::int32 lane_sequence_id_;
  ::google::protobuf::int32 label_;
  double probability_;
  double acceleration_;
  friend struct protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneGraph) */ {
 public:
  LaneGraph();
  virtual ~LaneGraph();

  LaneGraph(const LaneGraph& from);

  inline LaneGraph& operator=(const LaneGraph& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneGraph& default_instance();

  static inline const LaneGraph* internal_default_instance() {
    return reinterpret_cast<const LaneGraph*>(
               &_LaneGraph_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LaneGraph* other);

  // implements Message ----------------------------------------------

  inline LaneGraph* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneGraph* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneGraph& from);
  void MergeFrom(const LaneGraph& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  int lane_sequence_size() const;
  void clear_lane_sequence();
  static const int kLaneSequenceFieldNumber = 1;
  const ::apollo::prediction::LaneSequence& lane_sequence(int index) const;
  ::apollo::prediction::LaneSequence* mutable_lane_sequence(int index);
  ::apollo::prediction::LaneSequence* add_lane_sequence();
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence >*
      mutable_lane_sequence();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence >&
      lane_sequence() const;

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneGraph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence > lane_sequence_;
  friend struct protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LanePoint

// optional .apollo.common.Point3D position = 1;
inline bool LanePoint::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LanePoint::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LanePoint::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LanePoint::clear_position() {
  if (position_ != NULL) position_->::apollo::common::Point3D::Clear();
  clear_has_position();
}
inline const ::apollo::common::Point3D& LanePoint::position() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.position)
  return position_ != NULL ? *position_
                         : *::apollo::common::Point3D::internal_default_instance();
}
inline ::apollo::common::Point3D* LanePoint::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LanePoint.position)
  return position_;
}
inline ::apollo::common::Point3D* LanePoint::release_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LanePoint.position)
  clear_has_position();
  ::apollo::common::Point3D* temp = position_;
  position_ = NULL;
  return temp;
}
inline void LanePoint::set_allocated_position(::apollo::common::Point3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LanePoint.position)
}

// optional double heading = 2 [default = 0];
inline bool LanePoint::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LanePoint::set_has_heading() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LanePoint::clear_has_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LanePoint::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double LanePoint::heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.heading)
  return heading_;
}
inline void LanePoint::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.heading)
}

// optional double width = 3 [default = 0];
inline bool LanePoint::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LanePoint::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LanePoint::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LanePoint::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double LanePoint::width() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.width)
  return width_;
}
inline void LanePoint::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.width)
}

// optional double relative_s = 4 [default = 0];
inline bool LanePoint::has_relative_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LanePoint::set_has_relative_s() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LanePoint::clear_has_relative_s() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LanePoint::clear_relative_s() {
  relative_s_ = 0;
  clear_has_relative_s();
}
inline double LanePoint::relative_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.relative_s)
  return relative_s_;
}
inline void LanePoint::set_relative_s(double value) {
  set_has_relative_s();
  relative_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.relative_s)
}

// optional double relative_l = 5 [default = 0];
inline bool LanePoint::has_relative_l() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LanePoint::set_has_relative_l() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LanePoint::clear_has_relative_l() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LanePoint::clear_relative_l() {
  relative_l_ = 0;
  clear_has_relative_l();
}
inline double LanePoint::relative_l() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.relative_l)
  return relative_l_;
}
inline void LanePoint::set_relative_l(double value) {
  set_has_relative_l();
  relative_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.relative_l)
}

// optional double angle_diff = 6 [default = 0];
inline bool LanePoint::has_angle_diff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LanePoint::set_has_angle_diff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LanePoint::clear_has_angle_diff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LanePoint::clear_angle_diff() {
  angle_diff_ = 0;
  clear_has_angle_diff();
}
inline double LanePoint::angle_diff() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.angle_diff)
  return angle_diff_;
}
inline void LanePoint::set_angle_diff(double value) {
  set_has_angle_diff();
  angle_diff_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.angle_diff)
}

// -------------------------------------------------------------------

// LaneSegment

// optional string lane_id = 1;
inline bool LaneSegment::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneSegment::set_has_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneSegment::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneSegment::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
inline const ::std::string& LaneSegment::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_id)
  return lane_id_.GetNoArena();
}
inline void LaneSegment::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.lane_id)
}
#if LANG_CXX11
inline void LaneSegment::set_lane_id(::std::string&& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.LaneSegment.lane_id)
}
#endif
inline void LaneSegment::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.LaneSegment.lane_id)
}
inline void LaneSegment::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.LaneSegment.lane_id)
}
inline ::std::string* LaneSegment::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSegment.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaneSegment::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LaneSegment.lane_id)
  clear_has_lane_id();
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaneSegment::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LaneSegment.lane_id)
}

// optional double start_s = 2 [default = 0];
inline bool LaneSegment::has_start_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneSegment::set_has_start_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneSegment::clear_has_start_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneSegment::clear_start_s() {
  start_s_ = 0;
  clear_has_start_s();
}
inline double LaneSegment::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.start_s)
  return start_s_;
}
inline void LaneSegment::set_start_s(double value) {
  set_has_start_s();
  start_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.start_s)
}

// optional double end_s = 3 [default = 0];
inline bool LaneSegment::has_end_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneSegment::set_has_end_s() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneSegment::clear_has_end_s() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneSegment::clear_end_s() {
  end_s_ = 0;
  clear_has_end_s();
}
inline double LaneSegment::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.end_s)
  return end_s_;
}
inline void LaneSegment::set_end_s(double value) {
  set_has_end_s();
  end_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.end_s)
}

// optional uint32 lane_turn_type = 4 [default = 0];
inline bool LaneSegment::has_lane_turn_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneSegment::set_has_lane_turn_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneSegment::clear_has_lane_turn_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneSegment::clear_lane_turn_type() {
  lane_turn_type_ = 0u;
  clear_has_lane_turn_type();
}
inline ::google::protobuf::uint32 LaneSegment::lane_turn_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_turn_type)
  return lane_turn_type_;
}
inline void LaneSegment::set_lane_turn_type(::google::protobuf::uint32 value) {
  set_has_lane_turn_type();
  lane_turn_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.lane_turn_type)
}

// repeated .apollo.prediction.LanePoint lane_point = 5;
inline int LaneSegment::lane_point_size() const {
  return lane_point_.size();
}
inline void LaneSegment::clear_lane_point() {
  lane_point_.Clear();
}
inline const ::apollo::prediction::LanePoint& LaneSegment::lane_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_point)
  return lane_point_.Get(index);
}
inline ::apollo::prediction::LanePoint* LaneSegment::mutable_lane_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSegment.lane_point)
  return lane_point_.Mutable(index);
}
inline ::apollo::prediction::LanePoint* LaneSegment::add_lane_point() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSegment.lane_point)
  return lane_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
LaneSegment::mutable_lane_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSegment.lane_point)
  return &lane_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
LaneSegment::lane_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSegment.lane_point)
  return lane_point_;
}

// -------------------------------------------------------------------

// NearbyObstacle

// optional int32 id = 1;
inline bool NearbyObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NearbyObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NearbyObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NearbyObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NearbyObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NearbyObstacle.id)
  return id_;
}
inline void NearbyObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.NearbyObstacle.id)
}

// optional double s = 2;
inline bool NearbyObstacle::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NearbyObstacle::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NearbyObstacle::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NearbyObstacle::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double NearbyObstacle::s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NearbyObstacle.s)
  return s_;
}
inline void NearbyObstacle::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.NearbyObstacle.s)
}

// -------------------------------------------------------------------

// LaneSequence

// optional int32 lane_sequence_id = 1;
inline bool LaneSequence::has_lane_sequence_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneSequence::set_has_lane_sequence_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneSequence::clear_has_lane_sequence_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneSequence::clear_lane_sequence_id() {
  lane_sequence_id_ = 0;
  clear_has_lane_sequence_id();
}
inline ::google::protobuf::int32 LaneSequence::lane_sequence_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.lane_sequence_id)
  return lane_sequence_id_;
}
inline void LaneSequence::set_lane_sequence_id(::google::protobuf::int32 value) {
  set_has_lane_sequence_id();
  lane_sequence_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.lane_sequence_id)
}

// repeated .apollo.prediction.LaneSegment lane_segment = 2;
inline int LaneSequence::lane_segment_size() const {
  return lane_segment_.size();
}
inline void LaneSequence::clear_lane_segment() {
  lane_segment_.Clear();
}
inline const ::apollo::prediction::LaneSegment& LaneSequence::lane_segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_.Get(index);
}
inline ::apollo::prediction::LaneSegment* LaneSequence::mutable_lane_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_.Mutable(index);
}
inline ::apollo::prediction::LaneSegment* LaneSequence::add_lane_segment() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment >*
LaneSequence::mutable_lane_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.lane_segment)
  return &lane_segment_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment >&
LaneSequence::lane_segment() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_;
}

// repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
inline int LaneSequence::nearby_obstacle_size() const {
  return nearby_obstacle_.size();
}
inline void LaneSequence::clear_nearby_obstacle() {
  nearby_obstacle_.Clear();
}
inline const ::apollo::prediction::NearbyObstacle& LaneSequence::nearby_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_.Get(index);
}
inline ::apollo::prediction::NearbyObstacle* LaneSequence::mutable_nearby_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_.Mutable(index);
}
inline ::apollo::prediction::NearbyObstacle* LaneSequence::add_nearby_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
LaneSequence::mutable_nearby_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.nearby_obstacle)
  return &nearby_obstacle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
LaneSequence::nearby_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_;
}

// repeated double features = 4;
inline int LaneSequence::features_size() const {
  return features_.size();
}
inline void LaneSequence::clear_features() {
  features_.Clear();
}
inline double LaneSequence::features(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.features)
  return features_.Get(index);
}
inline void LaneSequence::set_features(int index, double value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.features)
}
inline void LaneSequence::add_features(double value) {
  features_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.features)
}
inline const ::google::protobuf::RepeatedField< double >&
LaneSequence::features() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.features)
  return features_;
}
inline ::google::protobuf::RepeatedField< double >*
LaneSequence::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.features)
  return &features_;
}

// optional int32 label = 5 [default = 0];
inline bool LaneSequence::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneSequence::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneSequence::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneSequence::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 LaneSequence::label() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.label)
  return label_;
}
inline void LaneSequence::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.label)
}

// optional double probability = 6 [default = 0];
inline bool LaneSequence::has_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneSequence::set_has_probability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneSequence::clear_has_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneSequence::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline double LaneSequence::probability() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.probability)
  return probability_;
}
inline void LaneSequence::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.probability)
}

// optional double acceleration = 7 [default = 0];
inline bool LaneSequence::has_acceleration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneSequence::set_has_acceleration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneSequence::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneSequence::clear_acceleration() {
  acceleration_ = 0;
  clear_has_acceleration();
}
inline double LaneSequence::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.acceleration)
  return acceleration_;
}
inline void LaneSequence::set_acceleration(double value) {
  set_has_acceleration();
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.acceleration)
}

// -------------------------------------------------------------------

// LaneGraph

// repeated .apollo.prediction.LaneSequence lane_sequence = 1;
inline int LaneGraph::lane_sequence_size() const {
  return lane_sequence_.size();
}
inline void LaneGraph::clear_lane_sequence() {
  lane_sequence_.Clear();
}
inline const ::apollo::prediction::LaneSequence& LaneGraph::lane_sequence(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_.Get(index);
}
inline ::apollo::prediction::LaneSequence* LaneGraph::mutable_lane_sequence(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_.Mutable(index);
}
inline ::apollo::prediction::LaneSequence* LaneGraph::add_lane_sequence() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence >*
LaneGraph::mutable_lane_sequence() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneGraph.lane_sequence)
  return &lane_sequence_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence >&
LaneGraph::lane_sequence() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fprediction_2fproto_2flane_5fgraph_2eproto__INCLUDED
