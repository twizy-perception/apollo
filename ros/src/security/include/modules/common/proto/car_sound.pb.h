// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/car_sound.proto

#ifndef PROTOBUF_modules_2fcommon_2fproto_2fcar_5fsound_2eproto__INCLUDED
#define PROTOBUF_modules_2fcommon_2fproto_2fcar_5fsound_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
namespace apollo {
namespace common {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
namespace sound {
class SoundRequest;
class SoundRequestDefaultTypeInternal;
extern SoundRequestDefaultTypeInternal _SoundRequest_default_instance_;
}  // namespace sound
}  // namespace common
}  // namespace apollo

namespace apollo {
namespace common {
namespace sound {

namespace protobuf_modules_2fcommon_2fproto_2fcar_5fsound_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fcommon_2fproto_2fcar_5fsound_2eproto

enum SoundRequest_PriorityLevel {
  SoundRequest_PriorityLevel_LOW = 0,
  SoundRequest_PriorityLevel_MEDIUM = 1,
  SoundRequest_PriorityLevel_HIGH = 2
};
bool SoundRequest_PriorityLevel_IsValid(int value);
const SoundRequest_PriorityLevel SoundRequest_PriorityLevel_PriorityLevel_MIN = SoundRequest_PriorityLevel_LOW;
const SoundRequest_PriorityLevel SoundRequest_PriorityLevel_PriorityLevel_MAX = SoundRequest_PriorityLevel_HIGH;
const int SoundRequest_PriorityLevel_PriorityLevel_ARRAYSIZE = SoundRequest_PriorityLevel_PriorityLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoundRequest_PriorityLevel_descriptor();
inline const ::std::string& SoundRequest_PriorityLevel_Name(SoundRequest_PriorityLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoundRequest_PriorityLevel_descriptor(), value);
}
inline bool SoundRequest_PriorityLevel_Parse(
    const ::std::string& name, SoundRequest_PriorityLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoundRequest_PriorityLevel>(
    SoundRequest_PriorityLevel_descriptor(), name, value);
}
enum SoundRequest_Mode {
  SoundRequest_Mode_SAY = 0,
  SoundRequest_Mode_BEEP = 1
};
bool SoundRequest_Mode_IsValid(int value);
const SoundRequest_Mode SoundRequest_Mode_Mode_MIN = SoundRequest_Mode_SAY;
const SoundRequest_Mode SoundRequest_Mode_Mode_MAX = SoundRequest_Mode_BEEP;
const int SoundRequest_Mode_Mode_ARRAYSIZE = SoundRequest_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoundRequest_Mode_descriptor();
inline const ::std::string& SoundRequest_Mode_Name(SoundRequest_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoundRequest_Mode_descriptor(), value);
}
inline bool SoundRequest_Mode_Parse(
    const ::std::string& name, SoundRequest_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoundRequest_Mode>(
    SoundRequest_Mode_descriptor(), name, value);
}
// ===================================================================

class SoundRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.sound.SoundRequest) */ {
 public:
  SoundRequest();
  virtual ~SoundRequest();

  SoundRequest(const SoundRequest& from);

  inline SoundRequest& operator=(const SoundRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoundRequest& default_instance();

  static inline const SoundRequest* internal_default_instance() {
    return reinterpret_cast<const SoundRequest*>(
               &_SoundRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SoundRequest* other);

  // implements Message ----------------------------------------------

  inline SoundRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SoundRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SoundRequest& from);
  void MergeFrom(const SoundRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoundRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SoundRequest_PriorityLevel PriorityLevel;
  static const PriorityLevel LOW =
    SoundRequest_PriorityLevel_LOW;
  static const PriorityLevel MEDIUM =
    SoundRequest_PriorityLevel_MEDIUM;
  static const PriorityLevel HIGH =
    SoundRequest_PriorityLevel_HIGH;
  static inline bool PriorityLevel_IsValid(int value) {
    return SoundRequest_PriorityLevel_IsValid(value);
  }
  static const PriorityLevel PriorityLevel_MIN =
    SoundRequest_PriorityLevel_PriorityLevel_MIN;
  static const PriorityLevel PriorityLevel_MAX =
    SoundRequest_PriorityLevel_PriorityLevel_MAX;
  static const int PriorityLevel_ARRAYSIZE =
    SoundRequest_PriorityLevel_PriorityLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PriorityLevel_descriptor() {
    return SoundRequest_PriorityLevel_descriptor();
  }
  static inline const ::std::string& PriorityLevel_Name(PriorityLevel value) {
    return SoundRequest_PriorityLevel_Name(value);
  }
  static inline bool PriorityLevel_Parse(const ::std::string& name,
      PriorityLevel* value) {
    return SoundRequest_PriorityLevel_Parse(name, value);
  }

  typedef SoundRequest_Mode Mode;
  static const Mode SAY =
    SoundRequest_Mode_SAY;
  static const Mode BEEP =
    SoundRequest_Mode_BEEP;
  static inline bool Mode_IsValid(int value) {
    return SoundRequest_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    SoundRequest_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    SoundRequest_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    SoundRequest_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return SoundRequest_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return SoundRequest_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return SoundRequest_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string words = 4;
  bool has_words() const;
  void clear_words();
  static const int kWordsFieldNumber = 4;
  const ::std::string& words() const;
  void set_words(const ::std::string& value);
  #if LANG_CXX11
  void set_words(::std::string&& value);
  #endif
  void set_words(const char* value);
  void set_words(const char* value, size_t size);
  ::std::string* mutable_words();
  ::std::string* release_words();
  void set_allocated_words(::std::string* words);

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.common.sound.SoundRequest.PriorityLevel priority = 2;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 2;
  ::apollo::common::sound::SoundRequest_PriorityLevel priority() const;
  void set_priority(::apollo::common::sound::SoundRequest_PriorityLevel value);

  // optional .apollo.common.sound.SoundRequest.Mode mode = 3;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::apollo::common::sound::SoundRequest_Mode mode() const;
  void set_mode(::apollo::common::sound::SoundRequest_Mode value);

  // @@protoc_insertion_point(class_scope:apollo.common.sound.SoundRequest)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_priority();
  void clear_has_priority();
  void set_has_mode();
  void clear_has_mode();
  void set_has_words();
  void clear_has_words();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr words_;
  ::apollo::common::Header* header_;
  int priority_;
  int mode_;
  friend struct protobuf_modules_2fcommon_2fproto_2fcar_5fsound_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SoundRequest

// optional .apollo.common.Header header = 1;
inline bool SoundRequest::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoundRequest::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoundRequest::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoundRequest::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& SoundRequest::header() const {
  // @@protoc_insertion_point(field_get:apollo.common.sound.SoundRequest.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
inline ::apollo::common::Header* SoundRequest::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.sound.SoundRequest.header)
  return header_;
}
inline ::apollo::common::Header* SoundRequest::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.sound.SoundRequest.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void SoundRequest::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.sound.SoundRequest.header)
}

// optional .apollo.common.sound.SoundRequest.PriorityLevel priority = 2;
inline bool SoundRequest::has_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SoundRequest::set_has_priority() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SoundRequest::clear_has_priority() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SoundRequest::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::apollo::common::sound::SoundRequest_PriorityLevel SoundRequest::priority() const {
  // @@protoc_insertion_point(field_get:apollo.common.sound.SoundRequest.priority)
  return static_cast< ::apollo::common::sound::SoundRequest_PriorityLevel >(priority_);
}
inline void SoundRequest::set_priority(::apollo::common::sound::SoundRequest_PriorityLevel value) {
  assert(::apollo::common::sound::SoundRequest_PriorityLevel_IsValid(value));
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.sound.SoundRequest.priority)
}

// optional .apollo.common.sound.SoundRequest.Mode mode = 3;
inline bool SoundRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SoundRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SoundRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SoundRequest::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::apollo::common::sound::SoundRequest_Mode SoundRequest::mode() const {
  // @@protoc_insertion_point(field_get:apollo.common.sound.SoundRequest.mode)
  return static_cast< ::apollo::common::sound::SoundRequest_Mode >(mode_);
}
inline void SoundRequest::set_mode(::apollo::common::sound::SoundRequest_Mode value) {
  assert(::apollo::common::sound::SoundRequest_Mode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.sound.SoundRequest.mode)
}

// optional string words = 4;
inline bool SoundRequest::has_words() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoundRequest::set_has_words() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoundRequest::clear_has_words() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoundRequest::clear_words() {
  words_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_words();
}
inline const ::std::string& SoundRequest::words() const {
  // @@protoc_insertion_point(field_get:apollo.common.sound.SoundRequest.words)
  return words_.GetNoArena();
}
inline void SoundRequest::set_words(const ::std::string& value) {
  set_has_words();
  words_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.sound.SoundRequest.words)
}
#if LANG_CXX11
inline void SoundRequest::set_words(::std::string&& value) {
  set_has_words();
  words_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.sound.SoundRequest.words)
}
#endif
inline void SoundRequest::set_words(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_words();
  words_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.sound.SoundRequest.words)
}
inline void SoundRequest::set_words(const char* value, size_t size) {
  set_has_words();
  words_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.sound.SoundRequest.words)
}
inline ::std::string* SoundRequest::mutable_words() {
  set_has_words();
  // @@protoc_insertion_point(field_mutable:apollo.common.sound.SoundRequest.words)
  return words_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoundRequest::release_words() {
  // @@protoc_insertion_point(field_release:apollo.common.sound.SoundRequest.words)
  clear_has_words();
  return words_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoundRequest::set_allocated_words(::std::string* words) {
  if (words != NULL) {
    set_has_words();
  } else {
    clear_has_words();
  }
  words_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), words);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.sound.SoundRequest.words)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace sound
}  // namespace common
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::common::sound::SoundRequest_PriorityLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::common::sound::SoundRequest_PriorityLevel>() {
  return ::apollo::common::sound::SoundRequest_PriorityLevel_descriptor();
}
template <> struct is_proto_enum< ::apollo::common::sound::SoundRequest_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::common::sound::SoundRequest_Mode>() {
  return ::apollo::common::sound::SoundRequest_Mode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fcommon_2fproto_2fcar_5fsound_2eproto__INCLUDED
