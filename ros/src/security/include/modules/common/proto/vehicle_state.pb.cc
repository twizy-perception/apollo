// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/vehicle_state.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/common/proto/vehicle_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {
class VehicleStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleState> {
} _VehicleState_default_instance_;

namespace protobuf_modules_2fcommon_2fproto_2fvehicle_5fstate_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, pose_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 20, sizeof(VehicleState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleState_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/common/proto/vehicle_state.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _VehicleState_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  ::apollo::localization::protobuf_modules_2flocalization_2fproto_2fpose_2eproto::InitDefaults();
  _VehicleState_default_instance_.DefaultConstruct();
  _VehicleState_default_instance_.get_mutable()->pose_ = const_cast< ::apollo::localization::Pose*>(
      ::apollo::localization::Pose::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n(modules/common/proto/vehicle_state.pro"
      "to\022\rapollo.common\032\"modules/canbus/proto/"
      "chassis.proto\032%modules/localization/prot"
      "o/pose.proto\"\226\003\n\014VehicleState\022\014\n\001x\030\001 \001(\001"
      ":\0010\022\014\n\001y\030\002 \001(\001:\0010\022\014\n\001z\030\003 \001(\001:\0010\022\024\n\ttimes"
      "tamp\030\004 \001(\001:\0010\022\017\n\004roll\030\005 \001(\001:\0010\022\020\n\005pitch\030"
      "\006 \001(\001:\0010\022\016\n\003yaw\030\007 \001(\001:\0010\022\022\n\007heading\030\010 \001("
      "\001:\0010\022\020\n\005kappa\030\t \001(\001:\0010\022\032\n\017linear_velocit"
      "y\030\n \001(\001:\0010\022\033\n\020angular_velocity\030\013 \001(\001:\0010\022"
      "\036\n\023linear_acceleration\030\014 \001(\001:\0010\0221\n\004gear\030"
      "\r \001(\0162#.apollo.canbus.Chassis.GearPositi"
      "on\0228\n\014driving_mode\030\016 \001(\0162\".apollo.canbus"
      ".Chassis.DrivingMode\022\'\n\004pose\030\017 \001(\0132\031.apo"
      "llo.localization.Pose"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 541);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/common/proto/vehicle_state.proto", &protobuf_RegisterTypes);
  ::apollo::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::apollo::localization::protobuf_modules_2flocalization_2fproto_2fpose_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcommon_2fproto_2fvehicle_5fstate_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleState::kXFieldNumber;
const int VehicleState::kYFieldNumber;
const int VehicleState::kZFieldNumber;
const int VehicleState::kTimestampFieldNumber;
const int VehicleState::kRollFieldNumber;
const int VehicleState::kPitchFieldNumber;
const int VehicleState::kYawFieldNumber;
const int VehicleState::kHeadingFieldNumber;
const int VehicleState::kKappaFieldNumber;
const int VehicleState::kLinearVelocityFieldNumber;
const int VehicleState::kAngularVelocityFieldNumber;
const int VehicleState::kLinearAccelerationFieldNumber;
const int VehicleState::kGearFieldNumber;
const int VehicleState::kDrivingModeFieldNumber;
const int VehicleState::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleState::VehicleState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcommon_2fproto_2fvehicle_5fstate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.VehicleState)
}
VehicleState::VehicleState(const VehicleState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::apollo::localization::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&driving_mode_) -
    reinterpret_cast<char*>(&x_) + sizeof(driving_mode_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleState)
}

void VehicleState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pose_, 0, reinterpret_cast<char*>(&driving_mode_) -
    reinterpret_cast<char*>(&pose_) + sizeof(driving_mode_));
}

VehicleState::~VehicleState() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleState)
  SharedDtor();
}

void VehicleState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pose_;
  }
}

void VehicleState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleState::descriptor() {
  protobuf_modules_2fcommon_2fproto_2fvehicle_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fproto_2fvehicle_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleState& VehicleState::default_instance() {
  protobuf_modules_2fcommon_2fproto_2fvehicle_5fstate_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleState* VehicleState::New(::google::protobuf::Arena* arena) const {
  VehicleState* n = new VehicleState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleState)
  if (has_pose()) {
    GOOGLE_DCHECK(pose_ != NULL);
    pose_->::apollo::localization::Pose::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&x_) + sizeof(yaw_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&heading_, 0, reinterpret_cast<char*>(&driving_mode_) -
      reinterpret_cast<char*>(&heading_) + sizeof(driving_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.VehicleState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roll = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_roll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pitch = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_pitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yaw = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double linear_velocity = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_linear_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linear_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double angular_velocity = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_angular_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angular_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double linear_acceleration = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_linear_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linear_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.Pose pose = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.VehicleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.VehicleState)
  return false;
#undef DO_
}

void VehicleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.VehicleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double timestamp = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->timestamp(), output);
  }

  // optional double roll = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->roll(), output);
  }

  // optional double pitch = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pitch(), output);
  }

  // optional double yaw = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->yaw(), output);
  }

  // optional double heading = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->heading(), output);
  }

  // optional double kappa = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->kappa(), output);
  }

  // optional double linear_velocity = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->linear_velocity(), output);
  }

  // optional double angular_velocity = 11 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->angular_velocity(), output);
  }

  // optional double linear_acceleration = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->linear_acceleration(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->gear(), output);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->driving_mode(), output);
  }

  // optional .apollo.localization.Pose pose = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->pose_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.VehicleState)
}

::google::protobuf::uint8* VehicleState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double timestamp = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->timestamp(), target);
  }

  // optional double roll = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->roll(), target);
  }

  // optional double pitch = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pitch(), target);
  }

  // optional double yaw = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->yaw(), target);
  }

  // optional double heading = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->heading(), target);
  }

  // optional double kappa = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->kappa(), target);
  }

  // optional double linear_velocity = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->linear_velocity(), target);
  }

  // optional double angular_velocity = 11 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->angular_velocity(), target);
  }

  // optional double linear_acceleration = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->linear_acceleration(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->gear(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->driving_mode(), target);
  }

  // optional .apollo.localization.Pose pose = 15;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->pose_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleState)
  return target;
}

size_t VehicleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.localization.Pose pose = 15;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional double x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 4 [default = 0];
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double roll = 5 [default = 0];
    if (has_roll()) {
      total_size += 1 + 8;
    }

    // optional double pitch = 6 [default = 0];
    if (has_pitch()) {
      total_size += 1 + 8;
    }

    // optional double yaw = 7 [default = 0];
    if (has_yaw()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional double heading = 8 [default = 0];
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double kappa = 9 [default = 0];
    if (has_kappa()) {
      total_size += 1 + 8;
    }

    // optional double linear_velocity = 10 [default = 0];
    if (has_linear_velocity()) {
      total_size += 1 + 8;
    }

    // optional double angular_velocity = 11 [default = 0];
    if (has_angular_velocity()) {
      total_size += 1 + 8;
    }

    // optional double linear_acceleration = 12 [default = 0];
    if (has_linear_acceleration()) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear = 13;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear());
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 14;
    if (has_driving_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.VehicleState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.VehicleState)
    MergeFrom(*source);
  }
}

void VehicleState::MergeFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pose()->::apollo::localization::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00000040u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000080u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000200u) {
      kappa_ = from.kappa_;
    }
    if (cached_has_bits & 0x00000400u) {
      linear_velocity_ = from.linear_velocity_;
    }
    if (cached_has_bits & 0x00000800u) {
      angular_velocity_ = from.angular_velocity_;
    }
    if (cached_has_bits & 0x00001000u) {
      linear_acceleration_ = from.linear_acceleration_;
    }
    if (cached_has_bits & 0x00002000u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00004000u) {
      driving_mode_ = from.driving_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleState::CopyFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState::IsInitialized() const {
  return true;
}

void VehicleState::Swap(VehicleState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleState::InternalSwap(VehicleState* other) {
  std::swap(pose_, other->pose_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(roll_, other->roll_);
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_, other->yaw_);
  std::swap(heading_, other->heading_);
  std::swap(kappa_, other->kappa_);
  std::swap(linear_velocity_, other->linear_velocity_);
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(linear_acceleration_, other->linear_acceleration_);
  std::swap(gear_, other->gear_);
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleState::GetMetadata() const {
  protobuf_modules_2fcommon_2fproto_2fvehicle_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fproto_2fvehicle_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleState

// optional double x = 1 [default = 0];
bool VehicleState::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleState::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleState::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleState::clear_x() {
  x_ = 0;
  clear_has_x();
}
double VehicleState::x() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.x)
  return x_;
}
void VehicleState::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.x)
}

// optional double y = 2 [default = 0];
bool VehicleState::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleState::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleState::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleState::clear_y() {
  y_ = 0;
  clear_has_y();
}
double VehicleState::y() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.y)
  return y_;
}
void VehicleState::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.y)
}

// optional double z = 3 [default = 0];
bool VehicleState::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleState::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleState::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleState::clear_z() {
  z_ = 0;
  clear_has_z();
}
double VehicleState::z() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.z)
  return z_;
}
void VehicleState::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.z)
}

// optional double timestamp = 4 [default = 0];
bool VehicleState::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleState::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleState::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleState::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double VehicleState::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.timestamp)
  return timestamp_;
}
void VehicleState::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.timestamp)
}

// optional double roll = 5 [default = 0];
bool VehicleState::has_roll() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleState::set_has_roll() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleState::clear_has_roll() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleState::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
double VehicleState::roll() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.roll)
  return roll_;
}
void VehicleState::set_roll(double value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.roll)
}

// optional double pitch = 6 [default = 0];
bool VehicleState::has_pitch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleState::set_has_pitch() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleState::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleState::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
double VehicleState::pitch() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.pitch)
  return pitch_;
}
void VehicleState::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.pitch)
}

// optional double yaw = 7 [default = 0];
bool VehicleState::has_yaw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VehicleState::set_has_yaw() {
  _has_bits_[0] |= 0x00000080u;
}
void VehicleState::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000080u;
}
void VehicleState::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
double VehicleState::yaw() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.yaw)
  return yaw_;
}
void VehicleState::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.yaw)
}

// optional double heading = 8 [default = 0];
bool VehicleState::has_heading() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleState::set_has_heading() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleState::clear_has_heading() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleState::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
double VehicleState::heading() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.heading)
  return heading_;
}
void VehicleState::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.heading)
}

// optional double kappa = 9 [default = 0];
bool VehicleState::has_kappa() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VehicleState::set_has_kappa() {
  _has_bits_[0] |= 0x00000200u;
}
void VehicleState::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000200u;
}
void VehicleState::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
double VehicleState::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.kappa)
  return kappa_;
}
void VehicleState::set_kappa(double value) {
  set_has_kappa();
  kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.kappa)
}

// optional double linear_velocity = 10 [default = 0];
bool VehicleState::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VehicleState::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000400u;
}
void VehicleState::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000400u;
}
void VehicleState::clear_linear_velocity() {
  linear_velocity_ = 0;
  clear_has_linear_velocity();
}
double VehicleState::linear_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.linear_velocity)
  return linear_velocity_;
}
void VehicleState::set_linear_velocity(double value) {
  set_has_linear_velocity();
  linear_velocity_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.linear_velocity)
}

// optional double angular_velocity = 11 [default = 0];
bool VehicleState::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VehicleState::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000800u;
}
void VehicleState::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000800u;
}
void VehicleState::clear_angular_velocity() {
  angular_velocity_ = 0;
  clear_has_angular_velocity();
}
double VehicleState::angular_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.angular_velocity)
  return angular_velocity_;
}
void VehicleState::set_angular_velocity(double value) {
  set_has_angular_velocity();
  angular_velocity_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.angular_velocity)
}

// optional double linear_acceleration = 12 [default = 0];
bool VehicleState::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VehicleState::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00001000u;
}
void VehicleState::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00001000u;
}
void VehicleState::clear_linear_acceleration() {
  linear_acceleration_ = 0;
  clear_has_linear_acceleration();
}
double VehicleState::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.linear_acceleration)
  return linear_acceleration_;
}
void VehicleState::set_linear_acceleration(double value) {
  set_has_linear_acceleration();
  linear_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.linear_acceleration)
}

// optional .apollo.canbus.Chassis.GearPosition gear = 13;
bool VehicleState::has_gear() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VehicleState::set_has_gear() {
  _has_bits_[0] |= 0x00002000u;
}
void VehicleState::clear_has_gear() {
  _has_bits_[0] &= ~0x00002000u;
}
void VehicleState::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
::apollo::canbus::Chassis_GearPosition VehicleState::gear() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.gear)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_);
}
void VehicleState::set_gear(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear();
  gear_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.gear)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 14;
bool VehicleState::has_driving_mode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VehicleState::set_has_driving_mode() {
  _has_bits_[0] |= 0x00004000u;
}
void VehicleState::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00004000u;
}
void VehicleState::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
::apollo::canbus::Chassis_DrivingMode VehicleState::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
void VehicleState::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.driving_mode)
}

// optional .apollo.localization.Pose pose = 15;
bool VehicleState::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleState::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleState::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleState::clear_pose() {
  if (pose_ != NULL) pose_->::apollo::localization::Pose::Clear();
  clear_has_pose();
}
const ::apollo::localization::Pose& VehicleState::pose() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.pose)
  return pose_ != NULL ? *pose_
                         : *::apollo::localization::Pose::internal_default_instance();
}
::apollo::localization::Pose* VehicleState::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::apollo::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleState.pose)
  return pose_;
}
::apollo::localization::Pose* VehicleState::release_pose() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleState.pose)
  clear_has_pose();
  ::apollo::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void VehicleState::set_allocated_pose(::apollo::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleState.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
