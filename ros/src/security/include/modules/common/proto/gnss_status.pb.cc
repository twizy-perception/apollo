// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/gnss_status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/common/proto/gnss_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {
namespace gnss_status {
class StreamStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamStatus> {
} _StreamStatus_default_instance_;
class InsStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InsStatus> {
} _InsStatus_default_instance_;
class GnssStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GnssStatus> {
} _GnssStatus_default_instance_;

namespace protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStatus, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStatus, ins_stream_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStatus, rtk_stream_in_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStatus, rtk_stream_out_type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStatus, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStatus, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, solution_completed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, solution_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, position_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssStatus, num_sats_),
  0,
  1,
  2,
  3,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(StreamStatus)},
  { 13, 20, sizeof(InsStatus)},
  { 22, 32, sizeof(GnssStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InsStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GnssStatus_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/common/proto/gnss_status.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _StreamStatus_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _InsStatus_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _GnssStatus_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  _StreamStatus_default_instance_.DefaultConstruct();
  _InsStatus_default_instance_.DefaultConstruct();
  _GnssStatus_default_instance_.DefaultConstruct();
  _StreamStatus_default_instance_.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _InsStatus_default_instance_.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _GnssStatus_default_instance_.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n&modules/common/proto/gnss_status.proto"
      "\022\031apollo.common.gnss_status\032!modules/com"
      "mon/proto/header.proto\"\344\002\n\014StreamStatus\022"
      "%\n\006header\030\001 \001(\0132\025.apollo.common.Header\022S"
      "\n\017ins_stream_type\030\002 \001(\0162,.apollo.common."
      "gnss_status.StreamStatus.Type:\014DISCONNEC"
      "TED\022V\n\022rtk_stream_in_type\030\003 \001(\0162,.apollo"
      ".common.gnss_status.StreamStatus.Type:\014D"
      "ISCONNECTED\022W\n\023rtk_stream_out_type\030\004 \001(\016"
      "2,.apollo.common.gnss_status.StreamStatu"
      "s.Type:\014DISCONNECTED\"\'\n\004Type\022\020\n\014DISCONNE"
      "CTED\020\000\022\r\n\tCONNECTED\020\001\"\243\001\n\tInsStatus\022%\n\006h"
      "eader\030\001 \001(\0132\025.apollo.common.Header\022@\n\004ty"
      "pe\030\002 \001(\0162).apollo.common.gnss_status.Ins"
      "Status.Type:\007INVALID\"-\n\004Type\022\013\n\007INVALID\020"
      "\000\022\016\n\nCONVERGING\020\001\022\010\n\004GOOD\020\002\"\241\001\n\nGnssStat"
      "us\022%\n\006header\030\001 \001(\0132\025.apollo.common.Heade"
      "r\022!\n\022solution_completed\030\002 \001(\010:\005false\022\032\n\017"
      "solution_status\030\003 \001(\r:\0010\022\030\n\rposition_typ"
      "e\030\004 \001(\r:\0010\022\023\n\010num_sats\030\005 \001(\005:\0010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 791);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/common/proto/gnss_status.proto", &protobuf_RegisterTypes);
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto

const ::google::protobuf::EnumDescriptor* StreamStatus_Type_descriptor() {
  protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::file_level_enum_descriptors[0];
}
bool StreamStatus_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StreamStatus_Type StreamStatus::DISCONNECTED;
const StreamStatus_Type StreamStatus::CONNECTED;
const StreamStatus_Type StreamStatus::Type_MIN;
const StreamStatus_Type StreamStatus::Type_MAX;
const int StreamStatus::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* InsStatus_Type_descriptor() {
  protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::file_level_enum_descriptors[1];
}
bool InsStatus_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InsStatus_Type InsStatus::INVALID;
const InsStatus_Type InsStatus::CONVERGING;
const InsStatus_Type InsStatus::GOOD;
const InsStatus_Type InsStatus::Type_MIN;
const InsStatus_Type InsStatus::Type_MAX;
const int InsStatus::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamStatus::kHeaderFieldNumber;
const int StreamStatus::kInsStreamTypeFieldNumber;
const int StreamStatus::kRtkStreamInTypeFieldNumber;
const int StreamStatus::kRtkStreamOutTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamStatus::StreamStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.gnss_status.StreamStatus)
}
StreamStatus::StreamStatus(const StreamStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&ins_stream_type_, &from.ins_stream_type_,
    reinterpret_cast<char*>(&rtk_stream_out_type_) -
    reinterpret_cast<char*>(&ins_stream_type_) + sizeof(rtk_stream_out_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.gnss_status.StreamStatus)
}

void StreamStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&rtk_stream_out_type_) -
    reinterpret_cast<char*>(&header_) + sizeof(rtk_stream_out_type_));
}

StreamStatus::~StreamStatus() {
  // @@protoc_insertion_point(destructor:apollo.common.gnss_status.StreamStatus)
  SharedDtor();
}

void StreamStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void StreamStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamStatus::descriptor() {
  protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamStatus& StreamStatus::default_instance() {
  protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamStatus* StreamStatus::New(::google::protobuf::Arena* arena) const {
  StreamStatus* n = new StreamStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.gnss_status.StreamStatus)
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::apollo::common::Header::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&ins_stream_type_, 0, reinterpret_cast<char*>(&rtk_stream_out_type_) -
      reinterpret_cast<char*>(&ins_stream_type_) + sizeof(rtk_stream_out_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StreamStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.gnss_status.StreamStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.gnss_status.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::gnss_status::StreamStatus_Type_IsValid(value)) {
            set_ins_stream_type(static_cast< ::apollo::common::gnss_status::StreamStatus_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.gnss_status.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::gnss_status::StreamStatus_Type_IsValid(value)) {
            set_rtk_stream_in_type(static_cast< ::apollo::common::gnss_status::StreamStatus_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.gnss_status.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::gnss_status::StreamStatus_Type_IsValid(value)) {
            set_rtk_stream_out_type(static_cast< ::apollo::common::gnss_status::StreamStatus_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.gnss_status.StreamStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.gnss_status.StreamStatus)
  return false;
#undef DO_
}

void StreamStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.gnss_status.StreamStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.common.gnss_status.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ins_stream_type(), output);
  }

  // optional .apollo.common.gnss_status.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rtk_stream_in_type(), output);
  }

  // optional .apollo.common.gnss_status.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->rtk_stream_out_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.gnss_status.StreamStatus)
}

::google::protobuf::uint8* StreamStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.gnss_status.StreamStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional .apollo.common.gnss_status.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ins_stream_type(), target);
  }

  // optional .apollo.common.gnss_status.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rtk_stream_in_type(), target);
  }

  // optional .apollo.common.gnss_status.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->rtk_stream_out_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.gnss_status.StreamStatus)
  return target;
}

size_t StreamStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.gnss_status.StreamStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.common.gnss_status.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
    if (has_ins_stream_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ins_stream_type());
    }

    // optional .apollo.common.gnss_status.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
    if (has_rtk_stream_in_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rtk_stream_in_type());
    }

    // optional .apollo.common.gnss_status.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
    if (has_rtk_stream_out_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rtk_stream_out_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.gnss_status.StreamStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.gnss_status.StreamStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.gnss_status.StreamStatus)
    MergeFrom(*source);
  }
}

void StreamStatus::MergeFrom(const StreamStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.gnss_status.StreamStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ins_stream_type_ = from.ins_stream_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      rtk_stream_in_type_ = from.rtk_stream_in_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtk_stream_out_type_ = from.rtk_stream_out_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.gnss_status.StreamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStatus::CopyFrom(const StreamStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.gnss_status.StreamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStatus::IsInitialized() const {
  return true;
}

void StreamStatus::Swap(StreamStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamStatus::InternalSwap(StreamStatus* other) {
  std::swap(header_, other->header_);
  std::swap(ins_stream_type_, other->ins_stream_type_);
  std::swap(rtk_stream_in_type_, other->rtk_stream_in_type_);
  std::swap(rtk_stream_out_type_, other->rtk_stream_out_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamStatus::GetMetadata() const {
  protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamStatus

// optional .apollo.common.Header header = 1;
bool StreamStatus::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StreamStatus::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void StreamStatus::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void StreamStatus::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& StreamStatus::header() const {
  // @@protoc_insertion_point(field_get:apollo.common.gnss_status.StreamStatus.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* StreamStatus::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.gnss_status.StreamStatus.header)
  return header_;
}
::apollo::common::Header* StreamStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.gnss_status.StreamStatus.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void StreamStatus::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.gnss_status.StreamStatus.header)
}

// optional .apollo.common.gnss_status.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
bool StreamStatus::has_ins_stream_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StreamStatus::set_has_ins_stream_type() {
  _has_bits_[0] |= 0x00000002u;
}
void StreamStatus::clear_has_ins_stream_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void StreamStatus::clear_ins_stream_type() {
  ins_stream_type_ = 0;
  clear_has_ins_stream_type();
}
::apollo::common::gnss_status::StreamStatus_Type StreamStatus::ins_stream_type() const {
  // @@protoc_insertion_point(field_get:apollo.common.gnss_status.StreamStatus.ins_stream_type)
  return static_cast< ::apollo::common::gnss_status::StreamStatus_Type >(ins_stream_type_);
}
void StreamStatus::set_ins_stream_type(::apollo::common::gnss_status::StreamStatus_Type value) {
  assert(::apollo::common::gnss_status::StreamStatus_Type_IsValid(value));
  set_has_ins_stream_type();
  ins_stream_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.gnss_status.StreamStatus.ins_stream_type)
}

// optional .apollo.common.gnss_status.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
bool StreamStatus::has_rtk_stream_in_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StreamStatus::set_has_rtk_stream_in_type() {
  _has_bits_[0] |= 0x00000004u;
}
void StreamStatus::clear_has_rtk_stream_in_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void StreamStatus::clear_rtk_stream_in_type() {
  rtk_stream_in_type_ = 0;
  clear_has_rtk_stream_in_type();
}
::apollo::common::gnss_status::StreamStatus_Type StreamStatus::rtk_stream_in_type() const {
  // @@protoc_insertion_point(field_get:apollo.common.gnss_status.StreamStatus.rtk_stream_in_type)
  return static_cast< ::apollo::common::gnss_status::StreamStatus_Type >(rtk_stream_in_type_);
}
void StreamStatus::set_rtk_stream_in_type(::apollo::common::gnss_status::StreamStatus_Type value) {
  assert(::apollo::common::gnss_status::StreamStatus_Type_IsValid(value));
  set_has_rtk_stream_in_type();
  rtk_stream_in_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.gnss_status.StreamStatus.rtk_stream_in_type)
}

// optional .apollo.common.gnss_status.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
bool StreamStatus::has_rtk_stream_out_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StreamStatus::set_has_rtk_stream_out_type() {
  _has_bits_[0] |= 0x00000008u;
}
void StreamStatus::clear_has_rtk_stream_out_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void StreamStatus::clear_rtk_stream_out_type() {
  rtk_stream_out_type_ = 0;
  clear_has_rtk_stream_out_type();
}
::apollo::common::gnss_status::StreamStatus_Type StreamStatus::rtk_stream_out_type() const {
  // @@protoc_insertion_point(field_get:apollo.common.gnss_status.StreamStatus.rtk_stream_out_type)
  return static_cast< ::apollo::common::gnss_status::StreamStatus_Type >(rtk_stream_out_type_);
}
void StreamStatus::set_rtk_stream_out_type(::apollo::common::gnss_status::StreamStatus_Type value) {
  assert(::apollo::common::gnss_status::StreamStatus_Type_IsValid(value));
  set_has_rtk_stream_out_type();
  rtk_stream_out_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.gnss_status.StreamStatus.rtk_stream_out_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsStatus::kHeaderFieldNumber;
const int InsStatus::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsStatus::InsStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.gnss_status.InsStatus)
}
InsStatus::InsStatus(const InsStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.common.gnss_status.InsStatus)
}

void InsStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&header_) + sizeof(type_));
}

InsStatus::~InsStatus() {
  // @@protoc_insertion_point(destructor:apollo.common.gnss_status.InsStatus)
  SharedDtor();
}

void InsStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void InsStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsStatus::descriptor() {
  protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InsStatus& InsStatus::default_instance() {
  protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

InsStatus* InsStatus::New(::google::protobuf::Arena* arena) const {
  InsStatus* n = new InsStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.gnss_status.InsStatus)
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::apollo::common::Header::Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InsStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.gnss_status.InsStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.gnss_status.InsStatus.Type type = 2 [default = INVALID];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::gnss_status::InsStatus_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::common::gnss_status::InsStatus_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.gnss_status.InsStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.gnss_status.InsStatus)
  return false;
#undef DO_
}

void InsStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.gnss_status.InsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.common.gnss_status.InsStatus.Type type = 2 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.gnss_status.InsStatus)
}

::google::protobuf::uint8* InsStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.gnss_status.InsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional .apollo.common.gnss_status.InsStatus.Type type = 2 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.gnss_status.InsStatus)
  return target;
}

size_t InsStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.gnss_status.InsStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.common.gnss_status.InsStatus.Type type = 2 [default = INVALID];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.gnss_status.InsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const InsStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InsStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.gnss_status.InsStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.gnss_status.InsStatus)
    MergeFrom(*source);
  }
}

void InsStatus::MergeFrom(const InsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.gnss_status.InsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InsStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.gnss_status.InsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsStatus::CopyFrom(const InsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.gnss_status.InsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsStatus::IsInitialized() const {
  return true;
}

void InsStatus::Swap(InsStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsStatus::InternalSwap(InsStatus* other) {
  std::swap(header_, other->header_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InsStatus::GetMetadata() const {
  protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InsStatus

// optional .apollo.common.Header header = 1;
bool InsStatus::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InsStatus::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void InsStatus::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void InsStatus::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& InsStatus::header() const {
  // @@protoc_insertion_point(field_get:apollo.common.gnss_status.InsStatus.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* InsStatus::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.gnss_status.InsStatus.header)
  return header_;
}
::apollo::common::Header* InsStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.gnss_status.InsStatus.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void InsStatus::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.gnss_status.InsStatus.header)
}

// optional .apollo.common.gnss_status.InsStatus.Type type = 2 [default = INVALID];
bool InsStatus::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InsStatus::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void InsStatus::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void InsStatus::clear_type() {
  type_ = 0;
  clear_has_type();
}
::apollo::common::gnss_status::InsStatus_Type InsStatus::type() const {
  // @@protoc_insertion_point(field_get:apollo.common.gnss_status.InsStatus.type)
  return static_cast< ::apollo::common::gnss_status::InsStatus_Type >(type_);
}
void InsStatus::set_type(::apollo::common::gnss_status::InsStatus_Type value) {
  assert(::apollo::common::gnss_status::InsStatus_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.gnss_status.InsStatus.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GnssStatus::kHeaderFieldNumber;
const int GnssStatus::kSolutionCompletedFieldNumber;
const int GnssStatus::kSolutionStatusFieldNumber;
const int GnssStatus::kPositionTypeFieldNumber;
const int GnssStatus::kNumSatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GnssStatus::GnssStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.gnss_status.GnssStatus)
}
GnssStatus::GnssStatus(const GnssStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&solution_completed_, &from.solution_completed_,
    reinterpret_cast<char*>(&num_sats_) -
    reinterpret_cast<char*>(&solution_completed_) + sizeof(num_sats_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.gnss_status.GnssStatus)
}

void GnssStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&num_sats_) -
    reinterpret_cast<char*>(&header_) + sizeof(num_sats_));
}

GnssStatus::~GnssStatus() {
  // @@protoc_insertion_point(destructor:apollo.common.gnss_status.GnssStatus)
  SharedDtor();
}

void GnssStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GnssStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GnssStatus::descriptor() {
  protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GnssStatus& GnssStatus::default_instance() {
  protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

GnssStatus* GnssStatus::New(::google::protobuf::Arena* arena) const {
  GnssStatus* n = new GnssStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GnssStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.gnss_status.GnssStatus)
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::apollo::common::Header::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&solution_completed_, 0, reinterpret_cast<char*>(&num_sats_) -
      reinterpret_cast<char*>(&solution_completed_) + sizeof(num_sats_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GnssStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.gnss_status.GnssStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solution_completed = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_solution_completed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solution_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solution_status = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_solution_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solution_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_type = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_position_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sats = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_num_sats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.gnss_status.GnssStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.gnss_status.GnssStatus)
  return false;
#undef DO_
}

void GnssStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.gnss_status.GnssStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional bool solution_completed = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->solution_completed(), output);
  }

  // optional uint32 solution_status = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->solution_status(), output);
  }

  // optional uint32 position_type = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->position_type(), output);
  }

  // optional int32 num_sats = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_sats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.gnss_status.GnssStatus)
}

::google::protobuf::uint8* GnssStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.gnss_status.GnssStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional bool solution_completed = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->solution_completed(), target);
  }

  // optional uint32 solution_status = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->solution_status(), target);
  }

  // optional uint32 position_type = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->position_type(), target);
  }

  // optional int32 num_sats = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_sats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.gnss_status.GnssStatus)
  return target;
}

size_t GnssStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.gnss_status.GnssStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional bool solution_completed = 2 [default = false];
    if (has_solution_completed()) {
      total_size += 1 + 1;
    }

    // optional uint32 solution_status = 3 [default = 0];
    if (has_solution_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solution_status());
    }

    // optional uint32 position_type = 4 [default = 0];
    if (has_position_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_type());
    }

    // optional int32 num_sats = 5 [default = 0];
    if (has_num_sats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sats());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GnssStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.gnss_status.GnssStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GnssStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.gnss_status.GnssStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.gnss_status.GnssStatus)
    MergeFrom(*source);
  }
}

void GnssStatus::MergeFrom(const GnssStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.gnss_status.GnssStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      solution_completed_ = from.solution_completed_;
    }
    if (cached_has_bits & 0x00000004u) {
      solution_status_ = from.solution_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      position_type_ = from.position_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_sats_ = from.num_sats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GnssStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.gnss_status.GnssStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssStatus::CopyFrom(const GnssStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.gnss_status.GnssStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssStatus::IsInitialized() const {
  return true;
}

void GnssStatus::Swap(GnssStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GnssStatus::InternalSwap(GnssStatus* other) {
  std::swap(header_, other->header_);
  std::swap(solution_completed_, other->solution_completed_);
  std::swap(solution_status_, other->solution_status_);
  std::swap(position_type_, other->position_type_);
  std::swap(num_sats_, other->num_sats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GnssStatus::GetMetadata() const {
  protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcommon_2fproto_2fgnss_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GnssStatus

// optional .apollo.common.Header header = 1;
bool GnssStatus::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GnssStatus::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void GnssStatus::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void GnssStatus::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& GnssStatus::header() const {
  // @@protoc_insertion_point(field_get:apollo.common.gnss_status.GnssStatus.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* GnssStatus::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.gnss_status.GnssStatus.header)
  return header_;
}
::apollo::common::Header* GnssStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.gnss_status.GnssStatus.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void GnssStatus::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.gnss_status.GnssStatus.header)
}

// optional bool solution_completed = 2 [default = false];
bool GnssStatus::has_solution_completed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GnssStatus::set_has_solution_completed() {
  _has_bits_[0] |= 0x00000002u;
}
void GnssStatus::clear_has_solution_completed() {
  _has_bits_[0] &= ~0x00000002u;
}
void GnssStatus::clear_solution_completed() {
  solution_completed_ = false;
  clear_has_solution_completed();
}
bool GnssStatus::solution_completed() const {
  // @@protoc_insertion_point(field_get:apollo.common.gnss_status.GnssStatus.solution_completed)
  return solution_completed_;
}
void GnssStatus::set_solution_completed(bool value) {
  set_has_solution_completed();
  solution_completed_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.gnss_status.GnssStatus.solution_completed)
}

// optional uint32 solution_status = 3 [default = 0];
bool GnssStatus::has_solution_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GnssStatus::set_has_solution_status() {
  _has_bits_[0] |= 0x00000004u;
}
void GnssStatus::clear_has_solution_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void GnssStatus::clear_solution_status() {
  solution_status_ = 0u;
  clear_has_solution_status();
}
::google::protobuf::uint32 GnssStatus::solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.common.gnss_status.GnssStatus.solution_status)
  return solution_status_;
}
void GnssStatus::set_solution_status(::google::protobuf::uint32 value) {
  set_has_solution_status();
  solution_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.gnss_status.GnssStatus.solution_status)
}

// optional uint32 position_type = 4 [default = 0];
bool GnssStatus::has_position_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GnssStatus::set_has_position_type() {
  _has_bits_[0] |= 0x00000008u;
}
void GnssStatus::clear_has_position_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void GnssStatus::clear_position_type() {
  position_type_ = 0u;
  clear_has_position_type();
}
::google::protobuf::uint32 GnssStatus::position_type() const {
  // @@protoc_insertion_point(field_get:apollo.common.gnss_status.GnssStatus.position_type)
  return position_type_;
}
void GnssStatus::set_position_type(::google::protobuf::uint32 value) {
  set_has_position_type();
  position_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.gnss_status.GnssStatus.position_type)
}

// optional int32 num_sats = 5 [default = 0];
bool GnssStatus::has_num_sats() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GnssStatus::set_has_num_sats() {
  _has_bits_[0] |= 0x00000010u;
}
void GnssStatus::clear_has_num_sats() {
  _has_bits_[0] &= ~0x00000010u;
}
void GnssStatus::clear_num_sats() {
  num_sats_ = 0;
  clear_has_num_sats();
}
::google::protobuf::int32 GnssStatus::num_sats() const {
  // @@protoc_insertion_point(field_get:apollo.common.gnss_status.GnssStatus.num_sats)
  return num_sats_;
}
void GnssStatus::set_num_sats(::google::protobuf::int32 value) {
  set_has_num_sats();
  num_sats_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.gnss_status.GnssStatus.num_sats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss_status
}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
