// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_geometry.proto

#ifndef PROTOBUF_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto__INCLUDED
#define PROTOBUF_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
namespace apollo {
namespace common {
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointENU;
class PointENUDefaultTypeInternal;
extern PointENUDefaultTypeInternal _PointENU_default_instance_;
class PointLLH;
class PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
}  // namespace common
namespace hdmap {
class Curve;
class CurveDefaultTypeInternal;
extern CurveDefaultTypeInternal _Curve_default_instance_;
class CurveSegment;
class CurveSegmentDefaultTypeInternal;
extern CurveSegmentDefaultTypeInternal _CurveSegment_default_instance_;
class LineSegment;
class LineSegmentDefaultTypeInternal;
extern LineSegmentDefaultTypeInternal _LineSegment_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
}  // namespace hdmap
}  // namespace apollo

namespace apollo {
namespace hdmap {

namespace protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto

// ===================================================================

class Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Polygon* other);

  // implements Message ----------------------------------------------

  inline Polygon* New() const PROTOBUF_FINAL { return New(NULL); }

  Polygon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.PointENU point = 1;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::apollo::common::PointENU& point(int index) const;
  ::apollo::common::PointENU* mutable_point(int index);
  ::apollo::common::PointENU* add_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >&
      point() const;

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Polygon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU > point_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LineSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.LineSegment) */ {
 public:
  LineSegment();
  virtual ~LineSegment();

  LineSegment(const LineSegment& from);

  inline LineSegment& operator=(const LineSegment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineSegment& default_instance();

  static inline const LineSegment* internal_default_instance() {
    return reinterpret_cast<const LineSegment*>(
               &_LineSegment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LineSegment* other);

  // implements Message ----------------------------------------------

  inline LineSegment* New() const PROTOBUF_FINAL { return New(NULL); }

  LineSegment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LineSegment& from);
  void MergeFrom(const LineSegment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LineSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.PointENU point = 1;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::apollo::common::PointENU& point(int index) const;
  ::apollo::common::PointENU* mutable_point(int index);
  ::apollo::common::PointENU* add_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >&
      point() const;

  // @@protoc_insertion_point(class_scope:apollo.hdmap.LineSegment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU > point_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CurveSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.CurveSegment) */ {
 public:
  CurveSegment();
  virtual ~CurveSegment();

  CurveSegment(const CurveSegment& from);

  inline CurveSegment& operator=(const CurveSegment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CurveSegment& default_instance();

  enum CurveTypeCase {
    kLineSegment = 1,
    CURVE_TYPE_NOT_SET = 0,
  };

  static inline const CurveSegment* internal_default_instance() {
    return reinterpret_cast<const CurveSegment*>(
               &_CurveSegment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CurveSegment* other);

  // implements Message ----------------------------------------------

  inline CurveSegment* New() const PROTOBUF_FINAL { return New(NULL); }

  CurveSegment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CurveSegment& from);
  void MergeFrom(const CurveSegment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CurveSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.PointENU start_position = 7;
  bool has_start_position() const;
  void clear_start_position();
  static const int kStartPositionFieldNumber = 7;
  const ::apollo::common::PointENU& start_position() const;
  ::apollo::common::PointENU* mutable_start_position();
  ::apollo::common::PointENU* release_start_position();
  void set_allocated_start_position(::apollo::common::PointENU* start_position);

  // optional double s = 6;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 6;
  double s() const;
  void set_s(double value);

  // optional double heading = 8;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 8;
  double heading() const;
  void set_heading(double value);

  // optional double length = 9;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 9;
  double length() const;
  void set_length(double value);

  // optional .apollo.hdmap.LineSegment line_segment = 1;
  bool has_line_segment() const;
  void clear_line_segment();
  static const int kLineSegmentFieldNumber = 1;
  const ::apollo::hdmap::LineSegment& line_segment() const;
  ::apollo::hdmap::LineSegment* mutable_line_segment();
  ::apollo::hdmap::LineSegment* release_line_segment();
  void set_allocated_line_segment(::apollo::hdmap::LineSegment* line_segment);

  CurveTypeCase curve_type_case() const;
  // @@protoc_insertion_point(class_scope:apollo.hdmap.CurveSegment)
 private:
  void set_has_line_segment();
  void set_has_s();
  void clear_has_s();
  void set_has_start_position();
  void clear_has_start_position();
  void set_has_heading();
  void clear_has_heading();
  void set_has_length();
  void clear_has_length();

  inline bool has_curve_type() const;
  void clear_curve_type();
  inline void clear_has_curve_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::apollo::common::PointENU* start_position_;
  double s_;
  double heading_;
  double length_;
  union CurveTypeUnion {
    CurveTypeUnion() {}
    ::apollo::hdmap::LineSegment* line_segment_;
  } curve_type_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Curve : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Curve) */ {
 public:
  Curve();
  virtual ~Curve();

  Curve(const Curve& from);

  inline Curve& operator=(const Curve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Curve& default_instance();

  static inline const Curve* internal_default_instance() {
    return reinterpret_cast<const Curve*>(
               &_Curve_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Curve* other);

  // implements Message ----------------------------------------------

  inline Curve* New() const PROTOBUF_FINAL { return New(NULL); }

  Curve* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Curve& from);
  void MergeFrom(const Curve& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Curve* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.hdmap.CurveSegment segment = 1;
  int segment_size() const;
  void clear_segment();
  static const int kSegmentFieldNumber = 1;
  const ::apollo::hdmap::CurveSegment& segment(int index) const;
  ::apollo::hdmap::CurveSegment* mutable_segment(int index);
  ::apollo::hdmap::CurveSegment* add_segment();
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::CurveSegment >*
      mutable_segment();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::CurveSegment >&
      segment() const;

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Curve)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::CurveSegment > segment_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Polygon

// repeated .apollo.common.PointENU point = 1;
inline int Polygon::point_size() const {
  return point_.size();
}
inline void Polygon::clear_point() {
  point_.Clear();
}
inline const ::apollo::common::PointENU& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Polygon.point)
  return point_.Get(index);
}
inline ::apollo::common::PointENU* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Polygon.point)
  return point_.Mutable(index);
}
inline ::apollo::common::PointENU* Polygon::add_point() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Polygon.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Polygon.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Polygon.point)
  return point_;
}

// -------------------------------------------------------------------

// LineSegment

// repeated .apollo.common.PointENU point = 1;
inline int LineSegment::point_size() const {
  return point_.size();
}
inline void LineSegment::clear_point() {
  point_.Clear();
}
inline const ::apollo::common::PointENU& LineSegment::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LineSegment.point)
  return point_.Get(index);
}
inline ::apollo::common::PointENU* LineSegment::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.LineSegment.point)
  return point_.Mutable(index);
}
inline ::apollo::common::PointENU* LineSegment::add_point() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.LineSegment.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >*
LineSegment::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.LineSegment.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::PointENU >&
LineSegment::point() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.LineSegment.point)
  return point_;
}

// -------------------------------------------------------------------

// CurveSegment

// optional .apollo.hdmap.LineSegment line_segment = 1;
inline bool CurveSegment::has_line_segment() const {
  return curve_type_case() == kLineSegment;
}
inline void CurveSegment::set_has_line_segment() {
  _oneof_case_[0] = kLineSegment;
}
inline void CurveSegment::clear_line_segment() {
  if (has_line_segment()) {
    delete curve_type_.line_segment_;
    clear_has_curve_type();
  }
}
inline  const ::apollo::hdmap::LineSegment& CurveSegment::line_segment() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.line_segment)
  return has_line_segment()
      ? *curve_type_.line_segment_
      : ::apollo::hdmap::LineSegment::default_instance();
}
inline ::apollo::hdmap::LineSegment* CurveSegment::mutable_line_segment() {
  if (!has_line_segment()) {
    clear_curve_type();
    set_has_line_segment();
    curve_type_.line_segment_ = new ::apollo::hdmap::LineSegment;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.CurveSegment.line_segment)
  return curve_type_.line_segment_;
}
inline ::apollo::hdmap::LineSegment* CurveSegment::release_line_segment() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.CurveSegment.line_segment)
  if (has_line_segment()) {
    clear_has_curve_type();
    ::apollo::hdmap::LineSegment* temp = curve_type_.line_segment_;
    curve_type_.line_segment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CurveSegment::set_allocated_line_segment(::apollo::hdmap::LineSegment* line_segment) {
  clear_curve_type();
  if (line_segment) {
    set_has_line_segment();
    curve_type_.line_segment_ = line_segment;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.CurveSegment.line_segment)
}

// optional double s = 6;
inline bool CurveSegment::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CurveSegment::set_has_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CurveSegment::clear_has_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CurveSegment::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double CurveSegment::s() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.s)
  return s_;
}
inline void CurveSegment::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.CurveSegment.s)
}

// optional .apollo.common.PointENU start_position = 7;
inline bool CurveSegment::has_start_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurveSegment::set_has_start_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurveSegment::clear_has_start_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurveSegment::clear_start_position() {
  if (start_position_ != NULL) start_position_->::apollo::common::PointENU::Clear();
  clear_has_start_position();
}
inline const ::apollo::common::PointENU& CurveSegment::start_position() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.start_position)
  return start_position_ != NULL ? *start_position_
                         : *::apollo::common::PointENU::internal_default_instance();
}
inline ::apollo::common::PointENU* CurveSegment::mutable_start_position() {
  set_has_start_position();
  if (start_position_ == NULL) {
    start_position_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.CurveSegment.start_position)
  return start_position_;
}
inline ::apollo::common::PointENU* CurveSegment::release_start_position() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.CurveSegment.start_position)
  clear_has_start_position();
  ::apollo::common::PointENU* temp = start_position_;
  start_position_ = NULL;
  return temp;
}
inline void CurveSegment::set_allocated_start_position(::apollo::common::PointENU* start_position) {
  delete start_position_;
  start_position_ = start_position;
  if (start_position) {
    set_has_start_position();
  } else {
    clear_has_start_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.CurveSegment.start_position)
}

// optional double heading = 8;
inline bool CurveSegment::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CurveSegment::set_has_heading() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CurveSegment::clear_has_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CurveSegment::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double CurveSegment::heading() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.heading)
  return heading_;
}
inline void CurveSegment::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.CurveSegment.heading)
}

// optional double length = 9;
inline bool CurveSegment::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CurveSegment::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CurveSegment::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CurveSegment::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double CurveSegment::length() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.length)
  return length_;
}
inline void CurveSegment::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.CurveSegment.length)
}

inline bool CurveSegment::has_curve_type() const {
  return curve_type_case() != CURVE_TYPE_NOT_SET;
}
inline void CurveSegment::clear_has_curve_type() {
  _oneof_case_[0] = CURVE_TYPE_NOT_SET;
}
inline CurveSegment::CurveTypeCase CurveSegment::curve_type_case() const {
  return CurveSegment::CurveTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Curve

// repeated .apollo.hdmap.CurveSegment segment = 1;
inline int Curve::segment_size() const {
  return segment_.size();
}
inline void Curve::clear_segment() {
  segment_.Clear();
}
inline const ::apollo::hdmap::CurveSegment& Curve::segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Curve.segment)
  return segment_.Get(index);
}
inline ::apollo::hdmap::CurveSegment* Curve::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Curve.segment)
  return segment_.Mutable(index);
}
inline ::apollo::hdmap::CurveSegment* Curve::add_segment() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Curve.segment)
  return segment_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::CurveSegment >*
Curve::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Curve.segment)
  return &segment_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::CurveSegment >&
Curve::segment() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Curve.segment)
  return segment_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace hdmap
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto__INCLUDED
