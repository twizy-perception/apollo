// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_config.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/planning/proto/dp_poly_path_config.pb.h"
#include "modules/planning/proto/dp_st_speed_config.pb.h"
#include "modules/planning/proto/qp_spline_path_config.pb.h"
#include "modules/planning/proto/qp_st_speed_config.pb.h"
#include "modules/planning/proto/poly_st_speed_config.pb.h"
#include "modules/planning/proto/qp_spline_reference_line_smoother_config.pb.h"
// @@protoc_insertion_point(includes)
namespace apollo {
namespace planning {
class DpPolyPathConfig;
class DpPolyPathConfigDefaultTypeInternal;
extern DpPolyPathConfigDefaultTypeInternal _DpPolyPathConfig_default_instance_;
class DpStSpeedConfig;
class DpStSpeedConfigDefaultTypeInternal;
extern DpStSpeedConfigDefaultTypeInternal _DpStSpeedConfig_default_instance_;
class EMPlannerConfig;
class EMPlannerConfigDefaultTypeInternal;
extern EMPlannerConfigDefaultTypeInternal _EMPlannerConfig_default_instance_;
class PlanningConfig;
class PlanningConfigDefaultTypeInternal;
extern PlanningConfigDefaultTypeInternal _PlanningConfig_default_instance_;
class PolyStSpeedConfig;
class PolyStSpeedConfigDefaultTypeInternal;
extern PolyStSpeedConfigDefaultTypeInternal _PolyStSpeedConfig_default_instance_;
class QpPiecewiseConfig;
class QpPiecewiseConfigDefaultTypeInternal;
extern QpPiecewiseConfigDefaultTypeInternal _QpPiecewiseConfig_default_instance_;
class QpSplineConfig;
class QpSplineConfigDefaultTypeInternal;
extern QpSplineConfigDefaultTypeInternal _QpSplineConfig_default_instance_;
class QpSplinePathConfig;
class QpSplinePathConfigDefaultTypeInternal;
extern QpSplinePathConfigDefaultTypeInternal _QpSplinePathConfig_default_instance_;
class QpSplineReferenceLineSmootherConfig;
class QpSplineReferenceLineSmootherConfigDefaultTypeInternal;
extern QpSplineReferenceLineSmootherConfigDefaultTypeInternal _QpSplineReferenceLineSmootherConfig_default_instance_;
class QpStSpeedConfig;
class QpStSpeedConfigDefaultTypeInternal;
extern QpStSpeedConfigDefaultTypeInternal _QpStSpeedConfig_default_instance_;
class RuleConfig;
class RuleConfigDefaultTypeInternal;
extern RuleConfigDefaultTypeInternal _RuleConfig_default_instance_;
}  // namespace planning
}  // namespace apollo

namespace apollo {
namespace planning {

namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto

enum RuleConfig_RuleId {
  RuleConfig_RuleId_BACKSIDE_VEHICLE = 1,
  RuleConfig_RuleId_SIGNAL_LIGHT = 2,
  RuleConfig_RuleId_CROSSWALK = 3,
  RuleConfig_RuleId_CLEAR_ZONE = 4,
  RuleConfig_RuleId_REROUTING = 5,
  RuleConfig_RuleId_REFERENCE_LINE_END = 6,
  RuleConfig_RuleId_DESTINATION = 7,
  RuleConfig_RuleId_STOP_SIGN = 8,
  RuleConfig_RuleId_CHANGE_LANE = 9
};
bool RuleConfig_RuleId_IsValid(int value);
const RuleConfig_RuleId RuleConfig_RuleId_RuleId_MIN = RuleConfig_RuleId_BACKSIDE_VEHICLE;
const RuleConfig_RuleId RuleConfig_RuleId_RuleId_MAX = RuleConfig_RuleId_CHANGE_LANE;
const int RuleConfig_RuleId_RuleId_ARRAYSIZE = RuleConfig_RuleId_RuleId_MAX + 1;

const ::google::protobuf::EnumDescriptor* RuleConfig_RuleId_descriptor();
inline const ::std::string& RuleConfig_RuleId_Name(RuleConfig_RuleId value) {
  return ::google::protobuf::internal::NameOfEnum(
    RuleConfig_RuleId_descriptor(), value);
}
inline bool RuleConfig_RuleId_Parse(
    const ::std::string& name, RuleConfig_RuleId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RuleConfig_RuleId>(
    RuleConfig_RuleId_descriptor(), name, value);
}
enum PlanningConfig_PlannerType {
  PlanningConfig_PlannerType_RTK = 0,
  PlanningConfig_PlannerType_EM = 1
};
bool PlanningConfig_PlannerType_IsValid(int value);
const PlanningConfig_PlannerType PlanningConfig_PlannerType_PlannerType_MIN = PlanningConfig_PlannerType_RTK;
const PlanningConfig_PlannerType PlanningConfig_PlannerType_PlannerType_MAX = PlanningConfig_PlannerType_EM;
const int PlanningConfig_PlannerType_PlannerType_ARRAYSIZE = PlanningConfig_PlannerType_PlannerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlanningConfig_PlannerType_descriptor();
inline const ::std::string& PlanningConfig_PlannerType_Name(PlanningConfig_PlannerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlanningConfig_PlannerType_descriptor(), value);
}
inline bool PlanningConfig_PlannerType_Parse(
    const ::std::string& name, PlanningConfig_PlannerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlanningConfig_PlannerType>(
    PlanningConfig_PlannerType_descriptor(), name, value);
}
enum TaskType {
  DP_POLY_PATH_OPTIMIZER = 0,
  DP_ST_SPEED_OPTIMIZER = 1,
  QP_SPLINE_PATH_OPTIMIZER = 2,
  QP_SPLINE_ST_SPEED_OPTIMIZER = 3,
  TRAFFIC_DECIDER = 4,
  PATH_DECIDER = 5,
  SPEED_DECIDER = 6,
  POLY_ST_SPEED_OPTIMIZER = 7
};
bool TaskType_IsValid(int value);
const TaskType TaskType_MIN = DP_POLY_PATH_OPTIMIZER;
const TaskType TaskType_MAX = POLY_ST_SPEED_OPTIMIZER;
const int TaskType_ARRAYSIZE = TaskType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskType_descriptor();
inline const ::std::string& TaskType_Name(TaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskType_descriptor(), value);
}
inline bool TaskType_Parse(
    const ::std::string& name, TaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
// ===================================================================

class RuleConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.RuleConfig) */ {
 public:
  RuleConfig();
  virtual ~RuleConfig();

  RuleConfig(const RuleConfig& from);

  inline RuleConfig& operator=(const RuleConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RuleConfig& default_instance();

  static inline const RuleConfig* internal_default_instance() {
    return reinterpret_cast<const RuleConfig*>(
               &_RuleConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RuleConfig* other);

  // implements Message ----------------------------------------------

  inline RuleConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  RuleConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RuleConfig& from);
  void MergeFrom(const RuleConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RuleConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RuleConfig_RuleId RuleId;
  static const RuleId BACKSIDE_VEHICLE =
    RuleConfig_RuleId_BACKSIDE_VEHICLE;
  static const RuleId SIGNAL_LIGHT =
    RuleConfig_RuleId_SIGNAL_LIGHT;
  static const RuleId CROSSWALK =
    RuleConfig_RuleId_CROSSWALK;
  static const RuleId CLEAR_ZONE =
    RuleConfig_RuleId_CLEAR_ZONE;
  static const RuleId REROUTING =
    RuleConfig_RuleId_REROUTING;
  static const RuleId REFERENCE_LINE_END =
    RuleConfig_RuleId_REFERENCE_LINE_END;
  static const RuleId DESTINATION =
    RuleConfig_RuleId_DESTINATION;
  static const RuleId STOP_SIGN =
    RuleConfig_RuleId_STOP_SIGN;
  static const RuleId CHANGE_LANE =
    RuleConfig_RuleId_CHANGE_LANE;
  static inline bool RuleId_IsValid(int value) {
    return RuleConfig_RuleId_IsValid(value);
  }
  static const RuleId RuleId_MIN =
    RuleConfig_RuleId_RuleId_MIN;
  static const RuleId RuleId_MAX =
    RuleConfig_RuleId_RuleId_MAX;
  static const int RuleId_ARRAYSIZE =
    RuleConfig_RuleId_RuleId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RuleId_descriptor() {
    return RuleConfig_RuleId_descriptor();
  }
  static inline const ::std::string& RuleId_Name(RuleId value) {
    return RuleConfig_RuleId_Name(value);
  }
  static inline bool RuleId_Parse(const ::std::string& name,
      RuleId* value) {
    return RuleConfig_RuleId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.planning.RuleConfig.RuleId rule_id = 1;
  bool has_rule_id() const;
  void clear_rule_id();
  static const int kRuleIdFieldNumber = 1;
  ::apollo::planning::RuleConfig_RuleId rule_id() const;
  void set_rule_id(::apollo::planning::RuleConfig_RuleId value);

  // @@protoc_insertion_point(class_scope:apollo.planning.RuleConfig)
 private:
  void set_has_rule_id();
  void clear_has_rule_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int rule_id_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EMPlannerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.EMPlannerConfig) */ {
 public:
  EMPlannerConfig();
  virtual ~EMPlannerConfig();

  EMPlannerConfig(const EMPlannerConfig& from);

  inline EMPlannerConfig& operator=(const EMPlannerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EMPlannerConfig& default_instance();

  static inline const EMPlannerConfig* internal_default_instance() {
    return reinterpret_cast<const EMPlannerConfig*>(
               &_EMPlannerConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EMPlannerConfig* other);

  // implements Message ----------------------------------------------

  inline EMPlannerConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  EMPlannerConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EMPlannerConfig& from);
  void MergeFrom(const EMPlannerConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EMPlannerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.TaskType task = 1;
  int task_size() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  ::apollo::planning::TaskType task(int index) const;
  void set_task(int index, ::apollo::planning::TaskType value);
  void add_task(::apollo::planning::TaskType value);
  const ::google::protobuf::RepeatedField<int>& task() const;
  ::google::protobuf::RepeatedField<int>* mutable_task();

  // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
  bool has_dp_poly_path_config() const;
  void clear_dp_poly_path_config();
  static const int kDpPolyPathConfigFieldNumber = 2;
  const ::apollo::planning::DpPolyPathConfig& dp_poly_path_config() const;
  ::apollo::planning::DpPolyPathConfig* mutable_dp_poly_path_config();
  ::apollo::planning::DpPolyPathConfig* release_dp_poly_path_config();
  void set_allocated_dp_poly_path_config(::apollo::planning::DpPolyPathConfig* dp_poly_path_config);

  // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
  bool has_dp_st_speed_config() const;
  void clear_dp_st_speed_config();
  static const int kDpStSpeedConfigFieldNumber = 3;
  const ::apollo::planning::DpStSpeedConfig& dp_st_speed_config() const;
  ::apollo::planning::DpStSpeedConfig* mutable_dp_st_speed_config();
  ::apollo::planning::DpStSpeedConfig* release_dp_st_speed_config();
  void set_allocated_dp_st_speed_config(::apollo::planning::DpStSpeedConfig* dp_st_speed_config);

  // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
  bool has_qp_spline_path_config() const;
  void clear_qp_spline_path_config();
  static const int kQpSplinePathConfigFieldNumber = 4;
  const ::apollo::planning::QpSplinePathConfig& qp_spline_path_config() const;
  ::apollo::planning::QpSplinePathConfig* mutable_qp_spline_path_config();
  ::apollo::planning::QpSplinePathConfig* release_qp_spline_path_config();
  void set_allocated_qp_spline_path_config(::apollo::planning::QpSplinePathConfig* qp_spline_path_config);

  // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
  bool has_qp_st_speed_config() const;
  void clear_qp_st_speed_config();
  static const int kQpStSpeedConfigFieldNumber = 5;
  const ::apollo::planning::QpStSpeedConfig& qp_st_speed_config() const;
  ::apollo::planning::QpStSpeedConfig* mutable_qp_st_speed_config();
  ::apollo::planning::QpStSpeedConfig* release_qp_st_speed_config();
  void set_allocated_qp_st_speed_config(::apollo::planning::QpStSpeedConfig* qp_st_speed_config);

  // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
  bool has_poly_st_speed_config() const;
  void clear_poly_st_speed_config();
  static const int kPolyStSpeedConfigFieldNumber = 6;
  const ::apollo::planning::PolyStSpeedConfig& poly_st_speed_config() const;
  ::apollo::planning::PolyStSpeedConfig* mutable_poly_st_speed_config();
  ::apollo::planning::PolyStSpeedConfig* release_poly_st_speed_config();
  void set_allocated_poly_st_speed_config(::apollo::planning::PolyStSpeedConfig* poly_st_speed_config);

  // @@protoc_insertion_point(class_scope:apollo.planning.EMPlannerConfig)
 private:
  void set_has_dp_poly_path_config();
  void clear_has_dp_poly_path_config();
  void set_has_dp_st_speed_config();
  void clear_has_dp_st_speed_config();
  void set_has_qp_spline_path_config();
  void clear_has_qp_spline_path_config();
  void set_has_qp_st_speed_config();
  void clear_has_qp_st_speed_config();
  void set_has_poly_st_speed_config();
  void clear_has_poly_st_speed_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> task_;
  ::apollo::planning::DpPolyPathConfig* dp_poly_path_config_;
  ::apollo::planning::DpStSpeedConfig* dp_st_speed_config_;
  ::apollo::planning::QpSplinePathConfig* qp_spline_path_config_;
  ::apollo::planning::QpStSpeedConfig* qp_st_speed_config_;
  ::apollo::planning::PolyStSpeedConfig* poly_st_speed_config_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlanningConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlanningConfig) */ {
 public:
  PlanningConfig();
  virtual ~PlanningConfig();

  PlanningConfig(const PlanningConfig& from);

  inline PlanningConfig& operator=(const PlanningConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningConfig& default_instance();

  static inline const PlanningConfig* internal_default_instance() {
    return reinterpret_cast<const PlanningConfig*>(
               &_PlanningConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PlanningConfig* other);

  // implements Message ----------------------------------------------

  inline PlanningConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  PlanningConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlanningConfig& from);
  void MergeFrom(const PlanningConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlanningConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlanningConfig_PlannerType PlannerType;
  static const PlannerType RTK =
    PlanningConfig_PlannerType_RTK;
  static const PlannerType EM =
    PlanningConfig_PlannerType_EM;
  static inline bool PlannerType_IsValid(int value) {
    return PlanningConfig_PlannerType_IsValid(value);
  }
  static const PlannerType PlannerType_MIN =
    PlanningConfig_PlannerType_PlannerType_MIN;
  static const PlannerType PlannerType_MAX =
    PlanningConfig_PlannerType_PlannerType_MAX;
  static const int PlannerType_ARRAYSIZE =
    PlanningConfig_PlannerType_PlannerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PlannerType_descriptor() {
    return PlanningConfig_PlannerType_descriptor();
  }
  static inline const ::std::string& PlannerType_Name(PlannerType value) {
    return PlanningConfig_PlannerType_Name(value);
  }
  static inline bool PlannerType_Parse(const ::std::string& name,
      PlannerType* value) {
    return PlanningConfig_PlannerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.RuleConfig rule_config = 4;
  int rule_config_size() const;
  void clear_rule_config();
  static const int kRuleConfigFieldNumber = 4;
  const ::apollo::planning::RuleConfig& rule_config(int index) const;
  ::apollo::planning::RuleConfig* mutable_rule_config(int index);
  ::apollo::planning::RuleConfig* add_rule_config();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::RuleConfig >*
      mutable_rule_config();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::RuleConfig >&
      rule_config() const;

  // optional .apollo.planning.EMPlannerConfig em_planner_config = 2;
  bool has_em_planner_config() const;
  void clear_em_planner_config();
  static const int kEmPlannerConfigFieldNumber = 2;
  const ::apollo::planning::EMPlannerConfig& em_planner_config() const;
  ::apollo::planning::EMPlannerConfig* mutable_em_planner_config();
  ::apollo::planning::EMPlannerConfig* release_em_planner_config();
  void set_allocated_em_planner_config(::apollo::planning::EMPlannerConfig* em_planner_config);

  // optional .apollo.planning.QpSplineReferenceLineSmootherConfig qp_spline_reference_line_smoother_config = 3;
  bool has_qp_spline_reference_line_smoother_config() const;
  void clear_qp_spline_reference_line_smoother_config();
  static const int kQpSplineReferenceLineSmootherConfigFieldNumber = 3;
  const ::apollo::planning::QpSplineReferenceLineSmootherConfig& qp_spline_reference_line_smoother_config() const;
  ::apollo::planning::QpSplineReferenceLineSmootherConfig* mutable_qp_spline_reference_line_smoother_config();
  ::apollo::planning::QpSplineReferenceLineSmootherConfig* release_qp_spline_reference_line_smoother_config();
  void set_allocated_qp_spline_reference_line_smoother_config(::apollo::planning::QpSplineReferenceLineSmootherConfig* qp_spline_reference_line_smoother_config);

  // optional .apollo.planning.PlanningConfig.PlannerType planner_type = 1 [default = EM];
  bool has_planner_type() const;
  void clear_planner_type();
  static const int kPlannerTypeFieldNumber = 1;
  ::apollo::planning::PlanningConfig_PlannerType planner_type() const;
  void set_planner_type(::apollo::planning::PlanningConfig_PlannerType value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PlanningConfig)
 private:
  void set_has_planner_type();
  void clear_has_planner_type();
  void set_has_em_planner_config();
  void clear_has_em_planner_config();
  void set_has_qp_spline_reference_line_smoother_config();
  void clear_has_qp_spline_reference_line_smoother_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::RuleConfig > rule_config_;
  ::apollo::planning::EMPlannerConfig* em_planner_config_;
  ::apollo::planning::QpSplineReferenceLineSmootherConfig* qp_spline_reference_line_smoother_config_;
  int planner_type_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RuleConfig

// optional .apollo.planning.RuleConfig.RuleId rule_id = 1;
inline bool RuleConfig::has_rule_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RuleConfig::set_has_rule_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RuleConfig::clear_has_rule_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RuleConfig::clear_rule_id() {
  rule_id_ = 1;
  clear_has_rule_id();
}
inline ::apollo::planning::RuleConfig_RuleId RuleConfig::rule_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleConfig.rule_id)
  return static_cast< ::apollo::planning::RuleConfig_RuleId >(rule_id_);
}
inline void RuleConfig::set_rule_id(::apollo::planning::RuleConfig_RuleId value) {
  assert(::apollo::planning::RuleConfig_RuleId_IsValid(value));
  set_has_rule_id();
  rule_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.RuleConfig.rule_id)
}

// -------------------------------------------------------------------

// EMPlannerConfig

// repeated .apollo.planning.TaskType task = 1;
inline int EMPlannerConfig::task_size() const {
  return task_.size();
}
inline void EMPlannerConfig::clear_task() {
  task_.Clear();
}
inline ::apollo::planning::TaskType EMPlannerConfig::task(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.task)
  return static_cast< ::apollo::planning::TaskType >(task_.Get(index));
}
inline void EMPlannerConfig::set_task(int index, ::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  task_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.EMPlannerConfig.task)
}
inline void EMPlannerConfig::add_task(::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  task_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.EMPlannerConfig.task)
}
inline const ::google::protobuf::RepeatedField<int>&
EMPlannerConfig::task() const {
  // @@protoc_insertion_point(field_list:apollo.planning.EMPlannerConfig.task)
  return task_;
}
inline ::google::protobuf::RepeatedField<int>*
EMPlannerConfig::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.EMPlannerConfig.task)
  return &task_;
}

// optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
inline bool EMPlannerConfig::has_dp_poly_path_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EMPlannerConfig::set_has_dp_poly_path_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EMPlannerConfig::clear_has_dp_poly_path_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EMPlannerConfig::clear_dp_poly_path_config() {
  if (dp_poly_path_config_ != NULL) dp_poly_path_config_->::apollo::planning::DpPolyPathConfig::Clear();
  clear_has_dp_poly_path_config();
}
inline const ::apollo::planning::DpPolyPathConfig& EMPlannerConfig::dp_poly_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.dp_poly_path_config)
  return dp_poly_path_config_ != NULL ? *dp_poly_path_config_
                         : *::apollo::planning::DpPolyPathConfig::internal_default_instance();
}
inline ::apollo::planning::DpPolyPathConfig* EMPlannerConfig::mutable_dp_poly_path_config() {
  set_has_dp_poly_path_config();
  if (dp_poly_path_config_ == NULL) {
    dp_poly_path_config_ = new ::apollo::planning::DpPolyPathConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.dp_poly_path_config)
  return dp_poly_path_config_;
}
inline ::apollo::planning::DpPolyPathConfig* EMPlannerConfig::release_dp_poly_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.dp_poly_path_config)
  clear_has_dp_poly_path_config();
  ::apollo::planning::DpPolyPathConfig* temp = dp_poly_path_config_;
  dp_poly_path_config_ = NULL;
  return temp;
}
inline void EMPlannerConfig::set_allocated_dp_poly_path_config(::apollo::planning::DpPolyPathConfig* dp_poly_path_config) {
  delete dp_poly_path_config_;
  dp_poly_path_config_ = dp_poly_path_config;
  if (dp_poly_path_config) {
    set_has_dp_poly_path_config();
  } else {
    clear_has_dp_poly_path_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.dp_poly_path_config)
}

// optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
inline bool EMPlannerConfig::has_dp_st_speed_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EMPlannerConfig::set_has_dp_st_speed_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EMPlannerConfig::clear_has_dp_st_speed_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EMPlannerConfig::clear_dp_st_speed_config() {
  if (dp_st_speed_config_ != NULL) dp_st_speed_config_->::apollo::planning::DpStSpeedConfig::Clear();
  clear_has_dp_st_speed_config();
}
inline const ::apollo::planning::DpStSpeedConfig& EMPlannerConfig::dp_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.dp_st_speed_config)
  return dp_st_speed_config_ != NULL ? *dp_st_speed_config_
                         : *::apollo::planning::DpStSpeedConfig::internal_default_instance();
}
inline ::apollo::planning::DpStSpeedConfig* EMPlannerConfig::mutable_dp_st_speed_config() {
  set_has_dp_st_speed_config();
  if (dp_st_speed_config_ == NULL) {
    dp_st_speed_config_ = new ::apollo::planning::DpStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.dp_st_speed_config)
  return dp_st_speed_config_;
}
inline ::apollo::planning::DpStSpeedConfig* EMPlannerConfig::release_dp_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.dp_st_speed_config)
  clear_has_dp_st_speed_config();
  ::apollo::planning::DpStSpeedConfig* temp = dp_st_speed_config_;
  dp_st_speed_config_ = NULL;
  return temp;
}
inline void EMPlannerConfig::set_allocated_dp_st_speed_config(::apollo::planning::DpStSpeedConfig* dp_st_speed_config) {
  delete dp_st_speed_config_;
  dp_st_speed_config_ = dp_st_speed_config;
  if (dp_st_speed_config) {
    set_has_dp_st_speed_config();
  } else {
    clear_has_dp_st_speed_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.dp_st_speed_config)
}

// optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
inline bool EMPlannerConfig::has_qp_spline_path_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EMPlannerConfig::set_has_qp_spline_path_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EMPlannerConfig::clear_has_qp_spline_path_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EMPlannerConfig::clear_qp_spline_path_config() {
  if (qp_spline_path_config_ != NULL) qp_spline_path_config_->::apollo::planning::QpSplinePathConfig::Clear();
  clear_has_qp_spline_path_config();
}
inline const ::apollo::planning::QpSplinePathConfig& EMPlannerConfig::qp_spline_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.qp_spline_path_config)
  return qp_spline_path_config_ != NULL ? *qp_spline_path_config_
                         : *::apollo::planning::QpSplinePathConfig::internal_default_instance();
}
inline ::apollo::planning::QpSplinePathConfig* EMPlannerConfig::mutable_qp_spline_path_config() {
  set_has_qp_spline_path_config();
  if (qp_spline_path_config_ == NULL) {
    qp_spline_path_config_ = new ::apollo::planning::QpSplinePathConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.qp_spline_path_config)
  return qp_spline_path_config_;
}
inline ::apollo::planning::QpSplinePathConfig* EMPlannerConfig::release_qp_spline_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.qp_spline_path_config)
  clear_has_qp_spline_path_config();
  ::apollo::planning::QpSplinePathConfig* temp = qp_spline_path_config_;
  qp_spline_path_config_ = NULL;
  return temp;
}
inline void EMPlannerConfig::set_allocated_qp_spline_path_config(::apollo::planning::QpSplinePathConfig* qp_spline_path_config) {
  delete qp_spline_path_config_;
  qp_spline_path_config_ = qp_spline_path_config;
  if (qp_spline_path_config) {
    set_has_qp_spline_path_config();
  } else {
    clear_has_qp_spline_path_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.qp_spline_path_config)
}

// optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
inline bool EMPlannerConfig::has_qp_st_speed_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EMPlannerConfig::set_has_qp_st_speed_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EMPlannerConfig::clear_has_qp_st_speed_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EMPlannerConfig::clear_qp_st_speed_config() {
  if (qp_st_speed_config_ != NULL) qp_st_speed_config_->::apollo::planning::QpStSpeedConfig::Clear();
  clear_has_qp_st_speed_config();
}
inline const ::apollo::planning::QpStSpeedConfig& EMPlannerConfig::qp_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.qp_st_speed_config)
  return qp_st_speed_config_ != NULL ? *qp_st_speed_config_
                         : *::apollo::planning::QpStSpeedConfig::internal_default_instance();
}
inline ::apollo::planning::QpStSpeedConfig* EMPlannerConfig::mutable_qp_st_speed_config() {
  set_has_qp_st_speed_config();
  if (qp_st_speed_config_ == NULL) {
    qp_st_speed_config_ = new ::apollo::planning::QpStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.qp_st_speed_config)
  return qp_st_speed_config_;
}
inline ::apollo::planning::QpStSpeedConfig* EMPlannerConfig::release_qp_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.qp_st_speed_config)
  clear_has_qp_st_speed_config();
  ::apollo::planning::QpStSpeedConfig* temp = qp_st_speed_config_;
  qp_st_speed_config_ = NULL;
  return temp;
}
inline void EMPlannerConfig::set_allocated_qp_st_speed_config(::apollo::planning::QpStSpeedConfig* qp_st_speed_config) {
  delete qp_st_speed_config_;
  qp_st_speed_config_ = qp_st_speed_config;
  if (qp_st_speed_config) {
    set_has_qp_st_speed_config();
  } else {
    clear_has_qp_st_speed_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.qp_st_speed_config)
}

// optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
inline bool EMPlannerConfig::has_poly_st_speed_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EMPlannerConfig::set_has_poly_st_speed_config() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EMPlannerConfig::clear_has_poly_st_speed_config() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EMPlannerConfig::clear_poly_st_speed_config() {
  if (poly_st_speed_config_ != NULL) poly_st_speed_config_->::apollo::planning::PolyStSpeedConfig::Clear();
  clear_has_poly_st_speed_config();
}
inline const ::apollo::planning::PolyStSpeedConfig& EMPlannerConfig::poly_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.poly_st_speed_config)
  return poly_st_speed_config_ != NULL ? *poly_st_speed_config_
                         : *::apollo::planning::PolyStSpeedConfig::internal_default_instance();
}
inline ::apollo::planning::PolyStSpeedConfig* EMPlannerConfig::mutable_poly_st_speed_config() {
  set_has_poly_st_speed_config();
  if (poly_st_speed_config_ == NULL) {
    poly_st_speed_config_ = new ::apollo::planning::PolyStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.poly_st_speed_config)
  return poly_st_speed_config_;
}
inline ::apollo::planning::PolyStSpeedConfig* EMPlannerConfig::release_poly_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.poly_st_speed_config)
  clear_has_poly_st_speed_config();
  ::apollo::planning::PolyStSpeedConfig* temp = poly_st_speed_config_;
  poly_st_speed_config_ = NULL;
  return temp;
}
inline void EMPlannerConfig::set_allocated_poly_st_speed_config(::apollo::planning::PolyStSpeedConfig* poly_st_speed_config) {
  delete poly_st_speed_config_;
  poly_st_speed_config_ = poly_st_speed_config;
  if (poly_st_speed_config) {
    set_has_poly_st_speed_config();
  } else {
    clear_has_poly_st_speed_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.poly_st_speed_config)
}

// -------------------------------------------------------------------

// PlanningConfig

// optional .apollo.planning.PlanningConfig.PlannerType planner_type = 1 [default = EM];
inline bool PlanningConfig::has_planner_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningConfig::set_has_planner_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanningConfig::clear_has_planner_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanningConfig::clear_planner_type() {
  planner_type_ = 1;
  clear_has_planner_type();
}
inline ::apollo::planning::PlanningConfig_PlannerType PlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.planner_type)
  return static_cast< ::apollo::planning::PlanningConfig_PlannerType >(planner_type_);
}
inline void PlanningConfig::set_planner_type(::apollo::planning::PlanningConfig_PlannerType value) {
  assert(::apollo::planning::PlanningConfig_PlannerType_IsValid(value));
  set_has_planner_type();
  planner_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningConfig.planner_type)
}

// optional .apollo.planning.EMPlannerConfig em_planner_config = 2;
inline bool PlanningConfig::has_em_planner_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningConfig::set_has_em_planner_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanningConfig::clear_has_em_planner_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanningConfig::clear_em_planner_config() {
  if (em_planner_config_ != NULL) em_planner_config_->::apollo::planning::EMPlannerConfig::Clear();
  clear_has_em_planner_config();
}
inline const ::apollo::planning::EMPlannerConfig& PlanningConfig::em_planner_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.em_planner_config)
  return em_planner_config_ != NULL ? *em_planner_config_
                         : *::apollo::planning::EMPlannerConfig::internal_default_instance();
}
inline ::apollo::planning::EMPlannerConfig* PlanningConfig::mutable_em_planner_config() {
  set_has_em_planner_config();
  if (em_planner_config_ == NULL) {
    em_planner_config_ = new ::apollo::planning::EMPlannerConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.em_planner_config)
  return em_planner_config_;
}
inline ::apollo::planning::EMPlannerConfig* PlanningConfig::release_em_planner_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.em_planner_config)
  clear_has_em_planner_config();
  ::apollo::planning::EMPlannerConfig* temp = em_planner_config_;
  em_planner_config_ = NULL;
  return temp;
}
inline void PlanningConfig::set_allocated_em_planner_config(::apollo::planning::EMPlannerConfig* em_planner_config) {
  delete em_planner_config_;
  em_planner_config_ = em_planner_config;
  if (em_planner_config) {
    set_has_em_planner_config();
  } else {
    clear_has_em_planner_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.em_planner_config)
}

// optional .apollo.planning.QpSplineReferenceLineSmootherConfig qp_spline_reference_line_smoother_config = 3;
inline bool PlanningConfig::has_qp_spline_reference_line_smoother_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningConfig::set_has_qp_spline_reference_line_smoother_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanningConfig::clear_has_qp_spline_reference_line_smoother_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanningConfig::clear_qp_spline_reference_line_smoother_config() {
  if (qp_spline_reference_line_smoother_config_ != NULL) qp_spline_reference_line_smoother_config_->::apollo::planning::QpSplineReferenceLineSmootherConfig::Clear();
  clear_has_qp_spline_reference_line_smoother_config();
}
inline const ::apollo::planning::QpSplineReferenceLineSmootherConfig& PlanningConfig::qp_spline_reference_line_smoother_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.qp_spline_reference_line_smoother_config)
  return qp_spline_reference_line_smoother_config_ != NULL ? *qp_spline_reference_line_smoother_config_
                         : *::apollo::planning::QpSplineReferenceLineSmootherConfig::internal_default_instance();
}
inline ::apollo::planning::QpSplineReferenceLineSmootherConfig* PlanningConfig::mutable_qp_spline_reference_line_smoother_config() {
  set_has_qp_spline_reference_line_smoother_config();
  if (qp_spline_reference_line_smoother_config_ == NULL) {
    qp_spline_reference_line_smoother_config_ = new ::apollo::planning::QpSplineReferenceLineSmootherConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.qp_spline_reference_line_smoother_config)
  return qp_spline_reference_line_smoother_config_;
}
inline ::apollo::planning::QpSplineReferenceLineSmootherConfig* PlanningConfig::release_qp_spline_reference_line_smoother_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.qp_spline_reference_line_smoother_config)
  clear_has_qp_spline_reference_line_smoother_config();
  ::apollo::planning::QpSplineReferenceLineSmootherConfig* temp = qp_spline_reference_line_smoother_config_;
  qp_spline_reference_line_smoother_config_ = NULL;
  return temp;
}
inline void PlanningConfig::set_allocated_qp_spline_reference_line_smoother_config(::apollo::planning::QpSplineReferenceLineSmootherConfig* qp_spline_reference_line_smoother_config) {
  delete qp_spline_reference_line_smoother_config_;
  qp_spline_reference_line_smoother_config_ = qp_spline_reference_line_smoother_config;
  if (qp_spline_reference_line_smoother_config) {
    set_has_qp_spline_reference_line_smoother_config();
  } else {
    clear_has_qp_spline_reference_line_smoother_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.qp_spline_reference_line_smoother_config)
}

// repeated .apollo.planning.RuleConfig rule_config = 4;
inline int PlanningConfig::rule_config_size() const {
  return rule_config_.size();
}
inline void PlanningConfig::clear_rule_config() {
  rule_config_.Clear();
}
inline const ::apollo::planning::RuleConfig& PlanningConfig::rule_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.rule_config)
  return rule_config_.Get(index);
}
inline ::apollo::planning::RuleConfig* PlanningConfig::mutable_rule_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.rule_config)
  return rule_config_.Mutable(index);
}
inline ::apollo::planning::RuleConfig* PlanningConfig::add_rule_config() {
  // @@protoc_insertion_point(field_add:apollo.planning.PlanningConfig.rule_config)
  return rule_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::RuleConfig >*
PlanningConfig::mutable_rule_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.PlanningConfig.rule_config)
  return &rule_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::RuleConfig >&
PlanningConfig::rule_config() const {
  // @@protoc_insertion_point(field_list:apollo.planning.PlanningConfig.rule_config)
  return rule_config_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace planning
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning::RuleConfig_RuleId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::RuleConfig_RuleId>() {
  return ::apollo::planning::RuleConfig_RuleId_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::PlanningConfig_PlannerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::PlanningConfig_PlannerType>() {
  return ::apollo::planning::PlanningConfig_PlannerType_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::TaskType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::TaskType>() {
  return ::apollo::planning::TaskType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto__INCLUDED
