// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/poly_st_speed_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/poly_st_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {
class PolyStSpeedConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PolyStSpeedConfig> {
} _PolyStSpeedConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, total_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, preferred_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, preferred_decel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, max_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, min_decel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, speed_limit_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, speed_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, jerk_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, obstacle_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, unblocking_obstacle_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyStSpeedConfig, st_boundary_config_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 17, sizeof(PolyStSpeedConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PolyStSpeedConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/poly_st_speed_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _PolyStSpeedConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto::InitDefaults();
  _PolyStSpeedConfig_default_instance_.DefaultConstruct();
  _PolyStSpeedConfig_default_instance_.get_mutable()->st_boundary_config_ = const_cast< ::apollo::planning::StBoundaryConfig*>(
      ::apollo::planning::StBoundaryConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n1modules/planning/proto/poly_st_speed_c"
      "onfig.proto\022\017apollo.planning\032/modules/pl"
      "anning/proto/st_boundary_config.proto\"\333\002"
      "\n\021PolyStSpeedConfig\022\031\n\021total_path_length"
      "\030\001 \001(\001\022\022\n\ntotal_time\030\002 \001(\001\022\027\n\017preferred_"
      "accel\030\003 \001(\001\022\027\n\017preferred_decel\030\004 \001(\001\022\021\n\t"
      "max_accel\030\005 \001(\001\022\021\n\tmin_decel\030\006 \001(\001\022\032\n\022sp"
      "eed_limit_buffer\030\007 \001(\001\022\024\n\014speed_weight\030\010"
      " \001(\001\022\023\n\013jerk_weight\030\t \001(\001\022\027\n\017obstacle_we"
      "ight\030\n \001(\001\022 \n\030unblocking_obstacle_cost\030\013"
      " \001(\001\022=\n\022st_boundary_config\030\014 \001(\0132!.apoll"
      "o.planning.StBoundaryConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 467);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/poly_st_speed_config.proto", &protobuf_RegisterTypes);
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolyStSpeedConfig::kTotalPathLengthFieldNumber;
const int PolyStSpeedConfig::kTotalTimeFieldNumber;
const int PolyStSpeedConfig::kPreferredAccelFieldNumber;
const int PolyStSpeedConfig::kPreferredDecelFieldNumber;
const int PolyStSpeedConfig::kMaxAccelFieldNumber;
const int PolyStSpeedConfig::kMinDecelFieldNumber;
const int PolyStSpeedConfig::kSpeedLimitBufferFieldNumber;
const int PolyStSpeedConfig::kSpeedWeightFieldNumber;
const int PolyStSpeedConfig::kJerkWeightFieldNumber;
const int PolyStSpeedConfig::kObstacleWeightFieldNumber;
const int PolyStSpeedConfig::kUnblockingObstacleCostFieldNumber;
const int PolyStSpeedConfig::kStBoundaryConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolyStSpeedConfig::PolyStSpeedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PolyStSpeedConfig)
}
PolyStSpeedConfig::PolyStSpeedConfig(const PolyStSpeedConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_st_boundary_config()) {
    st_boundary_config_ = new ::apollo::planning::StBoundaryConfig(*from.st_boundary_config_);
  } else {
    st_boundary_config_ = NULL;
  }
  ::memcpy(&total_path_length_, &from.total_path_length_,
    reinterpret_cast<char*>(&unblocking_obstacle_cost_) -
    reinterpret_cast<char*>(&total_path_length_) + sizeof(unblocking_obstacle_cost_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PolyStSpeedConfig)
}

void PolyStSpeedConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&st_boundary_config_, 0, reinterpret_cast<char*>(&unblocking_obstacle_cost_) -
    reinterpret_cast<char*>(&st_boundary_config_) + sizeof(unblocking_obstacle_cost_));
}

PolyStSpeedConfig::~PolyStSpeedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PolyStSpeedConfig)
  SharedDtor();
}

void PolyStSpeedConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete st_boundary_config_;
  }
}

void PolyStSpeedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolyStSpeedConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PolyStSpeedConfig& PolyStSpeedConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

PolyStSpeedConfig* PolyStSpeedConfig::New(::google::protobuf::Arena* arena) const {
  PolyStSpeedConfig* n = new PolyStSpeedConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolyStSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PolyStSpeedConfig)
  if (has_st_boundary_config()) {
    GOOGLE_DCHECK(st_boundary_config_ != NULL);
    st_boundary_config_->::apollo::planning::StBoundaryConfig::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&total_path_length_, 0, reinterpret_cast<char*>(&speed_limit_buffer_) -
      reinterpret_cast<char*>(&total_path_length_) + sizeof(speed_limit_buffer_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&speed_weight_, 0, reinterpret_cast<char*>(&unblocking_obstacle_cost_) -
      reinterpret_cast<char*>(&speed_weight_) + sizeof(unblocking_obstacle_cost_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PolyStSpeedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PolyStSpeedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_path_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_total_path_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_total_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preferred_accel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_preferred_accel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preferred_decel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_preferred_decel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_decel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_accel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_max_accel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_decel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_min_decel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_decel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit_buffer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_speed_limit_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_weight = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_speed_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk_weight = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_jerk_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_weight = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_obstacle_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unblocking_obstacle_cost = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_unblocking_obstacle_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unblocking_obstacle_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.StBoundaryConfig st_boundary_config = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_st_boundary_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PolyStSpeedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PolyStSpeedConfig)
  return false;
#undef DO_
}

void PolyStSpeedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PolyStSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_path_length = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_path_length(), output);
  }

  // optional double total_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_time(), output);
  }

  // optional double preferred_accel = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->preferred_accel(), output);
  }

  // optional double preferred_decel = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->preferred_decel(), output);
  }

  // optional double max_accel = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_accel(), output);
  }

  // optional double min_decel = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->min_decel(), output);
  }

  // optional double speed_limit_buffer = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->speed_limit_buffer(), output);
  }

  // optional double speed_weight = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->speed_weight(), output);
  }

  // optional double jerk_weight = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->jerk_weight(), output);
  }

  // optional double obstacle_weight = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->obstacle_weight(), output);
  }

  // optional double unblocking_obstacle_cost = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->unblocking_obstacle_cost(), output);
  }

  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->st_boundary_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PolyStSpeedConfig)
}

::google::protobuf::uint8* PolyStSpeedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PolyStSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_path_length = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_path_length(), target);
  }

  // optional double total_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_time(), target);
  }

  // optional double preferred_accel = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->preferred_accel(), target);
  }

  // optional double preferred_decel = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->preferred_decel(), target);
  }

  // optional double max_accel = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_accel(), target);
  }

  // optional double min_decel = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->min_decel(), target);
  }

  // optional double speed_limit_buffer = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->speed_limit_buffer(), target);
  }

  // optional double speed_weight = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->speed_weight(), target);
  }

  // optional double jerk_weight = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->jerk_weight(), target);
  }

  // optional double obstacle_weight = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->obstacle_weight(), target);
  }

  // optional double unblocking_obstacle_cost = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->unblocking_obstacle_cost(), target);
  }

  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->st_boundary_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PolyStSpeedConfig)
  return target;
}

size_t PolyStSpeedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PolyStSpeedConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.planning.StBoundaryConfig st_boundary_config = 12;
    if (has_st_boundary_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->st_boundary_config_);
    }

    // optional double total_path_length = 1;
    if (has_total_path_length()) {
      total_size += 1 + 8;
    }

    // optional double total_time = 2;
    if (has_total_time()) {
      total_size += 1 + 8;
    }

    // optional double preferred_accel = 3;
    if (has_preferred_accel()) {
      total_size += 1 + 8;
    }

    // optional double preferred_decel = 4;
    if (has_preferred_decel()) {
      total_size += 1 + 8;
    }

    // optional double max_accel = 5;
    if (has_max_accel()) {
      total_size += 1 + 8;
    }

    // optional double min_decel = 6;
    if (has_min_decel()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit_buffer = 7;
    if (has_speed_limit_buffer()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double speed_weight = 8;
    if (has_speed_weight()) {
      total_size += 1 + 8;
    }

    // optional double jerk_weight = 9;
    if (has_jerk_weight()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_weight = 10;
    if (has_obstacle_weight()) {
      total_size += 1 + 8;
    }

    // optional double unblocking_obstacle_cost = 11;
    if (has_unblocking_obstacle_cost()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolyStSpeedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PolyStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PolyStSpeedConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PolyStSpeedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PolyStSpeedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PolyStSpeedConfig)
    MergeFrom(*source);
  }
}

void PolyStSpeedConfig::MergeFrom(const PolyStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PolyStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_st_boundary_config()->::apollo::planning::StBoundaryConfig::MergeFrom(from.st_boundary_config());
    }
    if (cached_has_bits & 0x00000002u) {
      total_path_length_ = from.total_path_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_time_ = from.total_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      preferred_accel_ = from.preferred_accel_;
    }
    if (cached_has_bits & 0x00000010u) {
      preferred_decel_ = from.preferred_decel_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_accel_ = from.max_accel_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_decel_ = from.min_decel_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_limit_buffer_ = from.speed_limit_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      speed_weight_ = from.speed_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      jerk_weight_ = from.jerk_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      obstacle_weight_ = from.obstacle_weight_;
    }
    if (cached_has_bits & 0x00000800u) {
      unblocking_obstacle_cost_ = from.unblocking_obstacle_cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolyStSpeedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PolyStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolyStSpeedConfig::CopyFrom(const PolyStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PolyStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolyStSpeedConfig::IsInitialized() const {
  return true;
}

void PolyStSpeedConfig::Swap(PolyStSpeedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolyStSpeedConfig::InternalSwap(PolyStSpeedConfig* other) {
  std::swap(st_boundary_config_, other->st_boundary_config_);
  std::swap(total_path_length_, other->total_path_length_);
  std::swap(total_time_, other->total_time_);
  std::swap(preferred_accel_, other->preferred_accel_);
  std::swap(preferred_decel_, other->preferred_decel_);
  std::swap(max_accel_, other->max_accel_);
  std::swap(min_decel_, other->min_decel_);
  std::swap(speed_limit_buffer_, other->speed_limit_buffer_);
  std::swap(speed_weight_, other->speed_weight_);
  std::swap(jerk_weight_, other->jerk_weight_);
  std::swap(obstacle_weight_, other->obstacle_weight_);
  std::swap(unblocking_obstacle_cost_, other->unblocking_obstacle_cost_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PolyStSpeedConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolyStSpeedConfig

// optional double total_path_length = 1;
bool PolyStSpeedConfig::has_total_path_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PolyStSpeedConfig::set_has_total_path_length() {
  _has_bits_[0] |= 0x00000002u;
}
void PolyStSpeedConfig::clear_has_total_path_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void PolyStSpeedConfig::clear_total_path_length() {
  total_path_length_ = 0;
  clear_has_total_path_length();
}
double PolyStSpeedConfig::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.total_path_length)
  return total_path_length_;
}
void PolyStSpeedConfig::set_total_path_length(double value) {
  set_has_total_path_length();
  total_path_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.total_path_length)
}

// optional double total_time = 2;
bool PolyStSpeedConfig::has_total_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PolyStSpeedConfig::set_has_total_time() {
  _has_bits_[0] |= 0x00000004u;
}
void PolyStSpeedConfig::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void PolyStSpeedConfig::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
double PolyStSpeedConfig::total_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.total_time)
  return total_time_;
}
void PolyStSpeedConfig::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.total_time)
}

// optional double preferred_accel = 3;
bool PolyStSpeedConfig::has_preferred_accel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PolyStSpeedConfig::set_has_preferred_accel() {
  _has_bits_[0] |= 0x00000008u;
}
void PolyStSpeedConfig::clear_has_preferred_accel() {
  _has_bits_[0] &= ~0x00000008u;
}
void PolyStSpeedConfig::clear_preferred_accel() {
  preferred_accel_ = 0;
  clear_has_preferred_accel();
}
double PolyStSpeedConfig::preferred_accel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.preferred_accel)
  return preferred_accel_;
}
void PolyStSpeedConfig::set_preferred_accel(double value) {
  set_has_preferred_accel();
  preferred_accel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.preferred_accel)
}

// optional double preferred_decel = 4;
bool PolyStSpeedConfig::has_preferred_decel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PolyStSpeedConfig::set_has_preferred_decel() {
  _has_bits_[0] |= 0x00000010u;
}
void PolyStSpeedConfig::clear_has_preferred_decel() {
  _has_bits_[0] &= ~0x00000010u;
}
void PolyStSpeedConfig::clear_preferred_decel() {
  preferred_decel_ = 0;
  clear_has_preferred_decel();
}
double PolyStSpeedConfig::preferred_decel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.preferred_decel)
  return preferred_decel_;
}
void PolyStSpeedConfig::set_preferred_decel(double value) {
  set_has_preferred_decel();
  preferred_decel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.preferred_decel)
}

// optional double max_accel = 5;
bool PolyStSpeedConfig::has_max_accel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PolyStSpeedConfig::set_has_max_accel() {
  _has_bits_[0] |= 0x00000020u;
}
void PolyStSpeedConfig::clear_has_max_accel() {
  _has_bits_[0] &= ~0x00000020u;
}
void PolyStSpeedConfig::clear_max_accel() {
  max_accel_ = 0;
  clear_has_max_accel();
}
double PolyStSpeedConfig::max_accel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.max_accel)
  return max_accel_;
}
void PolyStSpeedConfig::set_max_accel(double value) {
  set_has_max_accel();
  max_accel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.max_accel)
}

// optional double min_decel = 6;
bool PolyStSpeedConfig::has_min_decel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PolyStSpeedConfig::set_has_min_decel() {
  _has_bits_[0] |= 0x00000040u;
}
void PolyStSpeedConfig::clear_has_min_decel() {
  _has_bits_[0] &= ~0x00000040u;
}
void PolyStSpeedConfig::clear_min_decel() {
  min_decel_ = 0;
  clear_has_min_decel();
}
double PolyStSpeedConfig::min_decel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.min_decel)
  return min_decel_;
}
void PolyStSpeedConfig::set_min_decel(double value) {
  set_has_min_decel();
  min_decel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.min_decel)
}

// optional double speed_limit_buffer = 7;
bool PolyStSpeedConfig::has_speed_limit_buffer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PolyStSpeedConfig::set_has_speed_limit_buffer() {
  _has_bits_[0] |= 0x00000080u;
}
void PolyStSpeedConfig::clear_has_speed_limit_buffer() {
  _has_bits_[0] &= ~0x00000080u;
}
void PolyStSpeedConfig::clear_speed_limit_buffer() {
  speed_limit_buffer_ = 0;
  clear_has_speed_limit_buffer();
}
double PolyStSpeedConfig::speed_limit_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.speed_limit_buffer)
  return speed_limit_buffer_;
}
void PolyStSpeedConfig::set_speed_limit_buffer(double value) {
  set_has_speed_limit_buffer();
  speed_limit_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.speed_limit_buffer)
}

// optional double speed_weight = 8;
bool PolyStSpeedConfig::has_speed_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PolyStSpeedConfig::set_has_speed_weight() {
  _has_bits_[0] |= 0x00000100u;
}
void PolyStSpeedConfig::clear_has_speed_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
void PolyStSpeedConfig::clear_speed_weight() {
  speed_weight_ = 0;
  clear_has_speed_weight();
}
double PolyStSpeedConfig::speed_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.speed_weight)
  return speed_weight_;
}
void PolyStSpeedConfig::set_speed_weight(double value) {
  set_has_speed_weight();
  speed_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.speed_weight)
}

// optional double jerk_weight = 9;
bool PolyStSpeedConfig::has_jerk_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PolyStSpeedConfig::set_has_jerk_weight() {
  _has_bits_[0] |= 0x00000200u;
}
void PolyStSpeedConfig::clear_has_jerk_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
void PolyStSpeedConfig::clear_jerk_weight() {
  jerk_weight_ = 0;
  clear_has_jerk_weight();
}
double PolyStSpeedConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.jerk_weight)
  return jerk_weight_;
}
void PolyStSpeedConfig::set_jerk_weight(double value) {
  set_has_jerk_weight();
  jerk_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.jerk_weight)
}

// optional double obstacle_weight = 10;
bool PolyStSpeedConfig::has_obstacle_weight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PolyStSpeedConfig::set_has_obstacle_weight() {
  _has_bits_[0] |= 0x00000400u;
}
void PolyStSpeedConfig::clear_has_obstacle_weight() {
  _has_bits_[0] &= ~0x00000400u;
}
void PolyStSpeedConfig::clear_obstacle_weight() {
  obstacle_weight_ = 0;
  clear_has_obstacle_weight();
}
double PolyStSpeedConfig::obstacle_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.obstacle_weight)
  return obstacle_weight_;
}
void PolyStSpeedConfig::set_obstacle_weight(double value) {
  set_has_obstacle_weight();
  obstacle_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.obstacle_weight)
}

// optional double unblocking_obstacle_cost = 11;
bool PolyStSpeedConfig::has_unblocking_obstacle_cost() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PolyStSpeedConfig::set_has_unblocking_obstacle_cost() {
  _has_bits_[0] |= 0x00000800u;
}
void PolyStSpeedConfig::clear_has_unblocking_obstacle_cost() {
  _has_bits_[0] &= ~0x00000800u;
}
void PolyStSpeedConfig::clear_unblocking_obstacle_cost() {
  unblocking_obstacle_cost_ = 0;
  clear_has_unblocking_obstacle_cost();
}
double PolyStSpeedConfig::unblocking_obstacle_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.unblocking_obstacle_cost)
  return unblocking_obstacle_cost_;
}
void PolyStSpeedConfig::set_unblocking_obstacle_cost(double value) {
  set_has_unblocking_obstacle_cost();
  unblocking_obstacle_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PolyStSpeedConfig.unblocking_obstacle_cost)
}

// optional .apollo.planning.StBoundaryConfig st_boundary_config = 12;
bool PolyStSpeedConfig::has_st_boundary_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PolyStSpeedConfig::set_has_st_boundary_config() {
  _has_bits_[0] |= 0x00000001u;
}
void PolyStSpeedConfig::clear_has_st_boundary_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void PolyStSpeedConfig::clear_st_boundary_config() {
  if (st_boundary_config_ != NULL) st_boundary_config_->::apollo::planning::StBoundaryConfig::Clear();
  clear_has_st_boundary_config();
}
const ::apollo::planning::StBoundaryConfig& PolyStSpeedConfig::st_boundary_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PolyStSpeedConfig.st_boundary_config)
  return st_boundary_config_ != NULL ? *st_boundary_config_
                         : *::apollo::planning::StBoundaryConfig::internal_default_instance();
}
::apollo::planning::StBoundaryConfig* PolyStSpeedConfig::mutable_st_boundary_config() {
  set_has_st_boundary_config();
  if (st_boundary_config_ == NULL) {
    st_boundary_config_ = new ::apollo::planning::StBoundaryConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PolyStSpeedConfig.st_boundary_config)
  return st_boundary_config_;
}
::apollo::planning::StBoundaryConfig* PolyStSpeedConfig::release_st_boundary_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PolyStSpeedConfig.st_boundary_config)
  clear_has_st_boundary_config();
  ::apollo::planning::StBoundaryConfig* temp = st_boundary_config_;
  st_boundary_config_ = NULL;
  return temp;
}
void PolyStSpeedConfig::set_allocated_st_boundary_config(::apollo::planning::StBoundaryConfig* st_boundary_config) {
  delete st_boundary_config_;
  st_boundary_config_ = st_boundary_config;
  if (st_boundary_config) {
    set_has_st_boundary_config();
  } else {
    clear_has_st_boundary_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PolyStSpeedConfig.st_boundary_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
