// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/qp_spline_reference_line_smoother_config.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace apollo {
namespace planning {
class QpSplineReferenceLineSmootherConfig;
class QpSplineReferenceLineSmootherConfigDefaultTypeInternal;
extern QpSplineReferenceLineSmootherConfigDefaultTypeInternal _QpSplineReferenceLineSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace apollo

namespace apollo {
namespace planning {

namespace protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto

// ===================================================================

class QpSplineReferenceLineSmootherConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QpSplineReferenceLineSmootherConfig) */ {
 public:
  QpSplineReferenceLineSmootherConfig();
  virtual ~QpSplineReferenceLineSmootherConfig();

  QpSplineReferenceLineSmootherConfig(const QpSplineReferenceLineSmootherConfig& from);

  inline QpSplineReferenceLineSmootherConfig& operator=(const QpSplineReferenceLineSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QpSplineReferenceLineSmootherConfig& default_instance();

  static inline const QpSplineReferenceLineSmootherConfig* internal_default_instance() {
    return reinterpret_cast<const QpSplineReferenceLineSmootherConfig*>(
               &_QpSplineReferenceLineSmootherConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(QpSplineReferenceLineSmootherConfig* other);

  // implements Message ----------------------------------------------

  inline QpSplineReferenceLineSmootherConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  QpSplineReferenceLineSmootherConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QpSplineReferenceLineSmootherConfig& from);
  void MergeFrom(const QpSplineReferenceLineSmootherConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QpSplineReferenceLineSmootherConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double second_derivative_weight = 6 [default = 0];
  bool has_second_derivative_weight() const;
  void clear_second_derivative_weight();
  static const int kSecondDerivativeWeightFieldNumber = 6;
  double second_derivative_weight() const;
  void set_second_derivative_weight(double value);

  // optional double max_spline_length = 2 [default = 25];
  bool has_max_spline_length() const;
  void clear_max_spline_length();
  static const int kMaxSplineLengthFieldNumber = 2;
  double max_spline_length() const;
  void set_max_spline_length(double value);

  // optional double max_constraint_interval = 3 [default = 5];
  bool has_max_constraint_interval() const;
  void clear_max_constraint_interval();
  static const int kMaxConstraintIntervalFieldNumber = 3;
  double max_constraint_interval() const;
  void set_max_constraint_interval(double value);

  // optional double longitudinal_boundary_bound = 4 [default = 1];
  bool has_longitudinal_boundary_bound() const;
  void clear_longitudinal_boundary_bound();
  static const int kLongitudinalBoundaryBoundFieldNumber = 4;
  double longitudinal_boundary_bound() const;
  void set_longitudinal_boundary_bound(double value);

  // optional uint32 spline_order = 1 [default = 5];
  bool has_spline_order() const;
  void clear_spline_order();
  static const int kSplineOrderFieldNumber = 1;
  ::google::protobuf::uint32 spline_order() const;
  void set_spline_order(::google::protobuf::uint32 value);

  // optional uint32 num_of_total_points = 8 [default = 500];
  bool has_num_of_total_points() const;
  void clear_num_of_total_points();
  static const int kNumOfTotalPointsFieldNumber = 8;
  ::google::protobuf::uint32 num_of_total_points() const;
  void set_num_of_total_points(::google::protobuf::uint32 value);

  // optional double lateral_boundary_bound = 5 [default = 0.1];
  bool has_lateral_boundary_bound() const;
  void clear_lateral_boundary_bound();
  static const int kLateralBoundaryBoundFieldNumber = 5;
  double lateral_boundary_bound() const;
  void set_lateral_boundary_bound(double value);

  // optional double third_derivative_weight = 7 [default = 100];
  bool has_third_derivative_weight() const;
  void clear_third_derivative_weight();
  static const int kThirdDerivativeWeightFieldNumber = 7;
  double third_derivative_weight() const;
  void set_third_derivative_weight(double value);

  // optional double regularization_weight = 9 [default = 0.1];
  bool has_regularization_weight() const;
  void clear_regularization_weight();
  static const int kRegularizationWeightFieldNumber = 9;
  double regularization_weight() const;
  void set_regularization_weight(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.QpSplineReferenceLineSmootherConfig)
 private:
  void set_has_spline_order();
  void clear_has_spline_order();
  void set_has_max_spline_length();
  void clear_has_max_spline_length();
  void set_has_max_constraint_interval();
  void clear_has_max_constraint_interval();
  void set_has_longitudinal_boundary_bound();
  void clear_has_longitudinal_boundary_bound();
  void set_has_lateral_boundary_bound();
  void clear_has_lateral_boundary_bound();
  void set_has_second_derivative_weight();
  void clear_has_second_derivative_weight();
  void set_has_third_derivative_weight();
  void clear_has_third_derivative_weight();
  void set_has_num_of_total_points();
  void clear_has_num_of_total_points();
  void set_has_regularization_weight();
  void clear_has_regularization_weight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double second_derivative_weight_;
  double max_spline_length_;
  double max_constraint_interval_;
  double longitudinal_boundary_bound_;
  ::google::protobuf::uint32 spline_order_;
  ::google::protobuf::uint32 num_of_total_points_;
  double lateral_boundary_bound_;
  double third_derivative_weight_;
  double regularization_weight_;
  friend struct protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// QpSplineReferenceLineSmootherConfig

// optional uint32 spline_order = 1 [default = 5];
inline bool QpSplineReferenceLineSmootherConfig::has_spline_order() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QpSplineReferenceLineSmootherConfig::set_has_spline_order() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_has_spline_order() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_spline_order() {
  spline_order_ = 5u;
  clear_has_spline_order();
}
inline ::google::protobuf::uint32 QpSplineReferenceLineSmootherConfig::spline_order() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.spline_order)
  return spline_order_;
}
inline void QpSplineReferenceLineSmootherConfig::set_spline_order(::google::protobuf::uint32 value) {
  set_has_spline_order();
  spline_order_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.spline_order)
}

// optional double max_spline_length = 2 [default = 25];
inline bool QpSplineReferenceLineSmootherConfig::has_max_spline_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QpSplineReferenceLineSmootherConfig::set_has_max_spline_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_has_max_spline_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_max_spline_length() {
  max_spline_length_ = 25;
  clear_has_max_spline_length();
}
inline double QpSplineReferenceLineSmootherConfig::max_spline_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.max_spline_length)
  return max_spline_length_;
}
inline void QpSplineReferenceLineSmootherConfig::set_max_spline_length(double value) {
  set_has_max_spline_length();
  max_spline_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.max_spline_length)
}

// optional double max_constraint_interval = 3 [default = 5];
inline bool QpSplineReferenceLineSmootherConfig::has_max_constraint_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QpSplineReferenceLineSmootherConfig::set_has_max_constraint_interval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_has_max_constraint_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_max_constraint_interval() {
  max_constraint_interval_ = 5;
  clear_has_max_constraint_interval();
}
inline double QpSplineReferenceLineSmootherConfig::max_constraint_interval() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.max_constraint_interval)
  return max_constraint_interval_;
}
inline void QpSplineReferenceLineSmootherConfig::set_max_constraint_interval(double value) {
  set_has_max_constraint_interval();
  max_constraint_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.max_constraint_interval)
}

// optional double longitudinal_boundary_bound = 4 [default = 1];
inline bool QpSplineReferenceLineSmootherConfig::has_longitudinal_boundary_bound() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QpSplineReferenceLineSmootherConfig::set_has_longitudinal_boundary_bound() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_has_longitudinal_boundary_bound() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_longitudinal_boundary_bound() {
  longitudinal_boundary_bound_ = 1;
  clear_has_longitudinal_boundary_bound();
}
inline double QpSplineReferenceLineSmootherConfig::longitudinal_boundary_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.longitudinal_boundary_bound)
  return longitudinal_boundary_bound_;
}
inline void QpSplineReferenceLineSmootherConfig::set_longitudinal_boundary_bound(double value) {
  set_has_longitudinal_boundary_bound();
  longitudinal_boundary_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.longitudinal_boundary_bound)
}

// optional double lateral_boundary_bound = 5 [default = 0.1];
inline bool QpSplineReferenceLineSmootherConfig::has_lateral_boundary_bound() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QpSplineReferenceLineSmootherConfig::set_has_lateral_boundary_bound() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_has_lateral_boundary_bound() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_lateral_boundary_bound() {
  lateral_boundary_bound_ = 0.1;
  clear_has_lateral_boundary_bound();
}
inline double QpSplineReferenceLineSmootherConfig::lateral_boundary_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.lateral_boundary_bound)
  return lateral_boundary_bound_;
}
inline void QpSplineReferenceLineSmootherConfig::set_lateral_boundary_bound(double value) {
  set_has_lateral_boundary_bound();
  lateral_boundary_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.lateral_boundary_bound)
}

// optional double second_derivative_weight = 6 [default = 0];
inline bool QpSplineReferenceLineSmootherConfig::has_second_derivative_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QpSplineReferenceLineSmootherConfig::set_has_second_derivative_weight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_has_second_derivative_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_second_derivative_weight() {
  second_derivative_weight_ = 0;
  clear_has_second_derivative_weight();
}
inline double QpSplineReferenceLineSmootherConfig::second_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.second_derivative_weight)
  return second_derivative_weight_;
}
inline void QpSplineReferenceLineSmootherConfig::set_second_derivative_weight(double value) {
  set_has_second_derivative_weight();
  second_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.second_derivative_weight)
}

// optional double third_derivative_weight = 7 [default = 100];
inline bool QpSplineReferenceLineSmootherConfig::has_third_derivative_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QpSplineReferenceLineSmootherConfig::set_has_third_derivative_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_has_third_derivative_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_third_derivative_weight() {
  third_derivative_weight_ = 100;
  clear_has_third_derivative_weight();
}
inline double QpSplineReferenceLineSmootherConfig::third_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.third_derivative_weight)
  return third_derivative_weight_;
}
inline void QpSplineReferenceLineSmootherConfig::set_third_derivative_weight(double value) {
  set_has_third_derivative_weight();
  third_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.third_derivative_weight)
}

// optional uint32 num_of_total_points = 8 [default = 500];
inline bool QpSplineReferenceLineSmootherConfig::has_num_of_total_points() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QpSplineReferenceLineSmootherConfig::set_has_num_of_total_points() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_has_num_of_total_points() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_num_of_total_points() {
  num_of_total_points_ = 500u;
  clear_has_num_of_total_points();
}
inline ::google::protobuf::uint32 QpSplineReferenceLineSmootherConfig::num_of_total_points() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.num_of_total_points)
  return num_of_total_points_;
}
inline void QpSplineReferenceLineSmootherConfig::set_num_of_total_points(::google::protobuf::uint32 value) {
  set_has_num_of_total_points();
  num_of_total_points_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.num_of_total_points)
}

// optional double regularization_weight = 9 [default = 0.1];
inline bool QpSplineReferenceLineSmootherConfig::has_regularization_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QpSplineReferenceLineSmootherConfig::set_has_regularization_weight() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_has_regularization_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QpSplineReferenceLineSmootherConfig::clear_regularization_weight() {
  regularization_weight_ = 0.1;
  clear_has_regularization_weight();
}
inline double QpSplineReferenceLineSmootherConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.regularization_weight)
  return regularization_weight_;
}
inline void QpSplineReferenceLineSmootherConfig::set_regularization_weight(double value) {
  set_has_regularization_weight();
  regularization_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.regularization_weight)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto__INCLUDED
