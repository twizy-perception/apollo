// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/dp_poly_path_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/dp_poly_path_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {
class DpPolyPathConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DpPolyPathConfig> {
} _DpPolyPathConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, sample_points_num_each_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, step_length_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, step_length_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, lateral_sample_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, lateral_adjust_coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, eval_time_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, obstacle_ignore_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, obstacle_collision_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, obstacle_risk_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, obstacle_collision_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_l_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_dl_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_ddl_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_l_cost_param_l0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_l_cost_param_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_l_cost_param_k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_out_lane_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyPathConfig, path_end_l_cost_),
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 24, sizeof(DpPolyPathConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DpPolyPathConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/dp_poly_path_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _DpPolyPathConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DpPolyPathConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n0modules/planning/proto/dp_poly_path_co"
      "nfig.proto\022\017apollo.planning\"\343\004\n\020DpPolyPa"
      "thConfig\022\'\n\034sample_points_num_each_level"
      "\030\001 \001(\r:\0019\022\033\n\017step_length_max\030\002 \001(\001:\00215\022\032"
      "\n\017step_length_min\030\003 \001(\001:\0018\022\"\n\025lateral_sa"
      "mple_offset\030\004 \001(\001:\0030.5\022!\n\024lateral_adjust"
      "_coeff\030\005 \001(\001:\0030.5\022\037\n\022eval_time_interval\030"
      "\006 \001(\001:\0030.1\022\034\n\017path_resolution\030\007 \001(\001:\0030.1"
      "\022$\n\030obstacle_ignore_distance\030\010 \001(\001:\00220\022("
      "\n\033obstacle_collision_distance\030\t \001(\001:\0030.2"
      "\022!\n\026obstacle_risk_distance\030\n \001(\001:\0012\022%\n\027o"
      "bstacle_collision_cost\030\013 \001(\001:\0041000\022\023\n\013pa"
      "th_l_cost\030\014 \001(\001\022\024\n\014path_dl_cost\030\r \001(\001\022\025\n"
      "\rpath_ddl_cost\030\016 \001(\001\022\034\n\024path_l_cost_para"
      "m_l0\030\017 \001(\001\022\033\n\023path_l_cost_param_b\030\020 \001(\001\022"
      "\033\n\023path_l_cost_param_k\030\021 \001(\001\022\032\n\022path_out"
      "_lane_cost\030\022 \001(\001\022\027\n\017path_end_l_cost\030\023 \001("
      "\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 681);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/dp_poly_path_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DpPolyPathConfig::kSamplePointsNumEachLevelFieldNumber;
const int DpPolyPathConfig::kStepLengthMaxFieldNumber;
const int DpPolyPathConfig::kStepLengthMinFieldNumber;
const int DpPolyPathConfig::kLateralSampleOffsetFieldNumber;
const int DpPolyPathConfig::kLateralAdjustCoeffFieldNumber;
const int DpPolyPathConfig::kEvalTimeIntervalFieldNumber;
const int DpPolyPathConfig::kPathResolutionFieldNumber;
const int DpPolyPathConfig::kObstacleIgnoreDistanceFieldNumber;
const int DpPolyPathConfig::kObstacleCollisionDistanceFieldNumber;
const int DpPolyPathConfig::kObstacleRiskDistanceFieldNumber;
const int DpPolyPathConfig::kObstacleCollisionCostFieldNumber;
const int DpPolyPathConfig::kPathLCostFieldNumber;
const int DpPolyPathConfig::kPathDlCostFieldNumber;
const int DpPolyPathConfig::kPathDdlCostFieldNumber;
const int DpPolyPathConfig::kPathLCostParamL0FieldNumber;
const int DpPolyPathConfig::kPathLCostParamBFieldNumber;
const int DpPolyPathConfig::kPathLCostParamKFieldNumber;
const int DpPolyPathConfig::kPathOutLaneCostFieldNumber;
const int DpPolyPathConfig::kPathEndLCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DpPolyPathConfig::DpPolyPathConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DpPolyPathConfig)
}
DpPolyPathConfig::DpPolyPathConfig(const DpPolyPathConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&path_l_cost_, &from.path_l_cost_,
    reinterpret_cast<char*>(&obstacle_collision_cost_) -
    reinterpret_cast<char*>(&path_l_cost_) + sizeof(obstacle_collision_cost_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DpPolyPathConfig)
}

void DpPolyPathConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&path_l_cost_, 0, reinterpret_cast<char*>(&path_end_l_cost_) -
    reinterpret_cast<char*>(&path_l_cost_) + sizeof(path_end_l_cost_));
  sample_points_num_each_level_ = 9u;
  step_length_max_ = 15;
  step_length_min_ = 8;
  lateral_sample_offset_ = 0.5;
  lateral_adjust_coeff_ = 0.5;
  eval_time_interval_ = 0.1;
  path_resolution_ = 0.1;
  obstacle_ignore_distance_ = 20;
  obstacle_collision_distance_ = 0.2;
  obstacle_risk_distance_ = 2;
  obstacle_collision_cost_ = 1000;
}

DpPolyPathConfig::~DpPolyPathConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DpPolyPathConfig)
  SharedDtor();
}

void DpPolyPathConfig::SharedDtor() {
}

void DpPolyPathConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DpPolyPathConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DpPolyPathConfig& DpPolyPathConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DpPolyPathConfig* DpPolyPathConfig::New(::google::protobuf::Arena* arena) const {
  DpPolyPathConfig* n = new DpPolyPathConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DpPolyPathConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DpPolyPathConfig)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&path_l_cost_, 0, reinterpret_cast<char*>(&path_end_l_cost_) -
      reinterpret_cast<char*>(&path_l_cost_) + sizeof(path_end_l_cost_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    sample_points_num_each_level_ = 9u;
    step_length_max_ = 15;
    step_length_min_ = 8;
    lateral_sample_offset_ = 0.5;
    lateral_adjust_coeff_ = 0.5;
    eval_time_interval_ = 0.1;
    path_resolution_ = 0.1;
    obstacle_ignore_distance_ = 20;
  }
  if (_has_bits_[16 / 32] & 458752u) {
    obstacle_collision_distance_ = 0.2;
    obstacle_risk_distance_ = 2;
    obstacle_collision_cost_ = 1000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DpPolyPathConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.DpPolyPathConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sample_points_num_each_level = 1 [default = 9];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sample_points_num_each_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_points_num_each_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double step_length_max = 2 [default = 15];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_step_length_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_length_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double step_length_min = 3 [default = 8];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_step_length_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_length_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_sample_offset = 4 [default = 0.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_lateral_sample_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_sample_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_adjust_coeff = 5 [default = 0.5];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_lateral_adjust_coeff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_adjust_coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double eval_time_interval = 6 [default = 0.1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_eval_time_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eval_time_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_resolution = 7 [default = 0.1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_path_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_ignore_distance = 8 [default = 20];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_obstacle_ignore_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_ignore_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_collision_distance = 9 [default = 0.2];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_obstacle_collision_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_collision_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_risk_distance = 10 [default = 2];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_obstacle_risk_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_risk_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_collision_cost = 11 [default = 1000];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_obstacle_collision_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_collision_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_l_cost = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_path_l_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_l_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_dl_cost = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_path_dl_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_dl_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_ddl_cost = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_path_ddl_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_ddl_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_l_cost_param_l0 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_path_l_cost_param_l0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_l_cost_param_l0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_l_cost_param_b = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_path_l_cost_param_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_l_cost_param_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_l_cost_param_k = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_path_l_cost_param_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_l_cost_param_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_out_lane_cost = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_path_out_lane_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_out_lane_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_end_l_cost = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {
          set_has_path_end_l_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_end_l_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.DpPolyPathConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.DpPolyPathConfig)
  return false;
#undef DO_
}

void DpPolyPathConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.DpPolyPathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sample_points_num_each_level = 1 [default = 9];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sample_points_num_each_level(), output);
  }

  // optional double step_length_max = 2 [default = 15];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->step_length_max(), output);
  }

  // optional double step_length_min = 3 [default = 8];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->step_length_min(), output);
  }

  // optional double lateral_sample_offset = 4 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lateral_sample_offset(), output);
  }

  // optional double lateral_adjust_coeff = 5 [default = 0.5];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lateral_adjust_coeff(), output);
  }

  // optional double eval_time_interval = 6 [default = 0.1];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->eval_time_interval(), output);
  }

  // optional double path_resolution = 7 [default = 0.1];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->path_resolution(), output);
  }

  // optional double obstacle_ignore_distance = 8 [default = 20];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->obstacle_ignore_distance(), output);
  }

  // optional double obstacle_collision_distance = 9 [default = 0.2];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->obstacle_collision_distance(), output);
  }

  // optional double obstacle_risk_distance = 10 [default = 2];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->obstacle_risk_distance(), output);
  }

  // optional double obstacle_collision_cost = 11 [default = 1000];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->obstacle_collision_cost(), output);
  }

  // optional double path_l_cost = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->path_l_cost(), output);
  }

  // optional double path_dl_cost = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->path_dl_cost(), output);
  }

  // optional double path_ddl_cost = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->path_ddl_cost(), output);
  }

  // optional double path_l_cost_param_l0 = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->path_l_cost_param_l0(), output);
  }

  // optional double path_l_cost_param_b = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->path_l_cost_param_b(), output);
  }

  // optional double path_l_cost_param_k = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->path_l_cost_param_k(), output);
  }

  // optional double path_out_lane_cost = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->path_out_lane_cost(), output);
  }

  // optional double path_end_l_cost = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->path_end_l_cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.DpPolyPathConfig)
}

::google::protobuf::uint8* DpPolyPathConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DpPolyPathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sample_points_num_each_level = 1 [default = 9];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sample_points_num_each_level(), target);
  }

  // optional double step_length_max = 2 [default = 15];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->step_length_max(), target);
  }

  // optional double step_length_min = 3 [default = 8];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->step_length_min(), target);
  }

  // optional double lateral_sample_offset = 4 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lateral_sample_offset(), target);
  }

  // optional double lateral_adjust_coeff = 5 [default = 0.5];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lateral_adjust_coeff(), target);
  }

  // optional double eval_time_interval = 6 [default = 0.1];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->eval_time_interval(), target);
  }

  // optional double path_resolution = 7 [default = 0.1];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->path_resolution(), target);
  }

  // optional double obstacle_ignore_distance = 8 [default = 20];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->obstacle_ignore_distance(), target);
  }

  // optional double obstacle_collision_distance = 9 [default = 0.2];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->obstacle_collision_distance(), target);
  }

  // optional double obstacle_risk_distance = 10 [default = 2];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->obstacle_risk_distance(), target);
  }

  // optional double obstacle_collision_cost = 11 [default = 1000];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->obstacle_collision_cost(), target);
  }

  // optional double path_l_cost = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->path_l_cost(), target);
  }

  // optional double path_dl_cost = 13;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->path_dl_cost(), target);
  }

  // optional double path_ddl_cost = 14;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->path_ddl_cost(), target);
  }

  // optional double path_l_cost_param_l0 = 15;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->path_l_cost_param_l0(), target);
  }

  // optional double path_l_cost_param_b = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->path_l_cost_param_b(), target);
  }

  // optional double path_l_cost_param_k = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->path_l_cost_param_k(), target);
  }

  // optional double path_out_lane_cost = 18;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->path_out_lane_cost(), target);
  }

  // optional double path_end_l_cost = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->path_end_l_cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DpPolyPathConfig)
  return target;
}

size_t DpPolyPathConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DpPolyPathConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double path_l_cost = 12;
    if (has_path_l_cost()) {
      total_size += 1 + 8;
    }

    // optional double path_dl_cost = 13;
    if (has_path_dl_cost()) {
      total_size += 1 + 8;
    }

    // optional double path_ddl_cost = 14;
    if (has_path_ddl_cost()) {
      total_size += 1 + 8;
    }

    // optional double path_l_cost_param_l0 = 15;
    if (has_path_l_cost_param_l0()) {
      total_size += 1 + 8;
    }

    // optional double path_l_cost_param_b = 16;
    if (has_path_l_cost_param_b()) {
      total_size += 2 + 8;
    }

    // optional double path_l_cost_param_k = 17;
    if (has_path_l_cost_param_k()) {
      total_size += 2 + 8;
    }

    // optional double path_out_lane_cost = 18;
    if (has_path_out_lane_cost()) {
      total_size += 2 + 8;
    }

    // optional double path_end_l_cost = 19;
    if (has_path_end_l_cost()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 sample_points_num_each_level = 1 [default = 9];
    if (has_sample_points_num_each_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sample_points_num_each_level());
    }

    // optional double step_length_max = 2 [default = 15];
    if (has_step_length_max()) {
      total_size += 1 + 8;
    }

    // optional double step_length_min = 3 [default = 8];
    if (has_step_length_min()) {
      total_size += 1 + 8;
    }

    // optional double lateral_sample_offset = 4 [default = 0.5];
    if (has_lateral_sample_offset()) {
      total_size += 1 + 8;
    }

    // optional double lateral_adjust_coeff = 5 [default = 0.5];
    if (has_lateral_adjust_coeff()) {
      total_size += 1 + 8;
    }

    // optional double eval_time_interval = 6 [default = 0.1];
    if (has_eval_time_interval()) {
      total_size += 1 + 8;
    }

    // optional double path_resolution = 7 [default = 0.1];
    if (has_path_resolution()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_ignore_distance = 8 [default = 20];
    if (has_obstacle_ignore_distance()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional double obstacle_collision_distance = 9 [default = 0.2];
    if (has_obstacle_collision_distance()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_risk_distance = 10 [default = 2];
    if (has_obstacle_risk_distance()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_collision_cost = 11 [default = 1000];
    if (has_obstacle_collision_cost()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DpPolyPathConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DpPolyPathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DpPolyPathConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DpPolyPathConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DpPolyPathConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DpPolyPathConfig)
    MergeFrom(*source);
  }
}

void DpPolyPathConfig::MergeFrom(const DpPolyPathConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DpPolyPathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      path_l_cost_ = from.path_l_cost_;
    }
    if (cached_has_bits & 0x00000002u) {
      path_dl_cost_ = from.path_dl_cost_;
    }
    if (cached_has_bits & 0x00000004u) {
      path_ddl_cost_ = from.path_ddl_cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      path_l_cost_param_l0_ = from.path_l_cost_param_l0_;
    }
    if (cached_has_bits & 0x00000010u) {
      path_l_cost_param_b_ = from.path_l_cost_param_b_;
    }
    if (cached_has_bits & 0x00000020u) {
      path_l_cost_param_k_ = from.path_l_cost_param_k_;
    }
    if (cached_has_bits & 0x00000040u) {
      path_out_lane_cost_ = from.path_out_lane_cost_;
    }
    if (cached_has_bits & 0x00000080u) {
      path_end_l_cost_ = from.path_end_l_cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      sample_points_num_each_level_ = from.sample_points_num_each_level_;
    }
    if (cached_has_bits & 0x00000200u) {
      step_length_max_ = from.step_length_max_;
    }
    if (cached_has_bits & 0x00000400u) {
      step_length_min_ = from.step_length_min_;
    }
    if (cached_has_bits & 0x00000800u) {
      lateral_sample_offset_ = from.lateral_sample_offset_;
    }
    if (cached_has_bits & 0x00001000u) {
      lateral_adjust_coeff_ = from.lateral_adjust_coeff_;
    }
    if (cached_has_bits & 0x00002000u) {
      eval_time_interval_ = from.eval_time_interval_;
    }
    if (cached_has_bits & 0x00004000u) {
      path_resolution_ = from.path_resolution_;
    }
    if (cached_has_bits & 0x00008000u) {
      obstacle_ignore_distance_ = from.obstacle_ignore_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      obstacle_collision_distance_ = from.obstacle_collision_distance_;
    }
    if (cached_has_bits & 0x00020000u) {
      obstacle_risk_distance_ = from.obstacle_risk_distance_;
    }
    if (cached_has_bits & 0x00040000u) {
      obstacle_collision_cost_ = from.obstacle_collision_cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DpPolyPathConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DpPolyPathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpPolyPathConfig::CopyFrom(const DpPolyPathConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DpPolyPathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpPolyPathConfig::IsInitialized() const {
  return true;
}

void DpPolyPathConfig::Swap(DpPolyPathConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DpPolyPathConfig::InternalSwap(DpPolyPathConfig* other) {
  std::swap(path_l_cost_, other->path_l_cost_);
  std::swap(path_dl_cost_, other->path_dl_cost_);
  std::swap(path_ddl_cost_, other->path_ddl_cost_);
  std::swap(path_l_cost_param_l0_, other->path_l_cost_param_l0_);
  std::swap(path_l_cost_param_b_, other->path_l_cost_param_b_);
  std::swap(path_l_cost_param_k_, other->path_l_cost_param_k_);
  std::swap(path_out_lane_cost_, other->path_out_lane_cost_);
  std::swap(path_end_l_cost_, other->path_end_l_cost_);
  std::swap(sample_points_num_each_level_, other->sample_points_num_each_level_);
  std::swap(step_length_max_, other->step_length_max_);
  std::swap(step_length_min_, other->step_length_min_);
  std::swap(lateral_sample_offset_, other->lateral_sample_offset_);
  std::swap(lateral_adjust_coeff_, other->lateral_adjust_coeff_);
  std::swap(eval_time_interval_, other->eval_time_interval_);
  std::swap(path_resolution_, other->path_resolution_);
  std::swap(obstacle_ignore_distance_, other->obstacle_ignore_distance_);
  std::swap(obstacle_collision_distance_, other->obstacle_collision_distance_);
  std::swap(obstacle_risk_distance_, other->obstacle_risk_distance_);
  std::swap(obstacle_collision_cost_, other->obstacle_collision_cost_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DpPolyPathConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DpPolyPathConfig

// optional uint32 sample_points_num_each_level = 1 [default = 9];
bool DpPolyPathConfig::has_sample_points_num_each_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DpPolyPathConfig::set_has_sample_points_num_each_level() {
  _has_bits_[0] |= 0x00000100u;
}
void DpPolyPathConfig::clear_has_sample_points_num_each_level() {
  _has_bits_[0] &= ~0x00000100u;
}
void DpPolyPathConfig::clear_sample_points_num_each_level() {
  sample_points_num_each_level_ = 9u;
  clear_has_sample_points_num_each_level();
}
::google::protobuf::uint32 DpPolyPathConfig::sample_points_num_each_level() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.sample_points_num_each_level)
  return sample_points_num_each_level_;
}
void DpPolyPathConfig::set_sample_points_num_each_level(::google::protobuf::uint32 value) {
  set_has_sample_points_num_each_level();
  sample_points_num_each_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.sample_points_num_each_level)
}

// optional double step_length_max = 2 [default = 15];
bool DpPolyPathConfig::has_step_length_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DpPolyPathConfig::set_has_step_length_max() {
  _has_bits_[0] |= 0x00000200u;
}
void DpPolyPathConfig::clear_has_step_length_max() {
  _has_bits_[0] &= ~0x00000200u;
}
void DpPolyPathConfig::clear_step_length_max() {
  step_length_max_ = 15;
  clear_has_step_length_max();
}
double DpPolyPathConfig::step_length_max() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.step_length_max)
  return step_length_max_;
}
void DpPolyPathConfig::set_step_length_max(double value) {
  set_has_step_length_max();
  step_length_max_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.step_length_max)
}

// optional double step_length_min = 3 [default = 8];
bool DpPolyPathConfig::has_step_length_min() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DpPolyPathConfig::set_has_step_length_min() {
  _has_bits_[0] |= 0x00000400u;
}
void DpPolyPathConfig::clear_has_step_length_min() {
  _has_bits_[0] &= ~0x00000400u;
}
void DpPolyPathConfig::clear_step_length_min() {
  step_length_min_ = 8;
  clear_has_step_length_min();
}
double DpPolyPathConfig::step_length_min() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.step_length_min)
  return step_length_min_;
}
void DpPolyPathConfig::set_step_length_min(double value) {
  set_has_step_length_min();
  step_length_min_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.step_length_min)
}

// optional double lateral_sample_offset = 4 [default = 0.5];
bool DpPolyPathConfig::has_lateral_sample_offset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DpPolyPathConfig::set_has_lateral_sample_offset() {
  _has_bits_[0] |= 0x00000800u;
}
void DpPolyPathConfig::clear_has_lateral_sample_offset() {
  _has_bits_[0] &= ~0x00000800u;
}
void DpPolyPathConfig::clear_lateral_sample_offset() {
  lateral_sample_offset_ = 0.5;
  clear_has_lateral_sample_offset();
}
double DpPolyPathConfig::lateral_sample_offset() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.lateral_sample_offset)
  return lateral_sample_offset_;
}
void DpPolyPathConfig::set_lateral_sample_offset(double value) {
  set_has_lateral_sample_offset();
  lateral_sample_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.lateral_sample_offset)
}

// optional double lateral_adjust_coeff = 5 [default = 0.5];
bool DpPolyPathConfig::has_lateral_adjust_coeff() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DpPolyPathConfig::set_has_lateral_adjust_coeff() {
  _has_bits_[0] |= 0x00001000u;
}
void DpPolyPathConfig::clear_has_lateral_adjust_coeff() {
  _has_bits_[0] &= ~0x00001000u;
}
void DpPolyPathConfig::clear_lateral_adjust_coeff() {
  lateral_adjust_coeff_ = 0.5;
  clear_has_lateral_adjust_coeff();
}
double DpPolyPathConfig::lateral_adjust_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.lateral_adjust_coeff)
  return lateral_adjust_coeff_;
}
void DpPolyPathConfig::set_lateral_adjust_coeff(double value) {
  set_has_lateral_adjust_coeff();
  lateral_adjust_coeff_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.lateral_adjust_coeff)
}

// optional double eval_time_interval = 6 [default = 0.1];
bool DpPolyPathConfig::has_eval_time_interval() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DpPolyPathConfig::set_has_eval_time_interval() {
  _has_bits_[0] |= 0x00002000u;
}
void DpPolyPathConfig::clear_has_eval_time_interval() {
  _has_bits_[0] &= ~0x00002000u;
}
void DpPolyPathConfig::clear_eval_time_interval() {
  eval_time_interval_ = 0.1;
  clear_has_eval_time_interval();
}
double DpPolyPathConfig::eval_time_interval() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.eval_time_interval)
  return eval_time_interval_;
}
void DpPolyPathConfig::set_eval_time_interval(double value) {
  set_has_eval_time_interval();
  eval_time_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.eval_time_interval)
}

// optional double path_resolution = 7 [default = 0.1];
bool DpPolyPathConfig::has_path_resolution() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DpPolyPathConfig::set_has_path_resolution() {
  _has_bits_[0] |= 0x00004000u;
}
void DpPolyPathConfig::clear_has_path_resolution() {
  _has_bits_[0] &= ~0x00004000u;
}
void DpPolyPathConfig::clear_path_resolution() {
  path_resolution_ = 0.1;
  clear_has_path_resolution();
}
double DpPolyPathConfig::path_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_resolution)
  return path_resolution_;
}
void DpPolyPathConfig::set_path_resolution(double value) {
  set_has_path_resolution();
  path_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_resolution)
}

// optional double obstacle_ignore_distance = 8 [default = 20];
bool DpPolyPathConfig::has_obstacle_ignore_distance() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DpPolyPathConfig::set_has_obstacle_ignore_distance() {
  _has_bits_[0] |= 0x00008000u;
}
void DpPolyPathConfig::clear_has_obstacle_ignore_distance() {
  _has_bits_[0] &= ~0x00008000u;
}
void DpPolyPathConfig::clear_obstacle_ignore_distance() {
  obstacle_ignore_distance_ = 20;
  clear_has_obstacle_ignore_distance();
}
double DpPolyPathConfig::obstacle_ignore_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_ignore_distance)
  return obstacle_ignore_distance_;
}
void DpPolyPathConfig::set_obstacle_ignore_distance(double value) {
  set_has_obstacle_ignore_distance();
  obstacle_ignore_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_ignore_distance)
}

// optional double obstacle_collision_distance = 9 [default = 0.2];
bool DpPolyPathConfig::has_obstacle_collision_distance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DpPolyPathConfig::set_has_obstacle_collision_distance() {
  _has_bits_[0] |= 0x00010000u;
}
void DpPolyPathConfig::clear_has_obstacle_collision_distance() {
  _has_bits_[0] &= ~0x00010000u;
}
void DpPolyPathConfig::clear_obstacle_collision_distance() {
  obstacle_collision_distance_ = 0.2;
  clear_has_obstacle_collision_distance();
}
double DpPolyPathConfig::obstacle_collision_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_collision_distance)
  return obstacle_collision_distance_;
}
void DpPolyPathConfig::set_obstacle_collision_distance(double value) {
  set_has_obstacle_collision_distance();
  obstacle_collision_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_collision_distance)
}

// optional double obstacle_risk_distance = 10 [default = 2];
bool DpPolyPathConfig::has_obstacle_risk_distance() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DpPolyPathConfig::set_has_obstacle_risk_distance() {
  _has_bits_[0] |= 0x00020000u;
}
void DpPolyPathConfig::clear_has_obstacle_risk_distance() {
  _has_bits_[0] &= ~0x00020000u;
}
void DpPolyPathConfig::clear_obstacle_risk_distance() {
  obstacle_risk_distance_ = 2;
  clear_has_obstacle_risk_distance();
}
double DpPolyPathConfig::obstacle_risk_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_risk_distance)
  return obstacle_risk_distance_;
}
void DpPolyPathConfig::set_obstacle_risk_distance(double value) {
  set_has_obstacle_risk_distance();
  obstacle_risk_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_risk_distance)
}

// optional double obstacle_collision_cost = 11 [default = 1000];
bool DpPolyPathConfig::has_obstacle_collision_cost() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DpPolyPathConfig::set_has_obstacle_collision_cost() {
  _has_bits_[0] |= 0x00040000u;
}
void DpPolyPathConfig::clear_has_obstacle_collision_cost() {
  _has_bits_[0] &= ~0x00040000u;
}
void DpPolyPathConfig::clear_obstacle_collision_cost() {
  obstacle_collision_cost_ = 1000;
  clear_has_obstacle_collision_cost();
}
double DpPolyPathConfig::obstacle_collision_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_collision_cost)
  return obstacle_collision_cost_;
}
void DpPolyPathConfig::set_obstacle_collision_cost(double value) {
  set_has_obstacle_collision_cost();
  obstacle_collision_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_collision_cost)
}

// optional double path_l_cost = 12;
bool DpPolyPathConfig::has_path_l_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DpPolyPathConfig::set_has_path_l_cost() {
  _has_bits_[0] |= 0x00000001u;
}
void DpPolyPathConfig::clear_has_path_l_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
void DpPolyPathConfig::clear_path_l_cost() {
  path_l_cost_ = 0;
  clear_has_path_l_cost();
}
double DpPolyPathConfig::path_l_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost)
  return path_l_cost_;
}
void DpPolyPathConfig::set_path_l_cost(double value) {
  set_has_path_l_cost();
  path_l_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost)
}

// optional double path_dl_cost = 13;
bool DpPolyPathConfig::has_path_dl_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DpPolyPathConfig::set_has_path_dl_cost() {
  _has_bits_[0] |= 0x00000002u;
}
void DpPolyPathConfig::clear_has_path_dl_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
void DpPolyPathConfig::clear_path_dl_cost() {
  path_dl_cost_ = 0;
  clear_has_path_dl_cost();
}
double DpPolyPathConfig::path_dl_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_dl_cost)
  return path_dl_cost_;
}
void DpPolyPathConfig::set_path_dl_cost(double value) {
  set_has_path_dl_cost();
  path_dl_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_dl_cost)
}

// optional double path_ddl_cost = 14;
bool DpPolyPathConfig::has_path_ddl_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DpPolyPathConfig::set_has_path_ddl_cost() {
  _has_bits_[0] |= 0x00000004u;
}
void DpPolyPathConfig::clear_has_path_ddl_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
void DpPolyPathConfig::clear_path_ddl_cost() {
  path_ddl_cost_ = 0;
  clear_has_path_ddl_cost();
}
double DpPolyPathConfig::path_ddl_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_ddl_cost)
  return path_ddl_cost_;
}
void DpPolyPathConfig::set_path_ddl_cost(double value) {
  set_has_path_ddl_cost();
  path_ddl_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_ddl_cost)
}

// optional double path_l_cost_param_l0 = 15;
bool DpPolyPathConfig::has_path_l_cost_param_l0() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DpPolyPathConfig::set_has_path_l_cost_param_l0() {
  _has_bits_[0] |= 0x00000008u;
}
void DpPolyPathConfig::clear_has_path_l_cost_param_l0() {
  _has_bits_[0] &= ~0x00000008u;
}
void DpPolyPathConfig::clear_path_l_cost_param_l0() {
  path_l_cost_param_l0_ = 0;
  clear_has_path_l_cost_param_l0();
}
double DpPolyPathConfig::path_l_cost_param_l0() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost_param_l0)
  return path_l_cost_param_l0_;
}
void DpPolyPathConfig::set_path_l_cost_param_l0(double value) {
  set_has_path_l_cost_param_l0();
  path_l_cost_param_l0_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost_param_l0)
}

// optional double path_l_cost_param_b = 16;
bool DpPolyPathConfig::has_path_l_cost_param_b() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DpPolyPathConfig::set_has_path_l_cost_param_b() {
  _has_bits_[0] |= 0x00000010u;
}
void DpPolyPathConfig::clear_has_path_l_cost_param_b() {
  _has_bits_[0] &= ~0x00000010u;
}
void DpPolyPathConfig::clear_path_l_cost_param_b() {
  path_l_cost_param_b_ = 0;
  clear_has_path_l_cost_param_b();
}
double DpPolyPathConfig::path_l_cost_param_b() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost_param_b)
  return path_l_cost_param_b_;
}
void DpPolyPathConfig::set_path_l_cost_param_b(double value) {
  set_has_path_l_cost_param_b();
  path_l_cost_param_b_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost_param_b)
}

// optional double path_l_cost_param_k = 17;
bool DpPolyPathConfig::has_path_l_cost_param_k() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DpPolyPathConfig::set_has_path_l_cost_param_k() {
  _has_bits_[0] |= 0x00000020u;
}
void DpPolyPathConfig::clear_has_path_l_cost_param_k() {
  _has_bits_[0] &= ~0x00000020u;
}
void DpPolyPathConfig::clear_path_l_cost_param_k() {
  path_l_cost_param_k_ = 0;
  clear_has_path_l_cost_param_k();
}
double DpPolyPathConfig::path_l_cost_param_k() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost_param_k)
  return path_l_cost_param_k_;
}
void DpPolyPathConfig::set_path_l_cost_param_k(double value) {
  set_has_path_l_cost_param_k();
  path_l_cost_param_k_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost_param_k)
}

// optional double path_out_lane_cost = 18;
bool DpPolyPathConfig::has_path_out_lane_cost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DpPolyPathConfig::set_has_path_out_lane_cost() {
  _has_bits_[0] |= 0x00000040u;
}
void DpPolyPathConfig::clear_has_path_out_lane_cost() {
  _has_bits_[0] &= ~0x00000040u;
}
void DpPolyPathConfig::clear_path_out_lane_cost() {
  path_out_lane_cost_ = 0;
  clear_has_path_out_lane_cost();
}
double DpPolyPathConfig::path_out_lane_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_out_lane_cost)
  return path_out_lane_cost_;
}
void DpPolyPathConfig::set_path_out_lane_cost(double value) {
  set_has_path_out_lane_cost();
  path_out_lane_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_out_lane_cost)
}

// optional double path_end_l_cost = 19;
bool DpPolyPathConfig::has_path_end_l_cost() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DpPolyPathConfig::set_has_path_end_l_cost() {
  _has_bits_[0] |= 0x00000080u;
}
void DpPolyPathConfig::clear_has_path_end_l_cost() {
  _has_bits_[0] &= ~0x00000080u;
}
void DpPolyPathConfig::clear_path_end_l_cost() {
  path_end_l_cost_ = 0;
  clear_has_path_end_l_cost();
}
double DpPolyPathConfig::path_end_l_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_end_l_cost)
  return path_end_l_cost_;
}
void DpPolyPathConfig::set_path_end_l_cost(double value) {
  set_has_path_end_l_cost();
  path_end_l_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_end_l_cost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
