// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_internal.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/canbus/proto/chassis.pb.h"
#include "modules/common/proto/pnc_point.pb.h"
#include "modules/localization/proto/localization.pb.h"
#include "modules/routing/proto/routing.pb.h"
#include "modules/perception/proto/traffic_light_detection.pb.h"
#include "modules/planning/proto/sl_boundary.pb.h"
#include "modules/planning/proto/decision.pb.h"
// @@protoc_insertion_point(includes)
namespace apollo {
namespace canbus {
class Chassis;
class ChassisDefaultTypeInternal;
extern ChassisDefaultTypeInternal _Chassis_default_instance_;
class ChassisGPS;
class ChassisGPSDefaultTypeInternal;
extern ChassisGPSDefaultTypeInternal _ChassisGPS_default_instance_;
}  // namespace canbus
namespace common {
class FrenetFramePoint;
class FrenetFramePointDefaultTypeInternal;
extern FrenetFramePointDefaultTypeInternal _FrenetFramePoint_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class PathPoint;
class PathPointDefaultTypeInternal;
extern PathPointDefaultTypeInternal _PathPoint_default_instance_;
class SLPoint;
class SLPointDefaultTypeInternal;
extern SLPointDefaultTypeInternal _SLPoint_default_instance_;
class SpeedPoint;
class SpeedPointDefaultTypeInternal;
extern SpeedPointDefaultTypeInternal _SpeedPoint_default_instance_;
class TrajectoryPoint;
class TrajectoryPointDefaultTypeInternal;
extern TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
}  // namespace common
namespace localization {
class LocalizationEstimate;
class LocalizationEstimateDefaultTypeInternal;
extern LocalizationEstimateDefaultTypeInternal _LocalizationEstimate_default_instance_;
class LocalizationStatus;
class LocalizationStatusDefaultTypeInternal;
extern LocalizationStatusDefaultTypeInternal _LocalizationStatus_default_instance_;
class Uncertainty;
class UncertaintyDefaultTypeInternal;
extern UncertaintyDefaultTypeInternal _Uncertainty_default_instance_;
}  // namespace localization
namespace perception {
class TrafficLight;
class TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class TrafficLightBox;
class TrafficLightBoxDefaultTypeInternal;
extern TrafficLightBoxDefaultTypeInternal _TrafficLightBox_default_instance_;
class TrafficLightDebug;
class TrafficLightDebugDefaultTypeInternal;
extern TrafficLightDebugDefaultTypeInternal _TrafficLightDebug_default_instance_;
class TrafficLightDetection;
class TrafficLightDetectionDefaultTypeInternal;
extern TrafficLightDetectionDefaultTypeInternal _TrafficLightDetection_default_instance_;
}  // namespace perception
namespace planning {
class DecisionResult;
class DecisionResultDefaultTypeInternal;
extern DecisionResultDefaultTypeInternal _DecisionResult_default_instance_;
class EmergencyStopCruiseToStop;
class EmergencyStopCruiseToStopDefaultTypeInternal;
extern EmergencyStopCruiseToStopDefaultTypeInternal _EmergencyStopCruiseToStop_default_instance_;
class EmergencyStopHardBrake;
class EmergencyStopHardBrakeDefaultTypeInternal;
extern EmergencyStopHardBrakeDefaultTypeInternal _EmergencyStopHardBrake_default_instance_;
class MainChangeLane;
class MainChangeLaneDefaultTypeInternal;
extern MainChangeLaneDefaultTypeInternal _MainChangeLane_default_instance_;
class MainCruise;
class MainCruiseDefaultTypeInternal;
extern MainCruiseDefaultTypeInternal _MainCruise_default_instance_;
class MainDecision;
class MainDecisionDefaultTypeInternal;
extern MainDecisionDefaultTypeInternal _MainDecision_default_instance_;
class MainEmergencyStop;
class MainEmergencyStopDefaultTypeInternal;
extern MainEmergencyStopDefaultTypeInternal _MainEmergencyStop_default_instance_;
class MainMissionComplete;
class MainMissionCompleteDefaultTypeInternal;
extern MainMissionCompleteDefaultTypeInternal _MainMissionComplete_default_instance_;
class MainNotReady;
class MainNotReadyDefaultTypeInternal;
extern MainNotReadyDefaultTypeInternal _MainNotReady_default_instance_;
class MainParking;
class MainParkingDefaultTypeInternal;
extern MainParkingDefaultTypeInternal _MainParking_default_instance_;
class MainStop;
class MainStopDefaultTypeInternal;
extern MainStopDefaultTypeInternal _MainStop_default_instance_;
class ObjectAvoid;
class ObjectAvoidDefaultTypeInternal;
extern ObjectAvoidDefaultTypeInternal _ObjectAvoid_default_instance_;
class ObjectDecision;
class ObjectDecisionDefaultTypeInternal;
extern ObjectDecisionDefaultTypeInternal _ObjectDecision_default_instance_;
class ObjectDecisionType;
class ObjectDecisionTypeDefaultTypeInternal;
extern ObjectDecisionTypeDefaultTypeInternal _ObjectDecisionType_default_instance_;
class ObjectDecisions;
class ObjectDecisionsDefaultTypeInternal;
extern ObjectDecisionsDefaultTypeInternal _ObjectDecisions_default_instance_;
class ObjectFollow;
class ObjectFollowDefaultTypeInternal;
extern ObjectFollowDefaultTypeInternal _ObjectFollow_default_instance_;
class ObjectIgnore;
class ObjectIgnoreDefaultTypeInternal;
extern ObjectIgnoreDefaultTypeInternal _ObjectIgnore_default_instance_;
class ObjectNudge;
class ObjectNudgeDefaultTypeInternal;
extern ObjectNudgeDefaultTypeInternal _ObjectNudge_default_instance_;
class ObjectOvertake;
class ObjectOvertakeDefaultTypeInternal;
extern ObjectOvertakeDefaultTypeInternal _ObjectOvertake_default_instance_;
class ObjectSidePass;
class ObjectSidePassDefaultTypeInternal;
extern ObjectSidePassDefaultTypeInternal _ObjectSidePass_default_instance_;
class ObjectStop;
class ObjectStopDefaultTypeInternal;
extern ObjectStopDefaultTypeInternal _ObjectStop_default_instance_;
class ObjectYield;
class ObjectYieldDefaultTypeInternal;
extern ObjectYieldDefaultTypeInternal _ObjectYield_default_instance_;
class SLBoundary;
class SLBoundaryDefaultTypeInternal;
extern SLBoundaryDefaultTypeInternal _SLBoundary_default_instance_;
class TargetLane;
class TargetLaneDefaultTypeInternal;
extern TargetLaneDefaultTypeInternal _TargetLane_default_instance_;
}  // namespace planning
namespace planning_internal {
class ChangeLaneState;
class ChangeLaneStateDefaultTypeInternal;
extern ChangeLaneStateDefaultTypeInternal _ChangeLaneState_default_instance_;
class Debug;
class DebugDefaultTypeInternal;
extern DebugDefaultTypeInternal _Debug_default_instance_;
class DecisionTag;
class DecisionTagDefaultTypeInternal;
extern DecisionTagDefaultTypeInternal _DecisionTag_default_instance_;
class DpPolyGraphDebug;
class DpPolyGraphDebugDefaultTypeInternal;
extern DpPolyGraphDebugDefaultTypeInternal _DpPolyGraphDebug_default_instance_;
class ObstacleDebug;
class ObstacleDebugDefaultTypeInternal;
extern ObstacleDebugDefaultTypeInternal _ObstacleDebug_default_instance_;
class PlanningData;
class PlanningDataDefaultTypeInternal;
extern PlanningDataDefaultTypeInternal _PlanningData_default_instance_;
class ReferenceLineDebug;
class ReferenceLineDebugDefaultTypeInternal;
extern ReferenceLineDebugDefaultTypeInternal _ReferenceLineDebug_default_instance_;
class SLFrameDebug;
class SLFrameDebugDefaultTypeInternal;
extern SLFrameDebugDefaultTypeInternal _SLFrameDebug_default_instance_;
class STGraphDebug;
class STGraphDebugDefaultTypeInternal;
extern STGraphDebugDefaultTypeInternal _STGraphDebug_default_instance_;
class STGraphDebug_STGraphKernelCuiseRef;
class STGraphDebug_STGraphKernelCuiseRefDefaultTypeInternal;
extern STGraphDebug_STGraphKernelCuiseRefDefaultTypeInternal _STGraphDebug_STGraphKernelCuiseRef_default_instance_;
class STGraphDebug_STGraphKernelFollowRef;
class STGraphDebug_STGraphKernelFollowRefDefaultTypeInternal;
extern STGraphDebug_STGraphKernelFollowRefDefaultTypeInternal _STGraphDebug_STGraphKernelFollowRef_default_instance_;
class STGraphDebug_STGraphSpeedConstraint;
class STGraphDebug_STGraphSpeedConstraintDefaultTypeInternal;
extern STGraphDebug_STGraphSpeedConstraintDefaultTypeInternal _STGraphDebug_STGraphSpeedConstraint_default_instance_;
class SampleLayerDebug;
class SampleLayerDebugDefaultTypeInternal;
extern SampleLayerDebugDefaultTypeInternal _SampleLayerDebug_default_instance_;
class SignalLightDebug;
class SignalLightDebugDefaultTypeInternal;
extern SignalLightDebugDefaultTypeInternal _SignalLightDebug_default_instance_;
class SignalLightDebug_SignalDebug;
class SignalLightDebug_SignalDebugDefaultTypeInternal;
extern SignalLightDebug_SignalDebugDefaultTypeInternal _SignalLightDebug_SignalDebug_default_instance_;
class SpeedPlan;
class SpeedPlanDefaultTypeInternal;
extern SpeedPlanDefaultTypeInternal _SpeedPlan_default_instance_;
class StGraphBoundaryDebug;
class StGraphBoundaryDebugDefaultTypeInternal;
extern StGraphBoundaryDebugDefaultTypeInternal _StGraphBoundaryDebug_default_instance_;
}  // namespace planning_internal
namespace routing {
class LaneSegment;
class LaneSegmentDefaultTypeInternal;
extern LaneSegmentDefaultTypeInternal _LaneSegment_default_instance_;
class LaneWaypoint;
class LaneWaypointDefaultTypeInternal;
extern LaneWaypointDefaultTypeInternal _LaneWaypoint_default_instance_;
class Measurement;
class MeasurementDefaultTypeInternal;
extern MeasurementDefaultTypeInternal _Measurement_default_instance_;
class Passage;
class PassageDefaultTypeInternal;
extern PassageDefaultTypeInternal _Passage_default_instance_;
class RoadSegment;
class RoadSegmentDefaultTypeInternal;
extern RoadSegmentDefaultTypeInternal _RoadSegment_default_instance_;
class RoutingRequest;
class RoutingRequestDefaultTypeInternal;
extern RoutingRequestDefaultTypeInternal _RoutingRequest_default_instance_;
class RoutingResponse;
class RoutingResponseDefaultTypeInternal;
extern RoutingResponseDefaultTypeInternal _RoutingResponse_default_instance_;
}  // namespace routing
}  // namespace apollo

namespace apollo {
namespace planning_internal {

namespace protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto

enum StGraphBoundaryDebug_StBoundaryType {
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_UNKNOWN = 1,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_STOP = 2,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_FOLLOW = 3,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_YIELD = 4,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_OVERTAKE = 5,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_KEEP_CLEAR = 6
};
bool StGraphBoundaryDebug_StBoundaryType_IsValid(int value);
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MIN = StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_UNKNOWN;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MAX = StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_KEEP_CLEAR;
const int StGraphBoundaryDebug_StBoundaryType_StBoundaryType_ARRAYSIZE = StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StGraphBoundaryDebug_StBoundaryType_descriptor();
inline const ::std::string& StGraphBoundaryDebug_StBoundaryType_Name(StGraphBoundaryDebug_StBoundaryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StGraphBoundaryDebug_StBoundaryType_descriptor(), value);
}
inline bool StGraphBoundaryDebug_StBoundaryType_Parse(
    const ::std::string& name, StGraphBoundaryDebug_StBoundaryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StGraphBoundaryDebug_StBoundaryType>(
    StGraphBoundaryDebug_StBoundaryType_descriptor(), name, value);
}
enum ChangeLaneState_State {
  ChangeLaneState_State_IN_CHANGE_LANE = 1,
  ChangeLaneState_State_CHANGE_LANE_FAILED = 2,
  ChangeLaneState_State_CHANGE_LANE_SUCCESS = 3
};
bool ChangeLaneState_State_IsValid(int value);
const ChangeLaneState_State ChangeLaneState_State_State_MIN = ChangeLaneState_State_IN_CHANGE_LANE;
const ChangeLaneState_State ChangeLaneState_State_State_MAX = ChangeLaneState_State_CHANGE_LANE_SUCCESS;
const int ChangeLaneState_State_State_ARRAYSIZE = ChangeLaneState_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeLaneState_State_descriptor();
inline const ::std::string& ChangeLaneState_State_Name(ChangeLaneState_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeLaneState_State_descriptor(), value);
}
inline bool ChangeLaneState_State_Parse(
    const ::std::string& name, ChangeLaneState_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeLaneState_State>(
    ChangeLaneState_State_descriptor(), name, value);
}
// ===================================================================

class Debug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.Debug) */ {
 public:
  Debug();
  virtual ~Debug();

  Debug(const Debug& from);

  inline Debug& operator=(const Debug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug& default_instance();

  static inline const Debug* internal_default_instance() {
    return reinterpret_cast<const Debug*>(
               &_Debug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Debug* other);

  // implements Message ----------------------------------------------

  inline Debug* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debug& from);
  void MergeFrom(const Debug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  bool has_planning_data() const;
  void clear_planning_data();
  static const int kPlanningDataFieldNumber = 2;
  const ::apollo::planning_internal::PlanningData& planning_data() const;
  ::apollo::planning_internal::PlanningData* mutable_planning_data();
  ::apollo::planning_internal::PlanningData* release_planning_data();
  void set_allocated_planning_data(::apollo::planning_internal::PlanningData* planning_data);

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.Debug)
 private:
  void set_has_planning_data();
  void clear_has_planning_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::apollo::planning_internal::PlanningData* planning_data_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeedPlan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.SpeedPlan) */ {
 public:
  SpeedPlan();
  virtual ~SpeedPlan();

  SpeedPlan(const SpeedPlan& from);

  inline SpeedPlan& operator=(const SpeedPlan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedPlan& default_instance();

  static inline const SpeedPlan* internal_default_instance() {
    return reinterpret_cast<const SpeedPlan*>(
               &_SpeedPlan_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SpeedPlan* other);

  // implements Message ----------------------------------------------

  inline SpeedPlan* New() const PROTOBUF_FINAL { return New(NULL); }

  SpeedPlan* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpeedPlan& from);
  void MergeFrom(const SpeedPlan& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpeedPlan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.SpeedPoint speed_point = 2;
  int speed_point_size() const;
  void clear_speed_point();
  static const int kSpeedPointFieldNumber = 2;
  const ::apollo::common::SpeedPoint& speed_point(int index) const;
  ::apollo::common::SpeedPoint* mutable_speed_point(int index);
  ::apollo::common::SpeedPoint* add_speed_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
      mutable_speed_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
      speed_point() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.SpeedPlan)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint > speed_point_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StGraphBoundaryDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.StGraphBoundaryDebug) */ {
 public:
  StGraphBoundaryDebug();
  virtual ~StGraphBoundaryDebug();

  StGraphBoundaryDebug(const StGraphBoundaryDebug& from);

  inline StGraphBoundaryDebug& operator=(const StGraphBoundaryDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StGraphBoundaryDebug& default_instance();

  static inline const StGraphBoundaryDebug* internal_default_instance() {
    return reinterpret_cast<const StGraphBoundaryDebug*>(
               &_StGraphBoundaryDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(StGraphBoundaryDebug* other);

  // implements Message ----------------------------------------------

  inline StGraphBoundaryDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  StGraphBoundaryDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StGraphBoundaryDebug& from);
  void MergeFrom(const StGraphBoundaryDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StGraphBoundaryDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StGraphBoundaryDebug_StBoundaryType StBoundaryType;
  static const StBoundaryType ST_BOUNDARY_TYPE_UNKNOWN =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_UNKNOWN;
  static const StBoundaryType ST_BOUNDARY_TYPE_STOP =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_STOP;
  static const StBoundaryType ST_BOUNDARY_TYPE_FOLLOW =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_FOLLOW;
  static const StBoundaryType ST_BOUNDARY_TYPE_YIELD =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_YIELD;
  static const StBoundaryType ST_BOUNDARY_TYPE_OVERTAKE =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_OVERTAKE;
  static const StBoundaryType ST_BOUNDARY_TYPE_KEEP_CLEAR =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_KEEP_CLEAR;
  static inline bool StBoundaryType_IsValid(int value) {
    return StGraphBoundaryDebug_StBoundaryType_IsValid(value);
  }
  static const StBoundaryType StBoundaryType_MIN =
    StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MIN;
  static const StBoundaryType StBoundaryType_MAX =
    StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MAX;
  static const int StBoundaryType_ARRAYSIZE =
    StGraphBoundaryDebug_StBoundaryType_StBoundaryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StBoundaryType_descriptor() {
    return StGraphBoundaryDebug_StBoundaryType_descriptor();
  }
  static inline const ::std::string& StBoundaryType_Name(StBoundaryType value) {
    return StGraphBoundaryDebug_StBoundaryType_Name(value);
  }
  static inline bool StBoundaryType_Parse(const ::std::string& name,
      StBoundaryType* value) {
    return StGraphBoundaryDebug_StBoundaryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .apollo.common.SpeedPoint point = 2;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 2;
  const ::apollo::common::SpeedPoint& point(int index) const;
  ::apollo::common::SpeedPoint* mutable_point(int index);
  ::apollo::common::SpeedPoint* add_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
      point() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType type() const;
  void set_type(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType value);

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.StGraphBoundaryDebug)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint > point_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLFrameDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.SLFrameDebug) */ {
 public:
  SLFrameDebug();
  virtual ~SLFrameDebug();

  SLFrameDebug(const SLFrameDebug& from);

  inline SLFrameDebug& operator=(const SLFrameDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLFrameDebug& default_instance();

  static inline const SLFrameDebug* internal_default_instance() {
    return reinterpret_cast<const SLFrameDebug*>(
               &_SLFrameDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SLFrameDebug* other);

  // implements Message ----------------------------------------------

  inline SLFrameDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  SLFrameDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLFrameDebug& from);
  void MergeFrom(const SLFrameDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLFrameDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double sampled_s = 2;
  int sampled_s_size() const;
  void clear_sampled_s();
  static const int kSampledSFieldNumber = 2;
  double sampled_s(int index) const;
  void set_sampled_s(int index, double value);
  void add_sampled_s(double value);
  const ::google::protobuf::RepeatedField< double >&
      sampled_s() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_sampled_s();

  // repeated double static_obstacle_lower_bound = 3;
  int static_obstacle_lower_bound_size() const;
  void clear_static_obstacle_lower_bound();
  static const int kStaticObstacleLowerBoundFieldNumber = 3;
  double static_obstacle_lower_bound(int index) const;
  void set_static_obstacle_lower_bound(int index, double value);
  void add_static_obstacle_lower_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      static_obstacle_lower_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_static_obstacle_lower_bound();

  // repeated double dynamic_obstacle_lower_bound = 4;
  int dynamic_obstacle_lower_bound_size() const;
  void clear_dynamic_obstacle_lower_bound();
  static const int kDynamicObstacleLowerBoundFieldNumber = 4;
  double dynamic_obstacle_lower_bound(int index) const;
  void set_dynamic_obstacle_lower_bound(int index, double value);
  void add_dynamic_obstacle_lower_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      dynamic_obstacle_lower_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_dynamic_obstacle_lower_bound();

  // repeated double static_obstacle_upper_bound = 5;
  int static_obstacle_upper_bound_size() const;
  void clear_static_obstacle_upper_bound();
  static const int kStaticObstacleUpperBoundFieldNumber = 5;
  double static_obstacle_upper_bound(int index) const;
  void set_static_obstacle_upper_bound(int index, double value);
  void add_static_obstacle_upper_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      static_obstacle_upper_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_static_obstacle_upper_bound();

  // repeated double dynamic_obstacle_upper_bound = 6;
  int dynamic_obstacle_upper_bound_size() const;
  void clear_dynamic_obstacle_upper_bound();
  static const int kDynamicObstacleUpperBoundFieldNumber = 6;
  double dynamic_obstacle_upper_bound(int index) const;
  void set_dynamic_obstacle_upper_bound(int index, double value);
  void add_dynamic_obstacle_upper_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      dynamic_obstacle_upper_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_dynamic_obstacle_upper_bound();

  // repeated double map_lower_bound = 7;
  int map_lower_bound_size() const;
  void clear_map_lower_bound();
  static const int kMapLowerBoundFieldNumber = 7;
  double map_lower_bound(int index) const;
  void set_map_lower_bound(int index, double value);
  void add_map_lower_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      map_lower_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_map_lower_bound();

  // repeated double map_upper_bound = 8;
  int map_upper_bound_size() const;
  void clear_map_upper_bound();
  static const int kMapUpperBoundFieldNumber = 8;
  double map_upper_bound(int index) const;
  void set_map_upper_bound(int index, double value);
  void add_map_upper_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      map_upper_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_map_upper_bound();

  // repeated .apollo.common.SLPoint sl_path = 9;
  int sl_path_size() const;
  void clear_sl_path();
  static const int kSlPathFieldNumber = 9;
  const ::apollo::common::SLPoint& sl_path(int index) const;
  ::apollo::common::SLPoint* mutable_sl_path(int index);
  ::apollo::common::SLPoint* add_sl_path();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >*
      mutable_sl_path();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >&
      sl_path() const;

  // repeated double aggregated_boundary_s = 10;
  int aggregated_boundary_s_size() const;
  void clear_aggregated_boundary_s();
  static const int kAggregatedBoundarySFieldNumber = 10;
  double aggregated_boundary_s(int index) const;
  void set_aggregated_boundary_s(int index, double value);
  void add_aggregated_boundary_s(double value);
  const ::google::protobuf::RepeatedField< double >&
      aggregated_boundary_s() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_aggregated_boundary_s();

  // repeated double aggregated_boundary_low = 11;
  int aggregated_boundary_low_size() const;
  void clear_aggregated_boundary_low();
  static const int kAggregatedBoundaryLowFieldNumber = 11;
  double aggregated_boundary_low(int index) const;
  void set_aggregated_boundary_low(int index, double value);
  void add_aggregated_boundary_low(double value);
  const ::google::protobuf::RepeatedField< double >&
      aggregated_boundary_low() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_aggregated_boundary_low();

  // repeated double aggregated_boundary_high = 12;
  int aggregated_boundary_high_size() const;
  void clear_aggregated_boundary_high();
  static const int kAggregatedBoundaryHighFieldNumber = 12;
  double aggregated_boundary_high(int index) const;
  void set_aggregated_boundary_high(int index, double value);
  void add_aggregated_boundary_high(double value);
  const ::google::protobuf::RepeatedField< double >&
      aggregated_boundary_high() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_aggregated_boundary_high();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.SLFrameDebug)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > sampled_s_;
  ::google::protobuf::RepeatedField< double > static_obstacle_lower_bound_;
  ::google::protobuf::RepeatedField< double > dynamic_obstacle_lower_bound_;
  ::google::protobuf::RepeatedField< double > static_obstacle_upper_bound_;
  ::google::protobuf::RepeatedField< double > dynamic_obstacle_upper_bound_;
  ::google::protobuf::RepeatedField< double > map_lower_bound_;
  ::google::protobuf::RepeatedField< double > map_upper_bound_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint > sl_path_;
  ::google::protobuf::RepeatedField< double > aggregated_boundary_s_;
  ::google::protobuf::RepeatedField< double > aggregated_boundary_low_;
  ::google::protobuf::RepeatedField< double > aggregated_boundary_high_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class STGraphDebug_STGraphSpeedConstraint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint) */ {
 public:
  STGraphDebug_STGraphSpeedConstraint();
  virtual ~STGraphDebug_STGraphSpeedConstraint();

  STGraphDebug_STGraphSpeedConstraint(const STGraphDebug_STGraphSpeedConstraint& from);

  inline STGraphDebug_STGraphSpeedConstraint& operator=(const STGraphDebug_STGraphSpeedConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STGraphDebug_STGraphSpeedConstraint& default_instance();

  static inline const STGraphDebug_STGraphSpeedConstraint* internal_default_instance() {
    return reinterpret_cast<const STGraphDebug_STGraphSpeedConstraint*>(
               &_STGraphDebug_STGraphSpeedConstraint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(STGraphDebug_STGraphSpeedConstraint* other);

  // implements Message ----------------------------------------------

  inline STGraphDebug_STGraphSpeedConstraint* New() const PROTOBUF_FINAL { return New(NULL); }

  STGraphDebug_STGraphSpeedConstraint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const STGraphDebug_STGraphSpeedConstraint& from);
  void MergeFrom(const STGraphDebug_STGraphSpeedConstraint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(STGraphDebug_STGraphSpeedConstraint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double t = 1;
  int t_size() const;
  void clear_t();
  static const int kTFieldNumber = 1;
  double t(int index) const;
  void set_t(int index, double value);
  void add_t(double value);
  const ::google::protobuf::RepeatedField< double >&
      t() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_t();

  // repeated double lower_bound = 2;
  int lower_bound_size() const;
  void clear_lower_bound();
  static const int kLowerBoundFieldNumber = 2;
  double lower_bound(int index) const;
  void set_lower_bound(int index, double value);
  void add_lower_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      lower_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_lower_bound();

  // repeated double upper_bound = 3;
  int upper_bound_size() const;
  void clear_upper_bound();
  static const int kUpperBoundFieldNumber = 3;
  double upper_bound(int index) const;
  void set_upper_bound(int index, double value);
  void add_upper_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      upper_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_upper_bound();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > t_;
  ::google::protobuf::RepeatedField< double > lower_bound_;
  ::google::protobuf::RepeatedField< double > upper_bound_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class STGraphDebug_STGraphKernelCuiseRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef) */ {
 public:
  STGraphDebug_STGraphKernelCuiseRef();
  virtual ~STGraphDebug_STGraphKernelCuiseRef();

  STGraphDebug_STGraphKernelCuiseRef(const STGraphDebug_STGraphKernelCuiseRef& from);

  inline STGraphDebug_STGraphKernelCuiseRef& operator=(const STGraphDebug_STGraphKernelCuiseRef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STGraphDebug_STGraphKernelCuiseRef& default_instance();

  static inline const STGraphDebug_STGraphKernelCuiseRef* internal_default_instance() {
    return reinterpret_cast<const STGraphDebug_STGraphKernelCuiseRef*>(
               &_STGraphDebug_STGraphKernelCuiseRef_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(STGraphDebug_STGraphKernelCuiseRef* other);

  // implements Message ----------------------------------------------

  inline STGraphDebug_STGraphKernelCuiseRef* New() const PROTOBUF_FINAL { return New(NULL); }

  STGraphDebug_STGraphKernelCuiseRef* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const STGraphDebug_STGraphKernelCuiseRef& from);
  void MergeFrom(const STGraphDebug_STGraphKernelCuiseRef& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(STGraphDebug_STGraphKernelCuiseRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double t = 1;
  int t_size() const;
  void clear_t();
  static const int kTFieldNumber = 1;
  double t(int index) const;
  void set_t(int index, double value);
  void add_t(double value);
  const ::google::protobuf::RepeatedField< double >&
      t() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_t();

  // repeated double cruise_line_s = 2;
  int cruise_line_s_size() const;
  void clear_cruise_line_s();
  static const int kCruiseLineSFieldNumber = 2;
  double cruise_line_s(int index) const;
  void set_cruise_line_s(int index, double value);
  void add_cruise_line_s(double value);
  const ::google::protobuf::RepeatedField< double >&
      cruise_line_s() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_cruise_line_s();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > t_;
  ::google::protobuf::RepeatedField< double > cruise_line_s_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class STGraphDebug_STGraphKernelFollowRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef) */ {
 public:
  STGraphDebug_STGraphKernelFollowRef();
  virtual ~STGraphDebug_STGraphKernelFollowRef();

  STGraphDebug_STGraphKernelFollowRef(const STGraphDebug_STGraphKernelFollowRef& from);

  inline STGraphDebug_STGraphKernelFollowRef& operator=(const STGraphDebug_STGraphKernelFollowRef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STGraphDebug_STGraphKernelFollowRef& default_instance();

  static inline const STGraphDebug_STGraphKernelFollowRef* internal_default_instance() {
    return reinterpret_cast<const STGraphDebug_STGraphKernelFollowRef*>(
               &_STGraphDebug_STGraphKernelFollowRef_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(STGraphDebug_STGraphKernelFollowRef* other);

  // implements Message ----------------------------------------------

  inline STGraphDebug_STGraphKernelFollowRef* New() const PROTOBUF_FINAL { return New(NULL); }

  STGraphDebug_STGraphKernelFollowRef* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const STGraphDebug_STGraphKernelFollowRef& from);
  void MergeFrom(const STGraphDebug_STGraphKernelFollowRef& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(STGraphDebug_STGraphKernelFollowRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double t = 1;
  int t_size() const;
  void clear_t();
  static const int kTFieldNumber = 1;
  double t(int index) const;
  void set_t(int index, double value);
  void add_t(double value);
  const ::google::protobuf::RepeatedField< double >&
      t() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_t();

  // repeated double follow_line_s = 2;
  int follow_line_s_size() const;
  void clear_follow_line_s();
  static const int kFollowLineSFieldNumber = 2;
  double follow_line_s(int index) const;
  void set_follow_line_s(int index, double value);
  void add_follow_line_s(double value);
  const ::google::protobuf::RepeatedField< double >&
      follow_line_s() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_follow_line_s();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > t_;
  ::google::protobuf::RepeatedField< double > follow_line_s_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class STGraphDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.STGraphDebug) */ {
 public:
  STGraphDebug();
  virtual ~STGraphDebug();

  STGraphDebug(const STGraphDebug& from);

  inline STGraphDebug& operator=(const STGraphDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STGraphDebug& default_instance();

  static inline const STGraphDebug* internal_default_instance() {
    return reinterpret_cast<const STGraphDebug*>(
               &_STGraphDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(STGraphDebug* other);

  // implements Message ----------------------------------------------

  inline STGraphDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  STGraphDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const STGraphDebug& from);
  void MergeFrom(const STGraphDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(STGraphDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef STGraphDebug_STGraphSpeedConstraint STGraphSpeedConstraint;
  typedef STGraphDebug_STGraphKernelCuiseRef STGraphKernelCuiseRef;
  typedef STGraphDebug_STGraphKernelFollowRef STGraphKernelFollowRef;

  // accessors -------------------------------------------------------

  // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
  int boundary_size() const;
  void clear_boundary();
  static const int kBoundaryFieldNumber = 2;
  const ::apollo::planning_internal::StGraphBoundaryDebug& boundary(int index) const;
  ::apollo::planning_internal::StGraphBoundaryDebug* mutable_boundary(int index);
  ::apollo::planning_internal::StGraphBoundaryDebug* add_boundary();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug >*
      mutable_boundary();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug >&
      boundary() const;

  // repeated .apollo.common.SpeedPoint speed_limit = 3;
  int speed_limit_size() const;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 3;
  const ::apollo::common::SpeedPoint& speed_limit(int index) const;
  ::apollo::common::SpeedPoint* mutable_speed_limit(int index);
  ::apollo::common::SpeedPoint* add_speed_limit();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
      mutable_speed_limit();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
      speed_limit() const;

  // repeated .apollo.common.SpeedPoint speed_profile = 4;
  int speed_profile_size() const;
  void clear_speed_profile();
  static const int kSpeedProfileFieldNumber = 4;
  const ::apollo::common::SpeedPoint& speed_profile(int index) const;
  ::apollo::common::SpeedPoint* mutable_speed_profile(int index);
  ::apollo::common::SpeedPoint* add_speed_profile();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
      mutable_speed_profile();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
      speed_profile() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
  bool has_speed_constraint() const;
  void clear_speed_constraint();
  static const int kSpeedConstraintFieldNumber = 5;
  const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint& speed_constraint() const;
  ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* mutable_speed_constraint();
  ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* release_speed_constraint();
  void set_allocated_speed_constraint(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint);

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
  bool has_kernel_cruise_ref() const;
  void clear_kernel_cruise_ref();
  static const int kKernelCruiseRefFieldNumber = 6;
  const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef& kernel_cruise_ref() const;
  ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* mutable_kernel_cruise_ref();
  ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* release_kernel_cruise_ref();
  void set_allocated_kernel_cruise_ref(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref);

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
  bool has_kernel_follow_ref() const;
  void clear_kernel_follow_ref();
  static const int kKernelFollowRefFieldNumber = 7;
  const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef& kernel_follow_ref() const;
  ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* mutable_kernel_follow_ref();
  ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* release_kernel_follow_ref();
  void set_allocated_kernel_follow_ref(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref);

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.STGraphDebug)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_speed_constraint();
  void clear_has_speed_constraint();
  void set_has_kernel_cruise_ref();
  void clear_has_kernel_cruise_ref();
  void set_has_kernel_follow_ref();
  void clear_has_kernel_follow_ref();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug > boundary_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint > speed_limit_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint > speed_profile_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint_;
  ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref_;
  ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignalLightDebug_SignalDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.SignalLightDebug.SignalDebug) */ {
 public:
  SignalLightDebug_SignalDebug();
  virtual ~SignalLightDebug_SignalDebug();

  SignalLightDebug_SignalDebug(const SignalLightDebug_SignalDebug& from);

  inline SignalLightDebug_SignalDebug& operator=(const SignalLightDebug_SignalDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalLightDebug_SignalDebug& default_instance();

  static inline const SignalLightDebug_SignalDebug* internal_default_instance() {
    return reinterpret_cast<const SignalLightDebug_SignalDebug*>(
               &_SignalLightDebug_SignalDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SignalLightDebug_SignalDebug* other);

  // implements Message ----------------------------------------------

  inline SignalLightDebug_SignalDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  SignalLightDebug_SignalDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignalLightDebug_SignalDebug& from);
  void MergeFrom(const SignalLightDebug_SignalDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignalLightDebug_SignalDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string light_id = 1;
  bool has_light_id() const;
  void clear_light_id();
  static const int kLightIdFieldNumber = 1;
  const ::std::string& light_id() const;
  void set_light_id(const ::std::string& value);
  #if LANG_CXX11
  void set_light_id(::std::string&& value);
  #endif
  void set_light_id(const char* value);
  void set_light_id(const char* value, size_t size);
  ::std::string* mutable_light_id();
  ::std::string* release_light_id();
  void set_allocated_light_id(::std::string* light_id);

  // optional double light_stop_s = 3;
  bool has_light_stop_s() const;
  void clear_light_stop_s();
  static const int kLightStopSFieldNumber = 3;
  double light_stop_s() const;
  void set_light_stop_s(double value);

  // optional .apollo.perception.TrafficLight.Color color = 2;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 2;
  ::apollo::perception::TrafficLight_Color color() const;
  void set_color(::apollo::perception::TrafficLight_Color value);

  // optional bool is_stop_wall_created = 5;
  bool has_is_stop_wall_created() const;
  void clear_is_stop_wall_created();
  static const int kIsStopWallCreatedFieldNumber = 5;
  bool is_stop_wall_created() const;
  void set_is_stop_wall_created(bool value);

  // optional double adc_stop_deacceleration = 4;
  bool has_adc_stop_deacceleration() const;
  void clear_adc_stop_deacceleration();
  static const int kAdcStopDeaccelerationFieldNumber = 4;
  double adc_stop_deacceleration() const;
  void set_adc_stop_deacceleration(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.SignalLightDebug.SignalDebug)
 private:
  void set_has_light_id();
  void clear_has_light_id();
  void set_has_color();
  void clear_has_color();
  void set_has_light_stop_s();
  void clear_has_light_stop_s();
  void set_has_adc_stop_deacceleration();
  void clear_has_adc_stop_deacceleration();
  void set_has_is_stop_wall_created();
  void clear_has_is_stop_wall_created();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr light_id_;
  double light_stop_s_;
  int color_;
  bool is_stop_wall_created_;
  double adc_stop_deacceleration_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignalLightDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.SignalLightDebug) */ {
 public:
  SignalLightDebug();
  virtual ~SignalLightDebug();

  SignalLightDebug(const SignalLightDebug& from);

  inline SignalLightDebug& operator=(const SignalLightDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalLightDebug& default_instance();

  static inline const SignalLightDebug* internal_default_instance() {
    return reinterpret_cast<const SignalLightDebug*>(
               &_SignalLightDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SignalLightDebug* other);

  // implements Message ----------------------------------------------

  inline SignalLightDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  SignalLightDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignalLightDebug& from);
  void MergeFrom(const SignalLightDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignalLightDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SignalLightDebug_SignalDebug SignalDebug;

  // accessors -------------------------------------------------------

  // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  int signal_size() const;
  void clear_signal();
  static const int kSignalFieldNumber = 3;
  const ::apollo::planning_internal::SignalLightDebug_SignalDebug& signal(int index) const;
  ::apollo::planning_internal::SignalLightDebug_SignalDebug* mutable_signal(int index);
  ::apollo::planning_internal::SignalLightDebug_SignalDebug* add_signal();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug >*
      mutable_signal();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug >&
      signal() const;

  // optional double adc_speed = 1;
  bool has_adc_speed() const;
  void clear_adc_speed();
  static const int kAdcSpeedFieldNumber = 1;
  double adc_speed() const;
  void set_adc_speed(double value);

  // optional double adc_front_s = 2;
  bool has_adc_front_s() const;
  void clear_adc_front_s();
  static const int kAdcFrontSFieldNumber = 2;
  double adc_front_s() const;
  void set_adc_front_s(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.SignalLightDebug)
 private:
  void set_has_adc_speed();
  void clear_has_adc_speed();
  void set_has_adc_front_s();
  void clear_has_adc_front_s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug > signal_;
  double adc_speed_;
  double adc_front_s_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecisionTag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.DecisionTag) */ {
 public:
  DecisionTag();
  virtual ~DecisionTag();

  DecisionTag(const DecisionTag& from);

  inline DecisionTag& operator=(const DecisionTag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecisionTag& default_instance();

  static inline const DecisionTag* internal_default_instance() {
    return reinterpret_cast<const DecisionTag*>(
               &_DecisionTag_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DecisionTag* other);

  // implements Message ----------------------------------------------

  inline DecisionTag* New() const PROTOBUF_FINAL { return New(NULL); }

  DecisionTag* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DecisionTag& from);
  void MergeFrom(const DecisionTag& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DecisionTag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string decider_tag = 1;
  bool has_decider_tag() const;
  void clear_decider_tag();
  static const int kDeciderTagFieldNumber = 1;
  const ::std::string& decider_tag() const;
  void set_decider_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_decider_tag(::std::string&& value);
  #endif
  void set_decider_tag(const char* value);
  void set_decider_tag(const char* value, size_t size);
  ::std::string* mutable_decider_tag();
  ::std::string* release_decider_tag();
  void set_allocated_decider_tag(::std::string* decider_tag);

  // optional .apollo.planning.ObjectDecisionType decision = 2;
  bool has_decision() const;
  void clear_decision();
  static const int kDecisionFieldNumber = 2;
  const ::apollo::planning::ObjectDecisionType& decision() const;
  ::apollo::planning::ObjectDecisionType* mutable_decision();
  ::apollo::planning::ObjectDecisionType* release_decision();
  void set_allocated_decision(::apollo::planning::ObjectDecisionType* decision);

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.DecisionTag)
 private:
  void set_has_decider_tag();
  void clear_has_decider_tag();
  void set_has_decision();
  void clear_has_decision();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr decider_tag_;
  ::apollo::planning::ObjectDecisionType* decision_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObstacleDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.ObstacleDebug) */ {
 public:
  ObstacleDebug();
  virtual ~ObstacleDebug();

  ObstacleDebug(const ObstacleDebug& from);

  inline ObstacleDebug& operator=(const ObstacleDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleDebug& default_instance();

  static inline const ObstacleDebug* internal_default_instance() {
    return reinterpret_cast<const ObstacleDebug*>(
               &_ObstacleDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ObstacleDebug* other);

  // implements Message ----------------------------------------------

  inline ObstacleDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  ObstacleDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ObstacleDebug& from);
  void MergeFrom(const ObstacleDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ObstacleDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
  int decision_tag_size() const;
  void clear_decision_tag();
  static const int kDecisionTagFieldNumber = 3;
  const ::apollo::planning_internal::DecisionTag& decision_tag(int index) const;
  ::apollo::planning_internal::DecisionTag* mutable_decision_tag(int index);
  ::apollo::planning_internal::DecisionTag* add_decision_tag();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::DecisionTag >*
      mutable_decision_tag();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::DecisionTag >&
      decision_tag() const;

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .apollo.planning.SLBoundary sl_boundary = 2;
  bool has_sl_boundary() const;
  void clear_sl_boundary();
  static const int kSlBoundaryFieldNumber = 2;
  const ::apollo::planning::SLBoundary& sl_boundary() const;
  ::apollo::planning::SLBoundary* mutable_sl_boundary();
  ::apollo::planning::SLBoundary* release_sl_boundary();
  void set_allocated_sl_boundary(::apollo::planning::SLBoundary* sl_boundary);

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.ObstacleDebug)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_sl_boundary();
  void clear_has_sl_boundary();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::DecisionTag > decision_tag_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::apollo::planning::SLBoundary* sl_boundary_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReferenceLineDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.ReferenceLineDebug) */ {
 public:
  ReferenceLineDebug();
  virtual ~ReferenceLineDebug();

  ReferenceLineDebug(const ReferenceLineDebug& from);

  inline ReferenceLineDebug& operator=(const ReferenceLineDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceLineDebug& default_instance();

  static inline const ReferenceLineDebug* internal_default_instance() {
    return reinterpret_cast<const ReferenceLineDebug*>(
               &_ReferenceLineDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ReferenceLineDebug* other);

  // implements Message ----------------------------------------------

  inline ReferenceLineDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  ReferenceLineDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReferenceLineDebug& from);
  void MergeFrom(const ReferenceLineDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReferenceLineDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional double length = 2;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  double length() const;
  void set_length(double value);

  // optional double cost = 3;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 3;
  double cost() const;
  void set_cost(double value);

  // optional bool is_change_lane_path = 4;
  bool has_is_change_lane_path() const;
  void clear_is_change_lane_path();
  static const int kIsChangeLanePathFieldNumber = 4;
  bool is_change_lane_path() const;
  void set_is_change_lane_path(bool value);

  // optional bool is_drivable = 5;
  bool has_is_drivable() const;
  void clear_is_drivable();
  static const int kIsDrivableFieldNumber = 5;
  bool is_drivable() const;
  void set_is_drivable(bool value);

  // optional bool is_protected = 6;
  bool has_is_protected() const;
  void clear_is_protected();
  static const int kIsProtectedFieldNumber = 6;
  bool is_protected() const;
  void set_is_protected(bool value);

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.ReferenceLineDebug)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_length();
  void clear_has_length();
  void set_has_cost();
  void clear_has_cost();
  void set_has_is_change_lane_path();
  void clear_has_is_change_lane_path();
  void set_has_is_drivable();
  void clear_has_is_drivable();
  void set_has_is_protected();
  void clear_has_is_protected();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double length_;
  double cost_;
  bool is_change_lane_path_;
  bool is_drivable_;
  bool is_protected_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeLaneState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.ChangeLaneState) */ {
 public:
  ChangeLaneState();
  virtual ~ChangeLaneState();

  ChangeLaneState(const ChangeLaneState& from);

  inline ChangeLaneState& operator=(const ChangeLaneState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeLaneState& default_instance();

  static inline const ChangeLaneState* internal_default_instance() {
    return reinterpret_cast<const ChangeLaneState*>(
               &_ChangeLaneState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ChangeLaneState* other);

  // implements Message ----------------------------------------------

  inline ChangeLaneState* New() const PROTOBUF_FINAL { return New(NULL); }

  ChangeLaneState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeLaneState& from);
  void MergeFrom(const ChangeLaneState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeLaneState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChangeLaneState_State State;
  static const State IN_CHANGE_LANE =
    ChangeLaneState_State_IN_CHANGE_LANE;
  static const State CHANGE_LANE_FAILED =
    ChangeLaneState_State_CHANGE_LANE_FAILED;
  static const State CHANGE_LANE_SUCCESS =
    ChangeLaneState_State_CHANGE_LANE_SUCCESS;
  static inline bool State_IsValid(int value) {
    return ChangeLaneState_State_IsValid(value);
  }
  static const State State_MIN =
    ChangeLaneState_State_State_MIN;
  static const State State_MAX =
    ChangeLaneState_State_State_MAX;
  static const int State_ARRAYSIZE =
    ChangeLaneState_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return ChangeLaneState_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return ChangeLaneState_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return ChangeLaneState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string path_id = 2;
  bool has_path_id() const;
  void clear_path_id();
  static const int kPathIdFieldNumber = 2;
  const ::std::string& path_id() const;
  void set_path_id(const ::std::string& value);
  #if LANG_CXX11
  void set_path_id(::std::string&& value);
  #endif
  void set_path_id(const char* value);
  void set_path_id(const char* value, size_t size);
  ::std::string* mutable_path_id();
  ::std::string* release_path_id();
  void set_allocated_path_id(::std::string* path_id);

  // optional double timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  double timestamp() const;
  void set_timestamp(double value);

  // optional .apollo.planning_internal.ChangeLaneState.State state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::apollo::planning_internal::ChangeLaneState_State state() const;
  void set_state(::apollo::planning_internal::ChangeLaneState_State value);

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.ChangeLaneState)
 private:
  void set_has_state();
  void clear_has_state();
  void set_has_path_id();
  void clear_has_path_id();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr path_id_;
  double timestamp_;
  int state_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SampleLayerDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.SampleLayerDebug) */ {
 public:
  SampleLayerDebug();
  virtual ~SampleLayerDebug();

  SampleLayerDebug(const SampleLayerDebug& from);

  inline SampleLayerDebug& operator=(const SampleLayerDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleLayerDebug& default_instance();

  static inline const SampleLayerDebug* internal_default_instance() {
    return reinterpret_cast<const SampleLayerDebug*>(
               &_SampleLayerDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SampleLayerDebug* other);

  // implements Message ----------------------------------------------

  inline SampleLayerDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  SampleLayerDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SampleLayerDebug& from);
  void MergeFrom(const SampleLayerDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SampleLayerDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.SLPoint sl_point = 1;
  int sl_point_size() const;
  void clear_sl_point();
  static const int kSlPointFieldNumber = 1;
  const ::apollo::common::SLPoint& sl_point(int index) const;
  ::apollo::common::SLPoint* mutable_sl_point(int index);
  ::apollo::common::SLPoint* add_sl_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >*
      mutable_sl_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >&
      sl_point() const;

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.SampleLayerDebug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint > sl_point_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DpPolyGraphDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.DpPolyGraphDebug) */ {
 public:
  DpPolyGraphDebug();
  virtual ~DpPolyGraphDebug();

  DpPolyGraphDebug(const DpPolyGraphDebug& from);

  inline DpPolyGraphDebug& operator=(const DpPolyGraphDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DpPolyGraphDebug& default_instance();

  static inline const DpPolyGraphDebug* internal_default_instance() {
    return reinterpret_cast<const DpPolyGraphDebug*>(
               &_DpPolyGraphDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(DpPolyGraphDebug* other);

  // implements Message ----------------------------------------------

  inline DpPolyGraphDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  DpPolyGraphDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DpPolyGraphDebug& from);
  void MergeFrom(const DpPolyGraphDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DpPolyGraphDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
  int sample_layer_size() const;
  void clear_sample_layer();
  static const int kSampleLayerFieldNumber = 1;
  const ::apollo::planning_internal::SampleLayerDebug& sample_layer(int index) const;
  ::apollo::planning_internal::SampleLayerDebug* mutable_sample_layer(int index);
  ::apollo::planning_internal::SampleLayerDebug* add_sample_layer();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug >*
      mutable_sample_layer();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug >&
      sample_layer() const;

  // repeated .apollo.common.SLPoint min_cost_point = 2;
  int min_cost_point_size() const;
  void clear_min_cost_point();
  static const int kMinCostPointFieldNumber = 2;
  const ::apollo::common::SLPoint& min_cost_point(int index) const;
  ::apollo::common::SLPoint* mutable_min_cost_point(int index);
  ::apollo::common::SLPoint* add_min_cost_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >*
      mutable_min_cost_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >&
      min_cost_point() const;

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.DpPolyGraphDebug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug > sample_layer_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint > min_cost_point_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlanningData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.PlanningData) */ {
 public:
  PlanningData();
  virtual ~PlanningData();

  PlanningData(const PlanningData& from);

  inline PlanningData& operator=(const PlanningData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningData& default_instance();

  static inline const PlanningData* internal_default_instance() {
    return reinterpret_cast<const PlanningData*>(
               &_PlanningData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(PlanningData* other);

  // implements Message ----------------------------------------------

  inline PlanningData* New() const PROTOBUF_FINAL { return New(NULL); }

  PlanningData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlanningData& from);
  void MergeFrom(const PlanningData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlanningData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.Path path = 6;
  int path_size() const;
  void clear_path();
  static const int kPathFieldNumber = 6;
  const ::apollo::common::Path& path(int index) const;
  ::apollo::common::Path* mutable_path(int index);
  ::apollo::common::Path* add_path();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Path >*
      mutable_path();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::Path >&
      path() const;

  // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
  int speed_plan_size() const;
  void clear_speed_plan();
  static const int kSpeedPlanFieldNumber = 13;
  const ::apollo::planning_internal::SpeedPlan& speed_plan(int index) const;
  ::apollo::planning_internal::SpeedPlan* mutable_speed_plan(int index);
  ::apollo::planning_internal::SpeedPlan* add_speed_plan();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan >*
      mutable_speed_plan();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan >&
      speed_plan() const;

  // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
  int st_graph_size() const;
  void clear_st_graph();
  static const int kStGraphFieldNumber = 14;
  const ::apollo::planning_internal::STGraphDebug& st_graph(int index) const;
  ::apollo::planning_internal::STGraphDebug* mutable_st_graph(int index);
  ::apollo::planning_internal::STGraphDebug* add_st_graph();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug >*
      mutable_st_graph();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug >&
      st_graph() const;

  // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
  int sl_frame_size() const;
  void clear_sl_frame();
  static const int kSlFrameFieldNumber = 15;
  const ::apollo::planning_internal::SLFrameDebug& sl_frame(int index) const;
  ::apollo::planning_internal::SLFrameDebug* mutable_sl_frame(int index);
  ::apollo::planning_internal::SLFrameDebug* add_sl_frame();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug >*
      mutable_sl_frame();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug >&
      sl_frame() const;

  // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
  int obstacle_size() const;
  void clear_obstacle();
  static const int kObstacleFieldNumber = 18;
  const ::apollo::planning_internal::ObstacleDebug& obstacle(int index) const;
  ::apollo::planning_internal::ObstacleDebug* mutable_obstacle(int index);
  ::apollo::planning_internal::ObstacleDebug* add_obstacle();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug >*
      mutable_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug >&
      obstacle() const;

  // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
  int reference_line_size() const;
  void clear_reference_line();
  static const int kReferenceLineFieldNumber = 19;
  const ::apollo::planning_internal::ReferenceLineDebug& reference_line(int index) const;
  ::apollo::planning_internal::ReferenceLineDebug* mutable_reference_line(int index);
  ::apollo::planning_internal::ReferenceLineDebug* add_reference_line();
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug >*
      mutable_reference_line();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug >&
      reference_line() const;

  // optional .apollo.localization.LocalizationEstimate adc_position = 7;
  bool has_adc_position() const;
  void clear_adc_position();
  static const int kAdcPositionFieldNumber = 7;
  const ::apollo::localization::LocalizationEstimate& adc_position() const;
  ::apollo::localization::LocalizationEstimate* mutable_adc_position();
  ::apollo::localization::LocalizationEstimate* release_adc_position();
  void set_allocated_adc_position(::apollo::localization::LocalizationEstimate* adc_position);

  // optional .apollo.canbus.Chassis chassis = 8;
  bool has_chassis() const;
  void clear_chassis();
  static const int kChassisFieldNumber = 8;
  const ::apollo::canbus::Chassis& chassis() const;
  ::apollo::canbus::Chassis* mutable_chassis();
  ::apollo::canbus::Chassis* release_chassis();
  void set_allocated_chassis(::apollo::canbus::Chassis* chassis);

  // optional .apollo.routing.RoutingResponse routing = 9;
  bool has_routing() const;
  void clear_routing();
  static const int kRoutingFieldNumber = 9;
  const ::apollo::routing::RoutingResponse& routing() const;
  ::apollo::routing::RoutingResponse* mutable_routing();
  ::apollo::routing::RoutingResponse* release_routing();
  void set_allocated_routing(::apollo::routing::RoutingResponse* routing);

  // optional .apollo.common.TrajectoryPoint init_point = 10;
  bool has_init_point() const;
  void clear_init_point();
  static const int kInitPointFieldNumber = 10;
  const ::apollo::common::TrajectoryPoint& init_point() const;
  ::apollo::common::TrajectoryPoint* mutable_init_point();
  ::apollo::common::TrajectoryPoint* release_init_point();
  void set_allocated_init_point(::apollo::common::TrajectoryPoint* init_point);

  // optional .apollo.common.Header prediction_header = 16;
  bool has_prediction_header() const;
  void clear_prediction_header();
  static const int kPredictionHeaderFieldNumber = 16;
  const ::apollo::common::Header& prediction_header() const;
  ::apollo::common::Header* mutable_prediction_header();
  ::apollo::common::Header* release_prediction_header();
  void set_allocated_prediction_header(::apollo::common::Header* prediction_header);

  // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
  bool has_signal_light() const;
  void clear_signal_light();
  static const int kSignalLightFieldNumber = 17;
  const ::apollo::planning_internal::SignalLightDebug& signal_light() const;
  ::apollo::planning_internal::SignalLightDebug* mutable_signal_light();
  ::apollo::planning_internal::SignalLightDebug* release_signal_light();
  void set_allocated_signal_light(::apollo::planning_internal::SignalLightDebug* signal_light);

  // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
  bool has_dp_poly_graph() const;
  void clear_dp_poly_graph();
  static const int kDpPolyGraphFieldNumber = 20;
  const ::apollo::planning_internal::DpPolyGraphDebug& dp_poly_graph() const;
  ::apollo::planning_internal::DpPolyGraphDebug* mutable_dp_poly_graph();
  ::apollo::planning_internal::DpPolyGraphDebug* release_dp_poly_graph();
  void set_allocated_dp_poly_graph(::apollo::planning_internal::DpPolyGraphDebug* dp_poly_graph);

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.PlanningData)
 private:
  void set_has_adc_position();
  void clear_has_adc_position();
  void set_has_chassis();
  void clear_has_chassis();
  void set_has_routing();
  void clear_has_routing();
  void set_has_init_point();
  void clear_has_init_point();
  void set_has_prediction_header();
  void clear_has_prediction_header();
  void set_has_signal_light();
  void clear_has_signal_light();
  void set_has_dp_poly_graph();
  void clear_has_dp_poly_graph();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Path > path_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan > speed_plan_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug > st_graph_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug > sl_frame_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug > obstacle_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug > reference_line_;
  ::apollo::localization::LocalizationEstimate* adc_position_;
  ::apollo::canbus::Chassis* chassis_;
  ::apollo::routing::RoutingResponse* routing_;
  ::apollo::common::TrajectoryPoint* init_point_;
  ::apollo::common::Header* prediction_header_;
  ::apollo::planning_internal::SignalLightDebug* signal_light_;
  ::apollo::planning_internal::DpPolyGraphDebug* dp_poly_graph_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug

// optional .apollo.planning_internal.PlanningData planning_data = 2;
inline bool Debug::has_planning_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Debug::set_has_planning_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Debug::clear_has_planning_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Debug::clear_planning_data() {
  if (planning_data_ != NULL) planning_data_->::apollo::planning_internal::PlanningData::Clear();
  clear_has_planning_data();
}
inline const ::apollo::planning_internal::PlanningData& Debug::planning_data() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.planning_data)
  return planning_data_ != NULL ? *planning_data_
                         : *::apollo::planning_internal::PlanningData::internal_default_instance();
}
inline ::apollo::planning_internal::PlanningData* Debug::mutable_planning_data() {
  set_has_planning_data();
  if (planning_data_ == NULL) {
    planning_data_ = new ::apollo::planning_internal::PlanningData;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.planning_data)
  return planning_data_;
}
inline ::apollo::planning_internal::PlanningData* Debug::release_planning_data() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.planning_data)
  clear_has_planning_data();
  ::apollo::planning_internal::PlanningData* temp = planning_data_;
  planning_data_ = NULL;
  return temp;
}
inline void Debug::set_allocated_planning_data(::apollo::planning_internal::PlanningData* planning_data) {
  delete planning_data_;
  planning_data_ = planning_data;
  if (planning_data) {
    set_has_planning_data();
  } else {
    clear_has_planning_data();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.planning_data)
}

// -------------------------------------------------------------------

// SpeedPlan

// optional string name = 1;
inline bool SpeedPlan::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedPlan::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedPlan::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedPlan::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SpeedPlan::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SpeedPlan.name)
  return name_.GetNoArena();
}
inline void SpeedPlan::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SpeedPlan.name)
}
#if LANG_CXX11
inline void SpeedPlan::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.SpeedPlan.name)
}
#endif
inline void SpeedPlan::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.SpeedPlan.name)
}
inline void SpeedPlan::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.SpeedPlan.name)
}
inline ::std::string* SpeedPlan::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SpeedPlan.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpeedPlan::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.SpeedPlan.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpeedPlan::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.SpeedPlan.name)
}

// repeated .apollo.common.SpeedPoint speed_point = 2;
inline int SpeedPlan::speed_point_size() const {
  return speed_point_.size();
}
inline void SpeedPlan::clear_speed_point() {
  speed_point_.Clear();
}
inline const ::apollo::common::SpeedPoint& SpeedPlan::speed_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Get(index);
}
inline ::apollo::common::SpeedPoint* SpeedPlan::mutable_speed_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Mutable(index);
}
inline ::apollo::common::SpeedPoint* SpeedPlan::add_speed_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
SpeedPlan::mutable_speed_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SpeedPlan.speed_point)
  return &speed_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
SpeedPlan::speed_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SpeedPlan.speed_point)
  return speed_point_;
}

// -------------------------------------------------------------------

// StGraphBoundaryDebug

// optional string name = 1;
inline bool StGraphBoundaryDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StGraphBoundaryDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StGraphBoundaryDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StGraphBoundaryDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& StGraphBoundaryDebug::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.StGraphBoundaryDebug.name)
  return name_.GetNoArena();
}
inline void StGraphBoundaryDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.StGraphBoundaryDebug.name)
}
#if LANG_CXX11
inline void StGraphBoundaryDebug::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.StGraphBoundaryDebug.name)
}
#endif
inline void StGraphBoundaryDebug::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.StGraphBoundaryDebug.name)
}
inline void StGraphBoundaryDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.StGraphBoundaryDebug.name)
}
inline ::std::string* StGraphBoundaryDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.StGraphBoundaryDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StGraphBoundaryDebug::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.StGraphBoundaryDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StGraphBoundaryDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.StGraphBoundaryDebug.name)
}

// repeated .apollo.common.SpeedPoint point = 2;
inline int StGraphBoundaryDebug::point_size() const {
  return point_.size();
}
inline void StGraphBoundaryDebug::clear_point() {
  point_.Clear();
}
inline const ::apollo::common::SpeedPoint& StGraphBoundaryDebug::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.StGraphBoundaryDebug.point)
  return point_.Get(index);
}
inline ::apollo::common::SpeedPoint* StGraphBoundaryDebug::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.StGraphBoundaryDebug.point)
  return point_.Mutable(index);
}
inline ::apollo::common::SpeedPoint* StGraphBoundaryDebug::add_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.StGraphBoundaryDebug.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
StGraphBoundaryDebug::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.StGraphBoundaryDebug.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
StGraphBoundaryDebug::point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.StGraphBoundaryDebug.point)
  return point_;
}

// optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
inline bool StGraphBoundaryDebug::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StGraphBoundaryDebug::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StGraphBoundaryDebug::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StGraphBoundaryDebug::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.StGraphBoundaryDebug.type)
  return static_cast< ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType >(type_);
}
inline void StGraphBoundaryDebug::set_type(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType value) {
  assert(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.StGraphBoundaryDebug.type)
}

// -------------------------------------------------------------------

// SLFrameDebug

// optional string name = 1;
inline bool SLFrameDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SLFrameDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SLFrameDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SLFrameDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SLFrameDebug::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.name)
  return name_.GetNoArena();
}
inline void SLFrameDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.name)
}
#if LANG_CXX11
inline void SLFrameDebug::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.SLFrameDebug.name)
}
#endif
inline void SLFrameDebug::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.SLFrameDebug.name)
}
inline void SLFrameDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.SLFrameDebug.name)
}
inline ::std::string* SLFrameDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SLFrameDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SLFrameDebug::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.SLFrameDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SLFrameDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.SLFrameDebug.name)
}

// repeated double sampled_s = 2;
inline int SLFrameDebug::sampled_s_size() const {
  return sampled_s_.size();
}
inline void SLFrameDebug::clear_sampled_s() {
  sampled_s_.Clear();
}
inline double SLFrameDebug::sampled_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.sampled_s)
  return sampled_s_.Get(index);
}
inline void SLFrameDebug::set_sampled_s(int index, double value) {
  sampled_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.sampled_s)
}
inline void SLFrameDebug::add_sampled_s(double value) {
  sampled_s_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.sampled_s)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::sampled_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.sampled_s)
  return sampled_s_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_sampled_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.sampled_s)
  return &sampled_s_;
}

// repeated double static_obstacle_lower_bound = 3;
inline int SLFrameDebug::static_obstacle_lower_bound_size() const {
  return static_obstacle_lower_bound_.size();
}
inline void SLFrameDebug::clear_static_obstacle_lower_bound() {
  static_obstacle_lower_bound_.Clear();
}
inline double SLFrameDebug::static_obstacle_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return static_obstacle_lower_bound_.Get(index);
}
inline void SLFrameDebug::set_static_obstacle_lower_bound(int index, double value) {
  static_obstacle_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
}
inline void SLFrameDebug::add_static_obstacle_lower_bound(double value) {
  static_obstacle_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::static_obstacle_lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return static_obstacle_lower_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_static_obstacle_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return &static_obstacle_lower_bound_;
}

// repeated double dynamic_obstacle_lower_bound = 4;
inline int SLFrameDebug::dynamic_obstacle_lower_bound_size() const {
  return dynamic_obstacle_lower_bound_.size();
}
inline void SLFrameDebug::clear_dynamic_obstacle_lower_bound() {
  dynamic_obstacle_lower_bound_.Clear();
}
inline double SLFrameDebug::dynamic_obstacle_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return dynamic_obstacle_lower_bound_.Get(index);
}
inline void SLFrameDebug::set_dynamic_obstacle_lower_bound(int index, double value) {
  dynamic_obstacle_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
}
inline void SLFrameDebug::add_dynamic_obstacle_lower_bound(double value) {
  dynamic_obstacle_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::dynamic_obstacle_lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return dynamic_obstacle_lower_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_dynamic_obstacle_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return &dynamic_obstacle_lower_bound_;
}

// repeated double static_obstacle_upper_bound = 5;
inline int SLFrameDebug::static_obstacle_upper_bound_size() const {
  return static_obstacle_upper_bound_.size();
}
inline void SLFrameDebug::clear_static_obstacle_upper_bound() {
  static_obstacle_upper_bound_.Clear();
}
inline double SLFrameDebug::static_obstacle_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return static_obstacle_upper_bound_.Get(index);
}
inline void SLFrameDebug::set_static_obstacle_upper_bound(int index, double value) {
  static_obstacle_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
}
inline void SLFrameDebug::add_static_obstacle_upper_bound(double value) {
  static_obstacle_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::static_obstacle_upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return static_obstacle_upper_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_static_obstacle_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return &static_obstacle_upper_bound_;
}

// repeated double dynamic_obstacle_upper_bound = 6;
inline int SLFrameDebug::dynamic_obstacle_upper_bound_size() const {
  return dynamic_obstacle_upper_bound_.size();
}
inline void SLFrameDebug::clear_dynamic_obstacle_upper_bound() {
  dynamic_obstacle_upper_bound_.Clear();
}
inline double SLFrameDebug::dynamic_obstacle_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return dynamic_obstacle_upper_bound_.Get(index);
}
inline void SLFrameDebug::set_dynamic_obstacle_upper_bound(int index, double value) {
  dynamic_obstacle_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
}
inline void SLFrameDebug::add_dynamic_obstacle_upper_bound(double value) {
  dynamic_obstacle_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::dynamic_obstacle_upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return dynamic_obstacle_upper_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_dynamic_obstacle_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return &dynamic_obstacle_upper_bound_;
}

// repeated double map_lower_bound = 7;
inline int SLFrameDebug::map_lower_bound_size() const {
  return map_lower_bound_.size();
}
inline void SLFrameDebug::clear_map_lower_bound() {
  map_lower_bound_.Clear();
}
inline double SLFrameDebug::map_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.map_lower_bound)
  return map_lower_bound_.Get(index);
}
inline void SLFrameDebug::set_map_lower_bound(int index, double value) {
  map_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.map_lower_bound)
}
inline void SLFrameDebug::add_map_lower_bound(double value) {
  map_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.map_lower_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::map_lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.map_lower_bound)
  return map_lower_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_map_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.map_lower_bound)
  return &map_lower_bound_;
}

// repeated double map_upper_bound = 8;
inline int SLFrameDebug::map_upper_bound_size() const {
  return map_upper_bound_.size();
}
inline void SLFrameDebug::clear_map_upper_bound() {
  map_upper_bound_.Clear();
}
inline double SLFrameDebug::map_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.map_upper_bound)
  return map_upper_bound_.Get(index);
}
inline void SLFrameDebug::set_map_upper_bound(int index, double value) {
  map_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.map_upper_bound)
}
inline void SLFrameDebug::add_map_upper_bound(double value) {
  map_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.map_upper_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::map_upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.map_upper_bound)
  return map_upper_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_map_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.map_upper_bound)
  return &map_upper_bound_;
}

// repeated .apollo.common.SLPoint sl_path = 9;
inline int SLFrameDebug::sl_path_size() const {
  return sl_path_.size();
}
inline void SLFrameDebug::clear_sl_path() {
  sl_path_.Clear();
}
inline const ::apollo::common::SLPoint& SLFrameDebug::sl_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Get(index);
}
inline ::apollo::common::SLPoint* SLFrameDebug::mutable_sl_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Mutable(index);
}
inline ::apollo::common::SLPoint* SLFrameDebug::add_sl_path() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >*
SLFrameDebug::mutable_sl_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.sl_path)
  return &sl_path_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >&
SLFrameDebug::sl_path() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.sl_path)
  return sl_path_;
}

// repeated double aggregated_boundary_s = 10;
inline int SLFrameDebug::aggregated_boundary_s_size() const {
  return aggregated_boundary_s_.size();
}
inline void SLFrameDebug::clear_aggregated_boundary_s() {
  aggregated_boundary_s_.Clear();
}
inline double SLFrameDebug::aggregated_boundary_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return aggregated_boundary_s_.Get(index);
}
inline void SLFrameDebug::set_aggregated_boundary_s(int index, double value) {
  aggregated_boundary_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
}
inline void SLFrameDebug::add_aggregated_boundary_s(double value) {
  aggregated_boundary_s_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return aggregated_boundary_s_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return &aggregated_boundary_s_;
}

// repeated double aggregated_boundary_low = 11;
inline int SLFrameDebug::aggregated_boundary_low_size() const {
  return aggregated_boundary_low_.size();
}
inline void SLFrameDebug::clear_aggregated_boundary_low() {
  aggregated_boundary_low_.Clear();
}
inline double SLFrameDebug::aggregated_boundary_low(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return aggregated_boundary_low_.Get(index);
}
inline void SLFrameDebug::set_aggregated_boundary_low(int index, double value) {
  aggregated_boundary_low_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
}
inline void SLFrameDebug::add_aggregated_boundary_low(double value) {
  aggregated_boundary_low_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_low() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return aggregated_boundary_low_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_low() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return &aggregated_boundary_low_;
}

// repeated double aggregated_boundary_high = 12;
inline int SLFrameDebug::aggregated_boundary_high_size() const {
  return aggregated_boundary_high_.size();
}
inline void SLFrameDebug::clear_aggregated_boundary_high() {
  aggregated_boundary_high_.Clear();
}
inline double SLFrameDebug::aggregated_boundary_high(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return aggregated_boundary_high_.Get(index);
}
inline void SLFrameDebug::set_aggregated_boundary_high(int index, double value) {
  aggregated_boundary_high_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
}
inline void SLFrameDebug::add_aggregated_boundary_high(double value) {
  aggregated_boundary_high_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_high() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return aggregated_boundary_high_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_high() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return &aggregated_boundary_high_;
}

// -------------------------------------------------------------------

// STGraphDebug_STGraphSpeedConstraint

// repeated double t = 1;
inline int STGraphDebug_STGraphSpeedConstraint::t_size() const {
  return t_.size();
}
inline void STGraphDebug_STGraphSpeedConstraint::clear_t() {
  t_.Clear();
}
inline double STGraphDebug_STGraphSpeedConstraint::t(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return t_.Get(index);
}
inline void STGraphDebug_STGraphSpeedConstraint::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
}
inline void STGraphDebug_STGraphSpeedConstraint::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::t() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return t_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return &t_;
}

// repeated double lower_bound = 2;
inline int STGraphDebug_STGraphSpeedConstraint::lower_bound_size() const {
  return lower_bound_.size();
}
inline void STGraphDebug_STGraphSpeedConstraint::clear_lower_bound() {
  lower_bound_.Clear();
}
inline double STGraphDebug_STGraphSpeedConstraint::lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return lower_bound_.Get(index);
}
inline void STGraphDebug_STGraphSpeedConstraint::set_lower_bound(int index, double value) {
  lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
}
inline void STGraphDebug_STGraphSpeedConstraint::add_lower_bound(double value) {
  lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return lower_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return &lower_bound_;
}

// repeated double upper_bound = 3;
inline int STGraphDebug_STGraphSpeedConstraint::upper_bound_size() const {
  return upper_bound_.size();
}
inline void STGraphDebug_STGraphSpeedConstraint::clear_upper_bound() {
  upper_bound_.Clear();
}
inline double STGraphDebug_STGraphSpeedConstraint::upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return upper_bound_.Get(index);
}
inline void STGraphDebug_STGraphSpeedConstraint::set_upper_bound(int index, double value) {
  upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
}
inline void STGraphDebug_STGraphSpeedConstraint::add_upper_bound(double value) {
  upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return upper_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return &upper_bound_;
}

// -------------------------------------------------------------------

// STGraphDebug_STGraphKernelCuiseRef

// repeated double t = 1;
inline int STGraphDebug_STGraphKernelCuiseRef::t_size() const {
  return t_.size();
}
inline void STGraphDebug_STGraphKernelCuiseRef::clear_t() {
  t_.Clear();
}
inline double STGraphDebug_STGraphKernelCuiseRef::t(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return t_.Get(index);
}
inline void STGraphDebug_STGraphKernelCuiseRef::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
}
inline void STGraphDebug_STGraphKernelCuiseRef::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::t() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return t_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return &t_;
}

// repeated double cruise_line_s = 2;
inline int STGraphDebug_STGraphKernelCuiseRef::cruise_line_s_size() const {
  return cruise_line_s_.size();
}
inline void STGraphDebug_STGraphKernelCuiseRef::clear_cruise_line_s() {
  cruise_line_s_.Clear();
}
inline double STGraphDebug_STGraphKernelCuiseRef::cruise_line_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return cruise_line_s_.Get(index);
}
inline void STGraphDebug_STGraphKernelCuiseRef::set_cruise_line_s(int index, double value) {
  cruise_line_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
}
inline void STGraphDebug_STGraphKernelCuiseRef::add_cruise_line_s(double value) {
  cruise_line_s_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::cruise_line_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return cruise_line_s_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::mutable_cruise_line_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return &cruise_line_s_;
}

// -------------------------------------------------------------------

// STGraphDebug_STGraphKernelFollowRef

// repeated double t = 1;
inline int STGraphDebug_STGraphKernelFollowRef::t_size() const {
  return t_.size();
}
inline void STGraphDebug_STGraphKernelFollowRef::clear_t() {
  t_.Clear();
}
inline double STGraphDebug_STGraphKernelFollowRef::t(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return t_.Get(index);
}
inline void STGraphDebug_STGraphKernelFollowRef::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
}
inline void STGraphDebug_STGraphKernelFollowRef::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::t() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return t_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return &t_;
}

// repeated double follow_line_s = 2;
inline int STGraphDebug_STGraphKernelFollowRef::follow_line_s_size() const {
  return follow_line_s_.size();
}
inline void STGraphDebug_STGraphKernelFollowRef::clear_follow_line_s() {
  follow_line_s_.Clear();
}
inline double STGraphDebug_STGraphKernelFollowRef::follow_line_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return follow_line_s_.Get(index);
}
inline void STGraphDebug_STGraphKernelFollowRef::set_follow_line_s(int index, double value) {
  follow_line_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
}
inline void STGraphDebug_STGraphKernelFollowRef::add_follow_line_s(double value) {
  follow_line_s_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::follow_line_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return follow_line_s_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::mutable_follow_line_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return &follow_line_s_;
}

// -------------------------------------------------------------------

// STGraphDebug

// optional string name = 1;
inline bool STGraphDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STGraphDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STGraphDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STGraphDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& STGraphDebug::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.name)
  return name_.GetNoArena();
}
inline void STGraphDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.name)
}
#if LANG_CXX11
inline void STGraphDebug::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.STGraphDebug.name)
}
#endif
inline void STGraphDebug::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.STGraphDebug.name)
}
inline void STGraphDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.STGraphDebug.name)
}
inline ::std::string* STGraphDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* STGraphDebug::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void STGraphDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.name)
}

// repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
inline int STGraphDebug::boundary_size() const {
  return boundary_.size();
}
inline void STGraphDebug::clear_boundary() {
  boundary_.Clear();
}
inline const ::apollo::planning_internal::StGraphBoundaryDebug& STGraphDebug::boundary(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.boundary)
  return boundary_.Get(index);
}
inline ::apollo::planning_internal::StGraphBoundaryDebug* STGraphDebug::mutable_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.boundary)
  return boundary_.Mutable(index);
}
inline ::apollo::planning_internal::StGraphBoundaryDebug* STGraphDebug::add_boundary() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.boundary)
  return boundary_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug >*
STGraphDebug::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.boundary)
  return &boundary_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug >&
STGraphDebug::boundary() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.boundary)
  return boundary_;
}

// repeated .apollo.common.SpeedPoint speed_limit = 3;
inline int STGraphDebug::speed_limit_size() const {
  return speed_limit_.size();
}
inline void STGraphDebug::clear_speed_limit() {
  speed_limit_.Clear();
}
inline const ::apollo::common::SpeedPoint& STGraphDebug::speed_limit(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Get(index);
}
inline ::apollo::common::SpeedPoint* STGraphDebug::mutable_speed_limit(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Mutable(index);
}
inline ::apollo::common::SpeedPoint* STGraphDebug::add_speed_limit() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
STGraphDebug::mutable_speed_limit() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.speed_limit)
  return &speed_limit_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
STGraphDebug::speed_limit() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_;
}

// repeated .apollo.common.SpeedPoint speed_profile = 4;
inline int STGraphDebug::speed_profile_size() const {
  return speed_profile_.size();
}
inline void STGraphDebug::clear_speed_profile() {
  speed_profile_.Clear();
}
inline const ::apollo::common::SpeedPoint& STGraphDebug::speed_profile(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Get(index);
}
inline ::apollo::common::SpeedPoint* STGraphDebug::mutable_speed_profile(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Mutable(index);
}
inline ::apollo::common::SpeedPoint* STGraphDebug::add_speed_profile() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
STGraphDebug::mutable_speed_profile() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.speed_profile)
  return &speed_profile_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
STGraphDebug::speed_profile() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_;
}

// optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
inline bool STGraphDebug::has_speed_constraint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STGraphDebug::set_has_speed_constraint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STGraphDebug::clear_has_speed_constraint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STGraphDebug::clear_speed_constraint() {
  if (speed_constraint_ != NULL) speed_constraint_->::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::Clear();
  clear_has_speed_constraint();
}
inline const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint& STGraphDebug::speed_constraint() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.speed_constraint)
  return speed_constraint_ != NULL ? *speed_constraint_
                         : *::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::internal_default_instance();
}
inline ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::mutable_speed_constraint() {
  set_has_speed_constraint();
  if (speed_constraint_ == NULL) {
    speed_constraint_ = new ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.speed_constraint)
  return speed_constraint_;
}
inline ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::release_speed_constraint() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.speed_constraint)
  clear_has_speed_constraint();
  ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* temp = speed_constraint_;
  speed_constraint_ = NULL;
  return temp;
}
inline void STGraphDebug::set_allocated_speed_constraint(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint) {
  delete speed_constraint_;
  speed_constraint_ = speed_constraint;
  if (speed_constraint) {
    set_has_speed_constraint();
  } else {
    clear_has_speed_constraint();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.speed_constraint)
}

// optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
inline bool STGraphDebug::has_kernel_cruise_ref() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void STGraphDebug::set_has_kernel_cruise_ref() {
  _has_bits_[0] |= 0x00000004u;
}
inline void STGraphDebug::clear_has_kernel_cruise_ref() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void STGraphDebug::clear_kernel_cruise_ref() {
  if (kernel_cruise_ref_ != NULL) kernel_cruise_ref_->::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::Clear();
  clear_has_kernel_cruise_ref();
}
inline const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef& STGraphDebug::kernel_cruise_ref() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
  return kernel_cruise_ref_ != NULL ? *kernel_cruise_ref_
                         : *::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::internal_default_instance();
}
inline ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::mutable_kernel_cruise_ref() {
  set_has_kernel_cruise_ref();
  if (kernel_cruise_ref_ == NULL) {
    kernel_cruise_ref_ = new ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
  return kernel_cruise_ref_;
}
inline ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::release_kernel_cruise_ref() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
  clear_has_kernel_cruise_ref();
  ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* temp = kernel_cruise_ref_;
  kernel_cruise_ref_ = NULL;
  return temp;
}
inline void STGraphDebug::set_allocated_kernel_cruise_ref(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref) {
  delete kernel_cruise_ref_;
  kernel_cruise_ref_ = kernel_cruise_ref;
  if (kernel_cruise_ref) {
    set_has_kernel_cruise_ref();
  } else {
    clear_has_kernel_cruise_ref();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
}

// optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
inline bool STGraphDebug::has_kernel_follow_ref() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void STGraphDebug::set_has_kernel_follow_ref() {
  _has_bits_[0] |= 0x00000008u;
}
inline void STGraphDebug::clear_has_kernel_follow_ref() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void STGraphDebug::clear_kernel_follow_ref() {
  if (kernel_follow_ref_ != NULL) kernel_follow_ref_->::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::Clear();
  clear_has_kernel_follow_ref();
}
inline const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef& STGraphDebug::kernel_follow_ref() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
  return kernel_follow_ref_ != NULL ? *kernel_follow_ref_
                         : *::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::internal_default_instance();
}
inline ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::mutable_kernel_follow_ref() {
  set_has_kernel_follow_ref();
  if (kernel_follow_ref_ == NULL) {
    kernel_follow_ref_ = new ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
  return kernel_follow_ref_;
}
inline ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::release_kernel_follow_ref() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
  clear_has_kernel_follow_ref();
  ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* temp = kernel_follow_ref_;
  kernel_follow_ref_ = NULL;
  return temp;
}
inline void STGraphDebug::set_allocated_kernel_follow_ref(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref) {
  delete kernel_follow_ref_;
  kernel_follow_ref_ = kernel_follow_ref;
  if (kernel_follow_ref) {
    set_has_kernel_follow_ref();
  } else {
    clear_has_kernel_follow_ref();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
}

// -------------------------------------------------------------------

// SignalLightDebug_SignalDebug

// optional string light_id = 1;
inline bool SignalLightDebug_SignalDebug::has_light_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalLightDebug_SignalDebug::set_has_light_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalLightDebug_SignalDebug::clear_has_light_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalLightDebug_SignalDebug::clear_light_id() {
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_light_id();
}
inline const ::std::string& SignalLightDebug_SignalDebug::light_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
  return light_id_.GetNoArena();
}
inline void SignalLightDebug_SignalDebug::set_light_id(const ::std::string& value) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
#if LANG_CXX11
inline void SignalLightDebug_SignalDebug::set_light_id(::std::string&& value) {
  set_has_light_id();
  light_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
#endif
inline void SignalLightDebug_SignalDebug::set_light_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
inline void SignalLightDebug_SignalDebug::set_light_id(const char* value, size_t size) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
inline ::std::string* SignalLightDebug_SignalDebug::mutable_light_id() {
  set_has_light_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
  return light_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalLightDebug_SignalDebug::release_light_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
  clear_has_light_id();
  return light_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalLightDebug_SignalDebug::set_allocated_light_id(::std::string* light_id) {
  if (light_id != NULL) {
    set_has_light_id();
  } else {
    clear_has_light_id();
  }
  light_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}

// optional .apollo.perception.TrafficLight.Color color = 2;
inline bool SignalLightDebug_SignalDebug::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignalLightDebug_SignalDebug::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignalLightDebug_SignalDebug::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignalLightDebug_SignalDebug::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::apollo::perception::TrafficLight_Color SignalLightDebug_SignalDebug::color() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.color)
  return static_cast< ::apollo::perception::TrafficLight_Color >(color_);
}
inline void SignalLightDebug_SignalDebug::set_color(::apollo::perception::TrafficLight_Color value) {
  assert(::apollo::perception::TrafficLight_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.color)
}

// optional double light_stop_s = 3;
inline bool SignalLightDebug_SignalDebug::has_light_stop_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalLightDebug_SignalDebug::set_has_light_stop_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalLightDebug_SignalDebug::clear_has_light_stop_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalLightDebug_SignalDebug::clear_light_stop_s() {
  light_stop_s_ = 0;
  clear_has_light_stop_s();
}
inline double SignalLightDebug_SignalDebug::light_stop_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.light_stop_s)
  return light_stop_s_;
}
inline void SignalLightDebug_SignalDebug::set_light_stop_s(double value) {
  set_has_light_stop_s();
  light_stop_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.light_stop_s)
}

// optional double adc_stop_deacceleration = 4;
inline bool SignalLightDebug_SignalDebug::has_adc_stop_deacceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignalLightDebug_SignalDebug::set_has_adc_stop_deacceleration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignalLightDebug_SignalDebug::clear_has_adc_stop_deacceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignalLightDebug_SignalDebug::clear_adc_stop_deacceleration() {
  adc_stop_deacceleration_ = 0;
  clear_has_adc_stop_deacceleration();
}
inline double SignalLightDebug_SignalDebug::adc_stop_deacceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.adc_stop_deacceleration)
  return adc_stop_deacceleration_;
}
inline void SignalLightDebug_SignalDebug::set_adc_stop_deacceleration(double value) {
  set_has_adc_stop_deacceleration();
  adc_stop_deacceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.adc_stop_deacceleration)
}

// optional bool is_stop_wall_created = 5;
inline bool SignalLightDebug_SignalDebug::has_is_stop_wall_created() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignalLightDebug_SignalDebug::set_has_is_stop_wall_created() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignalLightDebug_SignalDebug::clear_has_is_stop_wall_created() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignalLightDebug_SignalDebug::clear_is_stop_wall_created() {
  is_stop_wall_created_ = false;
  clear_has_is_stop_wall_created();
}
inline bool SignalLightDebug_SignalDebug::is_stop_wall_created() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.is_stop_wall_created)
  return is_stop_wall_created_;
}
inline void SignalLightDebug_SignalDebug::set_is_stop_wall_created(bool value) {
  set_has_is_stop_wall_created();
  is_stop_wall_created_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.is_stop_wall_created)
}

// -------------------------------------------------------------------

// SignalLightDebug

// optional double adc_speed = 1;
inline bool SignalLightDebug::has_adc_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalLightDebug::set_has_adc_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalLightDebug::clear_has_adc_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalLightDebug::clear_adc_speed() {
  adc_speed_ = 0;
  clear_has_adc_speed();
}
inline double SignalLightDebug::adc_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.adc_speed)
  return adc_speed_;
}
inline void SignalLightDebug::set_adc_speed(double value) {
  set_has_adc_speed();
  adc_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.adc_speed)
}

// optional double adc_front_s = 2;
inline bool SignalLightDebug::has_adc_front_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalLightDebug::set_has_adc_front_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalLightDebug::clear_has_adc_front_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalLightDebug::clear_adc_front_s() {
  adc_front_s_ = 0;
  clear_has_adc_front_s();
}
inline double SignalLightDebug::adc_front_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.adc_front_s)
  return adc_front_s_;
}
inline void SignalLightDebug::set_adc_front_s(double value) {
  set_has_adc_front_s();
  adc_front_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.adc_front_s)
}

// repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
inline int SignalLightDebug::signal_size() const {
  return signal_.size();
}
inline void SignalLightDebug::clear_signal() {
  signal_.Clear();
}
inline const ::apollo::planning_internal::SignalLightDebug_SignalDebug& SignalLightDebug::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.signal)
  return signal_.Get(index);
}
inline ::apollo::planning_internal::SignalLightDebug_SignalDebug* SignalLightDebug::mutable_signal(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SignalLightDebug.signal)
  return signal_.Mutable(index);
}
inline ::apollo::planning_internal::SignalLightDebug_SignalDebug* SignalLightDebug::add_signal() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SignalLightDebug.signal)
  return signal_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug >*
SignalLightDebug::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SignalLightDebug.signal)
  return &signal_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug >&
SignalLightDebug::signal() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SignalLightDebug.signal)
  return signal_;
}

// -------------------------------------------------------------------

// DecisionTag

// optional string decider_tag = 1;
inline bool DecisionTag::has_decider_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DecisionTag::set_has_decider_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DecisionTag::clear_has_decider_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DecisionTag::clear_decider_tag() {
  decider_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_decider_tag();
}
inline const ::std::string& DecisionTag::decider_tag() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DecisionTag.decider_tag)
  return decider_tag_.GetNoArena();
}
inline void DecisionTag::set_decider_tag(const ::std::string& value) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.DecisionTag.decider_tag)
}
#if LANG_CXX11
inline void DecisionTag::set_decider_tag(::std::string&& value) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.DecisionTag.decider_tag)
}
#endif
inline void DecisionTag::set_decider_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.DecisionTag.decider_tag)
}
inline void DecisionTag::set_decider_tag(const char* value, size_t size) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.DecisionTag.decider_tag)
}
inline ::std::string* DecisionTag::mutable_decider_tag() {
  set_has_decider_tag();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DecisionTag.decider_tag)
  return decider_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DecisionTag::release_decider_tag() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.DecisionTag.decider_tag)
  clear_has_decider_tag();
  return decider_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecisionTag::set_allocated_decider_tag(::std::string* decider_tag) {
  if (decider_tag != NULL) {
    set_has_decider_tag();
  } else {
    clear_has_decider_tag();
  }
  decider_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decider_tag);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.DecisionTag.decider_tag)
}

// optional .apollo.planning.ObjectDecisionType decision = 2;
inline bool DecisionTag::has_decision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DecisionTag::set_has_decision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DecisionTag::clear_has_decision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DecisionTag::clear_decision() {
  if (decision_ != NULL) decision_->::apollo::planning::ObjectDecisionType::Clear();
  clear_has_decision();
}
inline const ::apollo::planning::ObjectDecisionType& DecisionTag::decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DecisionTag.decision)
  return decision_ != NULL ? *decision_
                         : *::apollo::planning::ObjectDecisionType::internal_default_instance();
}
inline ::apollo::planning::ObjectDecisionType* DecisionTag::mutable_decision() {
  set_has_decision();
  if (decision_ == NULL) {
    decision_ = new ::apollo::planning::ObjectDecisionType;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DecisionTag.decision)
  return decision_;
}
inline ::apollo::planning::ObjectDecisionType* DecisionTag::release_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.DecisionTag.decision)
  clear_has_decision();
  ::apollo::planning::ObjectDecisionType* temp = decision_;
  decision_ = NULL;
  return temp;
}
inline void DecisionTag::set_allocated_decision(::apollo::planning::ObjectDecisionType* decision) {
  delete decision_;
  decision_ = decision;
  if (decision) {
    set_has_decision();
  } else {
    clear_has_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.DecisionTag.decision)
}

// -------------------------------------------------------------------

// ObstacleDebug

// optional string id = 1;
inline bool ObstacleDebug::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleDebug::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObstacleDebug::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObstacleDebug::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ObstacleDebug::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ObstacleDebug.id)
  return id_.GetNoArena();
}
inline void ObstacleDebug::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ObstacleDebug.id)
}
#if LANG_CXX11
inline void ObstacleDebug::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.ObstacleDebug.id)
}
#endif
inline void ObstacleDebug::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.ObstacleDebug.id)
}
inline void ObstacleDebug::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.ObstacleDebug.id)
}
inline ::std::string* ObstacleDebug::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ObstacleDebug.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObstacleDebug::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ObstacleDebug.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObstacleDebug::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ObstacleDebug.id)
}

// optional .apollo.planning.SLBoundary sl_boundary = 2;
inline bool ObstacleDebug::has_sl_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleDebug::set_has_sl_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObstacleDebug::clear_has_sl_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObstacleDebug::clear_sl_boundary() {
  if (sl_boundary_ != NULL) sl_boundary_->::apollo::planning::SLBoundary::Clear();
  clear_has_sl_boundary();
}
inline const ::apollo::planning::SLBoundary& ObstacleDebug::sl_boundary() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ObstacleDebug.sl_boundary)
  return sl_boundary_ != NULL ? *sl_boundary_
                         : *::apollo::planning::SLBoundary::internal_default_instance();
}
inline ::apollo::planning::SLBoundary* ObstacleDebug::mutable_sl_boundary() {
  set_has_sl_boundary();
  if (sl_boundary_ == NULL) {
    sl_boundary_ = new ::apollo::planning::SLBoundary;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ObstacleDebug.sl_boundary)
  return sl_boundary_;
}
inline ::apollo::planning::SLBoundary* ObstacleDebug::release_sl_boundary() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ObstacleDebug.sl_boundary)
  clear_has_sl_boundary();
  ::apollo::planning::SLBoundary* temp = sl_boundary_;
  sl_boundary_ = NULL;
  return temp;
}
inline void ObstacleDebug::set_allocated_sl_boundary(::apollo::planning::SLBoundary* sl_boundary) {
  delete sl_boundary_;
  sl_boundary_ = sl_boundary;
  if (sl_boundary) {
    set_has_sl_boundary();
  } else {
    clear_has_sl_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ObstacleDebug.sl_boundary)
}

// repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
inline int ObstacleDebug::decision_tag_size() const {
  return decision_tag_.size();
}
inline void ObstacleDebug::clear_decision_tag() {
  decision_tag_.Clear();
}
inline const ::apollo::planning_internal::DecisionTag& ObstacleDebug::decision_tag(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Get(index);
}
inline ::apollo::planning_internal::DecisionTag* ObstacleDebug::mutable_decision_tag(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Mutable(index);
}
inline ::apollo::planning_internal::DecisionTag* ObstacleDebug::add_decision_tag() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::DecisionTag >*
ObstacleDebug::mutable_decision_tag() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.ObstacleDebug.decision_tag)
  return &decision_tag_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::DecisionTag >&
ObstacleDebug::decision_tag() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_;
}

// -------------------------------------------------------------------

// ReferenceLineDebug

// optional string id = 1;
inline bool ReferenceLineDebug::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReferenceLineDebug::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReferenceLineDebug::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReferenceLineDebug::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ReferenceLineDebug::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.id)
  return id_.GetNoArena();
}
inline void ReferenceLineDebug::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.id)
}
#if LANG_CXX11
inline void ReferenceLineDebug::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.ReferenceLineDebug.id)
}
#endif
inline void ReferenceLineDebug::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.ReferenceLineDebug.id)
}
inline void ReferenceLineDebug::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.ReferenceLineDebug.id)
}
inline ::std::string* ReferenceLineDebug::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ReferenceLineDebug.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReferenceLineDebug::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ReferenceLineDebug.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReferenceLineDebug::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ReferenceLineDebug.id)
}

// optional double length = 2;
inline bool ReferenceLineDebug::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReferenceLineDebug::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReferenceLineDebug::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReferenceLineDebug::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double ReferenceLineDebug::length() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.length)
  return length_;
}
inline void ReferenceLineDebug::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.length)
}

// optional double cost = 3;
inline bool ReferenceLineDebug::has_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReferenceLineDebug::set_has_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReferenceLineDebug::clear_has_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReferenceLineDebug::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline double ReferenceLineDebug::cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.cost)
  return cost_;
}
inline void ReferenceLineDebug::set_cost(double value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.cost)
}

// optional bool is_change_lane_path = 4;
inline bool ReferenceLineDebug::has_is_change_lane_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReferenceLineDebug::set_has_is_change_lane_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReferenceLineDebug::clear_has_is_change_lane_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReferenceLineDebug::clear_is_change_lane_path() {
  is_change_lane_path_ = false;
  clear_has_is_change_lane_path();
}
inline bool ReferenceLineDebug::is_change_lane_path() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.is_change_lane_path)
  return is_change_lane_path_;
}
inline void ReferenceLineDebug::set_is_change_lane_path(bool value) {
  set_has_is_change_lane_path();
  is_change_lane_path_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.is_change_lane_path)
}

// optional bool is_drivable = 5;
inline bool ReferenceLineDebug::has_is_drivable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReferenceLineDebug::set_has_is_drivable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReferenceLineDebug::clear_has_is_drivable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReferenceLineDebug::clear_is_drivable() {
  is_drivable_ = false;
  clear_has_is_drivable();
}
inline bool ReferenceLineDebug::is_drivable() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.is_drivable)
  return is_drivable_;
}
inline void ReferenceLineDebug::set_is_drivable(bool value) {
  set_has_is_drivable();
  is_drivable_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.is_drivable)
}

// optional bool is_protected = 6;
inline bool ReferenceLineDebug::has_is_protected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReferenceLineDebug::set_has_is_protected() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReferenceLineDebug::clear_has_is_protected() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReferenceLineDebug::clear_is_protected() {
  is_protected_ = false;
  clear_has_is_protected();
}
inline bool ReferenceLineDebug::is_protected() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.is_protected)
  return is_protected_;
}
inline void ReferenceLineDebug::set_is_protected(bool value) {
  set_has_is_protected();
  is_protected_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.is_protected)
}

// -------------------------------------------------------------------

// ChangeLaneState

// optional .apollo.planning_internal.ChangeLaneState.State state = 1;
inline bool ChangeLaneState::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeLaneState::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeLaneState::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeLaneState::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::apollo::planning_internal::ChangeLaneState_State ChangeLaneState::state() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ChangeLaneState.state)
  return static_cast< ::apollo::planning_internal::ChangeLaneState_State >(state_);
}
inline void ChangeLaneState::set_state(::apollo::planning_internal::ChangeLaneState_State value) {
  assert(::apollo::planning_internal::ChangeLaneState_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ChangeLaneState.state)
}

// optional string path_id = 2;
inline bool ChangeLaneState::has_path_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeLaneState::set_has_path_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeLaneState::clear_has_path_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeLaneState::clear_path_id() {
  path_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path_id();
}
inline const ::std::string& ChangeLaneState::path_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ChangeLaneState.path_id)
  return path_id_.GetNoArena();
}
inline void ChangeLaneState::set_path_id(const ::std::string& value) {
  set_has_path_id();
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ChangeLaneState.path_id)
}
#if LANG_CXX11
inline void ChangeLaneState::set_path_id(::std::string&& value) {
  set_has_path_id();
  path_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.ChangeLaneState.path_id)
}
#endif
inline void ChangeLaneState::set_path_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path_id();
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.ChangeLaneState.path_id)
}
inline void ChangeLaneState::set_path_id(const char* value, size_t size) {
  set_has_path_id();
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.ChangeLaneState.path_id)
}
inline ::std::string* ChangeLaneState::mutable_path_id() {
  set_has_path_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ChangeLaneState.path_id)
  return path_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeLaneState::release_path_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ChangeLaneState.path_id)
  clear_has_path_id();
  return path_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLaneState::set_allocated_path_id(::std::string* path_id) {
  if (path_id != NULL) {
    set_has_path_id();
  } else {
    clear_has_path_id();
  }
  path_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ChangeLaneState.path_id)
}

// optional double timestamp = 3;
inline bool ChangeLaneState::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeLaneState::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeLaneState::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeLaneState::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double ChangeLaneState::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ChangeLaneState.timestamp)
  return timestamp_;
}
inline void ChangeLaneState::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ChangeLaneState.timestamp)
}

// -------------------------------------------------------------------

// SampleLayerDebug

// repeated .apollo.common.SLPoint sl_point = 1;
inline int SampleLayerDebug::sl_point_size() const {
  return sl_point_.size();
}
inline void SampleLayerDebug::clear_sl_point() {
  sl_point_.Clear();
}
inline const ::apollo::common::SLPoint& SampleLayerDebug::sl_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Get(index);
}
inline ::apollo::common::SLPoint* SampleLayerDebug::mutable_sl_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Mutable(index);
}
inline ::apollo::common::SLPoint* SampleLayerDebug::add_sl_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >*
SampleLayerDebug::mutable_sl_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SampleLayerDebug.sl_point)
  return &sl_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >&
SampleLayerDebug::sl_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_;
}

// -------------------------------------------------------------------

// DpPolyGraphDebug

// repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
inline int DpPolyGraphDebug::sample_layer_size() const {
  return sample_layer_.size();
}
inline void DpPolyGraphDebug::clear_sample_layer() {
  sample_layer_.Clear();
}
inline const ::apollo::planning_internal::SampleLayerDebug& DpPolyGraphDebug::sample_layer(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Get(index);
}
inline ::apollo::planning_internal::SampleLayerDebug* DpPolyGraphDebug::mutable_sample_layer(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Mutable(index);
}
inline ::apollo::planning_internal::SampleLayerDebug* DpPolyGraphDebug::add_sample_layer() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug >*
DpPolyGraphDebug::mutable_sample_layer() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return &sample_layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug >&
DpPolyGraphDebug::sample_layer() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_;
}

// repeated .apollo.common.SLPoint min_cost_point = 2;
inline int DpPolyGraphDebug::min_cost_point_size() const {
  return min_cost_point_.size();
}
inline void DpPolyGraphDebug::clear_min_cost_point() {
  min_cost_point_.Clear();
}
inline const ::apollo::common::SLPoint& DpPolyGraphDebug::min_cost_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Get(index);
}
inline ::apollo::common::SLPoint* DpPolyGraphDebug::mutable_min_cost_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Mutable(index);
}
inline ::apollo::common::SLPoint* DpPolyGraphDebug::add_min_cost_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >*
DpPolyGraphDebug::mutable_min_cost_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return &min_cost_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >&
DpPolyGraphDebug::min_cost_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_;
}

// -------------------------------------------------------------------

// PlanningData

// optional .apollo.localization.LocalizationEstimate adc_position = 7;
inline bool PlanningData::has_adc_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningData::set_has_adc_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanningData::clear_has_adc_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanningData::clear_adc_position() {
  if (adc_position_ != NULL) adc_position_->::apollo::localization::LocalizationEstimate::Clear();
  clear_has_adc_position();
}
inline const ::apollo::localization::LocalizationEstimate& PlanningData::adc_position() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.adc_position)
  return adc_position_ != NULL ? *adc_position_
                         : *::apollo::localization::LocalizationEstimate::internal_default_instance();
}
inline ::apollo::localization::LocalizationEstimate* PlanningData::mutable_adc_position() {
  set_has_adc_position();
  if (adc_position_ == NULL) {
    adc_position_ = new ::apollo::localization::LocalizationEstimate;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.adc_position)
  return adc_position_;
}
inline ::apollo::localization::LocalizationEstimate* PlanningData::release_adc_position() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.adc_position)
  clear_has_adc_position();
  ::apollo::localization::LocalizationEstimate* temp = adc_position_;
  adc_position_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_adc_position(::apollo::localization::LocalizationEstimate* adc_position) {
  delete adc_position_;
  adc_position_ = adc_position;
  if (adc_position) {
    set_has_adc_position();
  } else {
    clear_has_adc_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.adc_position)
}

// optional .apollo.canbus.Chassis chassis = 8;
inline bool PlanningData::has_chassis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningData::set_has_chassis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanningData::clear_has_chassis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanningData::clear_chassis() {
  if (chassis_ != NULL) chassis_->::apollo::canbus::Chassis::Clear();
  clear_has_chassis();
}
inline const ::apollo::canbus::Chassis& PlanningData::chassis() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.chassis)
  return chassis_ != NULL ? *chassis_
                         : *::apollo::canbus::Chassis::internal_default_instance();
}
inline ::apollo::canbus::Chassis* PlanningData::mutable_chassis() {
  set_has_chassis();
  if (chassis_ == NULL) {
    chassis_ = new ::apollo::canbus::Chassis;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.chassis)
  return chassis_;
}
inline ::apollo::canbus::Chassis* PlanningData::release_chassis() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.chassis)
  clear_has_chassis();
  ::apollo::canbus::Chassis* temp = chassis_;
  chassis_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_chassis(::apollo::canbus::Chassis* chassis) {
  delete chassis_;
  chassis_ = chassis;
  if (chassis) {
    set_has_chassis();
  } else {
    clear_has_chassis();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.chassis)
}

// optional .apollo.routing.RoutingResponse routing = 9;
inline bool PlanningData::has_routing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningData::set_has_routing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanningData::clear_has_routing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanningData::clear_routing() {
  if (routing_ != NULL) routing_->::apollo::routing::RoutingResponse::Clear();
  clear_has_routing();
}
inline const ::apollo::routing::RoutingResponse& PlanningData::routing() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.routing)
  return routing_ != NULL ? *routing_
                         : *::apollo::routing::RoutingResponse::internal_default_instance();
}
inline ::apollo::routing::RoutingResponse* PlanningData::mutable_routing() {
  set_has_routing();
  if (routing_ == NULL) {
    routing_ = new ::apollo::routing::RoutingResponse;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.routing)
  return routing_;
}
inline ::apollo::routing::RoutingResponse* PlanningData::release_routing() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.routing)
  clear_has_routing();
  ::apollo::routing::RoutingResponse* temp = routing_;
  routing_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_routing(::apollo::routing::RoutingResponse* routing) {
  delete routing_;
  routing_ = routing;
  if (routing) {
    set_has_routing();
  } else {
    clear_has_routing();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.routing)
}

// optional .apollo.common.TrajectoryPoint init_point = 10;
inline bool PlanningData::has_init_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningData::set_has_init_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanningData::clear_has_init_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanningData::clear_init_point() {
  if (init_point_ != NULL) init_point_->::apollo::common::TrajectoryPoint::Clear();
  clear_has_init_point();
}
inline const ::apollo::common::TrajectoryPoint& PlanningData::init_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.init_point)
  return init_point_ != NULL ? *init_point_
                         : *::apollo::common::TrajectoryPoint::internal_default_instance();
}
inline ::apollo::common::TrajectoryPoint* PlanningData::mutable_init_point() {
  set_has_init_point();
  if (init_point_ == NULL) {
    init_point_ = new ::apollo::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.init_point)
  return init_point_;
}
inline ::apollo::common::TrajectoryPoint* PlanningData::release_init_point() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.init_point)
  clear_has_init_point();
  ::apollo::common::TrajectoryPoint* temp = init_point_;
  init_point_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_init_point(::apollo::common::TrajectoryPoint* init_point) {
  delete init_point_;
  init_point_ = init_point;
  if (init_point) {
    set_has_init_point();
  } else {
    clear_has_init_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.init_point)
}

// repeated .apollo.common.Path path = 6;
inline int PlanningData::path_size() const {
  return path_.size();
}
inline void PlanningData::clear_path() {
  path_.Clear();
}
inline const ::apollo::common::Path& PlanningData::path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.path)
  return path_.Get(index);
}
inline ::apollo::common::Path* PlanningData::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.path)
  return path_.Mutable(index);
}
inline ::apollo::common::Path* PlanningData::add_path() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.path)
  return path_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::Path >*
PlanningData::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.path)
  return &path_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::Path >&
PlanningData::path() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.path)
  return path_;
}

// repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
inline int PlanningData::speed_plan_size() const {
  return speed_plan_.size();
}
inline void PlanningData::clear_speed_plan() {
  speed_plan_.Clear();
}
inline const ::apollo::planning_internal::SpeedPlan& PlanningData::speed_plan(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Get(index);
}
inline ::apollo::planning_internal::SpeedPlan* PlanningData::mutable_speed_plan(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Mutable(index);
}
inline ::apollo::planning_internal::SpeedPlan* PlanningData::add_speed_plan() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan >*
PlanningData::mutable_speed_plan() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.speed_plan)
  return &speed_plan_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan >&
PlanningData::speed_plan() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.speed_plan)
  return speed_plan_;
}

// repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
inline int PlanningData::st_graph_size() const {
  return st_graph_.size();
}
inline void PlanningData::clear_st_graph() {
  st_graph_.Clear();
}
inline const ::apollo::planning_internal::STGraphDebug& PlanningData::st_graph(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.st_graph)
  return st_graph_.Get(index);
}
inline ::apollo::planning_internal::STGraphDebug* PlanningData::mutable_st_graph(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.st_graph)
  return st_graph_.Mutable(index);
}
inline ::apollo::planning_internal::STGraphDebug* PlanningData::add_st_graph() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.st_graph)
  return st_graph_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug >*
PlanningData::mutable_st_graph() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.st_graph)
  return &st_graph_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug >&
PlanningData::st_graph() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.st_graph)
  return st_graph_;
}

// repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
inline int PlanningData::sl_frame_size() const {
  return sl_frame_.size();
}
inline void PlanningData::clear_sl_frame() {
  sl_frame_.Clear();
}
inline const ::apollo::planning_internal::SLFrameDebug& PlanningData::sl_frame(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Get(index);
}
inline ::apollo::planning_internal::SLFrameDebug* PlanningData::mutable_sl_frame(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Mutable(index);
}
inline ::apollo::planning_internal::SLFrameDebug* PlanningData::add_sl_frame() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug >*
PlanningData::mutable_sl_frame() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.sl_frame)
  return &sl_frame_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug >&
PlanningData::sl_frame() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.sl_frame)
  return sl_frame_;
}

// optional .apollo.common.Header prediction_header = 16;
inline bool PlanningData::has_prediction_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanningData::set_has_prediction_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanningData::clear_has_prediction_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanningData::clear_prediction_header() {
  if (prediction_header_ != NULL) prediction_header_->::apollo::common::Header::Clear();
  clear_has_prediction_header();
}
inline const ::apollo::common::Header& PlanningData::prediction_header() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.prediction_header)
  return prediction_header_ != NULL ? *prediction_header_
                         : *::apollo::common::Header::internal_default_instance();
}
inline ::apollo::common::Header* PlanningData::mutable_prediction_header() {
  set_has_prediction_header();
  if (prediction_header_ == NULL) {
    prediction_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.prediction_header)
  return prediction_header_;
}
inline ::apollo::common::Header* PlanningData::release_prediction_header() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.prediction_header)
  clear_has_prediction_header();
  ::apollo::common::Header* temp = prediction_header_;
  prediction_header_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_prediction_header(::apollo::common::Header* prediction_header) {
  delete prediction_header_;
  prediction_header_ = prediction_header;
  if (prediction_header) {
    set_has_prediction_header();
  } else {
    clear_has_prediction_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.prediction_header)
}

// optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
inline bool PlanningData::has_signal_light() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanningData::set_has_signal_light() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanningData::clear_has_signal_light() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanningData::clear_signal_light() {
  if (signal_light_ != NULL) signal_light_->::apollo::planning_internal::SignalLightDebug::Clear();
  clear_has_signal_light();
}
inline const ::apollo::planning_internal::SignalLightDebug& PlanningData::signal_light() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.signal_light)
  return signal_light_ != NULL ? *signal_light_
                         : *::apollo::planning_internal::SignalLightDebug::internal_default_instance();
}
inline ::apollo::planning_internal::SignalLightDebug* PlanningData::mutable_signal_light() {
  set_has_signal_light();
  if (signal_light_ == NULL) {
    signal_light_ = new ::apollo::planning_internal::SignalLightDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.signal_light)
  return signal_light_;
}
inline ::apollo::planning_internal::SignalLightDebug* PlanningData::release_signal_light() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.signal_light)
  clear_has_signal_light();
  ::apollo::planning_internal::SignalLightDebug* temp = signal_light_;
  signal_light_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_signal_light(::apollo::planning_internal::SignalLightDebug* signal_light) {
  delete signal_light_;
  signal_light_ = signal_light;
  if (signal_light) {
    set_has_signal_light();
  } else {
    clear_has_signal_light();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.signal_light)
}

// repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
inline int PlanningData::obstacle_size() const {
  return obstacle_.size();
}
inline void PlanningData::clear_obstacle() {
  obstacle_.Clear();
}
inline const ::apollo::planning_internal::ObstacleDebug& PlanningData::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.obstacle)
  return obstacle_.Get(index);
}
inline ::apollo::planning_internal::ObstacleDebug* PlanningData::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.obstacle)
  return obstacle_.Mutable(index);
}
inline ::apollo::planning_internal::ObstacleDebug* PlanningData::add_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.obstacle)
  return obstacle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug >*
PlanningData::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.obstacle)
  return &obstacle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug >&
PlanningData::obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.obstacle)
  return obstacle_;
}

// repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
inline int PlanningData::reference_line_size() const {
  return reference_line_.size();
}
inline void PlanningData::clear_reference_line() {
  reference_line_.Clear();
}
inline const ::apollo::planning_internal::ReferenceLineDebug& PlanningData::reference_line(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.reference_line)
  return reference_line_.Get(index);
}
inline ::apollo::planning_internal::ReferenceLineDebug* PlanningData::mutable_reference_line(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.reference_line)
  return reference_line_.Mutable(index);
}
inline ::apollo::planning_internal::ReferenceLineDebug* PlanningData::add_reference_line() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.reference_line)
  return reference_line_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug >*
PlanningData::mutable_reference_line() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.reference_line)
  return &reference_line_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug >&
PlanningData::reference_line() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.reference_line)
  return reference_line_;
}

// optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
inline bool PlanningData::has_dp_poly_graph() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlanningData::set_has_dp_poly_graph() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlanningData::clear_has_dp_poly_graph() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlanningData::clear_dp_poly_graph() {
  if (dp_poly_graph_ != NULL) dp_poly_graph_->::apollo::planning_internal::DpPolyGraphDebug::Clear();
  clear_has_dp_poly_graph();
}
inline const ::apollo::planning_internal::DpPolyGraphDebug& PlanningData::dp_poly_graph() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.dp_poly_graph)
  return dp_poly_graph_ != NULL ? *dp_poly_graph_
                         : *::apollo::planning_internal::DpPolyGraphDebug::internal_default_instance();
}
inline ::apollo::planning_internal::DpPolyGraphDebug* PlanningData::mutable_dp_poly_graph() {
  set_has_dp_poly_graph();
  if (dp_poly_graph_ == NULL) {
    dp_poly_graph_ = new ::apollo::planning_internal::DpPolyGraphDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.dp_poly_graph)
  return dp_poly_graph_;
}
inline ::apollo::planning_internal::DpPolyGraphDebug* PlanningData::release_dp_poly_graph() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.dp_poly_graph)
  clear_has_dp_poly_graph();
  ::apollo::planning_internal::DpPolyGraphDebug* temp = dp_poly_graph_;
  dp_poly_graph_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_dp_poly_graph(::apollo::planning_internal::DpPolyGraphDebug* dp_poly_graph) {
  delete dp_poly_graph_;
  dp_poly_graph_ = dp_poly_graph;
  if (dp_poly_graph) {
    set_has_dp_poly_graph();
  } else {
    clear_has_dp_poly_graph();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.dp_poly_graph)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace planning_internal
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType>() {
  return ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning_internal::ChangeLaneState_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning_internal::ChangeLaneState_State>() {
  return ::apollo::planning_internal::ChangeLaneState_State_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto__INCLUDED
