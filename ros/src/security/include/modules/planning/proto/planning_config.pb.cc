// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/planning_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {
class RuleConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RuleConfig> {
} _RuleConfig_default_instance_;
class EMPlannerConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EMPlannerConfig> {
} _EMPlannerConfig_default_instance_;
class PlanningConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanningConfig> {
} _PlanningConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleConfig, rule_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EMPlannerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EMPlannerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EMPlannerConfig, task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EMPlannerConfig, dp_poly_path_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EMPlannerConfig, dp_st_speed_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EMPlannerConfig, qp_spline_path_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EMPlannerConfig, qp_st_speed_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EMPlannerConfig, poly_st_speed_config_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningConfig, planner_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningConfig, em_planner_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningConfig, qp_spline_reference_line_smoother_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningConfig, rule_config_),
  2,
  0,
  1,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(RuleConfig)},
  { 7, 18, sizeof(EMPlannerConfig)},
  { 24, 33, sizeof(PlanningConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RuleConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EMPlannerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanningConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/planning_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _RuleConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _EMPlannerConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PlanningConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto::InitDefaults();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::InitDefaults();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto::InitDefaults();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto::InitDefaults();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto::InitDefaults();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto::InitDefaults();
  _RuleConfig_default_instance_.DefaultConstruct();
  _EMPlannerConfig_default_instance_.DefaultConstruct();
  _PlanningConfig_default_instance_.DefaultConstruct();
  _EMPlannerConfig_default_instance_.get_mutable()->dp_poly_path_config_ = const_cast< ::apollo::planning::DpPolyPathConfig*>(
      ::apollo::planning::DpPolyPathConfig::internal_default_instance());
  _EMPlannerConfig_default_instance_.get_mutable()->dp_st_speed_config_ = const_cast< ::apollo::planning::DpStSpeedConfig*>(
      ::apollo::planning::DpStSpeedConfig::internal_default_instance());
  _EMPlannerConfig_default_instance_.get_mutable()->qp_spline_path_config_ = const_cast< ::apollo::planning::QpSplinePathConfig*>(
      ::apollo::planning::QpSplinePathConfig::internal_default_instance());
  _EMPlannerConfig_default_instance_.get_mutable()->qp_st_speed_config_ = const_cast< ::apollo::planning::QpStSpeedConfig*>(
      ::apollo::planning::QpStSpeedConfig::internal_default_instance());
  _EMPlannerConfig_default_instance_.get_mutable()->poly_st_speed_config_ = const_cast< ::apollo::planning::PolyStSpeedConfig*>(
      ::apollo::planning::PolyStSpeedConfig::internal_default_instance());
  _PlanningConfig_default_instance_.get_mutable()->em_planner_config_ = const_cast< ::apollo::planning::EMPlannerConfig*>(
      ::apollo::planning::EMPlannerConfig::internal_default_instance());
  _PlanningConfig_default_instance_.get_mutable()->qp_spline_reference_line_smoother_config_ = const_cast< ::apollo::planning::QpSplineReferenceLineSmootherConfig*>(
      ::apollo::planning::QpSplineReferenceLineSmootherConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n,modules/planning/proto/planning_config"
      ".proto\022\017apollo.planning\0320modules/plannin"
      "g/proto/dp_poly_path_config.proto\032/modul"
      "es/planning/proto/dp_st_speed_config.pro"
      "to\0322modules/planning/proto/qp_spline_pat"
      "h_config.proto\032/modules/planning/proto/q"
      "p_st_speed_config.proto\0321modules/plannin"
      "g/proto/poly_st_speed_config.proto\032Emodu"
      "les/planning/proto/qp_spline_reference_l"
      "ine_smoother_config.proto\"\353\001\n\nRuleConfig"
      "\0223\n\007rule_id\030\001 \001(\0162\".apollo.planning.Rule"
      "Config.RuleId\"\247\001\n\006RuleId\022\024\n\020BACKSIDE_VEH"
      "ICLE\020\001\022\020\n\014SIGNAL_LIGHT\020\002\022\r\n\tCROSSWALK\020\003\022"
      "\016\n\nCLEAR_ZONE\020\004\022\r\n\tREROUTING\020\005\022\026\n\022REFERE"
      "NCE_LINE_END\020\006\022\017\n\013DESTINATION\020\007\022\r\n\tSTOP_"
      "SIGN\020\010\022\017\n\013CHANGE_LANE\020\t\"\374\002\n\017EMPlannerCon"
      "fig\022\'\n\004task\030\001 \003(\0162\031.apollo.planning.Task"
      "Type\022>\n\023dp_poly_path_config\030\002 \001(\0132!.apol"
      "lo.planning.DpPolyPathConfig\022<\n\022dp_st_sp"
      "eed_config\030\003 \001(\0132 .apollo.planning.DpStS"
      "peedConfig\022B\n\025qp_spline_path_config\030\004 \001("
      "\0132#.apollo.planning.QpSplinePathConfig\022<"
      "\n\022qp_st_speed_config\030\005 \001(\0132 .apollo.plan"
      "ning.QpStSpeedConfig\022@\n\024poly_st_speed_co"
      "nfig\030\006 \001(\0132\".apollo.planning.PolyStSpeed"
      "Config\"\316\002\n\016PlanningConfig\022E\n\014planner_typ"
      "e\030\001 \001(\0162+.apollo.planning.PlanningConfig"
      ".PlannerType:\002EM\022;\n\021em_planner_config\030\002 "
      "\001(\0132 .apollo.planning.EMPlannerConfig\022f\n"
      "(qp_spline_reference_line_smoother_confi"
      "g\030\003 \001(\01324.apollo.planning.QpSplineRefere"
      "nceLineSmootherConfig\0220\n\013rule_config\030\004 \003"
      "(\0132\033.apollo.planning.RuleConfig\"\036\n\013Plann"
      "erType\022\007\n\003RTK\020\000\022\006\n\002EM\020\001*\330\001\n\010TaskType\022\032\n\026"
      "DP_POLY_PATH_OPTIMIZER\020\000\022\031\n\025DP_ST_SPEED_"
      "OPTIMIZER\020\001\022\034\n\030QP_SPLINE_PATH_OPTIMIZER\020"
      "\002\022 \n\034QP_SPLINE_ST_SPEED_OPTIMIZER\020\003\022\023\n\017T"
      "RAFFIC_DECIDER\020\004\022\020\n\014PATH_DECIDER\020\005\022\021\n\rSP"
      "EED_DECIDER\020\006\022\033\n\027POLY_ST_SPEED_OPTIMIZER"
      "\020\007"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1562);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/planning_config.proto", &protobuf_RegisterTypes);
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto::AddDescriptors();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::AddDescriptors();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto::AddDescriptors();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto::AddDescriptors();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto::AddDescriptors();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto

const ::google::protobuf::EnumDescriptor* RuleConfig_RuleId_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool RuleConfig_RuleId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RuleConfig_RuleId RuleConfig::BACKSIDE_VEHICLE;
const RuleConfig_RuleId RuleConfig::SIGNAL_LIGHT;
const RuleConfig_RuleId RuleConfig::CROSSWALK;
const RuleConfig_RuleId RuleConfig::CLEAR_ZONE;
const RuleConfig_RuleId RuleConfig::REROUTING;
const RuleConfig_RuleId RuleConfig::REFERENCE_LINE_END;
const RuleConfig_RuleId RuleConfig::DESTINATION;
const RuleConfig_RuleId RuleConfig::STOP_SIGN;
const RuleConfig_RuleId RuleConfig::CHANGE_LANE;
const RuleConfig_RuleId RuleConfig::RuleId_MIN;
const RuleConfig_RuleId RuleConfig::RuleId_MAX;
const int RuleConfig::RuleId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PlanningConfig_PlannerType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_enum_descriptors[1];
}
bool PlanningConfig_PlannerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlanningConfig_PlannerType PlanningConfig::RTK;
const PlanningConfig_PlannerType PlanningConfig::EM;
const PlanningConfig_PlannerType PlanningConfig::PlannerType_MIN;
const PlanningConfig_PlannerType PlanningConfig::PlannerType_MAX;
const int PlanningConfig::PlannerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TaskType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_enum_descriptors[2];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuleConfig::kRuleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuleConfig::RuleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.RuleConfig)
}
RuleConfig::RuleConfig(const RuleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rule_id_ = from.rule_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RuleConfig)
}

void RuleConfig::SharedCtor() {
  _cached_size_ = 0;
  rule_id_ = 1;
}

RuleConfig::~RuleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.RuleConfig)
  SharedDtor();
}

void RuleConfig::SharedDtor() {
}

void RuleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RuleConfig& RuleConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

RuleConfig* RuleConfig::New(::google::protobuf::Arena* arena) const {
  RuleConfig* n = new RuleConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RuleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RuleConfig)
  rule_id_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RuleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.RuleConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.RuleConfig.RuleId rule_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::RuleConfig_RuleId_IsValid(value)) {
            set_rule_id(static_cast< ::apollo::planning::RuleConfig_RuleId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.RuleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.RuleConfig)
  return false;
#undef DO_
}

void RuleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.RuleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.RuleConfig.RuleId rule_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rule_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.RuleConfig)
}

::google::protobuf::uint8* RuleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RuleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.RuleConfig.RuleId rule_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rule_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RuleConfig)
  return target;
}

size_t RuleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RuleConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .apollo.planning.RuleConfig.RuleId rule_id = 1;
  if (has_rule_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rule_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.RuleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.RuleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.RuleConfig)
    MergeFrom(*source);
  }
}

void RuleConfig::MergeFrom(const RuleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RuleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rule_id()) {
    set_rule_id(from.rule_id());
  }
}

void RuleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.RuleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleConfig::CopyFrom(const RuleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RuleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleConfig::IsInitialized() const {
  return true;
}

void RuleConfig::Swap(RuleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RuleConfig::InternalSwap(RuleConfig* other) {
  std::swap(rule_id_, other->rule_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RuleConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RuleConfig

// optional .apollo.planning.RuleConfig.RuleId rule_id = 1;
bool RuleConfig::has_rule_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RuleConfig::set_has_rule_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RuleConfig::clear_has_rule_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RuleConfig::clear_rule_id() {
  rule_id_ = 1;
  clear_has_rule_id();
}
::apollo::planning::RuleConfig_RuleId RuleConfig::rule_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleConfig.rule_id)
  return static_cast< ::apollo::planning::RuleConfig_RuleId >(rule_id_);
}
void RuleConfig::set_rule_id(::apollo::planning::RuleConfig_RuleId value) {
  assert(::apollo::planning::RuleConfig_RuleId_IsValid(value));
  set_has_rule_id();
  rule_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.RuleConfig.rule_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EMPlannerConfig::kTaskFieldNumber;
const int EMPlannerConfig::kDpPolyPathConfigFieldNumber;
const int EMPlannerConfig::kDpStSpeedConfigFieldNumber;
const int EMPlannerConfig::kQpSplinePathConfigFieldNumber;
const int EMPlannerConfig::kQpStSpeedConfigFieldNumber;
const int EMPlannerConfig::kPolyStSpeedConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EMPlannerConfig::EMPlannerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.EMPlannerConfig)
}
EMPlannerConfig::EMPlannerConfig(const EMPlannerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      task_(from.task_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dp_poly_path_config()) {
    dp_poly_path_config_ = new ::apollo::planning::DpPolyPathConfig(*from.dp_poly_path_config_);
  } else {
    dp_poly_path_config_ = NULL;
  }
  if (from.has_dp_st_speed_config()) {
    dp_st_speed_config_ = new ::apollo::planning::DpStSpeedConfig(*from.dp_st_speed_config_);
  } else {
    dp_st_speed_config_ = NULL;
  }
  if (from.has_qp_spline_path_config()) {
    qp_spline_path_config_ = new ::apollo::planning::QpSplinePathConfig(*from.qp_spline_path_config_);
  } else {
    qp_spline_path_config_ = NULL;
  }
  if (from.has_qp_st_speed_config()) {
    qp_st_speed_config_ = new ::apollo::planning::QpStSpeedConfig(*from.qp_st_speed_config_);
  } else {
    qp_st_speed_config_ = NULL;
  }
  if (from.has_poly_st_speed_config()) {
    poly_st_speed_config_ = new ::apollo::planning::PolyStSpeedConfig(*from.poly_st_speed_config_);
  } else {
    poly_st_speed_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.EMPlannerConfig)
}

void EMPlannerConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dp_poly_path_config_, 0, reinterpret_cast<char*>(&poly_st_speed_config_) -
    reinterpret_cast<char*>(&dp_poly_path_config_) + sizeof(poly_st_speed_config_));
}

EMPlannerConfig::~EMPlannerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.EMPlannerConfig)
  SharedDtor();
}

void EMPlannerConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dp_poly_path_config_;
  }
  if (this != internal_default_instance()) {
    delete dp_st_speed_config_;
  }
  if (this != internal_default_instance()) {
    delete qp_spline_path_config_;
  }
  if (this != internal_default_instance()) {
    delete qp_st_speed_config_;
  }
  if (this != internal_default_instance()) {
    delete poly_st_speed_config_;
  }
}

void EMPlannerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EMPlannerConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EMPlannerConfig& EMPlannerConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

EMPlannerConfig* EMPlannerConfig::New(::google::protobuf::Arena* arena) const {
  EMPlannerConfig* n = new EMPlannerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EMPlannerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.EMPlannerConfig)
  task_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_dp_poly_path_config()) {
      GOOGLE_DCHECK(dp_poly_path_config_ != NULL);
      dp_poly_path_config_->::apollo::planning::DpPolyPathConfig::Clear();
    }
    if (has_dp_st_speed_config()) {
      GOOGLE_DCHECK(dp_st_speed_config_ != NULL);
      dp_st_speed_config_->::apollo::planning::DpStSpeedConfig::Clear();
    }
    if (has_qp_spline_path_config()) {
      GOOGLE_DCHECK(qp_spline_path_config_ != NULL);
      qp_spline_path_config_->::apollo::planning::QpSplinePathConfig::Clear();
    }
    if (has_qp_st_speed_config()) {
      GOOGLE_DCHECK(qp_st_speed_config_ != NULL);
      qp_st_speed_config_->::apollo::planning::QpStSpeedConfig::Clear();
    }
    if (has_poly_st_speed_config()) {
      GOOGLE_DCHECK(poly_st_speed_config_ != NULL);
      poly_st_speed_config_->::apollo::planning::PolyStSpeedConfig::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EMPlannerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.EMPlannerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.TaskType task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::TaskType_IsValid(value)) {
            add_task(static_cast< ::apollo::planning::TaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::apollo::planning::TaskType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_task())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dp_poly_path_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dp_st_speed_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qp_spline_path_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qp_st_speed_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poly_st_speed_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.EMPlannerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.EMPlannerConfig)
  return false;
#undef DO_
}

void EMPlannerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.EMPlannerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskType task = 1;
  for (int i = 0, n = this->task_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->task(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dp_poly_path_config_, output);
  }

  // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->dp_st_speed_config_, output);
  }

  // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->qp_spline_path_config_, output);
  }

  // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->qp_st_speed_config_, output);
  }

  // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->poly_st_speed_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.EMPlannerConfig)
}

::google::protobuf::uint8* EMPlannerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.EMPlannerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskType task = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->task_, target);

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dp_poly_path_config_, deterministic, target);
  }

  // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->dp_st_speed_config_, deterministic, target);
  }

  // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->qp_spline_path_config_, deterministic, target);
  }

  // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->qp_st_speed_config_, deterministic, target);
  }

  // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->poly_st_speed_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.EMPlannerConfig)
  return target;
}

size_t EMPlannerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.EMPlannerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.planning.TaskType task = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->task_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->task(i));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
    if (has_dp_poly_path_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dp_poly_path_config_);
    }

    // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
    if (has_dp_st_speed_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dp_st_speed_config_);
    }

    // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
    if (has_qp_spline_path_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qp_spline_path_config_);
    }

    // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
    if (has_qp_st_speed_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qp_st_speed_config_);
    }

    // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
    if (has_poly_st_speed_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->poly_st_speed_config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EMPlannerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.EMPlannerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EMPlannerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EMPlannerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.EMPlannerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.EMPlannerConfig)
    MergeFrom(*source);
  }
}

void EMPlannerConfig::MergeFrom(const EMPlannerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.EMPlannerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_.MergeFrom(from.task_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dp_poly_path_config()->::apollo::planning::DpPolyPathConfig::MergeFrom(from.dp_poly_path_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dp_st_speed_config()->::apollo::planning::DpStSpeedConfig::MergeFrom(from.dp_st_speed_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_qp_spline_path_config()->::apollo::planning::QpSplinePathConfig::MergeFrom(from.qp_spline_path_config());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_qp_st_speed_config()->::apollo::planning::QpStSpeedConfig::MergeFrom(from.qp_st_speed_config());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_poly_st_speed_config()->::apollo::planning::PolyStSpeedConfig::MergeFrom(from.poly_st_speed_config());
    }
  }
}

void EMPlannerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.EMPlannerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EMPlannerConfig::CopyFrom(const EMPlannerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.EMPlannerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EMPlannerConfig::IsInitialized() const {
  return true;
}

void EMPlannerConfig::Swap(EMPlannerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EMPlannerConfig::InternalSwap(EMPlannerConfig* other) {
  task_.InternalSwap(&other->task_);
  std::swap(dp_poly_path_config_, other->dp_poly_path_config_);
  std::swap(dp_st_speed_config_, other->dp_st_speed_config_);
  std::swap(qp_spline_path_config_, other->qp_spline_path_config_);
  std::swap(qp_st_speed_config_, other->qp_st_speed_config_);
  std::swap(poly_st_speed_config_, other->poly_st_speed_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EMPlannerConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EMPlannerConfig

// repeated .apollo.planning.TaskType task = 1;
int EMPlannerConfig::task_size() const {
  return task_.size();
}
void EMPlannerConfig::clear_task() {
  task_.Clear();
}
::apollo::planning::TaskType EMPlannerConfig::task(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.task)
  return static_cast< ::apollo::planning::TaskType >(task_.Get(index));
}
void EMPlannerConfig::set_task(int index, ::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  task_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.EMPlannerConfig.task)
}
void EMPlannerConfig::add_task(::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  task_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.EMPlannerConfig.task)
}
const ::google::protobuf::RepeatedField<int>&
EMPlannerConfig::task() const {
  // @@protoc_insertion_point(field_list:apollo.planning.EMPlannerConfig.task)
  return task_;
}
::google::protobuf::RepeatedField<int>*
EMPlannerConfig::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.EMPlannerConfig.task)
  return &task_;
}

// optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
bool EMPlannerConfig::has_dp_poly_path_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EMPlannerConfig::set_has_dp_poly_path_config() {
  _has_bits_[0] |= 0x00000001u;
}
void EMPlannerConfig::clear_has_dp_poly_path_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void EMPlannerConfig::clear_dp_poly_path_config() {
  if (dp_poly_path_config_ != NULL) dp_poly_path_config_->::apollo::planning::DpPolyPathConfig::Clear();
  clear_has_dp_poly_path_config();
}
const ::apollo::planning::DpPolyPathConfig& EMPlannerConfig::dp_poly_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.dp_poly_path_config)
  return dp_poly_path_config_ != NULL ? *dp_poly_path_config_
                         : *::apollo::planning::DpPolyPathConfig::internal_default_instance();
}
::apollo::planning::DpPolyPathConfig* EMPlannerConfig::mutable_dp_poly_path_config() {
  set_has_dp_poly_path_config();
  if (dp_poly_path_config_ == NULL) {
    dp_poly_path_config_ = new ::apollo::planning::DpPolyPathConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.dp_poly_path_config)
  return dp_poly_path_config_;
}
::apollo::planning::DpPolyPathConfig* EMPlannerConfig::release_dp_poly_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.dp_poly_path_config)
  clear_has_dp_poly_path_config();
  ::apollo::planning::DpPolyPathConfig* temp = dp_poly_path_config_;
  dp_poly_path_config_ = NULL;
  return temp;
}
void EMPlannerConfig::set_allocated_dp_poly_path_config(::apollo::planning::DpPolyPathConfig* dp_poly_path_config) {
  delete dp_poly_path_config_;
  dp_poly_path_config_ = dp_poly_path_config;
  if (dp_poly_path_config) {
    set_has_dp_poly_path_config();
  } else {
    clear_has_dp_poly_path_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.dp_poly_path_config)
}

// optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
bool EMPlannerConfig::has_dp_st_speed_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EMPlannerConfig::set_has_dp_st_speed_config() {
  _has_bits_[0] |= 0x00000002u;
}
void EMPlannerConfig::clear_has_dp_st_speed_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void EMPlannerConfig::clear_dp_st_speed_config() {
  if (dp_st_speed_config_ != NULL) dp_st_speed_config_->::apollo::planning::DpStSpeedConfig::Clear();
  clear_has_dp_st_speed_config();
}
const ::apollo::planning::DpStSpeedConfig& EMPlannerConfig::dp_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.dp_st_speed_config)
  return dp_st_speed_config_ != NULL ? *dp_st_speed_config_
                         : *::apollo::planning::DpStSpeedConfig::internal_default_instance();
}
::apollo::planning::DpStSpeedConfig* EMPlannerConfig::mutable_dp_st_speed_config() {
  set_has_dp_st_speed_config();
  if (dp_st_speed_config_ == NULL) {
    dp_st_speed_config_ = new ::apollo::planning::DpStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.dp_st_speed_config)
  return dp_st_speed_config_;
}
::apollo::planning::DpStSpeedConfig* EMPlannerConfig::release_dp_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.dp_st_speed_config)
  clear_has_dp_st_speed_config();
  ::apollo::planning::DpStSpeedConfig* temp = dp_st_speed_config_;
  dp_st_speed_config_ = NULL;
  return temp;
}
void EMPlannerConfig::set_allocated_dp_st_speed_config(::apollo::planning::DpStSpeedConfig* dp_st_speed_config) {
  delete dp_st_speed_config_;
  dp_st_speed_config_ = dp_st_speed_config;
  if (dp_st_speed_config) {
    set_has_dp_st_speed_config();
  } else {
    clear_has_dp_st_speed_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.dp_st_speed_config)
}

// optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
bool EMPlannerConfig::has_qp_spline_path_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EMPlannerConfig::set_has_qp_spline_path_config() {
  _has_bits_[0] |= 0x00000004u;
}
void EMPlannerConfig::clear_has_qp_spline_path_config() {
  _has_bits_[0] &= ~0x00000004u;
}
void EMPlannerConfig::clear_qp_spline_path_config() {
  if (qp_spline_path_config_ != NULL) qp_spline_path_config_->::apollo::planning::QpSplinePathConfig::Clear();
  clear_has_qp_spline_path_config();
}
const ::apollo::planning::QpSplinePathConfig& EMPlannerConfig::qp_spline_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.qp_spline_path_config)
  return qp_spline_path_config_ != NULL ? *qp_spline_path_config_
                         : *::apollo::planning::QpSplinePathConfig::internal_default_instance();
}
::apollo::planning::QpSplinePathConfig* EMPlannerConfig::mutable_qp_spline_path_config() {
  set_has_qp_spline_path_config();
  if (qp_spline_path_config_ == NULL) {
    qp_spline_path_config_ = new ::apollo::planning::QpSplinePathConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.qp_spline_path_config)
  return qp_spline_path_config_;
}
::apollo::planning::QpSplinePathConfig* EMPlannerConfig::release_qp_spline_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.qp_spline_path_config)
  clear_has_qp_spline_path_config();
  ::apollo::planning::QpSplinePathConfig* temp = qp_spline_path_config_;
  qp_spline_path_config_ = NULL;
  return temp;
}
void EMPlannerConfig::set_allocated_qp_spline_path_config(::apollo::planning::QpSplinePathConfig* qp_spline_path_config) {
  delete qp_spline_path_config_;
  qp_spline_path_config_ = qp_spline_path_config;
  if (qp_spline_path_config) {
    set_has_qp_spline_path_config();
  } else {
    clear_has_qp_spline_path_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.qp_spline_path_config)
}

// optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
bool EMPlannerConfig::has_qp_st_speed_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EMPlannerConfig::set_has_qp_st_speed_config() {
  _has_bits_[0] |= 0x00000008u;
}
void EMPlannerConfig::clear_has_qp_st_speed_config() {
  _has_bits_[0] &= ~0x00000008u;
}
void EMPlannerConfig::clear_qp_st_speed_config() {
  if (qp_st_speed_config_ != NULL) qp_st_speed_config_->::apollo::planning::QpStSpeedConfig::Clear();
  clear_has_qp_st_speed_config();
}
const ::apollo::planning::QpStSpeedConfig& EMPlannerConfig::qp_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.qp_st_speed_config)
  return qp_st_speed_config_ != NULL ? *qp_st_speed_config_
                         : *::apollo::planning::QpStSpeedConfig::internal_default_instance();
}
::apollo::planning::QpStSpeedConfig* EMPlannerConfig::mutable_qp_st_speed_config() {
  set_has_qp_st_speed_config();
  if (qp_st_speed_config_ == NULL) {
    qp_st_speed_config_ = new ::apollo::planning::QpStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.qp_st_speed_config)
  return qp_st_speed_config_;
}
::apollo::planning::QpStSpeedConfig* EMPlannerConfig::release_qp_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.qp_st_speed_config)
  clear_has_qp_st_speed_config();
  ::apollo::planning::QpStSpeedConfig* temp = qp_st_speed_config_;
  qp_st_speed_config_ = NULL;
  return temp;
}
void EMPlannerConfig::set_allocated_qp_st_speed_config(::apollo::planning::QpStSpeedConfig* qp_st_speed_config) {
  delete qp_st_speed_config_;
  qp_st_speed_config_ = qp_st_speed_config;
  if (qp_st_speed_config) {
    set_has_qp_st_speed_config();
  } else {
    clear_has_qp_st_speed_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.qp_st_speed_config)
}

// optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
bool EMPlannerConfig::has_poly_st_speed_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EMPlannerConfig::set_has_poly_st_speed_config() {
  _has_bits_[0] |= 0x00000010u;
}
void EMPlannerConfig::clear_has_poly_st_speed_config() {
  _has_bits_[0] &= ~0x00000010u;
}
void EMPlannerConfig::clear_poly_st_speed_config() {
  if (poly_st_speed_config_ != NULL) poly_st_speed_config_->::apollo::planning::PolyStSpeedConfig::Clear();
  clear_has_poly_st_speed_config();
}
const ::apollo::planning::PolyStSpeedConfig& EMPlannerConfig::poly_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.poly_st_speed_config)
  return poly_st_speed_config_ != NULL ? *poly_st_speed_config_
                         : *::apollo::planning::PolyStSpeedConfig::internal_default_instance();
}
::apollo::planning::PolyStSpeedConfig* EMPlannerConfig::mutable_poly_st_speed_config() {
  set_has_poly_st_speed_config();
  if (poly_st_speed_config_ == NULL) {
    poly_st_speed_config_ = new ::apollo::planning::PolyStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.poly_st_speed_config)
  return poly_st_speed_config_;
}
::apollo::planning::PolyStSpeedConfig* EMPlannerConfig::release_poly_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.poly_st_speed_config)
  clear_has_poly_st_speed_config();
  ::apollo::planning::PolyStSpeedConfig* temp = poly_st_speed_config_;
  poly_st_speed_config_ = NULL;
  return temp;
}
void EMPlannerConfig::set_allocated_poly_st_speed_config(::apollo::planning::PolyStSpeedConfig* poly_st_speed_config) {
  delete poly_st_speed_config_;
  poly_st_speed_config_ = poly_st_speed_config;
  if (poly_st_speed_config) {
    set_has_poly_st_speed_config();
  } else {
    clear_has_poly_st_speed_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.poly_st_speed_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningConfig::kPlannerTypeFieldNumber;
const int PlanningConfig::kEmPlannerConfigFieldNumber;
const int PlanningConfig::kQpSplineReferenceLineSmootherConfigFieldNumber;
const int PlanningConfig::kRuleConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningConfig::PlanningConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlanningConfig)
}
PlanningConfig::PlanningConfig(const PlanningConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rule_config_(from.rule_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_em_planner_config()) {
    em_planner_config_ = new ::apollo::planning::EMPlannerConfig(*from.em_planner_config_);
  } else {
    em_planner_config_ = NULL;
  }
  if (from.has_qp_spline_reference_line_smoother_config()) {
    qp_spline_reference_line_smoother_config_ = new ::apollo::planning::QpSplineReferenceLineSmootherConfig(*from.qp_spline_reference_line_smoother_config_);
  } else {
    qp_spline_reference_line_smoother_config_ = NULL;
  }
  planner_type_ = from.planner_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningConfig)
}

void PlanningConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&em_planner_config_, 0, reinterpret_cast<char*>(&qp_spline_reference_line_smoother_config_) -
    reinterpret_cast<char*>(&em_planner_config_) + sizeof(qp_spline_reference_line_smoother_config_));
  planner_type_ = 1;
}

PlanningConfig::~PlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningConfig)
  SharedDtor();
}

void PlanningConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete em_planner_config_;
  }
  if (this != internal_default_instance()) {
    delete qp_spline_reference_line_smoother_config_;
  }
}

void PlanningConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningConfig& PlanningConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanningConfig* PlanningConfig::New(::google::protobuf::Arena* arena) const {
  PlanningConfig* n = new PlanningConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningConfig)
  rule_config_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_em_planner_config()) {
      GOOGLE_DCHECK(em_planner_config_ != NULL);
      em_planner_config_->::apollo::planning::EMPlannerConfig::Clear();
    }
    if (has_qp_spline_reference_line_smoother_config()) {
      GOOGLE_DCHECK(qp_spline_reference_line_smoother_config_ != NULL);
      qp_spline_reference_line_smoother_config_->::apollo::planning::QpSplineReferenceLineSmootherConfig::Clear();
    }
    planner_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlanningConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.PlanningConfig.PlannerType planner_type = 1 [default = EM];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::PlanningConfig_PlannerType_IsValid(value)) {
            set_planner_type(static_cast< ::apollo::planning::PlanningConfig_PlannerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.EMPlannerConfig em_planner_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_em_planner_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.QpSplineReferenceLineSmootherConfig qp_spline_reference_line_smoother_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qp_spline_reference_line_smoother_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.RuleConfig rule_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rule_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlanningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlanningConfig)
  return false;
#undef DO_
}

void PlanningConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PlanningConfig.PlannerType planner_type = 1 [default = EM];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->planner_type(), output);
  }

  // optional .apollo.planning.EMPlannerConfig em_planner_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->em_planner_config_, output);
  }

  // optional .apollo.planning.QpSplineReferenceLineSmootherConfig qp_spline_reference_line_smoother_config = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->qp_spline_reference_line_smoother_config_, output);
  }

  // repeated .apollo.planning.RuleConfig rule_config = 4;
  for (unsigned int i = 0, n = this->rule_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rule_config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlanningConfig)
}

::google::protobuf::uint8* PlanningConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PlanningConfig.PlannerType planner_type = 1 [default = EM];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->planner_type(), target);
  }

  // optional .apollo.planning.EMPlannerConfig em_planner_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->em_planner_config_, deterministic, target);
  }

  // optional .apollo.planning.QpSplineReferenceLineSmootherConfig qp_spline_reference_line_smoother_config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->qp_spline_reference_line_smoother_config_, deterministic, target);
  }

  // repeated .apollo.planning.RuleConfig rule_config = 4;
  for (unsigned int i = 0, n = this->rule_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->rule_config(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningConfig)
  return target;
}

size_t PlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.planning.RuleConfig rule_config = 4;
  {
    unsigned int count = this->rule_config_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rule_config(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.planning.EMPlannerConfig em_planner_config = 2;
    if (has_em_planner_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->em_planner_config_);
    }

    // optional .apollo.planning.QpSplineReferenceLineSmootherConfig qp_spline_reference_line_smoother_config = 3;
    if (has_qp_spline_reference_line_smoother_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qp_spline_reference_line_smoother_config_);
    }

    // optional .apollo.planning.PlanningConfig.PlannerType planner_type = 1 [default = EM];
    if (has_planner_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->planner_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningConfig)
    MergeFrom(*source);
  }
}

void PlanningConfig::MergeFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rule_config_.MergeFrom(from.rule_config_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_em_planner_config()->::apollo::planning::EMPlannerConfig::MergeFrom(from.em_planner_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_qp_spline_reference_line_smoother_config()->::apollo::planning::QpSplineReferenceLineSmootherConfig::MergeFrom(from.qp_spline_reference_line_smoother_config());
    }
    if (cached_has_bits & 0x00000004u) {
      planner_type_ = from.planner_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningConfig::CopyFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningConfig::IsInitialized() const {
  return true;
}

void PlanningConfig::Swap(PlanningConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningConfig::InternalSwap(PlanningConfig* other) {
  rule_config_.InternalSwap(&other->rule_config_);
  std::swap(em_planner_config_, other->em_planner_config_);
  std::swap(qp_spline_reference_line_smoother_config_, other->qp_spline_reference_line_smoother_config_);
  std::swap(planner_type_, other->planner_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningConfig

// optional .apollo.planning.PlanningConfig.PlannerType planner_type = 1 [default = EM];
bool PlanningConfig::has_planner_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlanningConfig::set_has_planner_type() {
  _has_bits_[0] |= 0x00000004u;
}
void PlanningConfig::clear_has_planner_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlanningConfig::clear_planner_type() {
  planner_type_ = 1;
  clear_has_planner_type();
}
::apollo::planning::PlanningConfig_PlannerType PlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.planner_type)
  return static_cast< ::apollo::planning::PlanningConfig_PlannerType >(planner_type_);
}
void PlanningConfig::set_planner_type(::apollo::planning::PlanningConfig_PlannerType value) {
  assert(::apollo::planning::PlanningConfig_PlannerType_IsValid(value));
  set_has_planner_type();
  planner_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningConfig.planner_type)
}

// optional .apollo.planning.EMPlannerConfig em_planner_config = 2;
bool PlanningConfig::has_em_planner_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanningConfig::set_has_em_planner_config() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanningConfig::clear_has_em_planner_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanningConfig::clear_em_planner_config() {
  if (em_planner_config_ != NULL) em_planner_config_->::apollo::planning::EMPlannerConfig::Clear();
  clear_has_em_planner_config();
}
const ::apollo::planning::EMPlannerConfig& PlanningConfig::em_planner_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.em_planner_config)
  return em_planner_config_ != NULL ? *em_planner_config_
                         : *::apollo::planning::EMPlannerConfig::internal_default_instance();
}
::apollo::planning::EMPlannerConfig* PlanningConfig::mutable_em_planner_config() {
  set_has_em_planner_config();
  if (em_planner_config_ == NULL) {
    em_planner_config_ = new ::apollo::planning::EMPlannerConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.em_planner_config)
  return em_planner_config_;
}
::apollo::planning::EMPlannerConfig* PlanningConfig::release_em_planner_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.em_planner_config)
  clear_has_em_planner_config();
  ::apollo::planning::EMPlannerConfig* temp = em_planner_config_;
  em_planner_config_ = NULL;
  return temp;
}
void PlanningConfig::set_allocated_em_planner_config(::apollo::planning::EMPlannerConfig* em_planner_config) {
  delete em_planner_config_;
  em_planner_config_ = em_planner_config;
  if (em_planner_config) {
    set_has_em_planner_config();
  } else {
    clear_has_em_planner_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.em_planner_config)
}

// optional .apollo.planning.QpSplineReferenceLineSmootherConfig qp_spline_reference_line_smoother_config = 3;
bool PlanningConfig::has_qp_spline_reference_line_smoother_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanningConfig::set_has_qp_spline_reference_line_smoother_config() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanningConfig::clear_has_qp_spline_reference_line_smoother_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanningConfig::clear_qp_spline_reference_line_smoother_config() {
  if (qp_spline_reference_line_smoother_config_ != NULL) qp_spline_reference_line_smoother_config_->::apollo::planning::QpSplineReferenceLineSmootherConfig::Clear();
  clear_has_qp_spline_reference_line_smoother_config();
}
const ::apollo::planning::QpSplineReferenceLineSmootherConfig& PlanningConfig::qp_spline_reference_line_smoother_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.qp_spline_reference_line_smoother_config)
  return qp_spline_reference_line_smoother_config_ != NULL ? *qp_spline_reference_line_smoother_config_
                         : *::apollo::planning::QpSplineReferenceLineSmootherConfig::internal_default_instance();
}
::apollo::planning::QpSplineReferenceLineSmootherConfig* PlanningConfig::mutable_qp_spline_reference_line_smoother_config() {
  set_has_qp_spline_reference_line_smoother_config();
  if (qp_spline_reference_line_smoother_config_ == NULL) {
    qp_spline_reference_line_smoother_config_ = new ::apollo::planning::QpSplineReferenceLineSmootherConfig;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.qp_spline_reference_line_smoother_config)
  return qp_spline_reference_line_smoother_config_;
}
::apollo::planning::QpSplineReferenceLineSmootherConfig* PlanningConfig::release_qp_spline_reference_line_smoother_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.qp_spline_reference_line_smoother_config)
  clear_has_qp_spline_reference_line_smoother_config();
  ::apollo::planning::QpSplineReferenceLineSmootherConfig* temp = qp_spline_reference_line_smoother_config_;
  qp_spline_reference_line_smoother_config_ = NULL;
  return temp;
}
void PlanningConfig::set_allocated_qp_spline_reference_line_smoother_config(::apollo::planning::QpSplineReferenceLineSmootherConfig* qp_spline_reference_line_smoother_config) {
  delete qp_spline_reference_line_smoother_config_;
  qp_spline_reference_line_smoother_config_ = qp_spline_reference_line_smoother_config;
  if (qp_spline_reference_line_smoother_config) {
    set_has_qp_spline_reference_line_smoother_config();
  } else {
    clear_has_qp_spline_reference_line_smoother_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.qp_spline_reference_line_smoother_config)
}

// repeated .apollo.planning.RuleConfig rule_config = 4;
int PlanningConfig::rule_config_size() const {
  return rule_config_.size();
}
void PlanningConfig::clear_rule_config() {
  rule_config_.Clear();
}
const ::apollo::planning::RuleConfig& PlanningConfig::rule_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.rule_config)
  return rule_config_.Get(index);
}
::apollo::planning::RuleConfig* PlanningConfig::mutable_rule_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.rule_config)
  return rule_config_.Mutable(index);
}
::apollo::planning::RuleConfig* PlanningConfig::add_rule_config() {
  // @@protoc_insertion_point(field_add:apollo.planning.PlanningConfig.rule_config)
  return rule_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::RuleConfig >*
PlanningConfig::mutable_rule_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.PlanningConfig.rule_config)
  return &rule_config_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::RuleConfig >&
PlanningConfig::rule_config() const {
  // @@protoc_insertion_point(field_list:apollo.planning.PlanningConfig.rule_config)
  return rule_config_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
