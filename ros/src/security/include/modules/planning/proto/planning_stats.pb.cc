// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/planning_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {
class StatsGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StatsGroup> {
} _StatsGroup_default_instance_;
class PlanningStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanningStats> {
} _PlanningStats_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsGroup, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsGroup, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsGroup, sum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsGroup, avg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsGroup, num_),
  0,
  4,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStats, total_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStats, total_path_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStats, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStats, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStats, kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningStats, dkappa_),
  0,
  1,
  2,
  3,
  4,
  5,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(StatsGroup)},
  { 15, 26, sizeof(PlanningStats)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatsGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanningStats_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/planning_stats.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _StatsGroup_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PlanningStats_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _StatsGroup_default_instance_.DefaultConstruct();
  _PlanningStats_default_instance_.DefaultConstruct();
  _PlanningStats_default_instance_.get_mutable()->total_path_length_ = const_cast< ::apollo::planning::StatsGroup*>(
      ::apollo::planning::StatsGroup::internal_default_instance());
  _PlanningStats_default_instance_.get_mutable()->total_path_time_ = const_cast< ::apollo::planning::StatsGroup*>(
      ::apollo::planning::StatsGroup::internal_default_instance());
  _PlanningStats_default_instance_.get_mutable()->v_ = const_cast< ::apollo::planning::StatsGroup*>(
      ::apollo::planning::StatsGroup::internal_default_instance());
  _PlanningStats_default_instance_.get_mutable()->a_ = const_cast< ::apollo::planning::StatsGroup*>(
      ::apollo::planning::StatsGroup::internal_default_instance());
  _PlanningStats_default_instance_.get_mutable()->kappa_ = const_cast< ::apollo::planning::StatsGroup*>(
      ::apollo::planning::StatsGroup::internal_default_instance());
  _PlanningStats_default_instance_.get_mutable()->dkappa_ = const_cast< ::apollo::planning::StatsGroup*>(
      ::apollo::planning::StatsGroup::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n+modules/planning/proto/planning_stats."
      "proto\022\017apollo.planning\"Z\n\nStatsGroup\022\013\n\003"
      "max\030\001 \001(\001\022\030\n\003min\030\002 \001(\001:\01310000000000\022\013\n\003s"
      "um\030\003 \001(\001\022\013\n\003avg\030\004 \001(\001\022\013\n\003num\030\005 \001(\005\"\246\002\n\rP"
      "lanningStats\0226\n\021total_path_length\030\001 \001(\0132"
      "\033.apollo.planning.StatsGroup\0224\n\017total_pa"
      "th_time\030\002 \001(\0132\033.apollo.planning.StatsGro"
      "up\022&\n\001v\030\003 \001(\0132\033.apollo.planning.StatsGro"
      "up\022&\n\001a\030\004 \001(\0132\033.apollo.planning.StatsGro"
      "up\022*\n\005kappa\030\005 \001(\0132\033.apollo.planning.Stat"
      "sGroup\022+\n\006dkappa\030\006 \001(\0132\033.apollo.planning"
      ".StatsGroup"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 451);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/planning_stats.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatsGroup::kMaxFieldNumber;
const int StatsGroup::kMinFieldNumber;
const int StatsGroup::kSumFieldNumber;
const int StatsGroup::kAvgFieldNumber;
const int StatsGroup::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatsGroup::StatsGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StatsGroup)
}
StatsGroup::StatsGroup(const StatsGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_, &from.max_,
    reinterpret_cast<char*>(&min_) -
    reinterpret_cast<char*>(&max_) + sizeof(min_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StatsGroup)
}

void StatsGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&max_, 0, reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&max_) + sizeof(num_));
  min_ = 10000000000;
}

StatsGroup::~StatsGroup() {
  // @@protoc_insertion_point(destructor:apollo.planning.StatsGroup)
  SharedDtor();
}

void StatsGroup::SharedDtor() {
}

void StatsGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatsGroup::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatsGroup& StatsGroup::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatsGroup* StatsGroup::New(::google::protobuf::Arena* arena) const {
  StatsGroup* n = new StatsGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StatsGroup)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&max_, 0, reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&max_) + sizeof(num_));
    min_ = 10000000000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StatsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.StatsGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min = 2 [default = 10000000000];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_sum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double avg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_avg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.StatsGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.StatsGroup)
  return false;
#undef DO_
}

void StatsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.StatsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max(), output);
  }

  // optional double min = 2 [default = 10000000000];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min(), output);
  }

  // optional double sum = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sum(), output);
  }

  // optional double avg = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->avg(), output);
  }

  // optional int32 num = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.StatsGroup)
}

::google::protobuf::uint8* StatsGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StatsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max(), target);
  }

  // optional double min = 2 [default = 10000000000];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min(), target);
  }

  // optional double sum = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sum(), target);
  }

  // optional double avg = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->avg(), target);
  }

  // optional int32 num = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StatsGroup)
  return target;
}

size_t StatsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StatsGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double max = 1;
    if (has_max()) {
      total_size += 1 + 8;
    }

    // optional double sum = 3;
    if (has_sum()) {
      total_size += 1 + 8;
    }

    // optional double avg = 4;
    if (has_avg()) {
      total_size += 1 + 8;
    }

    // optional int32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional double min = 2 [default = 10000000000];
    if (has_min()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatsGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StatsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const StatsGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatsGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StatsGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StatsGroup)
    MergeFrom(*source);
  }
}

void StatsGroup::MergeFrom(const StatsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StatsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000002u) {
      sum_ = from.sum_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_ = from.avg_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_ = from.min_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatsGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StatsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsGroup::CopyFrom(const StatsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StatsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsGroup::IsInitialized() const {
  return true;
}

void StatsGroup::Swap(StatsGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatsGroup::InternalSwap(StatsGroup* other) {
  std::swap(max_, other->max_);
  std::swap(sum_, other->sum_);
  std::swap(avg_, other->avg_);
  std::swap(num_, other->num_);
  std::swap(min_, other->min_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatsGroup::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatsGroup

// optional double max = 1;
bool StatsGroup::has_max() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StatsGroup::set_has_max() {
  _has_bits_[0] |= 0x00000001u;
}
void StatsGroup::clear_has_max() {
  _has_bits_[0] &= ~0x00000001u;
}
void StatsGroup::clear_max() {
  max_ = 0;
  clear_has_max();
}
double StatsGroup::max() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.max)
  return max_;
}
void StatsGroup::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.max)
}

// optional double min = 2 [default = 10000000000];
bool StatsGroup::has_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StatsGroup::set_has_min() {
  _has_bits_[0] |= 0x00000010u;
}
void StatsGroup::clear_has_min() {
  _has_bits_[0] &= ~0x00000010u;
}
void StatsGroup::clear_min() {
  min_ = 10000000000;
  clear_has_min();
}
double StatsGroup::min() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.min)
  return min_;
}
void StatsGroup::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.min)
}

// optional double sum = 3;
bool StatsGroup::has_sum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StatsGroup::set_has_sum() {
  _has_bits_[0] |= 0x00000002u;
}
void StatsGroup::clear_has_sum() {
  _has_bits_[0] &= ~0x00000002u;
}
void StatsGroup::clear_sum() {
  sum_ = 0;
  clear_has_sum();
}
double StatsGroup::sum() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.sum)
  return sum_;
}
void StatsGroup::set_sum(double value) {
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.sum)
}

// optional double avg = 4;
bool StatsGroup::has_avg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StatsGroup::set_has_avg() {
  _has_bits_[0] |= 0x00000004u;
}
void StatsGroup::clear_has_avg() {
  _has_bits_[0] &= ~0x00000004u;
}
void StatsGroup::clear_avg() {
  avg_ = 0;
  clear_has_avg();
}
double StatsGroup::avg() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.avg)
  return avg_;
}
void StatsGroup::set_avg(double value) {
  set_has_avg();
  avg_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.avg)
}

// optional int32 num = 5;
bool StatsGroup::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StatsGroup::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
void StatsGroup::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void StatsGroup::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 StatsGroup::num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.num)
  return num_;
}
void StatsGroup::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningStats::kTotalPathLengthFieldNumber;
const int PlanningStats::kTotalPathTimeFieldNumber;
const int PlanningStats::kVFieldNumber;
const int PlanningStats::kAFieldNumber;
const int PlanningStats::kKappaFieldNumber;
const int PlanningStats::kDkappaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningStats::PlanningStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlanningStats)
}
PlanningStats::PlanningStats(const PlanningStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_total_path_length()) {
    total_path_length_ = new ::apollo::planning::StatsGroup(*from.total_path_length_);
  } else {
    total_path_length_ = NULL;
  }
  if (from.has_total_path_time()) {
    total_path_time_ = new ::apollo::planning::StatsGroup(*from.total_path_time_);
  } else {
    total_path_time_ = NULL;
  }
  if (from.has_v()) {
    v_ = new ::apollo::planning::StatsGroup(*from.v_);
  } else {
    v_ = NULL;
  }
  if (from.has_a()) {
    a_ = new ::apollo::planning::StatsGroup(*from.a_);
  } else {
    a_ = NULL;
  }
  if (from.has_kappa()) {
    kappa_ = new ::apollo::planning::StatsGroup(*from.kappa_);
  } else {
    kappa_ = NULL;
  }
  if (from.has_dkappa()) {
    dkappa_ = new ::apollo::planning::StatsGroup(*from.dkappa_);
  } else {
    dkappa_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningStats)
}

void PlanningStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&total_path_length_, 0, reinterpret_cast<char*>(&dkappa_) -
    reinterpret_cast<char*>(&total_path_length_) + sizeof(dkappa_));
}

PlanningStats::~PlanningStats() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningStats)
  SharedDtor();
}

void PlanningStats::SharedDtor() {
  if (this != internal_default_instance()) {
    delete total_path_length_;
  }
  if (this != internal_default_instance()) {
    delete total_path_time_;
  }
  if (this != internal_default_instance()) {
    delete v_;
  }
  if (this != internal_default_instance()) {
    delete a_;
  }
  if (this != internal_default_instance()) {
    delete kappa_;
  }
  if (this != internal_default_instance()) {
    delete dkappa_;
  }
}

void PlanningStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningStats::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningStats& PlanningStats::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanningStats* PlanningStats::New(::google::protobuf::Arena* arena) const {
  PlanningStats* n = new PlanningStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningStats)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_total_path_length()) {
      GOOGLE_DCHECK(total_path_length_ != NULL);
      total_path_length_->::apollo::planning::StatsGroup::Clear();
    }
    if (has_total_path_time()) {
      GOOGLE_DCHECK(total_path_time_ != NULL);
      total_path_time_->::apollo::planning::StatsGroup::Clear();
    }
    if (has_v()) {
      GOOGLE_DCHECK(v_ != NULL);
      v_->::apollo::planning::StatsGroup::Clear();
    }
    if (has_a()) {
      GOOGLE_DCHECK(a_ != NULL);
      a_->::apollo::planning::StatsGroup::Clear();
    }
    if (has_kappa()) {
      GOOGLE_DCHECK(kappa_ != NULL);
      kappa_->::apollo::planning::StatsGroup::Clear();
    }
    if (has_dkappa()) {
      GOOGLE_DCHECK(dkappa_ != NULL);
      dkappa_->::apollo::planning::StatsGroup::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlanningStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.StatsGroup total_path_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_path_length()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.StatsGroup total_path_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_path_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.StatsGroup v = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.StatsGroup a = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.StatsGroup kappa = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kappa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.StatsGroup dkappa = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dkappa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlanningStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlanningStats)
  return false;
#undef DO_
}

void PlanningStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlanningStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.StatsGroup total_path_length = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->total_path_length_, output);
  }

  // optional .apollo.planning.StatsGroup total_path_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->total_path_time_, output);
  }

  // optional .apollo.planning.StatsGroup v = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->v_, output);
  }

  // optional .apollo.planning.StatsGroup a = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->a_, output);
  }

  // optional .apollo.planning.StatsGroup kappa = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->kappa_, output);
  }

  // optional .apollo.planning.StatsGroup dkappa = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->dkappa_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlanningStats)
}

::google::protobuf::uint8* PlanningStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.StatsGroup total_path_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->total_path_length_, deterministic, target);
  }

  // optional .apollo.planning.StatsGroup total_path_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->total_path_time_, deterministic, target);
  }

  // optional .apollo.planning.StatsGroup v = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->v_, deterministic, target);
  }

  // optional .apollo.planning.StatsGroup a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->a_, deterministic, target);
  }

  // optional .apollo.planning.StatsGroup kappa = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->kappa_, deterministic, target);
  }

  // optional .apollo.planning.StatsGroup dkappa = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->dkappa_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningStats)
  return target;
}

size_t PlanningStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .apollo.planning.StatsGroup total_path_length = 1;
    if (has_total_path_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->total_path_length_);
    }

    // optional .apollo.planning.StatsGroup total_path_time = 2;
    if (has_total_path_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->total_path_time_);
    }

    // optional .apollo.planning.StatsGroup v = 3;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->v_);
    }

    // optional .apollo.planning.StatsGroup a = 4;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->a_);
    }

    // optional .apollo.planning.StatsGroup kappa = 5;
    if (has_kappa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kappa_);
    }

    // optional .apollo.planning.StatsGroup dkappa = 6;
    if (has_dkappa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dkappa_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningStats)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningStats)
    MergeFrom(*source);
  }
}

void PlanningStats::MergeFrom(const PlanningStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_total_path_length()->::apollo::planning::StatsGroup::MergeFrom(from.total_path_length());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_total_path_time()->::apollo::planning::StatsGroup::MergeFrom(from.total_path_time());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_v()->::apollo::planning::StatsGroup::MergeFrom(from.v());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_a()->::apollo::planning::StatsGroup::MergeFrom(from.a());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_kappa()->::apollo::planning::StatsGroup::MergeFrom(from.kappa());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_dkappa()->::apollo::planning::StatsGroup::MergeFrom(from.dkappa());
    }
  }
}

void PlanningStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningStats::CopyFrom(const PlanningStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStats::IsInitialized() const {
  return true;
}

void PlanningStats::Swap(PlanningStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningStats::InternalSwap(PlanningStats* other) {
  std::swap(total_path_length_, other->total_path_length_);
  std::swap(total_path_time_, other->total_path_time_);
  std::swap(v_, other->v_);
  std::swap(a_, other->a_);
  std::swap(kappa_, other->kappa_);
  std::swap(dkappa_, other->dkappa_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningStats::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningStats

// optional .apollo.planning.StatsGroup total_path_length = 1;
bool PlanningStats::has_total_path_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanningStats::set_has_total_path_length() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanningStats::clear_has_total_path_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanningStats::clear_total_path_length() {
  if (total_path_length_ != NULL) total_path_length_->::apollo::planning::StatsGroup::Clear();
  clear_has_total_path_length();
}
const ::apollo::planning::StatsGroup& PlanningStats::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.total_path_length)
  return total_path_length_ != NULL ? *total_path_length_
                         : *::apollo::planning::StatsGroup::internal_default_instance();
}
::apollo::planning::StatsGroup* PlanningStats::mutable_total_path_length() {
  set_has_total_path_length();
  if (total_path_length_ == NULL) {
    total_path_length_ = new ::apollo::planning::StatsGroup;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.total_path_length)
  return total_path_length_;
}
::apollo::planning::StatsGroup* PlanningStats::release_total_path_length() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.total_path_length)
  clear_has_total_path_length();
  ::apollo::planning::StatsGroup* temp = total_path_length_;
  total_path_length_ = NULL;
  return temp;
}
void PlanningStats::set_allocated_total_path_length(::apollo::planning::StatsGroup* total_path_length) {
  delete total_path_length_;
  total_path_length_ = total_path_length;
  if (total_path_length) {
    set_has_total_path_length();
  } else {
    clear_has_total_path_length();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.total_path_length)
}

// optional .apollo.planning.StatsGroup total_path_time = 2;
bool PlanningStats::has_total_path_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanningStats::set_has_total_path_time() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanningStats::clear_has_total_path_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanningStats::clear_total_path_time() {
  if (total_path_time_ != NULL) total_path_time_->::apollo::planning::StatsGroup::Clear();
  clear_has_total_path_time();
}
const ::apollo::planning::StatsGroup& PlanningStats::total_path_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.total_path_time)
  return total_path_time_ != NULL ? *total_path_time_
                         : *::apollo::planning::StatsGroup::internal_default_instance();
}
::apollo::planning::StatsGroup* PlanningStats::mutable_total_path_time() {
  set_has_total_path_time();
  if (total_path_time_ == NULL) {
    total_path_time_ = new ::apollo::planning::StatsGroup;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.total_path_time)
  return total_path_time_;
}
::apollo::planning::StatsGroup* PlanningStats::release_total_path_time() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.total_path_time)
  clear_has_total_path_time();
  ::apollo::planning::StatsGroup* temp = total_path_time_;
  total_path_time_ = NULL;
  return temp;
}
void PlanningStats::set_allocated_total_path_time(::apollo::planning::StatsGroup* total_path_time) {
  delete total_path_time_;
  total_path_time_ = total_path_time;
  if (total_path_time) {
    set_has_total_path_time();
  } else {
    clear_has_total_path_time();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.total_path_time)
}

// optional .apollo.planning.StatsGroup v = 3;
bool PlanningStats::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlanningStats::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
void PlanningStats::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlanningStats::clear_v() {
  if (v_ != NULL) v_->::apollo::planning::StatsGroup::Clear();
  clear_has_v();
}
const ::apollo::planning::StatsGroup& PlanningStats::v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.v)
  return v_ != NULL ? *v_
                         : *::apollo::planning::StatsGroup::internal_default_instance();
}
::apollo::planning::StatsGroup* PlanningStats::mutable_v() {
  set_has_v();
  if (v_ == NULL) {
    v_ = new ::apollo::planning::StatsGroup;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.v)
  return v_;
}
::apollo::planning::StatsGroup* PlanningStats::release_v() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.v)
  clear_has_v();
  ::apollo::planning::StatsGroup* temp = v_;
  v_ = NULL;
  return temp;
}
void PlanningStats::set_allocated_v(::apollo::planning::StatsGroup* v) {
  delete v_;
  v_ = v;
  if (v) {
    set_has_v();
  } else {
    clear_has_v();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.v)
}

// optional .apollo.planning.StatsGroup a = 4;
bool PlanningStats::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlanningStats::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
void PlanningStats::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlanningStats::clear_a() {
  if (a_ != NULL) a_->::apollo::planning::StatsGroup::Clear();
  clear_has_a();
}
const ::apollo::planning::StatsGroup& PlanningStats::a() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.a)
  return a_ != NULL ? *a_
                         : *::apollo::planning::StatsGroup::internal_default_instance();
}
::apollo::planning::StatsGroup* PlanningStats::mutable_a() {
  set_has_a();
  if (a_ == NULL) {
    a_ = new ::apollo::planning::StatsGroup;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.a)
  return a_;
}
::apollo::planning::StatsGroup* PlanningStats::release_a() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.a)
  clear_has_a();
  ::apollo::planning::StatsGroup* temp = a_;
  a_ = NULL;
  return temp;
}
void PlanningStats::set_allocated_a(::apollo::planning::StatsGroup* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.a)
}

// optional .apollo.planning.StatsGroup kappa = 5;
bool PlanningStats::has_kappa() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlanningStats::set_has_kappa() {
  _has_bits_[0] |= 0x00000010u;
}
void PlanningStats::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlanningStats::clear_kappa() {
  if (kappa_ != NULL) kappa_->::apollo::planning::StatsGroup::Clear();
  clear_has_kappa();
}
const ::apollo::planning::StatsGroup& PlanningStats::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.kappa)
  return kappa_ != NULL ? *kappa_
                         : *::apollo::planning::StatsGroup::internal_default_instance();
}
::apollo::planning::StatsGroup* PlanningStats::mutable_kappa() {
  set_has_kappa();
  if (kappa_ == NULL) {
    kappa_ = new ::apollo::planning::StatsGroup;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.kappa)
  return kappa_;
}
::apollo::planning::StatsGroup* PlanningStats::release_kappa() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.kappa)
  clear_has_kappa();
  ::apollo::planning::StatsGroup* temp = kappa_;
  kappa_ = NULL;
  return temp;
}
void PlanningStats::set_allocated_kappa(::apollo::planning::StatsGroup* kappa) {
  delete kappa_;
  kappa_ = kappa;
  if (kappa) {
    set_has_kappa();
  } else {
    clear_has_kappa();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.kappa)
}

// optional .apollo.planning.StatsGroup dkappa = 6;
bool PlanningStats::has_dkappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlanningStats::set_has_dkappa() {
  _has_bits_[0] |= 0x00000020u;
}
void PlanningStats::clear_has_dkappa() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlanningStats::clear_dkappa() {
  if (dkappa_ != NULL) dkappa_->::apollo::planning::StatsGroup::Clear();
  clear_has_dkappa();
}
const ::apollo::planning::StatsGroup& PlanningStats::dkappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.dkappa)
  return dkappa_ != NULL ? *dkappa_
                         : *::apollo::planning::StatsGroup::internal_default_instance();
}
::apollo::planning::StatsGroup* PlanningStats::mutable_dkappa() {
  set_has_dkappa();
  if (dkappa_ == NULL) {
    dkappa_ = new ::apollo::planning::StatsGroup;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.dkappa)
  return dkappa_;
}
::apollo::planning::StatsGroup* PlanningStats::release_dkappa() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.dkappa)
  clear_has_dkappa();
  ::apollo::planning::StatsGroup* temp = dkappa_;
  dkappa_ = NULL;
  return temp;
}
void PlanningStats::set_allocated_dkappa(::apollo::planning::StatsGroup* dkappa) {
  delete dkappa_;
  dkappa_ = dkappa;
  if (dkappa) {
    set_has_dkappa();
  } else {
    clear_has_dkappa();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.dkappa)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
