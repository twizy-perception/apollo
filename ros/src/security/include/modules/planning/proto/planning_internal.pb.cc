// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_internal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/planning_internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning_internal {
class DebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug> {
} _Debug_default_instance_;
class SpeedPlanDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpeedPlan> {
} _SpeedPlan_default_instance_;
class StGraphBoundaryDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StGraphBoundaryDebug> {
} _StGraphBoundaryDebug_default_instance_;
class SLFrameDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLFrameDebug> {
} _SLFrameDebug_default_instance_;
class STGraphDebug_STGraphSpeedConstraintDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<STGraphDebug_STGraphSpeedConstraint> {
} _STGraphDebug_STGraphSpeedConstraint_default_instance_;
class STGraphDebug_STGraphKernelCuiseRefDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<STGraphDebug_STGraphKernelCuiseRef> {
} _STGraphDebug_STGraphKernelCuiseRef_default_instance_;
class STGraphDebug_STGraphKernelFollowRefDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<STGraphDebug_STGraphKernelFollowRef> {
} _STGraphDebug_STGraphKernelFollowRef_default_instance_;
class STGraphDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<STGraphDebug> {
} _STGraphDebug_default_instance_;
class SignalLightDebug_SignalDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SignalLightDebug_SignalDebug> {
} _SignalLightDebug_SignalDebug_default_instance_;
class SignalLightDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SignalLightDebug> {
} _SignalLightDebug_default_instance_;
class DecisionTagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DecisionTag> {
} _DecisionTag_default_instance_;
class ObstacleDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObstacleDebug> {
} _ObstacleDebug_default_instance_;
class ReferenceLineDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReferenceLineDebug> {
} _ReferenceLineDebug_default_instance_;
class ChangeLaneStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChangeLaneState> {
} _ChangeLaneState_default_instance_;
class SampleLayerDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SampleLayerDebug> {
} _SampleLayerDebug_default_instance_;
class DpPolyGraphDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DpPolyGraphDebug> {
} _DpPolyGraphDebug_default_instance_;
class PlanningDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanningData> {
} _PlanningData_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, planning_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPlan, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPlan, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPlan, speed_point_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, type_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, sampled_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, static_obstacle_lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, dynamic_obstacle_lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, static_obstacle_upper_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, dynamic_obstacle_upper_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, map_lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, map_upper_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, sl_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, aggregated_boundary_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, aggregated_boundary_low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, aggregated_boundary_high_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, upper_bound_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelCuiseRef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelCuiseRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelCuiseRef, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelCuiseRef, cruise_line_s_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelFollowRef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelFollowRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelFollowRef, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelFollowRef, follow_line_s_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, speed_profile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, speed_constraint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, kernel_cruise_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, kernel_follow_ref_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, light_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, light_stop_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, adc_stop_deacceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, is_stop_wall_created_),
  0,
  2,
  1,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, adc_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, adc_front_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, signal_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTag, decider_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTag, decision_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, sl_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, decision_tag_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, is_change_lane_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, is_drivable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, is_protected_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneState, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneState, path_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLaneState, timestamp_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleLayerDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleLayerDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleLayerDebug, sl_point_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyGraphDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyGraphDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyGraphDebug, sample_layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyGraphDebug, min_cost_point_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, adc_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, chassis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, routing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, init_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, speed_plan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, st_graph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, sl_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, prediction_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, signal_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, reference_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, dp_poly_graph_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  ~0u,
  ~0u,
  6,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(Debug)},
  { 7, 14, sizeof(SpeedPlan)},
  { 16, 24, sizeof(StGraphBoundaryDebug)},
  { 27, 44, sizeof(SLFrameDebug)},
  { 56, 64, sizeof(STGraphDebug_STGraphSpeedConstraint)},
  { 67, 74, sizeof(STGraphDebug_STGraphKernelCuiseRef)},
  { 76, 83, sizeof(STGraphDebug_STGraphKernelFollowRef)},
  { 85, 97, sizeof(STGraphDebug)},
  { 104, 114, sizeof(SignalLightDebug_SignalDebug)},
  { 119, 127, sizeof(SignalLightDebug)},
  { 130, 137, sizeof(DecisionTag)},
  { 139, 147, sizeof(ObstacleDebug)},
  { 150, 161, sizeof(ReferenceLineDebug)},
  { 167, 175, sizeof(ChangeLaneState)},
  { 178, 184, sizeof(SampleLayerDebug)},
  { 185, 192, sizeof(DpPolyGraphDebug)},
  { 194, 212, sizeof(PlanningData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpeedPlan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StGraphBoundaryDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLFrameDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_STGraphDebug_STGraphSpeedConstraint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_STGraphDebug_STGraphKernelCuiseRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_STGraphDebug_STGraphKernelFollowRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_STGraphDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignalLightDebug_SignalDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignalLightDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecisionTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObstacleDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReferenceLineDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeLaneState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SampleLayerDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DpPolyGraphDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanningData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/planning_internal.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

}  // namespace

void TableStruct::Shutdown() {
  _Debug_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SpeedPlan_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _StGraphBoundaryDebug_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SLFrameDebug_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _STGraphDebug_STGraphSpeedConstraint_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _STGraphDebug_STGraphKernelCuiseRef_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _STGraphDebug_STGraphKernelFollowRef_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _STGraphDebug_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SignalLightDebug_SignalDebug_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SignalLightDebug_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _DecisionTag_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ObstacleDebug_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ReferenceLineDebug_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ChangeLaneState_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _SampleLayerDebug_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _DpPolyGraphDebug_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _PlanningData_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::apollo::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::InitDefaults();
  ::apollo::localization::protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::InitDefaults();
  ::apollo::routing::protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  ::apollo::perception::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::InitDefaults();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fsl_5fboundary_2eproto::InitDefaults();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  _Debug_default_instance_.DefaultConstruct();
  _SpeedPlan_default_instance_.DefaultConstruct();
  _StGraphBoundaryDebug_default_instance_.DefaultConstruct();
  _SLFrameDebug_default_instance_.DefaultConstruct();
  _STGraphDebug_STGraphSpeedConstraint_default_instance_.DefaultConstruct();
  _STGraphDebug_STGraphKernelCuiseRef_default_instance_.DefaultConstruct();
  _STGraphDebug_STGraphKernelFollowRef_default_instance_.DefaultConstruct();
  _STGraphDebug_default_instance_.DefaultConstruct();
  _SignalLightDebug_SignalDebug_default_instance_.DefaultConstruct();
  _SignalLightDebug_default_instance_.DefaultConstruct();
  _DecisionTag_default_instance_.DefaultConstruct();
  _ObstacleDebug_default_instance_.DefaultConstruct();
  _ReferenceLineDebug_default_instance_.DefaultConstruct();
  _ChangeLaneState_default_instance_.DefaultConstruct();
  _SampleLayerDebug_default_instance_.DefaultConstruct();
  _DpPolyGraphDebug_default_instance_.DefaultConstruct();
  _PlanningData_default_instance_.DefaultConstruct();
  _Debug_default_instance_.get_mutable()->planning_data_ = const_cast< ::apollo::planning_internal::PlanningData*>(
      ::apollo::planning_internal::PlanningData::internal_default_instance());
  _STGraphDebug_default_instance_.get_mutable()->speed_constraint_ = const_cast< ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint*>(
      ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::internal_default_instance());
  _STGraphDebug_default_instance_.get_mutable()->kernel_cruise_ref_ = const_cast< ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef*>(
      ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::internal_default_instance());
  _STGraphDebug_default_instance_.get_mutable()->kernel_follow_ref_ = const_cast< ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef*>(
      ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::internal_default_instance());
  _DecisionTag_default_instance_.get_mutable()->decision_ = const_cast< ::apollo::planning::ObjectDecisionType*>(
      ::apollo::planning::ObjectDecisionType::internal_default_instance());
  _ObstacleDebug_default_instance_.get_mutable()->sl_boundary_ = const_cast< ::apollo::planning::SLBoundary*>(
      ::apollo::planning::SLBoundary::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->adc_position_ = const_cast< ::apollo::localization::LocalizationEstimate*>(
      ::apollo::localization::LocalizationEstimate::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->chassis_ = const_cast< ::apollo::canbus::Chassis*>(
      ::apollo::canbus::Chassis::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->routing_ = const_cast< ::apollo::routing::RoutingResponse*>(
      ::apollo::routing::RoutingResponse::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->init_point_ = const_cast< ::apollo::common::TrajectoryPoint*>(
      ::apollo::common::TrajectoryPoint::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->prediction_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->signal_light_ = const_cast< ::apollo::planning_internal::SignalLightDebug*>(
      ::apollo::planning_internal::SignalLightDebug::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->dp_poly_graph_ = const_cast< ::apollo::planning_internal::DpPolyGraphDebug*>(
      ::apollo::planning_internal::DpPolyGraphDebug::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n.modules/planning/proto/planning_intern"
      "al.proto\022\030apollo.planning_internal\032!modu"
      "les/common/proto/header.proto\032\"modules/c"
      "anbus/proto/chassis.proto\032$modules/commo"
      "n/proto/pnc_point.proto\032-modules/localiz"
      "ation/proto/localization.proto\032#modules/"
      "routing/proto/routing.proto\0326modules/per"
      "ception/proto/traffic_light_detection.pr"
      "oto\032(modules/planning/proto/sl_boundary."
      "proto\032%modules/planning/proto/decision.p"
      "roto\"F\n\005Debug\022=\n\rplanning_data\030\002 \001(\0132&.a"
      "pollo.planning_internal.PlanningData\"I\n\t"
      "SpeedPlan\022\014\n\004name\030\001 \001(\t\022.\n\013speed_point\030\002"
      " \003(\0132\031.apollo.common.SpeedPoint\"\340\002\n\024StGr"
      "aphBoundaryDebug\022\014\n\004name\030\001 \001(\t\022(\n\005point\030"
      "\002 \003(\0132\031.apollo.common.SpeedPoint\022K\n\004type"
      "\030\003 \001(\0162=.apollo.planning_internal.StGrap"
      "hBoundaryDebug.StBoundaryType\"\302\001\n\016StBoun"
      "daryType\022\034\n\030ST_BOUNDARY_TYPE_UNKNOWN\020\001\022\031"
      "\n\025ST_BOUNDARY_TYPE_STOP\020\002\022\033\n\027ST_BOUNDARY"
      "_TYPE_FOLLOW\020\003\022\032\n\026ST_BOUNDARY_TYPE_YIELD"
      "\020\004\022\035\n\031ST_BOUNDARY_TYPE_OVERTAKE\020\005\022\037\n\033ST_"
      "BOUNDARY_TYPE_KEEP_CLEAR\020\006\"\202\003\n\014SLFrameDe"
      "bug\022\014\n\004name\030\001 \001(\t\022\021\n\tsampled_s\030\002 \003(\001\022#\n\033"
      "static_obstacle_lower_bound\030\003 \003(\001\022$\n\034dyn"
      "amic_obstacle_lower_bound\030\004 \003(\001\022#\n\033stati"
      "c_obstacle_upper_bound\030\005 \003(\001\022$\n\034dynamic_"
      "obstacle_upper_bound\030\006 \003(\001\022\027\n\017map_lower_"
      "bound\030\007 \003(\001\022\027\n\017map_upper_bound\030\010 \003(\001\022\'\n\007"
      "sl_path\030\t \003(\0132\026.apollo.common.SLPoint\022\035\n"
      "\025aggregated_boundary_s\030\n \003(\001\022\037\n\027aggregat"
      "ed_boundary_low\030\013 \003(\001\022 \n\030aggregated_boun"
      "dary_high\030\014 \003(\001\"\222\005\n\014STGraphDebug\022\014\n\004name"
      "\030\001 \001(\t\022@\n\010boundary\030\002 \003(\0132..apollo.planni"
      "ng_internal.StGraphBoundaryDebug\022.\n\013spee"
      "d_limit\030\003 \003(\0132\031.apollo.common.SpeedPoint"
      "\0220\n\rspeed_profile\030\004 \003(\0132\031.apollo.common."
      "SpeedPoint\022W\n\020speed_constraint\030\005 \001(\0132=.a"
      "pollo.planning_internal.STGraphDebug.STG"
      "raphSpeedConstraint\022W\n\021kernel_cruise_ref"
      "\030\006 \001(\0132<.apollo.planning_internal.STGrap"
      "hDebug.STGraphKernelCuiseRef\022X\n\021kernel_f"
      "ollow_ref\030\007 \001(\0132=.apollo.planning_intern"
      "al.STGraphDebug.STGraphKernelFollowRef\032M"
      "\n\026STGraphSpeedConstraint\022\t\n\001t\030\001 \003(\001\022\023\n\013l"
      "ower_bound\030\002 \003(\001\022\023\n\013upper_bound\030\003 \003(\001\0329\n"
      "\025STGraphKernelCuiseRef\022\t\n\001t\030\001 \003(\001\022\025\n\rcru"
      "ise_line_s\030\002 \003(\001\032:\n\026STGraphKernelFollowR"
      "ef\022\t\n\001t\030\001 \003(\001\022\025\n\rfollow_line_s\030\002 \003(\001\"\257\002\n"
      "\020SignalLightDebug\022\021\n\tadc_speed\030\001 \001(\001\022\023\n\013"
      "adc_front_s\030\002 \001(\001\022F\n\006signal\030\003 \003(\01326.apol"
      "lo.planning_internal.SignalLightDebug.Si"
      "gnalDebug\032\252\001\n\013SignalDebug\022\020\n\010light_id\030\001 "
      "\001(\t\0224\n\005color\030\002 \001(\0162%.apollo.perception.T"
      "rafficLight.Color\022\024\n\014light_stop_s\030\003 \001(\001\022"
      "\037\n\027adc_stop_deacceleration\030\004 \001(\001\022\034\n\024is_s"
      "top_wall_created\030\005 \001(\010\"Y\n\013DecisionTag\022\023\n"
      "\013decider_tag\030\001 \001(\t\0225\n\010decision\030\002 \001(\0132#.a"
      "pollo.planning.ObjectDecisionType\"\212\001\n\rOb"
      "stacleDebug\022\n\n\002id\030\001 \001(\t\0220\n\013sl_boundary\030\002"
      " \001(\0132\033.apollo.planning.SLBoundary\022;\n\014dec"
      "ision_tag\030\003 \003(\0132%.apollo.planning_intern"
      "al.DecisionTag\"\206\001\n\022ReferenceLineDebug\022\n\n"
      "\002id\030\001 \001(\t\022\016\n\006length\030\002 \001(\001\022\014\n\004cost\030\003 \001(\001\022"
      "\033\n\023is_change_lane_path\030\004 \001(\010\022\023\n\013is_driva"
      "ble\030\005 \001(\010\022\024\n\014is_protected\030\006 \001(\010\"\303\001\n\017Chan"
      "geLaneState\022>\n\005state\030\001 \001(\0162/.apollo.plan"
      "ning_internal.ChangeLaneState.State\022\017\n\007p"
      "ath_id\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\001\"L\n\005State"
      "\022\022\n\016IN_CHANGE_LANE\020\001\022\026\n\022CHANGE_LANE_FAIL"
      "ED\020\002\022\027\n\023CHANGE_LANE_SUCCESS\020\003\"<\n\020SampleL"
      "ayerDebug\022(\n\010sl_point\030\001 \003(\0132\026.apollo.com"
      "mon.SLPoint\"\204\001\n\020DpPolyGraphDebug\022@\n\014samp"
      "le_layer\030\001 \003(\0132*.apollo.planning_interna"
      "l.SampleLayerDebug\022.\n\016min_cost_point\030\002 \003"
      "(\0132\026.apollo.common.SLPoint\"\346\005\n\014PlanningD"
      "ata\022\?\n\014adc_position\030\007 \001(\0132).apollo.local"
      "ization.LocalizationEstimate\022\'\n\007chassis\030"
      "\010 \001(\0132\026.apollo.canbus.Chassis\0220\n\007routing"
      "\030\t \001(\0132\037.apollo.routing.RoutingResponse\022"
      "2\n\ninit_point\030\n \001(\0132\036.apollo.common.Traj"
      "ectoryPoint\022!\n\004path\030\006 \003(\0132\023.apollo.commo"
      "n.Path\0227\n\nspeed_plan\030\r \003(\0132#.apollo.plan"
      "ning_internal.SpeedPlan\0228\n\010st_graph\030\016 \003("
      "\0132&.apollo.planning_internal.STGraphDebu"
      "g\0228\n\010sl_frame\030\017 \003(\0132&.apollo.planning_in"
      "ternal.SLFrameDebug\0220\n\021prediction_header"
      "\030\020 \001(\0132\025.apollo.common.Header\022@\n\014signal_"
      "light\030\021 \001(\0132*.apollo.planning_internal.S"
      "ignalLightDebug\0229\n\010obstacle\030\022 \003(\0132\'.apol"
      "lo.planning_internal.ObstacleDebug\022D\n\016re"
      "ference_line\030\023 \003(\0132,.apollo.planning_int"
      "ernal.ReferenceLineDebug\022A\n\rdp_poly_grap"
      "h\030\024 \001(\0132*.apollo.planning_internal.DpPol"
      "yGraphDebug"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3771);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/planning_internal.proto", &protobuf_RegisterTypes);
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::apollo::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::apollo::localization::protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::AddDescriptors();
  ::apollo::routing::protobuf_modules_2frouting_2fproto_2frouting_2eproto::AddDescriptors();
  ::apollo::perception::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::AddDescriptors();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fsl_5fboundary_2eproto::AddDescriptors();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto

const ::google::protobuf::EnumDescriptor* StGraphBoundaryDebug_StBoundaryType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_enum_descriptors[0];
}
bool StGraphBoundaryDebug_StBoundaryType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_UNKNOWN;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_STOP;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_FOLLOW;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_YIELD;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_OVERTAKE;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_KEEP_CLEAR;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::StBoundaryType_MIN;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::StBoundaryType_MAX;
const int StGraphBoundaryDebug::StBoundaryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChangeLaneState_State_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_enum_descriptors[1];
}
bool ChangeLaneState_State_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChangeLaneState_State ChangeLaneState::IN_CHANGE_LANE;
const ChangeLaneState_State ChangeLaneState::CHANGE_LANE_FAILED;
const ChangeLaneState_State ChangeLaneState::CHANGE_LANE_SUCCESS;
const ChangeLaneState_State ChangeLaneState::State_MIN;
const ChangeLaneState_State ChangeLaneState::State_MAX;
const int ChangeLaneState::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug::kPlanningDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug::Debug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.Debug)
}
Debug::Debug(const Debug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_planning_data()) {
    planning_data_ = new ::apollo::planning_internal::PlanningData(*from.planning_data_);
  } else {
    planning_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.Debug)
}

void Debug::SharedCtor() {
  _cached_size_ = 0;
  planning_data_ = NULL;
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.Debug)
  SharedDtor();
}

void Debug::SharedDtor() {
  if (this != internal_default_instance()) {
    delete planning_data_;
  }
}

void Debug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug& Debug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

Debug* Debug::New(::google::protobuf::Arena* arena) const {
  Debug* n = new Debug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.Debug)
  if (has_planning_data()) {
    GOOGLE_DCHECK(planning_data_ != NULL);
    planning_data_->::apollo::planning_internal::PlanningData::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.Debug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning_internal.PlanningData planning_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planning_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.Debug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.Debug)
  return false;
#undef DO_
}

void Debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.Debug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->planning_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.Debug)
}

::google::protobuf::uint8* Debug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.Debug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->planning_data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.Debug)
  return target;
}

size_t Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.Debug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  if (has_planning_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->planning_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.Debug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.Debug)
    MergeFrom(*source);
  }
}

void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_planning_data()) {
    mutable_planning_data()->::apollo::planning_internal::PlanningData::MergeFrom(from.planning_data());
  }
}

void Debug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {
  return true;
}

void Debug::Swap(Debug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug::InternalSwap(Debug* other) {
  std::swap(planning_data_, other->planning_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug

// optional .apollo.planning_internal.PlanningData planning_data = 2;
bool Debug::has_planning_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Debug::set_has_planning_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Debug::clear_has_planning_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Debug::clear_planning_data() {
  if (planning_data_ != NULL) planning_data_->::apollo::planning_internal::PlanningData::Clear();
  clear_has_planning_data();
}
const ::apollo::planning_internal::PlanningData& Debug::planning_data() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.planning_data)
  return planning_data_ != NULL ? *planning_data_
                         : *::apollo::planning_internal::PlanningData::internal_default_instance();
}
::apollo::planning_internal::PlanningData* Debug::mutable_planning_data() {
  set_has_planning_data();
  if (planning_data_ == NULL) {
    planning_data_ = new ::apollo::planning_internal::PlanningData;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.planning_data)
  return planning_data_;
}
::apollo::planning_internal::PlanningData* Debug::release_planning_data() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.planning_data)
  clear_has_planning_data();
  ::apollo::planning_internal::PlanningData* temp = planning_data_;
  planning_data_ = NULL;
  return temp;
}
void Debug::set_allocated_planning_data(::apollo::planning_internal::PlanningData* planning_data) {
  delete planning_data_;
  planning_data_ = planning_data;
  if (planning_data) {
    set_has_planning_data();
  } else {
    clear_has_planning_data();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.planning_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPlan::kNameFieldNumber;
const int SpeedPlan::kSpeedPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPlan::SpeedPlan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SpeedPlan)
}
SpeedPlan::SpeedPlan(const SpeedPlan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      speed_point_(from.speed_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SpeedPlan)
}

void SpeedPlan::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SpeedPlan::~SpeedPlan() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SpeedPlan)
  SharedDtor();
}

void SpeedPlan::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpeedPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPlan::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedPlan& SpeedPlan::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpeedPlan* SpeedPlan::New(::google::protobuf::Arena* arena) const {
  SpeedPlan* n = new SpeedPlan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SpeedPlan)
  speed_point_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.SpeedPlan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.SpeedPlan.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.SpeedPoint speed_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speed_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.SpeedPlan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.SpeedPlan)
  return false;
#undef DO_
}

void SpeedPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.SpeedPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SpeedPlan.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.common.SpeedPoint speed_point = 2;
  for (unsigned int i = 0, n = this->speed_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->speed_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.SpeedPlan)
}

::google::protobuf::uint8* SpeedPlan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SpeedPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SpeedPlan.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.common.SpeedPoint speed_point = 2;
  for (unsigned int i = 0, n = this->speed_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->speed_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SpeedPlan)
  return target;
}

size_t SpeedPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SpeedPlan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.common.SpeedPoint speed_point = 2;
  {
    unsigned int count = this->speed_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed_point(i));
    }
  }

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPlan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SpeedPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPlan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPlan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SpeedPlan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SpeedPlan)
    MergeFrom(*source);
  }
}

void SpeedPlan::MergeFrom(const SpeedPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SpeedPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speed_point_.MergeFrom(from.speed_point_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SpeedPlan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SpeedPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPlan::CopyFrom(const SpeedPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SpeedPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPlan::IsInitialized() const {
  return true;
}

void SpeedPlan::Swap(SpeedPlan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPlan::InternalSwap(SpeedPlan* other) {
  speed_point_.InternalSwap(&other->speed_point_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPlan::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedPlan

// optional string name = 1;
bool SpeedPlan::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedPlan::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedPlan::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedPlan::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SpeedPlan::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SpeedPlan.name)
  return name_.GetNoArena();
}
void SpeedPlan::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SpeedPlan.name)
}
#if LANG_CXX11
void SpeedPlan::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.SpeedPlan.name)
}
#endif
void SpeedPlan::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.SpeedPlan.name)
}
void SpeedPlan::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.SpeedPlan.name)
}
::std::string* SpeedPlan::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SpeedPlan.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpeedPlan::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.SpeedPlan.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpeedPlan::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.SpeedPlan.name)
}

// repeated .apollo.common.SpeedPoint speed_point = 2;
int SpeedPlan::speed_point_size() const {
  return speed_point_.size();
}
void SpeedPlan::clear_speed_point() {
  speed_point_.Clear();
}
const ::apollo::common::SpeedPoint& SpeedPlan::speed_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Get(index);
}
::apollo::common::SpeedPoint* SpeedPlan::mutable_speed_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Mutable(index);
}
::apollo::common::SpeedPoint* SpeedPlan::add_speed_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
SpeedPlan::mutable_speed_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SpeedPlan.speed_point)
  return &speed_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
SpeedPlan::speed_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SpeedPlan.speed_point)
  return speed_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StGraphBoundaryDebug::kNameFieldNumber;
const int StGraphBoundaryDebug::kPointFieldNumber;
const int StGraphBoundaryDebug::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StGraphBoundaryDebug::StGraphBoundaryDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.StGraphBoundaryDebug)
}
StGraphBoundaryDebug::StGraphBoundaryDebug(const StGraphBoundaryDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.StGraphBoundaryDebug)
}

void StGraphBoundaryDebug::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
}

StGraphBoundaryDebug::~StGraphBoundaryDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.StGraphBoundaryDebug)
  SharedDtor();
}

void StGraphBoundaryDebug::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StGraphBoundaryDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StGraphBoundaryDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StGraphBoundaryDebug& StGraphBoundaryDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

StGraphBoundaryDebug* StGraphBoundaryDebug::New(::google::protobuf::Arena* arena) const {
  StGraphBoundaryDebug* n = new StGraphBoundaryDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StGraphBoundaryDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.StGraphBoundaryDebug)
  point_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StGraphBoundaryDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.StGraphBoundaryDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.StGraphBoundaryDebug.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.SpeedPoint point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType_IsValid(value)) {
            set_type(static_cast< ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.StGraphBoundaryDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.StGraphBoundaryDebug)
  return false;
#undef DO_
}

void StGraphBoundaryDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.StGraphBoundaryDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.StGraphBoundaryDebug.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.common.SpeedPoint point = 2;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(i), output);
  }

  // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.StGraphBoundaryDebug)
}

::google::protobuf::uint8* StGraphBoundaryDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.StGraphBoundaryDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.StGraphBoundaryDebug.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.common.SpeedPoint point = 2;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->point(i), deterministic, target);
  }

  // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.StGraphBoundaryDebug)
  return target;
}

size_t StGraphBoundaryDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.StGraphBoundaryDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.common.SpeedPoint point = 2;
  {
    unsigned int count = this->point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StGraphBoundaryDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const StGraphBoundaryDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StGraphBoundaryDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.StGraphBoundaryDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.StGraphBoundaryDebug)
    MergeFrom(*source);
  }
}

void StGraphBoundaryDebug::MergeFrom(const StGraphBoundaryDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StGraphBoundaryDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StGraphBoundaryDebug::CopyFrom(const StGraphBoundaryDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StGraphBoundaryDebug::IsInitialized() const {
  return true;
}

void StGraphBoundaryDebug::Swap(StGraphBoundaryDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StGraphBoundaryDebug::InternalSwap(StGraphBoundaryDebug* other) {
  point_.InternalSwap(&other->point_);
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StGraphBoundaryDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StGraphBoundaryDebug

// optional string name = 1;
bool StGraphBoundaryDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StGraphBoundaryDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void StGraphBoundaryDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void StGraphBoundaryDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& StGraphBoundaryDebug::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.StGraphBoundaryDebug.name)
  return name_.GetNoArena();
}
void StGraphBoundaryDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.StGraphBoundaryDebug.name)
}
#if LANG_CXX11
void StGraphBoundaryDebug::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.StGraphBoundaryDebug.name)
}
#endif
void StGraphBoundaryDebug::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.StGraphBoundaryDebug.name)
}
void StGraphBoundaryDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.StGraphBoundaryDebug.name)
}
::std::string* StGraphBoundaryDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.StGraphBoundaryDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StGraphBoundaryDebug::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.StGraphBoundaryDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StGraphBoundaryDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.StGraphBoundaryDebug.name)
}

// repeated .apollo.common.SpeedPoint point = 2;
int StGraphBoundaryDebug::point_size() const {
  return point_.size();
}
void StGraphBoundaryDebug::clear_point() {
  point_.Clear();
}
const ::apollo::common::SpeedPoint& StGraphBoundaryDebug::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.StGraphBoundaryDebug.point)
  return point_.Get(index);
}
::apollo::common::SpeedPoint* StGraphBoundaryDebug::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.StGraphBoundaryDebug.point)
  return point_.Mutable(index);
}
::apollo::common::SpeedPoint* StGraphBoundaryDebug::add_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.StGraphBoundaryDebug.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
StGraphBoundaryDebug::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.StGraphBoundaryDebug.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
StGraphBoundaryDebug::point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.StGraphBoundaryDebug.point)
  return point_;
}

// optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
bool StGraphBoundaryDebug::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StGraphBoundaryDebug::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void StGraphBoundaryDebug::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void StGraphBoundaryDebug::clear_type() {
  type_ = 1;
  clear_has_type();
}
::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.StGraphBoundaryDebug.type)
  return static_cast< ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType >(type_);
}
void StGraphBoundaryDebug::set_type(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType value) {
  assert(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.StGraphBoundaryDebug.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLFrameDebug::kNameFieldNumber;
const int SLFrameDebug::kSampledSFieldNumber;
const int SLFrameDebug::kStaticObstacleLowerBoundFieldNumber;
const int SLFrameDebug::kDynamicObstacleLowerBoundFieldNumber;
const int SLFrameDebug::kStaticObstacleUpperBoundFieldNumber;
const int SLFrameDebug::kDynamicObstacleUpperBoundFieldNumber;
const int SLFrameDebug::kMapLowerBoundFieldNumber;
const int SLFrameDebug::kMapUpperBoundFieldNumber;
const int SLFrameDebug::kSlPathFieldNumber;
const int SLFrameDebug::kAggregatedBoundarySFieldNumber;
const int SLFrameDebug::kAggregatedBoundaryLowFieldNumber;
const int SLFrameDebug::kAggregatedBoundaryHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLFrameDebug::SLFrameDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SLFrameDebug)
}
SLFrameDebug::SLFrameDebug(const SLFrameDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sampled_s_(from.sampled_s_),
      static_obstacle_lower_bound_(from.static_obstacle_lower_bound_),
      dynamic_obstacle_lower_bound_(from.dynamic_obstacle_lower_bound_),
      static_obstacle_upper_bound_(from.static_obstacle_upper_bound_),
      dynamic_obstacle_upper_bound_(from.dynamic_obstacle_upper_bound_),
      map_lower_bound_(from.map_lower_bound_),
      map_upper_bound_(from.map_upper_bound_),
      sl_path_(from.sl_path_),
      aggregated_boundary_s_(from.aggregated_boundary_s_),
      aggregated_boundary_low_(from.aggregated_boundary_low_),
      aggregated_boundary_high_(from.aggregated_boundary_high_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SLFrameDebug)
}

void SLFrameDebug::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SLFrameDebug::~SLFrameDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SLFrameDebug)
  SharedDtor();
}

void SLFrameDebug::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SLFrameDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLFrameDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SLFrameDebug& SLFrameDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLFrameDebug* SLFrameDebug::New(::google::protobuf::Arena* arena) const {
  SLFrameDebug* n = new SLFrameDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLFrameDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SLFrameDebug)
  sampled_s_.Clear();
  static_obstacle_lower_bound_.Clear();
  dynamic_obstacle_lower_bound_.Clear();
  static_obstacle_upper_bound_.Clear();
  dynamic_obstacle_upper_bound_.Clear();
  map_lower_bound_.Clear();
  map_upper_bound_.Clear();
  sl_path_.Clear();
  aggregated_boundary_s_.Clear();
  aggregated_boundary_low_.Clear();
  aggregated_boundary_high_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SLFrameDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.SLFrameDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.SLFrameDebug.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double sampled_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_sampled_s())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_sampled_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double static_obstacle_lower_bound = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_static_obstacle_lower_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_static_obstacle_lower_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double dynamic_obstacle_lower_bound = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33u, input, this->mutable_dynamic_obstacle_lower_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dynamic_obstacle_lower_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double static_obstacle_upper_bound = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41u, input, this->mutable_static_obstacle_upper_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_static_obstacle_upper_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double dynamic_obstacle_upper_bound = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49u, input, this->mutable_dynamic_obstacle_upper_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dynamic_obstacle_upper_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double map_lower_bound = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57u, input, this->mutable_map_lower_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_map_lower_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double map_upper_bound = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65u, input, this->mutable_map_upper_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_map_upper_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.SLPoint sl_path = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sl_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double aggregated_boundary_s = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81u, input, this->mutable_aggregated_boundary_s())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_aggregated_boundary_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double aggregated_boundary_low = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89u, input, this->mutable_aggregated_boundary_low())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(90u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_aggregated_boundary_low())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double aggregated_boundary_high = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 97u, input, this->mutable_aggregated_boundary_high())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(98u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_aggregated_boundary_high())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.SLFrameDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.SLFrameDebug)
  return false;
#undef DO_
}

void SLFrameDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.SLFrameDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SLFrameDebug.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated double sampled_s = 2;
  for (int i = 0, n = this->sampled_s_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->sampled_s(i), output);
  }

  // repeated double static_obstacle_lower_bound = 3;
  for (int i = 0, n = this->static_obstacle_lower_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->static_obstacle_lower_bound(i), output);
  }

  // repeated double dynamic_obstacle_lower_bound = 4;
  for (int i = 0, n = this->dynamic_obstacle_lower_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->dynamic_obstacle_lower_bound(i), output);
  }

  // repeated double static_obstacle_upper_bound = 5;
  for (int i = 0, n = this->static_obstacle_upper_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->static_obstacle_upper_bound(i), output);
  }

  // repeated double dynamic_obstacle_upper_bound = 6;
  for (int i = 0, n = this->dynamic_obstacle_upper_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->dynamic_obstacle_upper_bound(i), output);
  }

  // repeated double map_lower_bound = 7;
  for (int i = 0, n = this->map_lower_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->map_lower_bound(i), output);
  }

  // repeated double map_upper_bound = 8;
  for (int i = 0, n = this->map_upper_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->map_upper_bound(i), output);
  }

  // repeated .apollo.common.SLPoint sl_path = 9;
  for (unsigned int i = 0, n = this->sl_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->sl_path(i), output);
  }

  // repeated double aggregated_boundary_s = 10;
  for (int i = 0, n = this->aggregated_boundary_s_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->aggregated_boundary_s(i), output);
  }

  // repeated double aggregated_boundary_low = 11;
  for (int i = 0, n = this->aggregated_boundary_low_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->aggregated_boundary_low(i), output);
  }

  // repeated double aggregated_boundary_high = 12;
  for (int i = 0, n = this->aggregated_boundary_high_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->aggregated_boundary_high(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.SLFrameDebug)
}

::google::protobuf::uint8* SLFrameDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SLFrameDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SLFrameDebug.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double sampled_s = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->sampled_s_, target);

  // repeated double static_obstacle_lower_bound = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->static_obstacle_lower_bound_, target);

  // repeated double dynamic_obstacle_lower_bound = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(4, this->dynamic_obstacle_lower_bound_, target);

  // repeated double static_obstacle_upper_bound = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(5, this->static_obstacle_upper_bound_, target);

  // repeated double dynamic_obstacle_upper_bound = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(6, this->dynamic_obstacle_upper_bound_, target);

  // repeated double map_lower_bound = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(7, this->map_lower_bound_, target);

  // repeated double map_upper_bound = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(8, this->map_upper_bound_, target);

  // repeated .apollo.common.SLPoint sl_path = 9;
  for (unsigned int i = 0, n = this->sl_path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->sl_path(i), deterministic, target);
  }

  // repeated double aggregated_boundary_s = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(10, this->aggregated_boundary_s_, target);

  // repeated double aggregated_boundary_low = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(11, this->aggregated_boundary_low_, target);

  // repeated double aggregated_boundary_high = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(12, this->aggregated_boundary_high_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SLFrameDebug)
  return target;
}

size_t SLFrameDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SLFrameDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double sampled_s = 2;
  {
    unsigned int count = this->sampled_s_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sampled_s_size());
    total_size += data_size;
  }

  // repeated double static_obstacle_lower_bound = 3;
  {
    unsigned int count = this->static_obstacle_lower_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->static_obstacle_lower_bound_size());
    total_size += data_size;
  }

  // repeated double dynamic_obstacle_lower_bound = 4;
  {
    unsigned int count = this->dynamic_obstacle_lower_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dynamic_obstacle_lower_bound_size());
    total_size += data_size;
  }

  // repeated double static_obstacle_upper_bound = 5;
  {
    unsigned int count = this->static_obstacle_upper_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->static_obstacle_upper_bound_size());
    total_size += data_size;
  }

  // repeated double dynamic_obstacle_upper_bound = 6;
  {
    unsigned int count = this->dynamic_obstacle_upper_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dynamic_obstacle_upper_bound_size());
    total_size += data_size;
  }

  // repeated double map_lower_bound = 7;
  {
    unsigned int count = this->map_lower_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->map_lower_bound_size());
    total_size += data_size;
  }

  // repeated double map_upper_bound = 8;
  {
    unsigned int count = this->map_upper_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->map_upper_bound_size());
    total_size += data_size;
  }

  // repeated .apollo.common.SLPoint sl_path = 9;
  {
    unsigned int count = this->sl_path_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sl_path(i));
    }
  }

  // repeated double aggregated_boundary_s = 10;
  {
    unsigned int count = this->aggregated_boundary_s_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->aggregated_boundary_s_size());
    total_size += data_size;
  }

  // repeated double aggregated_boundary_low = 11;
  {
    unsigned int count = this->aggregated_boundary_low_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->aggregated_boundary_low_size());
    total_size += data_size;
  }

  // repeated double aggregated_boundary_high = 12;
  {
    unsigned int count = this->aggregated_boundary_high_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->aggregated_boundary_high_size());
    total_size += data_size;
  }

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLFrameDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SLFrameDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SLFrameDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLFrameDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SLFrameDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SLFrameDebug)
    MergeFrom(*source);
  }
}

void SLFrameDebug::MergeFrom(const SLFrameDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SLFrameDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sampled_s_.MergeFrom(from.sampled_s_);
  static_obstacle_lower_bound_.MergeFrom(from.static_obstacle_lower_bound_);
  dynamic_obstacle_lower_bound_.MergeFrom(from.dynamic_obstacle_lower_bound_);
  static_obstacle_upper_bound_.MergeFrom(from.static_obstacle_upper_bound_);
  dynamic_obstacle_upper_bound_.MergeFrom(from.dynamic_obstacle_upper_bound_);
  map_lower_bound_.MergeFrom(from.map_lower_bound_);
  map_upper_bound_.MergeFrom(from.map_upper_bound_);
  sl_path_.MergeFrom(from.sl_path_);
  aggregated_boundary_s_.MergeFrom(from.aggregated_boundary_s_);
  aggregated_boundary_low_.MergeFrom(from.aggregated_boundary_low_);
  aggregated_boundary_high_.MergeFrom(from.aggregated_boundary_high_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SLFrameDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SLFrameDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLFrameDebug::CopyFrom(const SLFrameDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SLFrameDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLFrameDebug::IsInitialized() const {
  return true;
}

void SLFrameDebug::Swap(SLFrameDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLFrameDebug::InternalSwap(SLFrameDebug* other) {
  sampled_s_.InternalSwap(&other->sampled_s_);
  static_obstacle_lower_bound_.InternalSwap(&other->static_obstacle_lower_bound_);
  dynamic_obstacle_lower_bound_.InternalSwap(&other->dynamic_obstacle_lower_bound_);
  static_obstacle_upper_bound_.InternalSwap(&other->static_obstacle_upper_bound_);
  dynamic_obstacle_upper_bound_.InternalSwap(&other->dynamic_obstacle_upper_bound_);
  map_lower_bound_.InternalSwap(&other->map_lower_bound_);
  map_upper_bound_.InternalSwap(&other->map_upper_bound_);
  sl_path_.InternalSwap(&other->sl_path_);
  aggregated_boundary_s_.InternalSwap(&other->aggregated_boundary_s_);
  aggregated_boundary_low_.InternalSwap(&other->aggregated_boundary_low_);
  aggregated_boundary_high_.InternalSwap(&other->aggregated_boundary_high_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLFrameDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLFrameDebug

// optional string name = 1;
bool SLFrameDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SLFrameDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SLFrameDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SLFrameDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SLFrameDebug::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.name)
  return name_.GetNoArena();
}
void SLFrameDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.name)
}
#if LANG_CXX11
void SLFrameDebug::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.SLFrameDebug.name)
}
#endif
void SLFrameDebug::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.SLFrameDebug.name)
}
void SLFrameDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.SLFrameDebug.name)
}
::std::string* SLFrameDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SLFrameDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SLFrameDebug::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.SLFrameDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SLFrameDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.SLFrameDebug.name)
}

// repeated double sampled_s = 2;
int SLFrameDebug::sampled_s_size() const {
  return sampled_s_.size();
}
void SLFrameDebug::clear_sampled_s() {
  sampled_s_.Clear();
}
double SLFrameDebug::sampled_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.sampled_s)
  return sampled_s_.Get(index);
}
void SLFrameDebug::set_sampled_s(int index, double value) {
  sampled_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.sampled_s)
}
void SLFrameDebug::add_sampled_s(double value) {
  sampled_s_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.sampled_s)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::sampled_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.sampled_s)
  return sampled_s_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_sampled_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.sampled_s)
  return &sampled_s_;
}

// repeated double static_obstacle_lower_bound = 3;
int SLFrameDebug::static_obstacle_lower_bound_size() const {
  return static_obstacle_lower_bound_.size();
}
void SLFrameDebug::clear_static_obstacle_lower_bound() {
  static_obstacle_lower_bound_.Clear();
}
double SLFrameDebug::static_obstacle_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return static_obstacle_lower_bound_.Get(index);
}
void SLFrameDebug::set_static_obstacle_lower_bound(int index, double value) {
  static_obstacle_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
}
void SLFrameDebug::add_static_obstacle_lower_bound(double value) {
  static_obstacle_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::static_obstacle_lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return static_obstacle_lower_bound_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_static_obstacle_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return &static_obstacle_lower_bound_;
}

// repeated double dynamic_obstacle_lower_bound = 4;
int SLFrameDebug::dynamic_obstacle_lower_bound_size() const {
  return dynamic_obstacle_lower_bound_.size();
}
void SLFrameDebug::clear_dynamic_obstacle_lower_bound() {
  dynamic_obstacle_lower_bound_.Clear();
}
double SLFrameDebug::dynamic_obstacle_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return dynamic_obstacle_lower_bound_.Get(index);
}
void SLFrameDebug::set_dynamic_obstacle_lower_bound(int index, double value) {
  dynamic_obstacle_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
}
void SLFrameDebug::add_dynamic_obstacle_lower_bound(double value) {
  dynamic_obstacle_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::dynamic_obstacle_lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return dynamic_obstacle_lower_bound_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_dynamic_obstacle_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return &dynamic_obstacle_lower_bound_;
}

// repeated double static_obstacle_upper_bound = 5;
int SLFrameDebug::static_obstacle_upper_bound_size() const {
  return static_obstacle_upper_bound_.size();
}
void SLFrameDebug::clear_static_obstacle_upper_bound() {
  static_obstacle_upper_bound_.Clear();
}
double SLFrameDebug::static_obstacle_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return static_obstacle_upper_bound_.Get(index);
}
void SLFrameDebug::set_static_obstacle_upper_bound(int index, double value) {
  static_obstacle_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
}
void SLFrameDebug::add_static_obstacle_upper_bound(double value) {
  static_obstacle_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::static_obstacle_upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return static_obstacle_upper_bound_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_static_obstacle_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return &static_obstacle_upper_bound_;
}

// repeated double dynamic_obstacle_upper_bound = 6;
int SLFrameDebug::dynamic_obstacle_upper_bound_size() const {
  return dynamic_obstacle_upper_bound_.size();
}
void SLFrameDebug::clear_dynamic_obstacle_upper_bound() {
  dynamic_obstacle_upper_bound_.Clear();
}
double SLFrameDebug::dynamic_obstacle_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return dynamic_obstacle_upper_bound_.Get(index);
}
void SLFrameDebug::set_dynamic_obstacle_upper_bound(int index, double value) {
  dynamic_obstacle_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
}
void SLFrameDebug::add_dynamic_obstacle_upper_bound(double value) {
  dynamic_obstacle_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::dynamic_obstacle_upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return dynamic_obstacle_upper_bound_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_dynamic_obstacle_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return &dynamic_obstacle_upper_bound_;
}

// repeated double map_lower_bound = 7;
int SLFrameDebug::map_lower_bound_size() const {
  return map_lower_bound_.size();
}
void SLFrameDebug::clear_map_lower_bound() {
  map_lower_bound_.Clear();
}
double SLFrameDebug::map_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.map_lower_bound)
  return map_lower_bound_.Get(index);
}
void SLFrameDebug::set_map_lower_bound(int index, double value) {
  map_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.map_lower_bound)
}
void SLFrameDebug::add_map_lower_bound(double value) {
  map_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.map_lower_bound)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::map_lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.map_lower_bound)
  return map_lower_bound_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_map_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.map_lower_bound)
  return &map_lower_bound_;
}

// repeated double map_upper_bound = 8;
int SLFrameDebug::map_upper_bound_size() const {
  return map_upper_bound_.size();
}
void SLFrameDebug::clear_map_upper_bound() {
  map_upper_bound_.Clear();
}
double SLFrameDebug::map_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.map_upper_bound)
  return map_upper_bound_.Get(index);
}
void SLFrameDebug::set_map_upper_bound(int index, double value) {
  map_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.map_upper_bound)
}
void SLFrameDebug::add_map_upper_bound(double value) {
  map_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.map_upper_bound)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::map_upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.map_upper_bound)
  return map_upper_bound_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_map_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.map_upper_bound)
  return &map_upper_bound_;
}

// repeated .apollo.common.SLPoint sl_path = 9;
int SLFrameDebug::sl_path_size() const {
  return sl_path_.size();
}
void SLFrameDebug::clear_sl_path() {
  sl_path_.Clear();
}
const ::apollo::common::SLPoint& SLFrameDebug::sl_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Get(index);
}
::apollo::common::SLPoint* SLFrameDebug::mutable_sl_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Mutable(index);
}
::apollo::common::SLPoint* SLFrameDebug::add_sl_path() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >*
SLFrameDebug::mutable_sl_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.sl_path)
  return &sl_path_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >&
SLFrameDebug::sl_path() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.sl_path)
  return sl_path_;
}

// repeated double aggregated_boundary_s = 10;
int SLFrameDebug::aggregated_boundary_s_size() const {
  return aggregated_boundary_s_.size();
}
void SLFrameDebug::clear_aggregated_boundary_s() {
  aggregated_boundary_s_.Clear();
}
double SLFrameDebug::aggregated_boundary_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return aggregated_boundary_s_.Get(index);
}
void SLFrameDebug::set_aggregated_boundary_s(int index, double value) {
  aggregated_boundary_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
}
void SLFrameDebug::add_aggregated_boundary_s(double value) {
  aggregated_boundary_s_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return aggregated_boundary_s_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return &aggregated_boundary_s_;
}

// repeated double aggregated_boundary_low = 11;
int SLFrameDebug::aggregated_boundary_low_size() const {
  return aggregated_boundary_low_.size();
}
void SLFrameDebug::clear_aggregated_boundary_low() {
  aggregated_boundary_low_.Clear();
}
double SLFrameDebug::aggregated_boundary_low(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return aggregated_boundary_low_.Get(index);
}
void SLFrameDebug::set_aggregated_boundary_low(int index, double value) {
  aggregated_boundary_low_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
}
void SLFrameDebug::add_aggregated_boundary_low(double value) {
  aggregated_boundary_low_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_low() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return aggregated_boundary_low_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_low() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return &aggregated_boundary_low_;
}

// repeated double aggregated_boundary_high = 12;
int SLFrameDebug::aggregated_boundary_high_size() const {
  return aggregated_boundary_high_.size();
}
void SLFrameDebug::clear_aggregated_boundary_high() {
  aggregated_boundary_high_.Clear();
}
double SLFrameDebug::aggregated_boundary_high(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return aggregated_boundary_high_.Get(index);
}
void SLFrameDebug::set_aggregated_boundary_high(int index, double value) {
  aggregated_boundary_high_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
}
void SLFrameDebug::add_aggregated_boundary_high(double value) {
  aggregated_boundary_high_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_high() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return aggregated_boundary_high_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_high() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return &aggregated_boundary_high_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STGraphDebug_STGraphSpeedConstraint::kTFieldNumber;
const int STGraphDebug_STGraphSpeedConstraint::kLowerBoundFieldNumber;
const int STGraphDebug_STGraphSpeedConstraint::kUpperBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STGraphDebug_STGraphSpeedConstraint::STGraphDebug_STGraphSpeedConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
}
STGraphDebug_STGraphSpeedConstraint::STGraphDebug_STGraphSpeedConstraint(const STGraphDebug_STGraphSpeedConstraint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      t_(from.t_),
      lower_bound_(from.lower_bound_),
      upper_bound_(from.upper_bound_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
}

void STGraphDebug_STGraphSpeedConstraint::SharedCtor() {
  _cached_size_ = 0;
}

STGraphDebug_STGraphSpeedConstraint::~STGraphDebug_STGraphSpeedConstraint() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  SharedDtor();
}

void STGraphDebug_STGraphSpeedConstraint::SharedDtor() {
}

void STGraphDebug_STGraphSpeedConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STGraphDebug_STGraphSpeedConstraint::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const STGraphDebug_STGraphSpeedConstraint& STGraphDebug_STGraphSpeedConstraint::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

STGraphDebug_STGraphSpeedConstraint* STGraphDebug_STGraphSpeedConstraint::New(::google::protobuf::Arena* arena) const {
  STGraphDebug_STGraphSpeedConstraint* n = new STGraphDebug_STGraphSpeedConstraint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STGraphDebug_STGraphSpeedConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  t_.Clear();
  lower_bound_.Clear();
  upper_bound_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool STGraphDebug_STGraphSpeedConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_t())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double lower_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_lower_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_lower_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double upper_bound = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_upper_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_upper_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  return false;
#undef DO_
}

void STGraphDebug_STGraphSpeedConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  for (int i = 0, n = this->t_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->t(i), output);
  }

  // repeated double lower_bound = 2;
  for (int i = 0, n = this->lower_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->lower_bound(i), output);
  }

  // repeated double upper_bound = 3;
  for (int i = 0, n = this->upper_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->upper_bound(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
}

::google::protobuf::uint8* STGraphDebug_STGraphSpeedConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->t_, target);

  // repeated double lower_bound = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->lower_bound_, target);

  // repeated double upper_bound = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->upper_bound_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  return target;
}

size_t STGraphDebug_STGraphSpeedConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double t = 1;
  {
    unsigned int count = this->t_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->t_size());
    total_size += data_size;
  }

  // repeated double lower_bound = 2;
  {
    unsigned int count = this->lower_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->lower_bound_size());
    total_size += data_size;
  }

  // repeated double upper_bound = 3;
  {
    unsigned int count = this->upper_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->upper_bound_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STGraphDebug_STGraphSpeedConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const STGraphDebug_STGraphSpeedConstraint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STGraphDebug_STGraphSpeedConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
    MergeFrom(*source);
  }
}

void STGraphDebug_STGraphSpeedConstraint::MergeFrom(const STGraphDebug_STGraphSpeedConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t_.MergeFrom(from.t_);
  lower_bound_.MergeFrom(from.lower_bound_);
  upper_bound_.MergeFrom(from.upper_bound_);
}

void STGraphDebug_STGraphSpeedConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug_STGraphSpeedConstraint::CopyFrom(const STGraphDebug_STGraphSpeedConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphSpeedConstraint::IsInitialized() const {
  return true;
}

void STGraphDebug_STGraphSpeedConstraint::Swap(STGraphDebug_STGraphSpeedConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STGraphDebug_STGraphSpeedConstraint::InternalSwap(STGraphDebug_STGraphSpeedConstraint* other) {
  t_.InternalSwap(&other->t_);
  lower_bound_.InternalSwap(&other->lower_bound_);
  upper_bound_.InternalSwap(&other->upper_bound_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STGraphDebug_STGraphSpeedConstraint::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// STGraphDebug_STGraphSpeedConstraint

// repeated double t = 1;
int STGraphDebug_STGraphSpeedConstraint::t_size() const {
  return t_.size();
}
void STGraphDebug_STGraphSpeedConstraint::clear_t() {
  t_.Clear();
}
double STGraphDebug_STGraphSpeedConstraint::t(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return t_.Get(index);
}
void STGraphDebug_STGraphSpeedConstraint::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
}
void STGraphDebug_STGraphSpeedConstraint::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::t() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return t_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return &t_;
}

// repeated double lower_bound = 2;
int STGraphDebug_STGraphSpeedConstraint::lower_bound_size() const {
  return lower_bound_.size();
}
void STGraphDebug_STGraphSpeedConstraint::clear_lower_bound() {
  lower_bound_.Clear();
}
double STGraphDebug_STGraphSpeedConstraint::lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return lower_bound_.Get(index);
}
void STGraphDebug_STGraphSpeedConstraint::set_lower_bound(int index, double value) {
  lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
}
void STGraphDebug_STGraphSpeedConstraint::add_lower_bound(double value) {
  lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return lower_bound_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return &lower_bound_;
}

// repeated double upper_bound = 3;
int STGraphDebug_STGraphSpeedConstraint::upper_bound_size() const {
  return upper_bound_.size();
}
void STGraphDebug_STGraphSpeedConstraint::clear_upper_bound() {
  upper_bound_.Clear();
}
double STGraphDebug_STGraphSpeedConstraint::upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return upper_bound_.Get(index);
}
void STGraphDebug_STGraphSpeedConstraint::set_upper_bound(int index, double value) {
  upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
}
void STGraphDebug_STGraphSpeedConstraint::add_upper_bound(double value) {
  upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return upper_bound_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return &upper_bound_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STGraphDebug_STGraphKernelCuiseRef::kTFieldNumber;
const int STGraphDebug_STGraphKernelCuiseRef::kCruiseLineSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STGraphDebug_STGraphKernelCuiseRef::STGraphDebug_STGraphKernelCuiseRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
}
STGraphDebug_STGraphKernelCuiseRef::STGraphDebug_STGraphKernelCuiseRef(const STGraphDebug_STGraphKernelCuiseRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      t_(from.t_),
      cruise_line_s_(from.cruise_line_s_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
}

void STGraphDebug_STGraphKernelCuiseRef::SharedCtor() {
  _cached_size_ = 0;
}

STGraphDebug_STGraphKernelCuiseRef::~STGraphDebug_STGraphKernelCuiseRef() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  SharedDtor();
}

void STGraphDebug_STGraphKernelCuiseRef::SharedDtor() {
}

void STGraphDebug_STGraphKernelCuiseRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STGraphDebug_STGraphKernelCuiseRef::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const STGraphDebug_STGraphKernelCuiseRef& STGraphDebug_STGraphKernelCuiseRef::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

STGraphDebug_STGraphKernelCuiseRef* STGraphDebug_STGraphKernelCuiseRef::New(::google::protobuf::Arena* arena) const {
  STGraphDebug_STGraphKernelCuiseRef* n = new STGraphDebug_STGraphKernelCuiseRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STGraphDebug_STGraphKernelCuiseRef::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  t_.Clear();
  cruise_line_s_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool STGraphDebug_STGraphKernelCuiseRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_t())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double cruise_line_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_cruise_line_s())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_cruise_line_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  return false;
#undef DO_
}

void STGraphDebug_STGraphKernelCuiseRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  for (int i = 0, n = this->t_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->t(i), output);
  }

  // repeated double cruise_line_s = 2;
  for (int i = 0, n = this->cruise_line_s_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->cruise_line_s(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
}

::google::protobuf::uint8* STGraphDebug_STGraphKernelCuiseRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->t_, target);

  // repeated double cruise_line_s = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->cruise_line_s_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  return target;
}

size_t STGraphDebug_STGraphKernelCuiseRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double t = 1;
  {
    unsigned int count = this->t_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->t_size());
    total_size += data_size;
  }

  // repeated double cruise_line_s = 2;
  {
    unsigned int count = this->cruise_line_s_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cruise_line_s_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STGraphDebug_STGraphKernelCuiseRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  GOOGLE_DCHECK_NE(&from, this);
  const STGraphDebug_STGraphKernelCuiseRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STGraphDebug_STGraphKernelCuiseRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
    MergeFrom(*source);
  }
}

void STGraphDebug_STGraphKernelCuiseRef::MergeFrom(const STGraphDebug_STGraphKernelCuiseRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t_.MergeFrom(from.t_);
  cruise_line_s_.MergeFrom(from.cruise_line_s_);
}

void STGraphDebug_STGraphKernelCuiseRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug_STGraphKernelCuiseRef::CopyFrom(const STGraphDebug_STGraphKernelCuiseRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphKernelCuiseRef::IsInitialized() const {
  return true;
}

void STGraphDebug_STGraphKernelCuiseRef::Swap(STGraphDebug_STGraphKernelCuiseRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STGraphDebug_STGraphKernelCuiseRef::InternalSwap(STGraphDebug_STGraphKernelCuiseRef* other) {
  t_.InternalSwap(&other->t_);
  cruise_line_s_.InternalSwap(&other->cruise_line_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STGraphDebug_STGraphKernelCuiseRef::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// STGraphDebug_STGraphKernelCuiseRef

// repeated double t = 1;
int STGraphDebug_STGraphKernelCuiseRef::t_size() const {
  return t_.size();
}
void STGraphDebug_STGraphKernelCuiseRef::clear_t() {
  t_.Clear();
}
double STGraphDebug_STGraphKernelCuiseRef::t(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return t_.Get(index);
}
void STGraphDebug_STGraphKernelCuiseRef::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
}
void STGraphDebug_STGraphKernelCuiseRef::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::t() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return t_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return &t_;
}

// repeated double cruise_line_s = 2;
int STGraphDebug_STGraphKernelCuiseRef::cruise_line_s_size() const {
  return cruise_line_s_.size();
}
void STGraphDebug_STGraphKernelCuiseRef::clear_cruise_line_s() {
  cruise_line_s_.Clear();
}
double STGraphDebug_STGraphKernelCuiseRef::cruise_line_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return cruise_line_s_.Get(index);
}
void STGraphDebug_STGraphKernelCuiseRef::set_cruise_line_s(int index, double value) {
  cruise_line_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
}
void STGraphDebug_STGraphKernelCuiseRef::add_cruise_line_s(double value) {
  cruise_line_s_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::cruise_line_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return cruise_line_s_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::mutable_cruise_line_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return &cruise_line_s_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STGraphDebug_STGraphKernelFollowRef::kTFieldNumber;
const int STGraphDebug_STGraphKernelFollowRef::kFollowLineSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STGraphDebug_STGraphKernelFollowRef::STGraphDebug_STGraphKernelFollowRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
}
STGraphDebug_STGraphKernelFollowRef::STGraphDebug_STGraphKernelFollowRef(const STGraphDebug_STGraphKernelFollowRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      t_(from.t_),
      follow_line_s_(from.follow_line_s_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
}

void STGraphDebug_STGraphKernelFollowRef::SharedCtor() {
  _cached_size_ = 0;
}

STGraphDebug_STGraphKernelFollowRef::~STGraphDebug_STGraphKernelFollowRef() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  SharedDtor();
}

void STGraphDebug_STGraphKernelFollowRef::SharedDtor() {
}

void STGraphDebug_STGraphKernelFollowRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STGraphDebug_STGraphKernelFollowRef::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const STGraphDebug_STGraphKernelFollowRef& STGraphDebug_STGraphKernelFollowRef::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

STGraphDebug_STGraphKernelFollowRef* STGraphDebug_STGraphKernelFollowRef::New(::google::protobuf::Arena* arena) const {
  STGraphDebug_STGraphKernelFollowRef* n = new STGraphDebug_STGraphKernelFollowRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STGraphDebug_STGraphKernelFollowRef::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  t_.Clear();
  follow_line_s_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool STGraphDebug_STGraphKernelFollowRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_t())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double follow_line_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_follow_line_s())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_follow_line_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  return false;
#undef DO_
}

void STGraphDebug_STGraphKernelFollowRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  for (int i = 0, n = this->t_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->t(i), output);
  }

  // repeated double follow_line_s = 2;
  for (int i = 0, n = this->follow_line_s_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->follow_line_s(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
}

::google::protobuf::uint8* STGraphDebug_STGraphKernelFollowRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->t_, target);

  // repeated double follow_line_s = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->follow_line_s_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  return target;
}

size_t STGraphDebug_STGraphKernelFollowRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double t = 1;
  {
    unsigned int count = this->t_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->t_size());
    total_size += data_size;
  }

  // repeated double follow_line_s = 2;
  {
    unsigned int count = this->follow_line_s_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->follow_line_s_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STGraphDebug_STGraphKernelFollowRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  GOOGLE_DCHECK_NE(&from, this);
  const STGraphDebug_STGraphKernelFollowRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STGraphDebug_STGraphKernelFollowRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
    MergeFrom(*source);
  }
}

void STGraphDebug_STGraphKernelFollowRef::MergeFrom(const STGraphDebug_STGraphKernelFollowRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t_.MergeFrom(from.t_);
  follow_line_s_.MergeFrom(from.follow_line_s_);
}

void STGraphDebug_STGraphKernelFollowRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug_STGraphKernelFollowRef::CopyFrom(const STGraphDebug_STGraphKernelFollowRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphKernelFollowRef::IsInitialized() const {
  return true;
}

void STGraphDebug_STGraphKernelFollowRef::Swap(STGraphDebug_STGraphKernelFollowRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STGraphDebug_STGraphKernelFollowRef::InternalSwap(STGraphDebug_STGraphKernelFollowRef* other) {
  t_.InternalSwap(&other->t_);
  follow_line_s_.InternalSwap(&other->follow_line_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STGraphDebug_STGraphKernelFollowRef::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// STGraphDebug_STGraphKernelFollowRef

// repeated double t = 1;
int STGraphDebug_STGraphKernelFollowRef::t_size() const {
  return t_.size();
}
void STGraphDebug_STGraphKernelFollowRef::clear_t() {
  t_.Clear();
}
double STGraphDebug_STGraphKernelFollowRef::t(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return t_.Get(index);
}
void STGraphDebug_STGraphKernelFollowRef::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
}
void STGraphDebug_STGraphKernelFollowRef::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::t() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return t_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return &t_;
}

// repeated double follow_line_s = 2;
int STGraphDebug_STGraphKernelFollowRef::follow_line_s_size() const {
  return follow_line_s_.size();
}
void STGraphDebug_STGraphKernelFollowRef::clear_follow_line_s() {
  follow_line_s_.Clear();
}
double STGraphDebug_STGraphKernelFollowRef::follow_line_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return follow_line_s_.Get(index);
}
void STGraphDebug_STGraphKernelFollowRef::set_follow_line_s(int index, double value) {
  follow_line_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
}
void STGraphDebug_STGraphKernelFollowRef::add_follow_line_s(double value) {
  follow_line_s_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::follow_line_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return follow_line_s_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::mutable_follow_line_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return &follow_line_s_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STGraphDebug::kNameFieldNumber;
const int STGraphDebug::kBoundaryFieldNumber;
const int STGraphDebug::kSpeedLimitFieldNumber;
const int STGraphDebug::kSpeedProfileFieldNumber;
const int STGraphDebug::kSpeedConstraintFieldNumber;
const int STGraphDebug::kKernelCruiseRefFieldNumber;
const int STGraphDebug::kKernelFollowRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STGraphDebug::STGraphDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.STGraphDebug)
}
STGraphDebug::STGraphDebug(const STGraphDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      boundary_(from.boundary_),
      speed_limit_(from.speed_limit_),
      speed_profile_(from.speed_profile_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_speed_constraint()) {
    speed_constraint_ = new ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint(*from.speed_constraint_);
  } else {
    speed_constraint_ = NULL;
  }
  if (from.has_kernel_cruise_ref()) {
    kernel_cruise_ref_ = new ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef(*from.kernel_cruise_ref_);
  } else {
    kernel_cruise_ref_ = NULL;
  }
  if (from.has_kernel_follow_ref()) {
    kernel_follow_ref_ = new ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef(*from.kernel_follow_ref_);
  } else {
    kernel_follow_ref_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug)
}

void STGraphDebug::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&speed_constraint_, 0, reinterpret_cast<char*>(&kernel_follow_ref_) -
    reinterpret_cast<char*>(&speed_constraint_) + sizeof(kernel_follow_ref_));
}

STGraphDebug::~STGraphDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug)
  SharedDtor();
}

void STGraphDebug::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete speed_constraint_;
  }
  if (this != internal_default_instance()) {
    delete kernel_cruise_ref_;
  }
  if (this != internal_default_instance()) {
    delete kernel_follow_ref_;
  }
}

void STGraphDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STGraphDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const STGraphDebug& STGraphDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

STGraphDebug* STGraphDebug::New(::google::protobuf::Arena* arena) const {
  STGraphDebug* n = new STGraphDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STGraphDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug)
  boundary_.Clear();
  speed_limit_.Clear();
  speed_profile_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_speed_constraint()) {
      GOOGLE_DCHECK(speed_constraint_ != NULL);
      speed_constraint_->::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::Clear();
    }
    if (has_kernel_cruise_ref()) {
      GOOGLE_DCHECK(kernel_cruise_ref_ != NULL);
      kernel_cruise_ref_->::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::Clear();
    }
    if (has_kernel_follow_ref()) {
      GOOGLE_DCHECK(kernel_follow_ref_ != NULL);
      kernel_follow_ref_->::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool STGraphDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.STGraphDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.STGraphDebug.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.SpeedPoint speed_limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speed_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.SpeedPoint speed_profile = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speed_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed_constraint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kernel_cruise_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kernel_follow_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.STGraphDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.STGraphDebug)
  return false;
#undef DO_
}

void STGraphDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.STGraphDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.STGraphDebug.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
  for (unsigned int i = 0, n = this->boundary_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boundary(i), output);
  }

  // repeated .apollo.common.SpeedPoint speed_limit = 3;
  for (unsigned int i = 0, n = this->speed_limit_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->speed_limit(i), output);
  }

  // repeated .apollo.common.SpeedPoint speed_profile = 4;
  for (unsigned int i = 0, n = this->speed_profile_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->speed_profile(i), output);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->speed_constraint_, output);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->kernel_cruise_ref_, output);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->kernel_follow_ref_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.STGraphDebug)
}

::google::protobuf::uint8* STGraphDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.STGraphDebug.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
  for (unsigned int i = 0, n = this->boundary_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->boundary(i), deterministic, target);
  }

  // repeated .apollo.common.SpeedPoint speed_limit = 3;
  for (unsigned int i = 0, n = this->speed_limit_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->speed_limit(i), deterministic, target);
  }

  // repeated .apollo.common.SpeedPoint speed_profile = 4;
  for (unsigned int i = 0, n = this->speed_profile_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->speed_profile(i), deterministic, target);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->speed_constraint_, deterministic, target);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->kernel_cruise_ref_, deterministic, target);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->kernel_follow_ref_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug)
  return target;
}

size_t STGraphDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
  {
    unsigned int count = this->boundary_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundary(i));
    }
  }

  // repeated .apollo.common.SpeedPoint speed_limit = 3;
  {
    unsigned int count = this->speed_limit_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed_limit(i));
    }
  }

  // repeated .apollo.common.SpeedPoint speed_profile = 4;
  {
    unsigned int count = this->speed_profile_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed_profile(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
    if (has_speed_constraint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->speed_constraint_);
    }

    // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
    if (has_kernel_cruise_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kernel_cruise_ref_);
    }

    // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
    if (has_kernel_follow_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kernel_follow_ref_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STGraphDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.STGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const STGraphDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STGraphDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.STGraphDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.STGraphDebug)
    MergeFrom(*source);
  }
}

void STGraphDebug::MergeFrom(const STGraphDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_.MergeFrom(from.boundary_);
  speed_limit_.MergeFrom(from.speed_limit_);
  speed_profile_.MergeFrom(from.speed_profile_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_speed_constraint()->::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::MergeFrom(from.speed_constraint());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_kernel_cruise_ref()->::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::MergeFrom(from.kernel_cruise_ref());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_kernel_follow_ref()->::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::MergeFrom(from.kernel_follow_ref());
    }
  }
}

void STGraphDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.STGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug::CopyFrom(const STGraphDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug::IsInitialized() const {
  return true;
}

void STGraphDebug::Swap(STGraphDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STGraphDebug::InternalSwap(STGraphDebug* other) {
  boundary_.InternalSwap(&other->boundary_);
  speed_limit_.InternalSwap(&other->speed_limit_);
  speed_profile_.InternalSwap(&other->speed_profile_);
  name_.Swap(&other->name_);
  std::swap(speed_constraint_, other->speed_constraint_);
  std::swap(kernel_cruise_ref_, other->kernel_cruise_ref_);
  std::swap(kernel_follow_ref_, other->kernel_follow_ref_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STGraphDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// STGraphDebug

// optional string name = 1;
bool STGraphDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void STGraphDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void STGraphDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void STGraphDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& STGraphDebug::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.name)
  return name_.GetNoArena();
}
void STGraphDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.name)
}
#if LANG_CXX11
void STGraphDebug::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.STGraphDebug.name)
}
#endif
void STGraphDebug::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.STGraphDebug.name)
}
void STGraphDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.STGraphDebug.name)
}
::std::string* STGraphDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* STGraphDebug::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void STGraphDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.name)
}

// repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
int STGraphDebug::boundary_size() const {
  return boundary_.size();
}
void STGraphDebug::clear_boundary() {
  boundary_.Clear();
}
const ::apollo::planning_internal::StGraphBoundaryDebug& STGraphDebug::boundary(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.boundary)
  return boundary_.Get(index);
}
::apollo::planning_internal::StGraphBoundaryDebug* STGraphDebug::mutable_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.boundary)
  return boundary_.Mutable(index);
}
::apollo::planning_internal::StGraphBoundaryDebug* STGraphDebug::add_boundary() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.boundary)
  return boundary_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug >*
STGraphDebug::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.boundary)
  return &boundary_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug >&
STGraphDebug::boundary() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.boundary)
  return boundary_;
}

// repeated .apollo.common.SpeedPoint speed_limit = 3;
int STGraphDebug::speed_limit_size() const {
  return speed_limit_.size();
}
void STGraphDebug::clear_speed_limit() {
  speed_limit_.Clear();
}
const ::apollo::common::SpeedPoint& STGraphDebug::speed_limit(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Get(index);
}
::apollo::common::SpeedPoint* STGraphDebug::mutable_speed_limit(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Mutable(index);
}
::apollo::common::SpeedPoint* STGraphDebug::add_speed_limit() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
STGraphDebug::mutable_speed_limit() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.speed_limit)
  return &speed_limit_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
STGraphDebug::speed_limit() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_;
}

// repeated .apollo.common.SpeedPoint speed_profile = 4;
int STGraphDebug::speed_profile_size() const {
  return speed_profile_.size();
}
void STGraphDebug::clear_speed_profile() {
  speed_profile_.Clear();
}
const ::apollo::common::SpeedPoint& STGraphDebug::speed_profile(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Get(index);
}
::apollo::common::SpeedPoint* STGraphDebug::mutable_speed_profile(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Mutable(index);
}
::apollo::common::SpeedPoint* STGraphDebug::add_speed_profile() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >*
STGraphDebug::mutable_speed_profile() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.speed_profile)
  return &speed_profile_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SpeedPoint >&
STGraphDebug::speed_profile() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_;
}

// optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
bool STGraphDebug::has_speed_constraint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void STGraphDebug::set_has_speed_constraint() {
  _has_bits_[0] |= 0x00000002u;
}
void STGraphDebug::clear_has_speed_constraint() {
  _has_bits_[0] &= ~0x00000002u;
}
void STGraphDebug::clear_speed_constraint() {
  if (speed_constraint_ != NULL) speed_constraint_->::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::Clear();
  clear_has_speed_constraint();
}
const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint& STGraphDebug::speed_constraint() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.speed_constraint)
  return speed_constraint_ != NULL ? *speed_constraint_
                         : *::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::internal_default_instance();
}
::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::mutable_speed_constraint() {
  set_has_speed_constraint();
  if (speed_constraint_ == NULL) {
    speed_constraint_ = new ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.speed_constraint)
  return speed_constraint_;
}
::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::release_speed_constraint() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.speed_constraint)
  clear_has_speed_constraint();
  ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* temp = speed_constraint_;
  speed_constraint_ = NULL;
  return temp;
}
void STGraphDebug::set_allocated_speed_constraint(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint) {
  delete speed_constraint_;
  speed_constraint_ = speed_constraint;
  if (speed_constraint) {
    set_has_speed_constraint();
  } else {
    clear_has_speed_constraint();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.speed_constraint)
}

// optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
bool STGraphDebug::has_kernel_cruise_ref() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void STGraphDebug::set_has_kernel_cruise_ref() {
  _has_bits_[0] |= 0x00000004u;
}
void STGraphDebug::clear_has_kernel_cruise_ref() {
  _has_bits_[0] &= ~0x00000004u;
}
void STGraphDebug::clear_kernel_cruise_ref() {
  if (kernel_cruise_ref_ != NULL) kernel_cruise_ref_->::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::Clear();
  clear_has_kernel_cruise_ref();
}
const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef& STGraphDebug::kernel_cruise_ref() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
  return kernel_cruise_ref_ != NULL ? *kernel_cruise_ref_
                         : *::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::internal_default_instance();
}
::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::mutable_kernel_cruise_ref() {
  set_has_kernel_cruise_ref();
  if (kernel_cruise_ref_ == NULL) {
    kernel_cruise_ref_ = new ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
  return kernel_cruise_ref_;
}
::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::release_kernel_cruise_ref() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
  clear_has_kernel_cruise_ref();
  ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* temp = kernel_cruise_ref_;
  kernel_cruise_ref_ = NULL;
  return temp;
}
void STGraphDebug::set_allocated_kernel_cruise_ref(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref) {
  delete kernel_cruise_ref_;
  kernel_cruise_ref_ = kernel_cruise_ref;
  if (kernel_cruise_ref) {
    set_has_kernel_cruise_ref();
  } else {
    clear_has_kernel_cruise_ref();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
}

// optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
bool STGraphDebug::has_kernel_follow_ref() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void STGraphDebug::set_has_kernel_follow_ref() {
  _has_bits_[0] |= 0x00000008u;
}
void STGraphDebug::clear_has_kernel_follow_ref() {
  _has_bits_[0] &= ~0x00000008u;
}
void STGraphDebug::clear_kernel_follow_ref() {
  if (kernel_follow_ref_ != NULL) kernel_follow_ref_->::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::Clear();
  clear_has_kernel_follow_ref();
}
const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef& STGraphDebug::kernel_follow_ref() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
  return kernel_follow_ref_ != NULL ? *kernel_follow_ref_
                         : *::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::internal_default_instance();
}
::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::mutable_kernel_follow_ref() {
  set_has_kernel_follow_ref();
  if (kernel_follow_ref_ == NULL) {
    kernel_follow_ref_ = new ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
  return kernel_follow_ref_;
}
::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::release_kernel_follow_ref() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
  clear_has_kernel_follow_ref();
  ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* temp = kernel_follow_ref_;
  kernel_follow_ref_ = NULL;
  return temp;
}
void STGraphDebug::set_allocated_kernel_follow_ref(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref) {
  delete kernel_follow_ref_;
  kernel_follow_ref_ = kernel_follow_ref;
  if (kernel_follow_ref) {
    set_has_kernel_follow_ref();
  } else {
    clear_has_kernel_follow_ref();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalLightDebug_SignalDebug::kLightIdFieldNumber;
const int SignalLightDebug_SignalDebug::kColorFieldNumber;
const int SignalLightDebug_SignalDebug::kLightStopSFieldNumber;
const int SignalLightDebug_SignalDebug::kAdcStopDeaccelerationFieldNumber;
const int SignalLightDebug_SignalDebug::kIsStopWallCreatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalLightDebug_SignalDebug::SignalLightDebug_SignalDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SignalLightDebug.SignalDebug)
}
SignalLightDebug_SignalDebug::SignalLightDebug_SignalDebug(const SignalLightDebug_SignalDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_light_id()) {
    light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
  }
  ::memcpy(&light_stop_s_, &from.light_stop_s_,
    reinterpret_cast<char*>(&adc_stop_deacceleration_) -
    reinterpret_cast<char*>(&light_stop_s_) + sizeof(adc_stop_deacceleration_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SignalLightDebug.SignalDebug)
}

void SignalLightDebug_SignalDebug::SharedCtor() {
  _cached_size_ = 0;
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&light_stop_s_, 0, reinterpret_cast<char*>(&adc_stop_deacceleration_) -
    reinterpret_cast<char*>(&light_stop_s_) + sizeof(adc_stop_deacceleration_));
}

SignalLightDebug_SignalDebug::~SignalLightDebug_SignalDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SignalLightDebug.SignalDebug)
  SharedDtor();
}

void SignalLightDebug_SignalDebug::SharedDtor() {
  light_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignalLightDebug_SignalDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalLightDebug_SignalDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignalLightDebug_SignalDebug& SignalLightDebug_SignalDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignalLightDebug_SignalDebug* SignalLightDebug_SignalDebug::New(::google::protobuf::Arena* arena) const {
  SignalLightDebug_SignalDebug* n = new SignalLightDebug_SignalDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignalLightDebug_SignalDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  if (has_light_id()) {
    GOOGLE_DCHECK(!light_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*light_id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&light_stop_s_, 0, reinterpret_cast<char*>(&adc_stop_deacceleration_) -
      reinterpret_cast<char*>(&light_stop_s_) + sizeof(adc_stop_deacceleration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignalLightDebug_SignalDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string light_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_light_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->light_id().data(), this->light_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.SignalLightDebug.SignalDebug.light_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.TrafficLight.Color color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::TrafficLight_Color_IsValid(value)) {
            set_color(static_cast< ::apollo::perception::TrafficLight_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double light_stop_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_light_stop_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &light_stop_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double adc_stop_deacceleration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_adc_stop_deacceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_stop_deacceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_stop_wall_created = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_stop_wall_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stop_wall_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.SignalLightDebug.SignalDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.SignalLightDebug.SignalDebug)
  return false;
#undef DO_
}

void SignalLightDebug_SignalDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string light_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->light_id().data(), this->light_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SignalLightDebug.SignalDebug.light_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->light_id(), output);
  }

  // optional .apollo.perception.TrafficLight.Color color = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  // optional double light_stop_s = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->light_stop_s(), output);
  }

  // optional double adc_stop_deacceleration = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->adc_stop_deacceleration(), output);
  }

  // optional bool is_stop_wall_created = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_stop_wall_created(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.SignalLightDebug.SignalDebug)
}

::google::protobuf::uint8* SignalLightDebug_SignalDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string light_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->light_id().data(), this->light_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SignalLightDebug.SignalDebug.light_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->light_id(), target);
  }

  // optional .apollo.perception.TrafficLight.Color color = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  // optional double light_stop_s = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->light_stop_s(), target);
  }

  // optional double adc_stop_deacceleration = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->adc_stop_deacceleration(), target);
  }

  // optional bool is_stop_wall_created = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_stop_wall_created(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SignalLightDebug.SignalDebug)
  return target;
}

size_t SignalLightDebug_SignalDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string light_id = 1;
    if (has_light_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->light_id());
    }

    // optional double light_stop_s = 3;
    if (has_light_stop_s()) {
      total_size += 1 + 8;
    }

    // optional .apollo.perception.TrafficLight.Color color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional bool is_stop_wall_created = 5;
    if (has_is_stop_wall_created()) {
      total_size += 1 + 1;
    }

    // optional double adc_stop_deacceleration = 4;
    if (has_adc_stop_deacceleration()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalLightDebug_SignalDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalLightDebug_SignalDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalLightDebug_SignalDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SignalLightDebug.SignalDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SignalLightDebug.SignalDebug)
    MergeFrom(*source);
  }
}

void SignalLightDebug_SignalDebug::MergeFrom(const SignalLightDebug_SignalDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_light_id();
      light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      light_stop_s_ = from.light_stop_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_stop_wall_created_ = from.is_stop_wall_created_;
    }
    if (cached_has_bits & 0x00000010u) {
      adc_stop_deacceleration_ = from.adc_stop_deacceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignalLightDebug_SignalDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalLightDebug_SignalDebug::CopyFrom(const SignalLightDebug_SignalDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLightDebug_SignalDebug::IsInitialized() const {
  return true;
}

void SignalLightDebug_SignalDebug::Swap(SignalLightDebug_SignalDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalLightDebug_SignalDebug::InternalSwap(SignalLightDebug_SignalDebug* other) {
  light_id_.Swap(&other->light_id_);
  std::swap(light_stop_s_, other->light_stop_s_);
  std::swap(color_, other->color_);
  std::swap(is_stop_wall_created_, other->is_stop_wall_created_);
  std::swap(adc_stop_deacceleration_, other->adc_stop_deacceleration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignalLightDebug_SignalDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignalLightDebug_SignalDebug

// optional string light_id = 1;
bool SignalLightDebug_SignalDebug::has_light_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_light_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SignalLightDebug_SignalDebug::clear_has_light_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignalLightDebug_SignalDebug::clear_light_id() {
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_light_id();
}
const ::std::string& SignalLightDebug_SignalDebug::light_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
  return light_id_.GetNoArena();
}
void SignalLightDebug_SignalDebug::set_light_id(const ::std::string& value) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
#if LANG_CXX11
void SignalLightDebug_SignalDebug::set_light_id(::std::string&& value) {
  set_has_light_id();
  light_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
#endif
void SignalLightDebug_SignalDebug::set_light_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
void SignalLightDebug_SignalDebug::set_light_id(const char* value, size_t size) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
::std::string* SignalLightDebug_SignalDebug::mutable_light_id() {
  set_has_light_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
  return light_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignalLightDebug_SignalDebug::release_light_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
  clear_has_light_id();
  return light_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignalLightDebug_SignalDebug::set_allocated_light_id(::std::string* light_id) {
  if (light_id != NULL) {
    set_has_light_id();
  } else {
    clear_has_light_id();
  }
  light_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}

// optional .apollo.perception.TrafficLight.Color color = 2;
bool SignalLightDebug_SignalDebug::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
void SignalLightDebug_SignalDebug::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
void SignalLightDebug_SignalDebug::clear_color() {
  color_ = 0;
  clear_has_color();
}
::apollo::perception::TrafficLight_Color SignalLightDebug_SignalDebug::color() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.color)
  return static_cast< ::apollo::perception::TrafficLight_Color >(color_);
}
void SignalLightDebug_SignalDebug::set_color(::apollo::perception::TrafficLight_Color value) {
  assert(::apollo::perception::TrafficLight_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.color)
}

// optional double light_stop_s = 3;
bool SignalLightDebug_SignalDebug::has_light_stop_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_light_stop_s() {
  _has_bits_[0] |= 0x00000002u;
}
void SignalLightDebug_SignalDebug::clear_has_light_stop_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignalLightDebug_SignalDebug::clear_light_stop_s() {
  light_stop_s_ = 0;
  clear_has_light_stop_s();
}
double SignalLightDebug_SignalDebug::light_stop_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.light_stop_s)
  return light_stop_s_;
}
void SignalLightDebug_SignalDebug::set_light_stop_s(double value) {
  set_has_light_stop_s();
  light_stop_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.light_stop_s)
}

// optional double adc_stop_deacceleration = 4;
bool SignalLightDebug_SignalDebug::has_adc_stop_deacceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_adc_stop_deacceleration() {
  _has_bits_[0] |= 0x00000010u;
}
void SignalLightDebug_SignalDebug::clear_has_adc_stop_deacceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
void SignalLightDebug_SignalDebug::clear_adc_stop_deacceleration() {
  adc_stop_deacceleration_ = 0;
  clear_has_adc_stop_deacceleration();
}
double SignalLightDebug_SignalDebug::adc_stop_deacceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.adc_stop_deacceleration)
  return adc_stop_deacceleration_;
}
void SignalLightDebug_SignalDebug::set_adc_stop_deacceleration(double value) {
  set_has_adc_stop_deacceleration();
  adc_stop_deacceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.adc_stop_deacceleration)
}

// optional bool is_stop_wall_created = 5;
bool SignalLightDebug_SignalDebug::has_is_stop_wall_created() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_is_stop_wall_created() {
  _has_bits_[0] |= 0x00000008u;
}
void SignalLightDebug_SignalDebug::clear_has_is_stop_wall_created() {
  _has_bits_[0] &= ~0x00000008u;
}
void SignalLightDebug_SignalDebug::clear_is_stop_wall_created() {
  is_stop_wall_created_ = false;
  clear_has_is_stop_wall_created();
}
bool SignalLightDebug_SignalDebug::is_stop_wall_created() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.is_stop_wall_created)
  return is_stop_wall_created_;
}
void SignalLightDebug_SignalDebug::set_is_stop_wall_created(bool value) {
  set_has_is_stop_wall_created();
  is_stop_wall_created_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.is_stop_wall_created)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalLightDebug::kAdcSpeedFieldNumber;
const int SignalLightDebug::kAdcFrontSFieldNumber;
const int SignalLightDebug::kSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalLightDebug::SignalLightDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SignalLightDebug)
}
SignalLightDebug::SignalLightDebug(const SignalLightDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signal_(from.signal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&adc_speed_, &from.adc_speed_,
    reinterpret_cast<char*>(&adc_front_s_) -
    reinterpret_cast<char*>(&adc_speed_) + sizeof(adc_front_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SignalLightDebug)
}

void SignalLightDebug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&adc_speed_, 0, reinterpret_cast<char*>(&adc_front_s_) -
    reinterpret_cast<char*>(&adc_speed_) + sizeof(adc_front_s_));
}

SignalLightDebug::~SignalLightDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SignalLightDebug)
  SharedDtor();
}

void SignalLightDebug::SharedDtor() {
}

void SignalLightDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalLightDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignalLightDebug& SignalLightDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignalLightDebug* SignalLightDebug::New(::google::protobuf::Arena* arena) const {
  SignalLightDebug* n = new SignalLightDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignalLightDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SignalLightDebug)
  signal_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&adc_speed_, 0, reinterpret_cast<char*>(&adc_front_s_) -
      reinterpret_cast<char*>(&adc_speed_) + sizeof(adc_front_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignalLightDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.SignalLightDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double adc_speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_adc_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double adc_front_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_adc_front_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_front_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.SignalLightDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.SignalLightDebug)
  return false;
#undef DO_
}

void SignalLightDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.SignalLightDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double adc_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->adc_speed(), output);
  }

  // optional double adc_front_s = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->adc_front_s(), output);
  }

  // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  for (unsigned int i = 0, n = this->signal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signal(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.SignalLightDebug)
}

::google::protobuf::uint8* SignalLightDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SignalLightDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double adc_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->adc_speed(), target);
  }

  // optional double adc_front_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->adc_front_s(), target);
  }

  // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  for (unsigned int i = 0, n = this->signal_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->signal(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SignalLightDebug)
  return target;
}

size_t SignalLightDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SignalLightDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  {
    unsigned int count = this->signal_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional double adc_speed = 1;
    if (has_adc_speed()) {
      total_size += 1 + 8;
    }

    // optional double adc_front_s = 2;
    if (has_adc_front_s()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalLightDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SignalLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalLightDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalLightDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SignalLightDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SignalLightDebug)
    MergeFrom(*source);
  }
}

void SignalLightDebug::MergeFrom(const SignalLightDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SignalLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_.MergeFrom(from.signal_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      adc_speed_ = from.adc_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      adc_front_s_ = from.adc_front_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignalLightDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SignalLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalLightDebug::CopyFrom(const SignalLightDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SignalLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLightDebug::IsInitialized() const {
  return true;
}

void SignalLightDebug::Swap(SignalLightDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalLightDebug::InternalSwap(SignalLightDebug* other) {
  signal_.InternalSwap(&other->signal_);
  std::swap(adc_speed_, other->adc_speed_);
  std::swap(adc_front_s_, other->adc_front_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignalLightDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignalLightDebug

// optional double adc_speed = 1;
bool SignalLightDebug::has_adc_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignalLightDebug::set_has_adc_speed() {
  _has_bits_[0] |= 0x00000001u;
}
void SignalLightDebug::clear_has_adc_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignalLightDebug::clear_adc_speed() {
  adc_speed_ = 0;
  clear_has_adc_speed();
}
double SignalLightDebug::adc_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.adc_speed)
  return adc_speed_;
}
void SignalLightDebug::set_adc_speed(double value) {
  set_has_adc_speed();
  adc_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.adc_speed)
}

// optional double adc_front_s = 2;
bool SignalLightDebug::has_adc_front_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignalLightDebug::set_has_adc_front_s() {
  _has_bits_[0] |= 0x00000002u;
}
void SignalLightDebug::clear_has_adc_front_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignalLightDebug::clear_adc_front_s() {
  adc_front_s_ = 0;
  clear_has_adc_front_s();
}
double SignalLightDebug::adc_front_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.adc_front_s)
  return adc_front_s_;
}
void SignalLightDebug::set_adc_front_s(double value) {
  set_has_adc_front_s();
  adc_front_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.adc_front_s)
}

// repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
int SignalLightDebug::signal_size() const {
  return signal_.size();
}
void SignalLightDebug::clear_signal() {
  signal_.Clear();
}
const ::apollo::planning_internal::SignalLightDebug_SignalDebug& SignalLightDebug::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.signal)
  return signal_.Get(index);
}
::apollo::planning_internal::SignalLightDebug_SignalDebug* SignalLightDebug::mutable_signal(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SignalLightDebug.signal)
  return signal_.Mutable(index);
}
::apollo::planning_internal::SignalLightDebug_SignalDebug* SignalLightDebug::add_signal() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SignalLightDebug.signal)
  return signal_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug >*
SignalLightDebug::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SignalLightDebug.signal)
  return &signal_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug >&
SignalLightDebug::signal() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SignalLightDebug.signal)
  return signal_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionTag::kDeciderTagFieldNumber;
const int DecisionTag::kDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionTag::DecisionTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.DecisionTag)
}
DecisionTag::DecisionTag(const DecisionTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  decider_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_decider_tag()) {
    decider_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.decider_tag_);
  }
  if (from.has_decision()) {
    decision_ = new ::apollo::planning::ObjectDecisionType(*from.decision_);
  } else {
    decision_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.DecisionTag)
}

void DecisionTag::SharedCtor() {
  _cached_size_ = 0;
  decider_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  decision_ = NULL;
}

DecisionTag::~DecisionTag() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.DecisionTag)
  SharedDtor();
}

void DecisionTag::SharedDtor() {
  decider_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete decision_;
  }
}

void DecisionTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionTag::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecisionTag& DecisionTag::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecisionTag* DecisionTag::New(::google::protobuf::Arena* arena) const {
  DecisionTag* n = new DecisionTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecisionTag::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.DecisionTag)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_decider_tag()) {
      GOOGLE_DCHECK(!decider_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*decider_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_decision()) {
      GOOGLE_DCHECK(decision_ != NULL);
      decision_->::apollo::planning::ObjectDecisionType::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DecisionTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.DecisionTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string decider_tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decider_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->decider_tag().data(), this->decider_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.DecisionTag.decider_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ObjectDecisionType decision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.DecisionTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.DecisionTag)
  return false;
#undef DO_
}

void DecisionTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.DecisionTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string decider_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->decider_tag().data(), this->decider_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.DecisionTag.decider_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->decider_tag(), output);
  }

  // optional .apollo.planning.ObjectDecisionType decision = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->decision_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.DecisionTag)
}

::google::protobuf::uint8* DecisionTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.DecisionTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string decider_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->decider_tag().data(), this->decider_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.DecisionTag.decider_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->decider_tag(), target);
  }

  // optional .apollo.planning.ObjectDecisionType decision = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->decision_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.DecisionTag)
  return target;
}

size_t DecisionTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.DecisionTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string decider_tag = 1;
    if (has_decider_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decider_tag());
    }

    // optional .apollo.planning.ObjectDecisionType decision = 2;
    if (has_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->decision_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.DecisionTag)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionTag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.DecisionTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.DecisionTag)
    MergeFrom(*source);
  }
}

void DecisionTag::MergeFrom(const DecisionTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.DecisionTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_decider_tag();
      decider_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.decider_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_decision()->::apollo::planning::ObjectDecisionType::MergeFrom(from.decision());
    }
  }
}

void DecisionTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.DecisionTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionTag::CopyFrom(const DecisionTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.DecisionTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTag::IsInitialized() const {
  return true;
}

void DecisionTag::Swap(DecisionTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecisionTag::InternalSwap(DecisionTag* other) {
  decider_tag_.Swap(&other->decider_tag_);
  std::swap(decision_, other->decision_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionTag::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecisionTag

// optional string decider_tag = 1;
bool DecisionTag::has_decider_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DecisionTag::set_has_decider_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void DecisionTag::clear_has_decider_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void DecisionTag::clear_decider_tag() {
  decider_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_decider_tag();
}
const ::std::string& DecisionTag::decider_tag() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DecisionTag.decider_tag)
  return decider_tag_.GetNoArena();
}
void DecisionTag::set_decider_tag(const ::std::string& value) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.DecisionTag.decider_tag)
}
#if LANG_CXX11
void DecisionTag::set_decider_tag(::std::string&& value) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.DecisionTag.decider_tag)
}
#endif
void DecisionTag::set_decider_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.DecisionTag.decider_tag)
}
void DecisionTag::set_decider_tag(const char* value, size_t size) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.DecisionTag.decider_tag)
}
::std::string* DecisionTag::mutable_decider_tag() {
  set_has_decider_tag();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DecisionTag.decider_tag)
  return decider_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DecisionTag::release_decider_tag() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.DecisionTag.decider_tag)
  clear_has_decider_tag();
  return decider_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DecisionTag::set_allocated_decider_tag(::std::string* decider_tag) {
  if (decider_tag != NULL) {
    set_has_decider_tag();
  } else {
    clear_has_decider_tag();
  }
  decider_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decider_tag);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.DecisionTag.decider_tag)
}

// optional .apollo.planning.ObjectDecisionType decision = 2;
bool DecisionTag::has_decision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DecisionTag::set_has_decision() {
  _has_bits_[0] |= 0x00000002u;
}
void DecisionTag::clear_has_decision() {
  _has_bits_[0] &= ~0x00000002u;
}
void DecisionTag::clear_decision() {
  if (decision_ != NULL) decision_->::apollo::planning::ObjectDecisionType::Clear();
  clear_has_decision();
}
const ::apollo::planning::ObjectDecisionType& DecisionTag::decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DecisionTag.decision)
  return decision_ != NULL ? *decision_
                         : *::apollo::planning::ObjectDecisionType::internal_default_instance();
}
::apollo::planning::ObjectDecisionType* DecisionTag::mutable_decision() {
  set_has_decision();
  if (decision_ == NULL) {
    decision_ = new ::apollo::planning::ObjectDecisionType;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DecisionTag.decision)
  return decision_;
}
::apollo::planning::ObjectDecisionType* DecisionTag::release_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.DecisionTag.decision)
  clear_has_decision();
  ::apollo::planning::ObjectDecisionType* temp = decision_;
  decision_ = NULL;
  return temp;
}
void DecisionTag::set_allocated_decision(::apollo::planning::ObjectDecisionType* decision) {
  delete decision_;
  decision_ = decision;
  if (decision) {
    set_has_decision();
  } else {
    clear_has_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.DecisionTag.decision)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleDebug::kIdFieldNumber;
const int ObstacleDebug::kSlBoundaryFieldNumber;
const int ObstacleDebug::kDecisionTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleDebug::ObstacleDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.ObstacleDebug)
}
ObstacleDebug::ObstacleDebug(const ObstacleDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      decision_tag_(from.decision_tag_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_sl_boundary()) {
    sl_boundary_ = new ::apollo::planning::SLBoundary(*from.sl_boundary_);
  } else {
    sl_boundary_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.ObstacleDebug)
}

void ObstacleDebug::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sl_boundary_ = NULL;
}

ObstacleDebug::~ObstacleDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.ObstacleDebug)
  SharedDtor();
}

void ObstacleDebug::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete sl_boundary_;
  }
}

void ObstacleDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleDebug& ObstacleDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObstacleDebug* ObstacleDebug::New(::google::protobuf::Arena* arena) const {
  ObstacleDebug* n = new ObstacleDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.ObstacleDebug)
  decision_tag_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_sl_boundary()) {
      GOOGLE_DCHECK(sl_boundary_ != NULL);
      sl_boundary_->::apollo::planning::SLBoundary::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.ObstacleDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.ObstacleDebug.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.SLBoundary sl_boundary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sl_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_decision_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.ObstacleDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.ObstacleDebug)
  return false;
#undef DO_
}

void ObstacleDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.ObstacleDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ObstacleDebug.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .apollo.planning.SLBoundary sl_boundary = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sl_boundary_, output);
  }

  // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
  for (unsigned int i = 0, n = this->decision_tag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->decision_tag(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.ObstacleDebug)
}

::google::protobuf::uint8* ObstacleDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.ObstacleDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ObstacleDebug.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .apollo.planning.SLBoundary sl_boundary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sl_boundary_, deterministic, target);
  }

  // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
  for (unsigned int i = 0, n = this->decision_tag_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->decision_tag(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.ObstacleDebug)
  return target;
}

size_t ObstacleDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.ObstacleDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
  {
    unsigned int count = this->decision_tag_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decision_tag(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .apollo.planning.SLBoundary sl_boundary = 2;
    if (has_sl_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sl_boundary_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.ObstacleDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.ObstacleDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.ObstacleDebug)
    MergeFrom(*source);
  }
}

void ObstacleDebug::MergeFrom(const ObstacleDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.ObstacleDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  decision_tag_.MergeFrom(from.decision_tag_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sl_boundary()->::apollo::planning::SLBoundary::MergeFrom(from.sl_boundary());
    }
  }
}

void ObstacleDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.ObstacleDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleDebug::CopyFrom(const ObstacleDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.ObstacleDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleDebug::IsInitialized() const {
  return true;
}

void ObstacleDebug::Swap(ObstacleDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleDebug::InternalSwap(ObstacleDebug* other) {
  decision_tag_.InternalSwap(&other->decision_tag_);
  id_.Swap(&other->id_);
  std::swap(sl_boundary_, other->sl_boundary_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleDebug

// optional string id = 1;
bool ObstacleDebug::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObstacleDebug::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObstacleDebug::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObstacleDebug::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& ObstacleDebug::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ObstacleDebug.id)
  return id_.GetNoArena();
}
void ObstacleDebug::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ObstacleDebug.id)
}
#if LANG_CXX11
void ObstacleDebug::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.ObstacleDebug.id)
}
#endif
void ObstacleDebug::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.ObstacleDebug.id)
}
void ObstacleDebug::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.ObstacleDebug.id)
}
::std::string* ObstacleDebug::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ObstacleDebug.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObstacleDebug::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ObstacleDebug.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObstacleDebug::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ObstacleDebug.id)
}

// optional .apollo.planning.SLBoundary sl_boundary = 2;
bool ObstacleDebug::has_sl_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObstacleDebug::set_has_sl_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
void ObstacleDebug::clear_has_sl_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObstacleDebug::clear_sl_boundary() {
  if (sl_boundary_ != NULL) sl_boundary_->::apollo::planning::SLBoundary::Clear();
  clear_has_sl_boundary();
}
const ::apollo::planning::SLBoundary& ObstacleDebug::sl_boundary() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ObstacleDebug.sl_boundary)
  return sl_boundary_ != NULL ? *sl_boundary_
                         : *::apollo::planning::SLBoundary::internal_default_instance();
}
::apollo::planning::SLBoundary* ObstacleDebug::mutable_sl_boundary() {
  set_has_sl_boundary();
  if (sl_boundary_ == NULL) {
    sl_boundary_ = new ::apollo::planning::SLBoundary;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ObstacleDebug.sl_boundary)
  return sl_boundary_;
}
::apollo::planning::SLBoundary* ObstacleDebug::release_sl_boundary() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ObstacleDebug.sl_boundary)
  clear_has_sl_boundary();
  ::apollo::planning::SLBoundary* temp = sl_boundary_;
  sl_boundary_ = NULL;
  return temp;
}
void ObstacleDebug::set_allocated_sl_boundary(::apollo::planning::SLBoundary* sl_boundary) {
  delete sl_boundary_;
  sl_boundary_ = sl_boundary;
  if (sl_boundary) {
    set_has_sl_boundary();
  } else {
    clear_has_sl_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ObstacleDebug.sl_boundary)
}

// repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
int ObstacleDebug::decision_tag_size() const {
  return decision_tag_.size();
}
void ObstacleDebug::clear_decision_tag() {
  decision_tag_.Clear();
}
const ::apollo::planning_internal::DecisionTag& ObstacleDebug::decision_tag(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Get(index);
}
::apollo::planning_internal::DecisionTag* ObstacleDebug::mutable_decision_tag(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Mutable(index);
}
::apollo::planning_internal::DecisionTag* ObstacleDebug::add_decision_tag() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::DecisionTag >*
ObstacleDebug::mutable_decision_tag() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.ObstacleDebug.decision_tag)
  return &decision_tag_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::DecisionTag >&
ObstacleDebug::decision_tag() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLineDebug::kIdFieldNumber;
const int ReferenceLineDebug::kLengthFieldNumber;
const int ReferenceLineDebug::kCostFieldNumber;
const int ReferenceLineDebug::kIsChangeLanePathFieldNumber;
const int ReferenceLineDebug::kIsDrivableFieldNumber;
const int ReferenceLineDebug::kIsProtectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceLineDebug::ReferenceLineDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.ReferenceLineDebug)
}
ReferenceLineDebug::ReferenceLineDebug(const ReferenceLineDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&length_, &from.length_,
    reinterpret_cast<char*>(&is_protected_) -
    reinterpret_cast<char*>(&length_) + sizeof(is_protected_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.ReferenceLineDebug)
}

void ReferenceLineDebug::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, reinterpret_cast<char*>(&is_protected_) -
    reinterpret_cast<char*>(&length_) + sizeof(is_protected_));
}

ReferenceLineDebug::~ReferenceLineDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.ReferenceLineDebug)
  SharedDtor();
}

void ReferenceLineDebug::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReferenceLineDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceLineDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferenceLineDebug& ReferenceLineDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReferenceLineDebug* ReferenceLineDebug::New(::google::protobuf::Arena* arena) const {
  ReferenceLineDebug* n = new ReferenceLineDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReferenceLineDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.ReferenceLineDebug)
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&length_, 0, reinterpret_cast<char*>(&is_protected_) -
      reinterpret_cast<char*>(&length_) + sizeof(is_protected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReferenceLineDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.ReferenceLineDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.ReferenceLineDebug.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_change_lane_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_change_lane_path();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_change_lane_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_drivable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_drivable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_drivable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_protected = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_is_protected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_protected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.ReferenceLineDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.ReferenceLineDebug)
  return false;
#undef DO_
}

void ReferenceLineDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.ReferenceLineDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ReferenceLineDebug.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // optional double cost = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cost(), output);
  }

  // optional bool is_change_lane_path = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_change_lane_path(), output);
  }

  // optional bool is_drivable = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_drivable(), output);
  }

  // optional bool is_protected = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_protected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.ReferenceLineDebug)
}

::google::protobuf::uint8* ReferenceLineDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.ReferenceLineDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ReferenceLineDebug.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // optional double cost = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cost(), target);
  }

  // optional bool is_change_lane_path = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_change_lane_path(), target);
  }

  // optional bool is_drivable = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_drivable(), target);
  }

  // optional bool is_protected = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_protected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.ReferenceLineDebug)
  return target;
}

size_t ReferenceLineDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.ReferenceLineDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double cost = 3;
    if (has_cost()) {
      total_size += 1 + 8;
    }

    // optional bool is_change_lane_path = 4;
    if (has_is_change_lane_path()) {
      total_size += 1 + 1;
    }

    // optional bool is_drivable = 5;
    if (has_is_drivable()) {
      total_size += 1 + 1;
    }

    // optional bool is_protected = 6;
    if (has_is_protected()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceLineDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.ReferenceLineDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceLineDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceLineDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.ReferenceLineDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.ReferenceLineDebug)
    MergeFrom(*source);
  }
}

void ReferenceLineDebug::MergeFrom(const ReferenceLineDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.ReferenceLineDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      cost_ = from.cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_change_lane_path_ = from.is_change_lane_path_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_drivable_ = from.is_drivable_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_protected_ = from.is_protected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReferenceLineDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.ReferenceLineDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineDebug::CopyFrom(const ReferenceLineDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.ReferenceLineDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineDebug::IsInitialized() const {
  return true;
}

void ReferenceLineDebug::Swap(ReferenceLineDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferenceLineDebug::InternalSwap(ReferenceLineDebug* other) {
  id_.Swap(&other->id_);
  std::swap(length_, other->length_);
  std::swap(cost_, other->cost_);
  std::swap(is_change_lane_path_, other->is_change_lane_path_);
  std::swap(is_drivable_, other->is_drivable_);
  std::swap(is_protected_, other->is_protected_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceLineDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReferenceLineDebug

// optional string id = 1;
bool ReferenceLineDebug::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReferenceLineDebug::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReferenceLineDebug::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReferenceLineDebug::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& ReferenceLineDebug::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.id)
  return id_.GetNoArena();
}
void ReferenceLineDebug::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.id)
}
#if LANG_CXX11
void ReferenceLineDebug::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.ReferenceLineDebug.id)
}
#endif
void ReferenceLineDebug::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.ReferenceLineDebug.id)
}
void ReferenceLineDebug::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.ReferenceLineDebug.id)
}
::std::string* ReferenceLineDebug::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ReferenceLineDebug.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReferenceLineDebug::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ReferenceLineDebug.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReferenceLineDebug::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ReferenceLineDebug.id)
}

// optional double length = 2;
bool ReferenceLineDebug::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReferenceLineDebug::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
void ReferenceLineDebug::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReferenceLineDebug::clear_length() {
  length_ = 0;
  clear_has_length();
}
double ReferenceLineDebug::length() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.length)
  return length_;
}
void ReferenceLineDebug::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.length)
}

// optional double cost = 3;
bool ReferenceLineDebug::has_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReferenceLineDebug::set_has_cost() {
  _has_bits_[0] |= 0x00000004u;
}
void ReferenceLineDebug::clear_has_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReferenceLineDebug::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
double ReferenceLineDebug::cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.cost)
  return cost_;
}
void ReferenceLineDebug::set_cost(double value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.cost)
}

// optional bool is_change_lane_path = 4;
bool ReferenceLineDebug::has_is_change_lane_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReferenceLineDebug::set_has_is_change_lane_path() {
  _has_bits_[0] |= 0x00000008u;
}
void ReferenceLineDebug::clear_has_is_change_lane_path() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReferenceLineDebug::clear_is_change_lane_path() {
  is_change_lane_path_ = false;
  clear_has_is_change_lane_path();
}
bool ReferenceLineDebug::is_change_lane_path() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.is_change_lane_path)
  return is_change_lane_path_;
}
void ReferenceLineDebug::set_is_change_lane_path(bool value) {
  set_has_is_change_lane_path();
  is_change_lane_path_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.is_change_lane_path)
}

// optional bool is_drivable = 5;
bool ReferenceLineDebug::has_is_drivable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReferenceLineDebug::set_has_is_drivable() {
  _has_bits_[0] |= 0x00000010u;
}
void ReferenceLineDebug::clear_has_is_drivable() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReferenceLineDebug::clear_is_drivable() {
  is_drivable_ = false;
  clear_has_is_drivable();
}
bool ReferenceLineDebug::is_drivable() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.is_drivable)
  return is_drivable_;
}
void ReferenceLineDebug::set_is_drivable(bool value) {
  set_has_is_drivable();
  is_drivable_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.is_drivable)
}

// optional bool is_protected = 6;
bool ReferenceLineDebug::has_is_protected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ReferenceLineDebug::set_has_is_protected() {
  _has_bits_[0] |= 0x00000020u;
}
void ReferenceLineDebug::clear_has_is_protected() {
  _has_bits_[0] &= ~0x00000020u;
}
void ReferenceLineDebug::clear_is_protected() {
  is_protected_ = false;
  clear_has_is_protected();
}
bool ReferenceLineDebug::is_protected() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.is_protected)
  return is_protected_;
}
void ReferenceLineDebug::set_is_protected(bool value) {
  set_has_is_protected();
  is_protected_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.is_protected)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeLaneState::kStateFieldNumber;
const int ChangeLaneState::kPathIdFieldNumber;
const int ChangeLaneState::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeLaneState::ChangeLaneState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.ChangeLaneState)
}
ChangeLaneState::ChangeLaneState(const ChangeLaneState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path_id()) {
    path_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_id_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.ChangeLaneState)
}

void ChangeLaneState::SharedCtor() {
  _cached_size_ = 0;
  path_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
  state_ = 1;
}

ChangeLaneState::~ChangeLaneState() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.ChangeLaneState)
  SharedDtor();
}

void ChangeLaneState::SharedDtor() {
  path_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChangeLaneState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeLaneState::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeLaneState& ChangeLaneState::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeLaneState* ChangeLaneState::New(::google::protobuf::Arena* arena) const {
  ChangeLaneState* n = new ChangeLaneState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeLaneState::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.ChangeLaneState)
  if (has_path_id()) {
    GOOGLE_DCHECK(!path_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*path_id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    timestamp_ = 0;
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChangeLaneState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.ChangeLaneState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning_internal.ChangeLaneState.State state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning_internal::ChangeLaneState_State_IsValid(value)) {
            set_state(static_cast< ::apollo::planning_internal::ChangeLaneState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path_id().data(), this->path_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning_internal.ChangeLaneState.path_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.ChangeLaneState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.ChangeLaneState)
  return false;
#undef DO_
}

void ChangeLaneState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.ChangeLaneState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning_internal.ChangeLaneState.State state = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional string path_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path_id().data(), this->path_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ChangeLaneState.path_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path_id(), output);
  }

  // optional double timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.ChangeLaneState)
}

::google::protobuf::uint8* ChangeLaneState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.ChangeLaneState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning_internal.ChangeLaneState.State state = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional string path_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path_id().data(), this->path_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ChangeLaneState.path_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path_id(), target);
  }

  // optional double timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.ChangeLaneState)
  return target;
}

size_t ChangeLaneState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.ChangeLaneState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string path_id = 2;
    if (has_path_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path_id());
    }

    // optional double timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning_internal.ChangeLaneState.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeLaneState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.ChangeLaneState)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeLaneState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeLaneState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.ChangeLaneState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.ChangeLaneState)
    MergeFrom(*source);
  }
}

void ChangeLaneState::MergeFrom(const ChangeLaneState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.ChangeLaneState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_path_id();
      path_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeLaneState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.ChangeLaneState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLaneState::CopyFrom(const ChangeLaneState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.ChangeLaneState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLaneState::IsInitialized() const {
  return true;
}

void ChangeLaneState::Swap(ChangeLaneState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeLaneState::InternalSwap(ChangeLaneState* other) {
  path_id_.Swap(&other->path_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeLaneState::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeLaneState

// optional .apollo.planning_internal.ChangeLaneState.State state = 1;
bool ChangeLaneState::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChangeLaneState::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void ChangeLaneState::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChangeLaneState::clear_state() {
  state_ = 1;
  clear_has_state();
}
::apollo::planning_internal::ChangeLaneState_State ChangeLaneState::state() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ChangeLaneState.state)
  return static_cast< ::apollo::planning_internal::ChangeLaneState_State >(state_);
}
void ChangeLaneState::set_state(::apollo::planning_internal::ChangeLaneState_State value) {
  assert(::apollo::planning_internal::ChangeLaneState_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ChangeLaneState.state)
}

// optional string path_id = 2;
bool ChangeLaneState::has_path_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangeLaneState::set_has_path_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangeLaneState::clear_has_path_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeLaneState::clear_path_id() {
  path_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path_id();
}
const ::std::string& ChangeLaneState::path_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ChangeLaneState.path_id)
  return path_id_.GetNoArena();
}
void ChangeLaneState::set_path_id(const ::std::string& value) {
  set_has_path_id();
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ChangeLaneState.path_id)
}
#if LANG_CXX11
void ChangeLaneState::set_path_id(::std::string&& value) {
  set_has_path_id();
  path_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning_internal.ChangeLaneState.path_id)
}
#endif
void ChangeLaneState::set_path_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path_id();
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning_internal.ChangeLaneState.path_id)
}
void ChangeLaneState::set_path_id(const char* value, size_t size) {
  set_has_path_id();
  path_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning_internal.ChangeLaneState.path_id)
}
::std::string* ChangeLaneState::mutable_path_id() {
  set_has_path_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ChangeLaneState.path_id)
  return path_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeLaneState::release_path_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ChangeLaneState.path_id)
  clear_has_path_id();
  return path_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeLaneState::set_allocated_path_id(::std::string* path_id) {
  if (path_id != NULL) {
    set_has_path_id();
  } else {
    clear_has_path_id();
  }
  path_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ChangeLaneState.path_id)
}

// optional double timestamp = 3;
bool ChangeLaneState::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChangeLaneState::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void ChangeLaneState::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChangeLaneState::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double ChangeLaneState::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ChangeLaneState.timestamp)
  return timestamp_;
}
void ChangeLaneState::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ChangeLaneState.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleLayerDebug::kSlPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleLayerDebug::SampleLayerDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SampleLayerDebug)
}
SampleLayerDebug::SampleLayerDebug(const SampleLayerDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sl_point_(from.sl_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SampleLayerDebug)
}

void SampleLayerDebug::SharedCtor() {
  _cached_size_ = 0;
}

SampleLayerDebug::~SampleLayerDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SampleLayerDebug)
  SharedDtor();
}

void SampleLayerDebug::SharedDtor() {
}

void SampleLayerDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleLayerDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SampleLayerDebug& SampleLayerDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SampleLayerDebug* SampleLayerDebug::New(::google::protobuf::Arena* arena) const {
  SampleLayerDebug* n = new SampleLayerDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleLayerDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SampleLayerDebug)
  sl_point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SampleLayerDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.SampleLayerDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.SLPoint sl_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sl_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.SampleLayerDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.SampleLayerDebug)
  return false;
#undef DO_
}

void SampleLayerDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.SampleLayerDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.SLPoint sl_point = 1;
  for (unsigned int i = 0, n = this->sl_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sl_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.SampleLayerDebug)
}

::google::protobuf::uint8* SampleLayerDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SampleLayerDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.SLPoint sl_point = 1;
  for (unsigned int i = 0, n = this->sl_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sl_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SampleLayerDebug)
  return target;
}

size_t SampleLayerDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SampleLayerDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.common.SLPoint sl_point = 1;
  {
    unsigned int count = this->sl_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sl_point(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleLayerDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SampleLayerDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleLayerDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleLayerDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SampleLayerDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SampleLayerDebug)
    MergeFrom(*source);
  }
}

void SampleLayerDebug::MergeFrom(const SampleLayerDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SampleLayerDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sl_point_.MergeFrom(from.sl_point_);
}

void SampleLayerDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SampleLayerDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleLayerDebug::CopyFrom(const SampleLayerDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SampleLayerDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleLayerDebug::IsInitialized() const {
  return true;
}

void SampleLayerDebug::Swap(SampleLayerDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleLayerDebug::InternalSwap(SampleLayerDebug* other) {
  sl_point_.InternalSwap(&other->sl_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleLayerDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleLayerDebug

// repeated .apollo.common.SLPoint sl_point = 1;
int SampleLayerDebug::sl_point_size() const {
  return sl_point_.size();
}
void SampleLayerDebug::clear_sl_point() {
  sl_point_.Clear();
}
const ::apollo::common::SLPoint& SampleLayerDebug::sl_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Get(index);
}
::apollo::common::SLPoint* SampleLayerDebug::mutable_sl_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Mutable(index);
}
::apollo::common::SLPoint* SampleLayerDebug::add_sl_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >*
SampleLayerDebug::mutable_sl_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SampleLayerDebug.sl_point)
  return &sl_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >&
SampleLayerDebug::sl_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DpPolyGraphDebug::kSampleLayerFieldNumber;
const int DpPolyGraphDebug::kMinCostPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DpPolyGraphDebug::DpPolyGraphDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.DpPolyGraphDebug)
}
DpPolyGraphDebug::DpPolyGraphDebug(const DpPolyGraphDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sample_layer_(from.sample_layer_),
      min_cost_point_(from.min_cost_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.DpPolyGraphDebug)
}

void DpPolyGraphDebug::SharedCtor() {
  _cached_size_ = 0;
}

DpPolyGraphDebug::~DpPolyGraphDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.DpPolyGraphDebug)
  SharedDtor();
}

void DpPolyGraphDebug::SharedDtor() {
}

void DpPolyGraphDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DpPolyGraphDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DpPolyGraphDebug& DpPolyGraphDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

DpPolyGraphDebug* DpPolyGraphDebug::New(::google::protobuf::Arena* arena) const {
  DpPolyGraphDebug* n = new DpPolyGraphDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DpPolyGraphDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.DpPolyGraphDebug)
  sample_layer_.Clear();
  min_cost_point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DpPolyGraphDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.DpPolyGraphDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sample_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.SLPoint min_cost_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_min_cost_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.DpPolyGraphDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.DpPolyGraphDebug)
  return false;
#undef DO_
}

void DpPolyGraphDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.DpPolyGraphDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
  for (unsigned int i = 0, n = this->sample_layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sample_layer(i), output);
  }

  // repeated .apollo.common.SLPoint min_cost_point = 2;
  for (unsigned int i = 0, n = this->min_cost_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->min_cost_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.DpPolyGraphDebug)
}

::google::protobuf::uint8* DpPolyGraphDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.DpPolyGraphDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
  for (unsigned int i = 0, n = this->sample_layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sample_layer(i), deterministic, target);
  }

  // repeated .apollo.common.SLPoint min_cost_point = 2;
  for (unsigned int i = 0, n = this->min_cost_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->min_cost_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.DpPolyGraphDebug)
  return target;
}

size_t DpPolyGraphDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.DpPolyGraphDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
  {
    unsigned int count = this->sample_layer_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sample_layer(i));
    }
  }

  // repeated .apollo.common.SLPoint min_cost_point = 2;
  {
    unsigned int count = this->min_cost_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_cost_point(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DpPolyGraphDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.DpPolyGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const DpPolyGraphDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DpPolyGraphDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.DpPolyGraphDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.DpPolyGraphDebug)
    MergeFrom(*source);
  }
}

void DpPolyGraphDebug::MergeFrom(const DpPolyGraphDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.DpPolyGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sample_layer_.MergeFrom(from.sample_layer_);
  min_cost_point_.MergeFrom(from.min_cost_point_);
}

void DpPolyGraphDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.DpPolyGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpPolyGraphDebug::CopyFrom(const DpPolyGraphDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.DpPolyGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpPolyGraphDebug::IsInitialized() const {
  return true;
}

void DpPolyGraphDebug::Swap(DpPolyGraphDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DpPolyGraphDebug::InternalSwap(DpPolyGraphDebug* other) {
  sample_layer_.InternalSwap(&other->sample_layer_);
  min_cost_point_.InternalSwap(&other->min_cost_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DpPolyGraphDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DpPolyGraphDebug

// repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
int DpPolyGraphDebug::sample_layer_size() const {
  return sample_layer_.size();
}
void DpPolyGraphDebug::clear_sample_layer() {
  sample_layer_.Clear();
}
const ::apollo::planning_internal::SampleLayerDebug& DpPolyGraphDebug::sample_layer(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Get(index);
}
::apollo::planning_internal::SampleLayerDebug* DpPolyGraphDebug::mutable_sample_layer(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Mutable(index);
}
::apollo::planning_internal::SampleLayerDebug* DpPolyGraphDebug::add_sample_layer() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug >*
DpPolyGraphDebug::mutable_sample_layer() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return &sample_layer_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug >&
DpPolyGraphDebug::sample_layer() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_;
}

// repeated .apollo.common.SLPoint min_cost_point = 2;
int DpPolyGraphDebug::min_cost_point_size() const {
  return min_cost_point_.size();
}
void DpPolyGraphDebug::clear_min_cost_point() {
  min_cost_point_.Clear();
}
const ::apollo::common::SLPoint& DpPolyGraphDebug::min_cost_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Get(index);
}
::apollo::common::SLPoint* DpPolyGraphDebug::mutable_min_cost_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Mutable(index);
}
::apollo::common::SLPoint* DpPolyGraphDebug::add_min_cost_point() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >*
DpPolyGraphDebug::mutable_min_cost_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return &min_cost_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::SLPoint >&
DpPolyGraphDebug::min_cost_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningData::kAdcPositionFieldNumber;
const int PlanningData::kChassisFieldNumber;
const int PlanningData::kRoutingFieldNumber;
const int PlanningData::kInitPointFieldNumber;
const int PlanningData::kPathFieldNumber;
const int PlanningData::kSpeedPlanFieldNumber;
const int PlanningData::kStGraphFieldNumber;
const int PlanningData::kSlFrameFieldNumber;
const int PlanningData::kPredictionHeaderFieldNumber;
const int PlanningData::kSignalLightFieldNumber;
const int PlanningData::kObstacleFieldNumber;
const int PlanningData::kReferenceLineFieldNumber;
const int PlanningData::kDpPolyGraphFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningData::PlanningData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.PlanningData)
}
PlanningData::PlanningData(const PlanningData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      path_(from.path_),
      speed_plan_(from.speed_plan_),
      st_graph_(from.st_graph_),
      sl_frame_(from.sl_frame_),
      obstacle_(from.obstacle_),
      reference_line_(from.reference_line_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_adc_position()) {
    adc_position_ = new ::apollo::localization::LocalizationEstimate(*from.adc_position_);
  } else {
    adc_position_ = NULL;
  }
  if (from.has_chassis()) {
    chassis_ = new ::apollo::canbus::Chassis(*from.chassis_);
  } else {
    chassis_ = NULL;
  }
  if (from.has_routing()) {
    routing_ = new ::apollo::routing::RoutingResponse(*from.routing_);
  } else {
    routing_ = NULL;
  }
  if (from.has_init_point()) {
    init_point_ = new ::apollo::common::TrajectoryPoint(*from.init_point_);
  } else {
    init_point_ = NULL;
  }
  if (from.has_prediction_header()) {
    prediction_header_ = new ::apollo::common::Header(*from.prediction_header_);
  } else {
    prediction_header_ = NULL;
  }
  if (from.has_signal_light()) {
    signal_light_ = new ::apollo::planning_internal::SignalLightDebug(*from.signal_light_);
  } else {
    signal_light_ = NULL;
  }
  if (from.has_dp_poly_graph()) {
    dp_poly_graph_ = new ::apollo::planning_internal::DpPolyGraphDebug(*from.dp_poly_graph_);
  } else {
    dp_poly_graph_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.PlanningData)
}

void PlanningData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&adc_position_, 0, reinterpret_cast<char*>(&dp_poly_graph_) -
    reinterpret_cast<char*>(&adc_position_) + sizeof(dp_poly_graph_));
}

PlanningData::~PlanningData() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.PlanningData)
  SharedDtor();
}

void PlanningData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete adc_position_;
  }
  if (this != internal_default_instance()) {
    delete chassis_;
  }
  if (this != internal_default_instance()) {
    delete routing_;
  }
  if (this != internal_default_instance()) {
    delete init_point_;
  }
  if (this != internal_default_instance()) {
    delete prediction_header_;
  }
  if (this != internal_default_instance()) {
    delete signal_light_;
  }
  if (this != internal_default_instance()) {
    delete dp_poly_graph_;
  }
}

void PlanningData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningData::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningData& PlanningData::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanningData* PlanningData::New(::google::protobuf::Arena* arena) const {
  PlanningData* n = new PlanningData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.PlanningData)
  path_.Clear();
  speed_plan_.Clear();
  st_graph_.Clear();
  sl_frame_.Clear();
  obstacle_.Clear();
  reference_line_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    if (has_adc_position()) {
      GOOGLE_DCHECK(adc_position_ != NULL);
      adc_position_->::apollo::localization::LocalizationEstimate::Clear();
    }
    if (has_chassis()) {
      GOOGLE_DCHECK(chassis_ != NULL);
      chassis_->::apollo::canbus::Chassis::Clear();
    }
    if (has_routing()) {
      GOOGLE_DCHECK(routing_ != NULL);
      routing_->::apollo::routing::RoutingResponse::Clear();
    }
    if (has_init_point()) {
      GOOGLE_DCHECK(init_point_ != NULL);
      init_point_->::apollo::common::TrajectoryPoint::Clear();
    }
    if (has_prediction_header()) {
      GOOGLE_DCHECK(prediction_header_ != NULL);
      prediction_header_->::apollo::common::Header::Clear();
    }
    if (has_signal_light()) {
      GOOGLE_DCHECK(signal_light_ != NULL);
      signal_light_->::apollo::planning_internal::SignalLightDebug::Clear();
    }
    if (has_dp_poly_graph()) {
      GOOGLE_DCHECK(dp_poly_graph_ != NULL);
      dp_poly_graph_->::apollo::planning_internal::DpPolyGraphDebug::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning_internal.PlanningData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.Path path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.LocalizationEstimate adc_position = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adc_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis chassis = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.RoutingResponse routing = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.TrajectoryPoint init_point = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speed_plan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_st_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sl_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Header prediction_header = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prediction_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reference_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dp_poly_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning_internal.PlanningData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning_internal.PlanningData)
  return false;
#undef DO_
}

void PlanningData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning_internal.PlanningData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Path path = 6;
  for (unsigned int i = 0, n = this->path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->path(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.localization.LocalizationEstimate adc_position = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->adc_position_, output);
  }

  // optional .apollo.canbus.Chassis chassis = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->chassis_, output);
  }

  // optional .apollo.routing.RoutingResponse routing = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->routing_, output);
  }

  // optional .apollo.common.TrajectoryPoint init_point = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->init_point_, output);
  }

  // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
  for (unsigned int i = 0, n = this->speed_plan_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->speed_plan(i), output);
  }

  // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
  for (unsigned int i = 0, n = this->st_graph_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->st_graph(i), output);
  }

  // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
  for (unsigned int i = 0, n = this->sl_frame_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->sl_frame(i), output);
  }

  // optional .apollo.common.Header prediction_header = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->prediction_header_, output);
  }

  // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->signal_light_, output);
  }

  // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
  for (unsigned int i = 0, n = this->obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->obstacle(i), output);
  }

  // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
  for (unsigned int i = 0, n = this->reference_line_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->reference_line(i), output);
  }

  // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->dp_poly_graph_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning_internal.PlanningData)
}

::google::protobuf::uint8* PlanningData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.PlanningData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Path path = 6;
  for (unsigned int i = 0, n = this->path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->path(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.localization.LocalizationEstimate adc_position = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->adc_position_, deterministic, target);
  }

  // optional .apollo.canbus.Chassis chassis = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->chassis_, deterministic, target);
  }

  // optional .apollo.routing.RoutingResponse routing = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->routing_, deterministic, target);
  }

  // optional .apollo.common.TrajectoryPoint init_point = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->init_point_, deterministic, target);
  }

  // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
  for (unsigned int i = 0, n = this->speed_plan_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->speed_plan(i), deterministic, target);
  }

  // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
  for (unsigned int i = 0, n = this->st_graph_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->st_graph(i), deterministic, target);
  }

  // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
  for (unsigned int i = 0, n = this->sl_frame_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->sl_frame(i), deterministic, target);
  }

  // optional .apollo.common.Header prediction_header = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->prediction_header_, deterministic, target);
  }

  // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->signal_light_, deterministic, target);
  }

  // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
  for (unsigned int i = 0, n = this->obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->obstacle(i), deterministic, target);
  }

  // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
  for (unsigned int i = 0, n = this->reference_line_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->reference_line(i), deterministic, target);
  }

  // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->dp_poly_graph_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.PlanningData)
  return target;
}

size_t PlanningData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.PlanningData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.common.Path path = 6;
  {
    unsigned int count = this->path_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path(i));
    }
  }

  // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
  {
    unsigned int count = this->speed_plan_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed_plan(i));
    }
  }

  // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
  {
    unsigned int count = this->st_graph_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->st_graph(i));
    }
  }

  // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
  {
    unsigned int count = this->sl_frame_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sl_frame(i));
    }
  }

  // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
  {
    unsigned int count = this->obstacle_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacle(i));
    }
  }

  // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
  {
    unsigned int count = this->reference_line_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reference_line(i));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional .apollo.localization.LocalizationEstimate adc_position = 7;
    if (has_adc_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adc_position_);
    }

    // optional .apollo.canbus.Chassis chassis = 8;
    if (has_chassis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chassis_);
    }

    // optional .apollo.routing.RoutingResponse routing = 9;
    if (has_routing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routing_);
    }

    // optional .apollo.common.TrajectoryPoint init_point = 10;
    if (has_init_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->init_point_);
    }

    // optional .apollo.common.Header prediction_header = 16;
    if (has_prediction_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->prediction_header_);
    }

    // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
    if (has_signal_light()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signal_light_);
    }

    // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
    if (has_dp_poly_graph()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dp_poly_graph_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.PlanningData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.PlanningData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.PlanningData)
    MergeFrom(*source);
  }
}

void PlanningData::MergeFrom(const PlanningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.PlanningData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  speed_plan_.MergeFrom(from.speed_plan_);
  st_graph_.MergeFrom(from.st_graph_);
  sl_frame_.MergeFrom(from.sl_frame_);
  obstacle_.MergeFrom(from.obstacle_);
  reference_line_.MergeFrom(from.reference_line_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_adc_position()->::apollo::localization::LocalizationEstimate::MergeFrom(from.adc_position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_chassis()->::apollo::canbus::Chassis::MergeFrom(from.chassis());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_routing()->::apollo::routing::RoutingResponse::MergeFrom(from.routing());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_init_point()->::apollo::common::TrajectoryPoint::MergeFrom(from.init_point());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_prediction_header()->::apollo::common::Header::MergeFrom(from.prediction_header());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_signal_light()->::apollo::planning_internal::SignalLightDebug::MergeFrom(from.signal_light());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_dp_poly_graph()->::apollo::planning_internal::DpPolyGraphDebug::MergeFrom(from.dp_poly_graph());
    }
  }
}

void PlanningData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.PlanningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningData::CopyFrom(const PlanningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.PlanningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningData::IsInitialized() const {
  return true;
}

void PlanningData::Swap(PlanningData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningData::InternalSwap(PlanningData* other) {
  path_.InternalSwap(&other->path_);
  speed_plan_.InternalSwap(&other->speed_plan_);
  st_graph_.InternalSwap(&other->st_graph_);
  sl_frame_.InternalSwap(&other->sl_frame_);
  obstacle_.InternalSwap(&other->obstacle_);
  reference_line_.InternalSwap(&other->reference_line_);
  std::swap(adc_position_, other->adc_position_);
  std::swap(chassis_, other->chassis_);
  std::swap(routing_, other->routing_);
  std::swap(init_point_, other->init_point_);
  std::swap(prediction_header_, other->prediction_header_);
  std::swap(signal_light_, other->signal_light_);
  std::swap(dp_poly_graph_, other->dp_poly_graph_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningData::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningData

// optional .apollo.localization.LocalizationEstimate adc_position = 7;
bool PlanningData::has_adc_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanningData::set_has_adc_position() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanningData::clear_has_adc_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanningData::clear_adc_position() {
  if (adc_position_ != NULL) adc_position_->::apollo::localization::LocalizationEstimate::Clear();
  clear_has_adc_position();
}
const ::apollo::localization::LocalizationEstimate& PlanningData::adc_position() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.adc_position)
  return adc_position_ != NULL ? *adc_position_
                         : *::apollo::localization::LocalizationEstimate::internal_default_instance();
}
::apollo::localization::LocalizationEstimate* PlanningData::mutable_adc_position() {
  set_has_adc_position();
  if (adc_position_ == NULL) {
    adc_position_ = new ::apollo::localization::LocalizationEstimate;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.adc_position)
  return adc_position_;
}
::apollo::localization::LocalizationEstimate* PlanningData::release_adc_position() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.adc_position)
  clear_has_adc_position();
  ::apollo::localization::LocalizationEstimate* temp = adc_position_;
  adc_position_ = NULL;
  return temp;
}
void PlanningData::set_allocated_adc_position(::apollo::localization::LocalizationEstimate* adc_position) {
  delete adc_position_;
  adc_position_ = adc_position;
  if (adc_position) {
    set_has_adc_position();
  } else {
    clear_has_adc_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.adc_position)
}

// optional .apollo.canbus.Chassis chassis = 8;
bool PlanningData::has_chassis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanningData::set_has_chassis() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanningData::clear_has_chassis() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanningData::clear_chassis() {
  if (chassis_ != NULL) chassis_->::apollo::canbus::Chassis::Clear();
  clear_has_chassis();
}
const ::apollo::canbus::Chassis& PlanningData::chassis() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.chassis)
  return chassis_ != NULL ? *chassis_
                         : *::apollo::canbus::Chassis::internal_default_instance();
}
::apollo::canbus::Chassis* PlanningData::mutable_chassis() {
  set_has_chassis();
  if (chassis_ == NULL) {
    chassis_ = new ::apollo::canbus::Chassis;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.chassis)
  return chassis_;
}
::apollo::canbus::Chassis* PlanningData::release_chassis() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.chassis)
  clear_has_chassis();
  ::apollo::canbus::Chassis* temp = chassis_;
  chassis_ = NULL;
  return temp;
}
void PlanningData::set_allocated_chassis(::apollo::canbus::Chassis* chassis) {
  delete chassis_;
  chassis_ = chassis;
  if (chassis) {
    set_has_chassis();
  } else {
    clear_has_chassis();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.chassis)
}

// optional .apollo.routing.RoutingResponse routing = 9;
bool PlanningData::has_routing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlanningData::set_has_routing() {
  _has_bits_[0] |= 0x00000004u;
}
void PlanningData::clear_has_routing() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlanningData::clear_routing() {
  if (routing_ != NULL) routing_->::apollo::routing::RoutingResponse::Clear();
  clear_has_routing();
}
const ::apollo::routing::RoutingResponse& PlanningData::routing() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.routing)
  return routing_ != NULL ? *routing_
                         : *::apollo::routing::RoutingResponse::internal_default_instance();
}
::apollo::routing::RoutingResponse* PlanningData::mutable_routing() {
  set_has_routing();
  if (routing_ == NULL) {
    routing_ = new ::apollo::routing::RoutingResponse;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.routing)
  return routing_;
}
::apollo::routing::RoutingResponse* PlanningData::release_routing() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.routing)
  clear_has_routing();
  ::apollo::routing::RoutingResponse* temp = routing_;
  routing_ = NULL;
  return temp;
}
void PlanningData::set_allocated_routing(::apollo::routing::RoutingResponse* routing) {
  delete routing_;
  routing_ = routing;
  if (routing) {
    set_has_routing();
  } else {
    clear_has_routing();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.routing)
}

// optional .apollo.common.TrajectoryPoint init_point = 10;
bool PlanningData::has_init_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlanningData::set_has_init_point() {
  _has_bits_[0] |= 0x00000008u;
}
void PlanningData::clear_has_init_point() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlanningData::clear_init_point() {
  if (init_point_ != NULL) init_point_->::apollo::common::TrajectoryPoint::Clear();
  clear_has_init_point();
}
const ::apollo::common::TrajectoryPoint& PlanningData::init_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.init_point)
  return init_point_ != NULL ? *init_point_
                         : *::apollo::common::TrajectoryPoint::internal_default_instance();
}
::apollo::common::TrajectoryPoint* PlanningData::mutable_init_point() {
  set_has_init_point();
  if (init_point_ == NULL) {
    init_point_ = new ::apollo::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.init_point)
  return init_point_;
}
::apollo::common::TrajectoryPoint* PlanningData::release_init_point() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.init_point)
  clear_has_init_point();
  ::apollo::common::TrajectoryPoint* temp = init_point_;
  init_point_ = NULL;
  return temp;
}
void PlanningData::set_allocated_init_point(::apollo::common::TrajectoryPoint* init_point) {
  delete init_point_;
  init_point_ = init_point;
  if (init_point) {
    set_has_init_point();
  } else {
    clear_has_init_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.init_point)
}

// repeated .apollo.common.Path path = 6;
int PlanningData::path_size() const {
  return path_.size();
}
void PlanningData::clear_path() {
  path_.Clear();
}
const ::apollo::common::Path& PlanningData::path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.path)
  return path_.Get(index);
}
::apollo::common::Path* PlanningData::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.path)
  return path_.Mutable(index);
}
::apollo::common::Path* PlanningData::add_path() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.path)
  return path_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::Path >*
PlanningData::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.path)
  return &path_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::Path >&
PlanningData::path() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.path)
  return path_;
}

// repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
int PlanningData::speed_plan_size() const {
  return speed_plan_.size();
}
void PlanningData::clear_speed_plan() {
  speed_plan_.Clear();
}
const ::apollo::planning_internal::SpeedPlan& PlanningData::speed_plan(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Get(index);
}
::apollo::planning_internal::SpeedPlan* PlanningData::mutable_speed_plan(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Mutable(index);
}
::apollo::planning_internal::SpeedPlan* PlanningData::add_speed_plan() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan >*
PlanningData::mutable_speed_plan() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.speed_plan)
  return &speed_plan_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan >&
PlanningData::speed_plan() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.speed_plan)
  return speed_plan_;
}

// repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
int PlanningData::st_graph_size() const {
  return st_graph_.size();
}
void PlanningData::clear_st_graph() {
  st_graph_.Clear();
}
const ::apollo::planning_internal::STGraphDebug& PlanningData::st_graph(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.st_graph)
  return st_graph_.Get(index);
}
::apollo::planning_internal::STGraphDebug* PlanningData::mutable_st_graph(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.st_graph)
  return st_graph_.Mutable(index);
}
::apollo::planning_internal::STGraphDebug* PlanningData::add_st_graph() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.st_graph)
  return st_graph_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug >*
PlanningData::mutable_st_graph() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.st_graph)
  return &st_graph_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug >&
PlanningData::st_graph() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.st_graph)
  return st_graph_;
}

// repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
int PlanningData::sl_frame_size() const {
  return sl_frame_.size();
}
void PlanningData::clear_sl_frame() {
  sl_frame_.Clear();
}
const ::apollo::planning_internal::SLFrameDebug& PlanningData::sl_frame(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Get(index);
}
::apollo::planning_internal::SLFrameDebug* PlanningData::mutable_sl_frame(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Mutable(index);
}
::apollo::planning_internal::SLFrameDebug* PlanningData::add_sl_frame() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug >*
PlanningData::mutable_sl_frame() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.sl_frame)
  return &sl_frame_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug >&
PlanningData::sl_frame() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.sl_frame)
  return sl_frame_;
}

// optional .apollo.common.Header prediction_header = 16;
bool PlanningData::has_prediction_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlanningData::set_has_prediction_header() {
  _has_bits_[0] |= 0x00000010u;
}
void PlanningData::clear_has_prediction_header() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlanningData::clear_prediction_header() {
  if (prediction_header_ != NULL) prediction_header_->::apollo::common::Header::Clear();
  clear_has_prediction_header();
}
const ::apollo::common::Header& PlanningData::prediction_header() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.prediction_header)
  return prediction_header_ != NULL ? *prediction_header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* PlanningData::mutable_prediction_header() {
  set_has_prediction_header();
  if (prediction_header_ == NULL) {
    prediction_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.prediction_header)
  return prediction_header_;
}
::apollo::common::Header* PlanningData::release_prediction_header() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.prediction_header)
  clear_has_prediction_header();
  ::apollo::common::Header* temp = prediction_header_;
  prediction_header_ = NULL;
  return temp;
}
void PlanningData::set_allocated_prediction_header(::apollo::common::Header* prediction_header) {
  delete prediction_header_;
  prediction_header_ = prediction_header;
  if (prediction_header) {
    set_has_prediction_header();
  } else {
    clear_has_prediction_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.prediction_header)
}

// optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
bool PlanningData::has_signal_light() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlanningData::set_has_signal_light() {
  _has_bits_[0] |= 0x00000020u;
}
void PlanningData::clear_has_signal_light() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlanningData::clear_signal_light() {
  if (signal_light_ != NULL) signal_light_->::apollo::planning_internal::SignalLightDebug::Clear();
  clear_has_signal_light();
}
const ::apollo::planning_internal::SignalLightDebug& PlanningData::signal_light() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.signal_light)
  return signal_light_ != NULL ? *signal_light_
                         : *::apollo::planning_internal::SignalLightDebug::internal_default_instance();
}
::apollo::planning_internal::SignalLightDebug* PlanningData::mutable_signal_light() {
  set_has_signal_light();
  if (signal_light_ == NULL) {
    signal_light_ = new ::apollo::planning_internal::SignalLightDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.signal_light)
  return signal_light_;
}
::apollo::planning_internal::SignalLightDebug* PlanningData::release_signal_light() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.signal_light)
  clear_has_signal_light();
  ::apollo::planning_internal::SignalLightDebug* temp = signal_light_;
  signal_light_ = NULL;
  return temp;
}
void PlanningData::set_allocated_signal_light(::apollo::planning_internal::SignalLightDebug* signal_light) {
  delete signal_light_;
  signal_light_ = signal_light;
  if (signal_light) {
    set_has_signal_light();
  } else {
    clear_has_signal_light();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.signal_light)
}

// repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
int PlanningData::obstacle_size() const {
  return obstacle_.size();
}
void PlanningData::clear_obstacle() {
  obstacle_.Clear();
}
const ::apollo::planning_internal::ObstacleDebug& PlanningData::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.obstacle)
  return obstacle_.Get(index);
}
::apollo::planning_internal::ObstacleDebug* PlanningData::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.obstacle)
  return obstacle_.Mutable(index);
}
::apollo::planning_internal::ObstacleDebug* PlanningData::add_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.obstacle)
  return obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug >*
PlanningData::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.obstacle)
  return &obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug >&
PlanningData::obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.obstacle)
  return obstacle_;
}

// repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
int PlanningData::reference_line_size() const {
  return reference_line_.size();
}
void PlanningData::clear_reference_line() {
  reference_line_.Clear();
}
const ::apollo::planning_internal::ReferenceLineDebug& PlanningData::reference_line(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.reference_line)
  return reference_line_.Get(index);
}
::apollo::planning_internal::ReferenceLineDebug* PlanningData::mutable_reference_line(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.reference_line)
  return reference_line_.Mutable(index);
}
::apollo::planning_internal::ReferenceLineDebug* PlanningData::add_reference_line() {
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.reference_line)
  return reference_line_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug >*
PlanningData::mutable_reference_line() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.reference_line)
  return &reference_line_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug >&
PlanningData::reference_line() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.reference_line)
  return reference_line_;
}

// optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
bool PlanningData::has_dp_poly_graph() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlanningData::set_has_dp_poly_graph() {
  _has_bits_[0] |= 0x00000040u;
}
void PlanningData::clear_has_dp_poly_graph() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlanningData::clear_dp_poly_graph() {
  if (dp_poly_graph_ != NULL) dp_poly_graph_->::apollo::planning_internal::DpPolyGraphDebug::Clear();
  clear_has_dp_poly_graph();
}
const ::apollo::planning_internal::DpPolyGraphDebug& PlanningData::dp_poly_graph() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.dp_poly_graph)
  return dp_poly_graph_ != NULL ? *dp_poly_graph_
                         : *::apollo::planning_internal::DpPolyGraphDebug::internal_default_instance();
}
::apollo::planning_internal::DpPolyGraphDebug* PlanningData::mutable_dp_poly_graph() {
  set_has_dp_poly_graph();
  if (dp_poly_graph_ == NULL) {
    dp_poly_graph_ = new ::apollo::planning_internal::DpPolyGraphDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.dp_poly_graph)
  return dp_poly_graph_;
}
::apollo::planning_internal::DpPolyGraphDebug* PlanningData::release_dp_poly_graph() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.dp_poly_graph)
  clear_has_dp_poly_graph();
  ::apollo::planning_internal::DpPolyGraphDebug* temp = dp_poly_graph_;
  dp_poly_graph_ = NULL;
  return temp;
}
void PlanningData::set_allocated_dp_poly_graph(::apollo::planning_internal::DpPolyGraphDebug* dp_poly_graph) {
  delete dp_poly_graph_;
  dp_poly_graph_ = dp_poly_graph;
  if (dp_poly_graph) {
    set_has_dp_poly_graph();
  } else {
    clear_has_dp_poly_graph();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.dp_poly_graph)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning_internal
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
