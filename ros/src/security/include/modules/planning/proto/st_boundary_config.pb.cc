// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/st_boundary_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/st_boundary_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {
class StBoundaryConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StBoundaryConfig> {
} _StBoundaryConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, boundary_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, high_speed_centric_acceleration_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, low_speed_centric_acceleration_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, high_speed_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, low_speed_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, minimal_kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, point_extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, lowest_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, num_points_to_avg_kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, static_obs_nudge_speed_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StBoundaryConfig, dynamic_obs_nudge_speed_ratio_),
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  2,
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 16, sizeof(StBoundaryConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_StBoundaryConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/st_boundary_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _StBoundaryConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _StBoundaryConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n/modules/planning/proto/st_boundary_con"
      "fig.proto\022\017apollo.planning\"\237\003\n\020StBoundar"
      "yConfig\022\034\n\017boundary_buffer\030\001 \001(\001:\0030.1\0222\n"
      "%high_speed_centric_acceleration_limit\030\002"
      " \001(\001:\0031.2\0221\n$low_speed_centric_accelerat"
      "ion_limit\030\003 \001(\001:\0031.4\022 \n\024high_speed_thres"
      "hold\030\004 \001(\001:\00220\022\036\n\023low_speed_threshold\030\005 "
      "\001(\001:\0017\022\034\n\rminimal_kappa\030\006 \001(\001:\0051e-05\022\032\n\017"
      "point_extension\030\007 \001(\001:\0011\022\031\n\014lowest_speed"
      "\030\010 \001(\001:\0032.5\022\"\n\027num_points_to_avg_kappa\030\t"
      " \001(\r:\0014\022$\n\034static_obs_nudge_speed_ratio\030"
      "\n \001(\001\022%\n\035dynamic_obs_nudge_speed_ratio\030\013"
      " \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 484);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/st_boundary_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StBoundaryConfig::kBoundaryBufferFieldNumber;
const int StBoundaryConfig::kHighSpeedCentricAccelerationLimitFieldNumber;
const int StBoundaryConfig::kLowSpeedCentricAccelerationLimitFieldNumber;
const int StBoundaryConfig::kHighSpeedThresholdFieldNumber;
const int StBoundaryConfig::kLowSpeedThresholdFieldNumber;
const int StBoundaryConfig::kMinimalKappaFieldNumber;
const int StBoundaryConfig::kPointExtensionFieldNumber;
const int StBoundaryConfig::kLowestSpeedFieldNumber;
const int StBoundaryConfig::kNumPointsToAvgKappaFieldNumber;
const int StBoundaryConfig::kStaticObsNudgeSpeedRatioFieldNumber;
const int StBoundaryConfig::kDynamicObsNudgeSpeedRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StBoundaryConfig::StBoundaryConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StBoundaryConfig)
}
StBoundaryConfig::StBoundaryConfig(const StBoundaryConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&static_obs_nudge_speed_ratio_, &from.static_obs_nudge_speed_ratio_,
    reinterpret_cast<char*>(&lowest_speed_) -
    reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_) + sizeof(lowest_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StBoundaryConfig)
}

void StBoundaryConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&static_obs_nudge_speed_ratio_, 0, reinterpret_cast<char*>(&dynamic_obs_nudge_speed_ratio_) -
    reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_) + sizeof(dynamic_obs_nudge_speed_ratio_));
  num_points_to_avg_kappa_ = 4u;
  boundary_buffer_ = 0.1;
  high_speed_centric_acceleration_limit_ = 1.2;
  low_speed_centric_acceleration_limit_ = 1.4;
  high_speed_threshold_ = 20;
  low_speed_threshold_ = 7;
  minimal_kappa_ = 1e-05;
  point_extension_ = 1;
  lowest_speed_ = 2.5;
}

StBoundaryConfig::~StBoundaryConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.StBoundaryConfig)
  SharedDtor();
}

void StBoundaryConfig::SharedDtor() {
}

void StBoundaryConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StBoundaryConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StBoundaryConfig& StBoundaryConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

StBoundaryConfig* StBoundaryConfig::New(::google::protobuf::Arena* arena) const {
  StBoundaryConfig* n = new StBoundaryConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StBoundaryConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StBoundaryConfig)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&static_obs_nudge_speed_ratio_, 0, reinterpret_cast<char*>(&dynamic_obs_nudge_speed_ratio_) -
      reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_) + sizeof(dynamic_obs_nudge_speed_ratio_));
    num_points_to_avg_kappa_ = 4u;
    boundary_buffer_ = 0.1;
    high_speed_centric_acceleration_limit_ = 1.2;
    low_speed_centric_acceleration_limit_ = 1.4;
    high_speed_threshold_ = 20;
    low_speed_threshold_ = 7;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    minimal_kappa_ = 1e-05;
    point_extension_ = 1;
    lowest_speed_ = 2.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StBoundaryConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.StBoundaryConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double boundary_buffer = 1 [default = 0.1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_boundary_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &boundary_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_high_speed_centric_acceleration_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_speed_centric_acceleration_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_low_speed_centric_acceleration_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_speed_centric_acceleration_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double high_speed_threshold = 4 [default = 20];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_high_speed_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_speed_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double low_speed_threshold = 5 [default = 7];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_low_speed_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_speed_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double minimal_kappa = 6 [default = 1e-05];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_minimal_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimal_kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double point_extension = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_point_extension();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &point_extension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lowest_speed = 8 [default = 2.5];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_lowest_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowest_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_points_to_avg_kappa = 9 [default = 4];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_num_points_to_avg_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_points_to_avg_kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double static_obs_nudge_speed_ratio = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_static_obs_nudge_speed_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &static_obs_nudge_speed_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dynamic_obs_nudge_speed_ratio = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_dynamic_obs_nudge_speed_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dynamic_obs_nudge_speed_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.StBoundaryConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.StBoundaryConfig)
  return false;
#undef DO_
}

void StBoundaryConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.StBoundaryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double boundary_buffer = 1 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->boundary_buffer(), output);
  }

  // optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->high_speed_centric_acceleration_limit(), output);
  }

  // optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->low_speed_centric_acceleration_limit(), output);
  }

  // optional double high_speed_threshold = 4 [default = 20];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->high_speed_threshold(), output);
  }

  // optional double low_speed_threshold = 5 [default = 7];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->low_speed_threshold(), output);
  }

  // optional double minimal_kappa = 6 [default = 1e-05];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->minimal_kappa(), output);
  }

  // optional double point_extension = 7 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->point_extension(), output);
  }

  // optional double lowest_speed = 8 [default = 2.5];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lowest_speed(), output);
  }

  // optional uint32 num_points_to_avg_kappa = 9 [default = 4];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->num_points_to_avg_kappa(), output);
  }

  // optional double static_obs_nudge_speed_ratio = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->static_obs_nudge_speed_ratio(), output);
  }

  // optional double dynamic_obs_nudge_speed_ratio = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->dynamic_obs_nudge_speed_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.StBoundaryConfig)
}

::google::protobuf::uint8* StBoundaryConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StBoundaryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double boundary_buffer = 1 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->boundary_buffer(), target);
  }

  // optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->high_speed_centric_acceleration_limit(), target);
  }

  // optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->low_speed_centric_acceleration_limit(), target);
  }

  // optional double high_speed_threshold = 4 [default = 20];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->high_speed_threshold(), target);
  }

  // optional double low_speed_threshold = 5 [default = 7];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->low_speed_threshold(), target);
  }

  // optional double minimal_kappa = 6 [default = 1e-05];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->minimal_kappa(), target);
  }

  // optional double point_extension = 7 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->point_extension(), target);
  }

  // optional double lowest_speed = 8 [default = 2.5];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lowest_speed(), target);
  }

  // optional uint32 num_points_to_avg_kappa = 9 [default = 4];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->num_points_to_avg_kappa(), target);
  }

  // optional double static_obs_nudge_speed_ratio = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->static_obs_nudge_speed_ratio(), target);
  }

  // optional double dynamic_obs_nudge_speed_ratio = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->dynamic_obs_nudge_speed_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StBoundaryConfig)
  return target;
}

size_t StBoundaryConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StBoundaryConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double static_obs_nudge_speed_ratio = 10;
    if (has_static_obs_nudge_speed_ratio()) {
      total_size += 1 + 8;
    }

    // optional double dynamic_obs_nudge_speed_ratio = 11;
    if (has_dynamic_obs_nudge_speed_ratio()) {
      total_size += 1 + 8;
    }

    // optional uint32 num_points_to_avg_kappa = 9 [default = 4];
    if (has_num_points_to_avg_kappa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_points_to_avg_kappa());
    }

    // optional double boundary_buffer = 1 [default = 0.1];
    if (has_boundary_buffer()) {
      total_size += 1 + 8;
    }

    // optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
    if (has_high_speed_centric_acceleration_limit()) {
      total_size += 1 + 8;
    }

    // optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
    if (has_low_speed_centric_acceleration_limit()) {
      total_size += 1 + 8;
    }

    // optional double high_speed_threshold = 4 [default = 20];
    if (has_high_speed_threshold()) {
      total_size += 1 + 8;
    }

    // optional double low_speed_threshold = 5 [default = 7];
    if (has_low_speed_threshold()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double minimal_kappa = 6 [default = 1e-05];
    if (has_minimal_kappa()) {
      total_size += 1 + 8;
    }

    // optional double point_extension = 7 [default = 1];
    if (has_point_extension()) {
      total_size += 1 + 8;
    }

    // optional double lowest_speed = 8 [default = 2.5];
    if (has_lowest_speed()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StBoundaryConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StBoundaryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StBoundaryConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StBoundaryConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StBoundaryConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StBoundaryConfig)
    MergeFrom(*source);
  }
}

void StBoundaryConfig::MergeFrom(const StBoundaryConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StBoundaryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      static_obs_nudge_speed_ratio_ = from.static_obs_nudge_speed_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      dynamic_obs_nudge_speed_ratio_ = from.dynamic_obs_nudge_speed_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_points_to_avg_kappa_ = from.num_points_to_avg_kappa_;
    }
    if (cached_has_bits & 0x00000008u) {
      boundary_buffer_ = from.boundary_buffer_;
    }
    if (cached_has_bits & 0x00000010u) {
      high_speed_centric_acceleration_limit_ = from.high_speed_centric_acceleration_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      low_speed_centric_acceleration_limit_ = from.low_speed_centric_acceleration_limit_;
    }
    if (cached_has_bits & 0x00000040u) {
      high_speed_threshold_ = from.high_speed_threshold_;
    }
    if (cached_has_bits & 0x00000080u) {
      low_speed_threshold_ = from.low_speed_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      minimal_kappa_ = from.minimal_kappa_;
    }
    if (cached_has_bits & 0x00000200u) {
      point_extension_ = from.point_extension_;
    }
    if (cached_has_bits & 0x00000400u) {
      lowest_speed_ = from.lowest_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StBoundaryConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StBoundaryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StBoundaryConfig::CopyFrom(const StBoundaryConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StBoundaryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StBoundaryConfig::IsInitialized() const {
  return true;
}

void StBoundaryConfig::Swap(StBoundaryConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StBoundaryConfig::InternalSwap(StBoundaryConfig* other) {
  std::swap(static_obs_nudge_speed_ratio_, other->static_obs_nudge_speed_ratio_);
  std::swap(dynamic_obs_nudge_speed_ratio_, other->dynamic_obs_nudge_speed_ratio_);
  std::swap(num_points_to_avg_kappa_, other->num_points_to_avg_kappa_);
  std::swap(boundary_buffer_, other->boundary_buffer_);
  std::swap(high_speed_centric_acceleration_limit_, other->high_speed_centric_acceleration_limit_);
  std::swap(low_speed_centric_acceleration_limit_, other->low_speed_centric_acceleration_limit_);
  std::swap(high_speed_threshold_, other->high_speed_threshold_);
  std::swap(low_speed_threshold_, other->low_speed_threshold_);
  std::swap(minimal_kappa_, other->minimal_kappa_);
  std::swap(point_extension_, other->point_extension_);
  std::swap(lowest_speed_, other->lowest_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StBoundaryConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StBoundaryConfig

// optional double boundary_buffer = 1 [default = 0.1];
bool StBoundaryConfig::has_boundary_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StBoundaryConfig::set_has_boundary_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
void StBoundaryConfig::clear_has_boundary_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
void StBoundaryConfig::clear_boundary_buffer() {
  boundary_buffer_ = 0.1;
  clear_has_boundary_buffer();
}
double StBoundaryConfig::boundary_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.boundary_buffer)
  return boundary_buffer_;
}
void StBoundaryConfig::set_boundary_buffer(double value) {
  set_has_boundary_buffer();
  boundary_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.boundary_buffer)
}

// optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
bool StBoundaryConfig::has_high_speed_centric_acceleration_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StBoundaryConfig::set_has_high_speed_centric_acceleration_limit() {
  _has_bits_[0] |= 0x00000010u;
}
void StBoundaryConfig::clear_has_high_speed_centric_acceleration_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
void StBoundaryConfig::clear_high_speed_centric_acceleration_limit() {
  high_speed_centric_acceleration_limit_ = 1.2;
  clear_has_high_speed_centric_acceleration_limit();
}
double StBoundaryConfig::high_speed_centric_acceleration_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.high_speed_centric_acceleration_limit)
  return high_speed_centric_acceleration_limit_;
}
void StBoundaryConfig::set_high_speed_centric_acceleration_limit(double value) {
  set_has_high_speed_centric_acceleration_limit();
  high_speed_centric_acceleration_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.high_speed_centric_acceleration_limit)
}

// optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
bool StBoundaryConfig::has_low_speed_centric_acceleration_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StBoundaryConfig::set_has_low_speed_centric_acceleration_limit() {
  _has_bits_[0] |= 0x00000020u;
}
void StBoundaryConfig::clear_has_low_speed_centric_acceleration_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
void StBoundaryConfig::clear_low_speed_centric_acceleration_limit() {
  low_speed_centric_acceleration_limit_ = 1.4;
  clear_has_low_speed_centric_acceleration_limit();
}
double StBoundaryConfig::low_speed_centric_acceleration_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.low_speed_centric_acceleration_limit)
  return low_speed_centric_acceleration_limit_;
}
void StBoundaryConfig::set_low_speed_centric_acceleration_limit(double value) {
  set_has_low_speed_centric_acceleration_limit();
  low_speed_centric_acceleration_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.low_speed_centric_acceleration_limit)
}

// optional double high_speed_threshold = 4 [default = 20];
bool StBoundaryConfig::has_high_speed_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StBoundaryConfig::set_has_high_speed_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
void StBoundaryConfig::clear_has_high_speed_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
void StBoundaryConfig::clear_high_speed_threshold() {
  high_speed_threshold_ = 20;
  clear_has_high_speed_threshold();
}
double StBoundaryConfig::high_speed_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.high_speed_threshold)
  return high_speed_threshold_;
}
void StBoundaryConfig::set_high_speed_threshold(double value) {
  set_has_high_speed_threshold();
  high_speed_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.high_speed_threshold)
}

// optional double low_speed_threshold = 5 [default = 7];
bool StBoundaryConfig::has_low_speed_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StBoundaryConfig::set_has_low_speed_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
void StBoundaryConfig::clear_has_low_speed_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
void StBoundaryConfig::clear_low_speed_threshold() {
  low_speed_threshold_ = 7;
  clear_has_low_speed_threshold();
}
double StBoundaryConfig::low_speed_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.low_speed_threshold)
  return low_speed_threshold_;
}
void StBoundaryConfig::set_low_speed_threshold(double value) {
  set_has_low_speed_threshold();
  low_speed_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.low_speed_threshold)
}

// optional double minimal_kappa = 6 [default = 1e-05];
bool StBoundaryConfig::has_minimal_kappa() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void StBoundaryConfig::set_has_minimal_kappa() {
  _has_bits_[0] |= 0x00000100u;
}
void StBoundaryConfig::clear_has_minimal_kappa() {
  _has_bits_[0] &= ~0x00000100u;
}
void StBoundaryConfig::clear_minimal_kappa() {
  minimal_kappa_ = 1e-05;
  clear_has_minimal_kappa();
}
double StBoundaryConfig::minimal_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.minimal_kappa)
  return minimal_kappa_;
}
void StBoundaryConfig::set_minimal_kappa(double value) {
  set_has_minimal_kappa();
  minimal_kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.minimal_kappa)
}

// optional double point_extension = 7 [default = 1];
bool StBoundaryConfig::has_point_extension() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void StBoundaryConfig::set_has_point_extension() {
  _has_bits_[0] |= 0x00000200u;
}
void StBoundaryConfig::clear_has_point_extension() {
  _has_bits_[0] &= ~0x00000200u;
}
void StBoundaryConfig::clear_point_extension() {
  point_extension_ = 1;
  clear_has_point_extension();
}
double StBoundaryConfig::point_extension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.point_extension)
  return point_extension_;
}
void StBoundaryConfig::set_point_extension(double value) {
  set_has_point_extension();
  point_extension_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.point_extension)
}

// optional double lowest_speed = 8 [default = 2.5];
bool StBoundaryConfig::has_lowest_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void StBoundaryConfig::set_has_lowest_speed() {
  _has_bits_[0] |= 0x00000400u;
}
void StBoundaryConfig::clear_has_lowest_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
void StBoundaryConfig::clear_lowest_speed() {
  lowest_speed_ = 2.5;
  clear_has_lowest_speed();
}
double StBoundaryConfig::lowest_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.lowest_speed)
  return lowest_speed_;
}
void StBoundaryConfig::set_lowest_speed(double value) {
  set_has_lowest_speed();
  lowest_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.lowest_speed)
}

// optional uint32 num_points_to_avg_kappa = 9 [default = 4];
bool StBoundaryConfig::has_num_points_to_avg_kappa() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StBoundaryConfig::set_has_num_points_to_avg_kappa() {
  _has_bits_[0] |= 0x00000004u;
}
void StBoundaryConfig::clear_has_num_points_to_avg_kappa() {
  _has_bits_[0] &= ~0x00000004u;
}
void StBoundaryConfig::clear_num_points_to_avg_kappa() {
  num_points_to_avg_kappa_ = 4u;
  clear_has_num_points_to_avg_kappa();
}
::google::protobuf::uint32 StBoundaryConfig::num_points_to_avg_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.num_points_to_avg_kappa)
  return num_points_to_avg_kappa_;
}
void StBoundaryConfig::set_num_points_to_avg_kappa(::google::protobuf::uint32 value) {
  set_has_num_points_to_avg_kappa();
  num_points_to_avg_kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.num_points_to_avg_kappa)
}

// optional double static_obs_nudge_speed_ratio = 10;
bool StBoundaryConfig::has_static_obs_nudge_speed_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StBoundaryConfig::set_has_static_obs_nudge_speed_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void StBoundaryConfig::clear_has_static_obs_nudge_speed_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void StBoundaryConfig::clear_static_obs_nudge_speed_ratio() {
  static_obs_nudge_speed_ratio_ = 0;
  clear_has_static_obs_nudge_speed_ratio();
}
double StBoundaryConfig::static_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.static_obs_nudge_speed_ratio)
  return static_obs_nudge_speed_ratio_;
}
void StBoundaryConfig::set_static_obs_nudge_speed_ratio(double value) {
  set_has_static_obs_nudge_speed_ratio();
  static_obs_nudge_speed_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.static_obs_nudge_speed_ratio)
}

// optional double dynamic_obs_nudge_speed_ratio = 11;
bool StBoundaryConfig::has_dynamic_obs_nudge_speed_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StBoundaryConfig::set_has_dynamic_obs_nudge_speed_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
void StBoundaryConfig::clear_has_dynamic_obs_nudge_speed_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
void StBoundaryConfig::clear_dynamic_obs_nudge_speed_ratio() {
  dynamic_obs_nudge_speed_ratio_ = 0;
  clear_has_dynamic_obs_nudge_speed_ratio();
}
double StBoundaryConfig::dynamic_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.dynamic_obs_nudge_speed_ratio)
  return dynamic_obs_nudge_speed_ratio_;
}
void StBoundaryConfig::set_dynamic_obs_nudge_speed_ratio(double value) {
  set_has_dynamic_obs_nudge_speed_ratio();
  dynamic_obs_nudge_speed_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.dynamic_obs_nudge_speed_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
