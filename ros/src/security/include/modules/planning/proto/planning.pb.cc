// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/planning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {
class ADCTrajectoryPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ADCTrajectoryPoint> {
} _ADCTrajectoryPoint_default_instance_;
class ADCPathPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ADCPathPoint> {
} _ADCPathPoint_default_instance_;
class ADCSignalsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ADCSignals> {
} _ADCSignals_default_instance_;
class EStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EStop> {
} _EStop_default_instance_;
class TaskStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TaskStats> {
} _TaskStats_default_instance_;
class LatencyStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LatencyStats> {
} _LatencyStats_default_instance_;
class ADCTrajectoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ADCTrajectory> {
} _ADCTrajectory_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fplanning_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, acceleration_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, curvature_change_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, relative_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, accumulated_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, l_),
  0,
  1,
  2,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCPathPoint, heading_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCSignals, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCSignals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCSignals, signal_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, is_estop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, reason_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, time_ms_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, total_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, task_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, init_frame_time_ms_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, total_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, total_path_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, trajectory_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, estop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, path_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, is_replan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, latency_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, routing_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, adc_path_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, adc_trajectory_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, right_of_way_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, lane_id_),
  0,
  7,
  8,
  ~0u,
  1,
  ~0u,
  9,
  10,
  4,
  5,
  6,
  2,
  ~0u,
  ~0u,
  3,
  11,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 17, sizeof(ADCTrajectoryPoint)},
  { 29, 39, sizeof(ADCPathPoint)},
  { 44, 50, sizeof(ADCSignals)},
  { 51, 58, sizeof(EStop)},
  { 60, 67, sizeof(TaskStats)},
  { 69, 77, sizeof(LatencyStats)},
  { 80, 102, sizeof(ADCTrajectory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ADCTrajectoryPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ADCPathPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ADCSignals_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LatencyStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ADCTrajectory_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/planning.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _ADCTrajectoryPoint_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ADCPathPoint_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ADCSignals_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _EStop_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _TaskStats_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _LatencyStats_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ADCTrajectory_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto::InitDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::InitDefaults();
  ::apollo::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  ::apollo::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::InitDefaults();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  ::apollo::planning_internal::protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  _ADCTrajectoryPoint_default_instance_.DefaultConstruct();
  _ADCPathPoint_default_instance_.DefaultConstruct();
  _ADCSignals_default_instance_.DefaultConstruct();
  _EStop_default_instance_.DefaultConstruct();
  _TaskStats_default_instance_.DefaultConstruct();
  _LatencyStats_default_instance_.DefaultConstruct();
  _ADCTrajectory_default_instance_.DefaultConstruct();
  _ADCTrajectory_default_instance_.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->estop_ = const_cast< ::apollo::planning::EStop*>(
      ::apollo::planning::EStop::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->decision_ = const_cast< ::apollo::planning::DecisionResult*>(
      ::apollo::planning::DecisionResult::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->latency_stats_ = const_cast< ::apollo::planning::LatencyStats*>(
      ::apollo::planning::LatencyStats::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->routing_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->debug_ = const_cast< ::apollo::planning_internal::Debug*>(
      ::apollo::planning_internal::Debug::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->signal_ = const_cast< ::apollo::common::VehicleSignal*>(
      ::apollo::common::VehicleSignal::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n%modules/planning/proto/planning.proto\022"
      "\017apollo.planning\032!modules/common/proto/h"
      "eader.proto\032)modules/common/proto/vehicl"
      "e_signal.proto\032$modules/common/proto/pnc"
      "_point.proto\032\"modules/canbus/proto/chass"
      "is.proto\032\036modules/map/proto/map_id.proto"
      "\032%modules/planning/proto/decision.proto\032"
      ".modules/planning/proto/planning_interna"
      "l.proto\"\351\001\n\022ADCTrajectoryPoint\022\t\n\001x\030\001 \001("
      "\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\r\n\005speed\030\006 \001(\001\022\026"
      "\n\016acceleration_s\030\007 \001(\001\022\021\n\tcurvature\030\010 \001("
      "\001\022\035\n\025curvature_change_rate\030\t \001(\001\022\025\n\rrela"
      "tive_time\030\n \001(\001\022\r\n\005theta\030\013 \001(\001\022\025\n\raccumu"
      "lated_s\030\014 \001(\001\022\r\n\001s\030\004 \001(\001B\002\030\001\022\r\n\001l\030\005 \001(\001B"
      "\002\030\001\"S\n\014ADCPathPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001("
      "\001\022\t\n\001z\030\003 \001(\001\022\021\n\tcurvature\030\004 \001(\001\022\017\n\007headi"
      "ng\030\005 \001(\001\"\276\001\n\nADCSignals\0226\n\006signal\030\001 \003(\0162"
      "&.apollo.planning.ADCSignals.SignalType\""
      "x\n\nSignalType\022\r\n\tLEFT_TURN\020\001\022\016\n\nRIGHT_TU"
      "RN\020\002\022\022\n\016LOW_BEAM_LIGHT\020\003\022\023\n\017HIGH_BEAM_LI"
      "GHT\020\004\022\r\n\tFOG_LIGHT\020\005\022\023\n\017EMERGENCY_LIGHT\020"
      "\006\")\n\005EStop\022\020\n\010is_estop\030\001 \001(\010\022\016\n\006reason\030\002"
      " \001(\t\"*\n\tTaskStats\022\014\n\004name\030\001 \001(\t\022\017\n\007time_"
      "ms\030\002 \001(\001\"q\n\014LatencyStats\022\025\n\rtotal_time_m"
      "s\030\001 \001(\001\022.\n\ntask_stats\030\002 \003(\0132\032.apollo.pla"
      "nning.TaskStats\022\032\n\022init_frame_time_ms\030\003 "
      "\001(\001\"\347\006\n\rADCTrajectory\022%\n\006header\030\001 \001(\0132\025."
      "apollo.common.Header\022\031\n\021total_path_lengt"
      "h\030\002 \001(\001\022\027\n\017total_path_time\030\003 \001(\001\0228\n\020traj"
      "ectory_point\030\014 \003(\0132\036.apollo.common.Traje"
      "ctoryPoint\022%\n\005estop\030\006 \001(\0132\026.apollo.plann"
      "ing.EStop\022,\n\npath_point\030\r \003(\0132\030.apollo.c"
      "ommon.PathPoint\022\030\n\tis_replan\030\t \001(\010:\005fals"
      "e\0221\n\004gear\030\n \001(\0162#.apollo.canbus.Chassis."
      "GearPosition\0221\n\010decision\030\016 \001(\0132\037.apollo."
      "planning.DecisionResult\0224\n\rlatency_stats"
      "\030\017 \001(\0132\035.apollo.planning.LatencyStats\022-\n"
      "\016routing_header\030\020 \001(\0132\025.apollo.common.He"
      "ader\022.\n\005debug\030\010 \001(\0132\037.apollo.planning_in"
      "ternal.Debug\0229\n\016adc_path_point\030\007 \003(\0132\035.a"
      "pollo.planning.ADCPathPointB\002\030\001\022E\n\024adc_t"
      "rajectory_point\030\004 \003(\0132#.apollo.planning."
      "ADCTrajectoryPointB\002\030\001\0220\n\006signal\030\013 \001(\0132\034"
      ".apollo.common.VehicleSignalB\002\030\001\022L\n\023righ"
      "t_of_way_status\030\021 \001(\0162/.apollo.planning."
      "ADCTrajectory.RightOfWayStatus\022!\n\007lane_i"
      "d\030\022 \003(\0132\020.apollo.hdmap.Id\"2\n\020RightOfWayS"
      "tatus\022\017\n\013UNPROTECTED\020\000\022\r\n\tPROTECTED\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1917);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/planning.proto", &protobuf_RegisterTypes);
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto::AddDescriptors();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::apollo::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::apollo::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::AddDescriptors();
  ::apollo::planning::protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::AddDescriptors();
  ::apollo::planning_internal::protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_2eproto

const ::google::protobuf::EnumDescriptor* ADCSignals_SignalType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_enum_descriptors[0];
}
bool ADCSignals_SignalType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCSignals_SignalType ADCSignals::LEFT_TURN;
const ADCSignals_SignalType ADCSignals::RIGHT_TURN;
const ADCSignals_SignalType ADCSignals::LOW_BEAM_LIGHT;
const ADCSignals_SignalType ADCSignals::HIGH_BEAM_LIGHT;
const ADCSignals_SignalType ADCSignals::FOG_LIGHT;
const ADCSignals_SignalType ADCSignals::EMERGENCY_LIGHT;
const ADCSignals_SignalType ADCSignals::SignalType_MIN;
const ADCSignals_SignalType ADCSignals::SignalType_MAX;
const int ADCSignals::SignalType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_enum_descriptors[1];
}
bool ADCTrajectory_RightOfWayStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCTrajectory_RightOfWayStatus ADCTrajectory::UNPROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::PROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MIN;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MAX;
const int ADCTrajectory::RightOfWayStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectoryPoint::kXFieldNumber;
const int ADCTrajectoryPoint::kYFieldNumber;
const int ADCTrajectoryPoint::kZFieldNumber;
const int ADCTrajectoryPoint::kSpeedFieldNumber;
const int ADCTrajectoryPoint::kAccelerationSFieldNumber;
const int ADCTrajectoryPoint::kCurvatureFieldNumber;
const int ADCTrajectoryPoint::kCurvatureChangeRateFieldNumber;
const int ADCTrajectoryPoint::kRelativeTimeFieldNumber;
const int ADCTrajectoryPoint::kThetaFieldNumber;
const int ADCTrajectoryPoint::kAccumulatedSFieldNumber;
const int ADCTrajectoryPoint::kSFieldNumber;
const int ADCTrajectoryPoint::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectoryPoint::ADCTrajectoryPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCTrajectoryPoint)
}
ADCTrajectoryPoint::ADCTrajectoryPoint(const ADCTrajectoryPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&accumulated_s_) -
    reinterpret_cast<char*>(&x_) + sizeof(accumulated_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectoryPoint)
}

void ADCTrajectoryPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&accumulated_s_) -
    reinterpret_cast<char*>(&x_) + sizeof(accumulated_s_));
}

ADCTrajectoryPoint::~ADCTrajectoryPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectoryPoint)
  SharedDtor();
}

void ADCTrajectoryPoint::SharedDtor() {
}

void ADCTrajectoryPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCTrajectoryPoint::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ADCTrajectoryPoint& ADCTrajectoryPoint::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

ADCTrajectoryPoint* ADCTrajectoryPoint::New(::google::protobuf::Arena* arena) const {
  ADCTrajectoryPoint* n = new ADCTrajectoryPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCTrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectoryPoint)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&curvature_) -
      reinterpret_cast<char*>(&x_) + sizeof(curvature_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&curvature_change_rate_, 0, reinterpret_cast<char*>(&accumulated_s_) -
      reinterpret_cast<char*>(&curvature_change_rate_) + sizeof(accumulated_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADCTrajectoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCTrajectoryPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double l = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceleration_s = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_acceleration_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curvature = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_curvature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curvature_change_rate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_curvature_change_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_change_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_relative_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accumulated_s = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_accumulated_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accumulated_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCTrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCTrajectoryPoint)
  return false;
#undef DO_
}

void ADCTrajectoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCTrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double s = 4 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->s(), output);
  }

  // optional double l = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->l(), output);
  }

  // optional double speed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed(), output);
  }

  // optional double acceleration_s = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acceleration_s(), output);
  }

  // optional double curvature = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->curvature(), output);
  }

  // optional double curvature_change_rate = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->curvature_change_rate(), output);
  }

  // optional double relative_time = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->relative_time(), output);
  }

  // optional double theta = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->theta(), output);
  }

  // optional double accumulated_s = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->accumulated_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCTrajectoryPoint)
}

::google::protobuf::uint8* ADCTrajectoryPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double s = 4 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->s(), target);
  }

  // optional double l = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->l(), target);
  }

  // optional double speed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed(), target);
  }

  // optional double acceleration_s = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acceleration_s(), target);
  }

  // optional double curvature = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->curvature(), target);
  }

  // optional double curvature_change_rate = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->curvature_change_rate(), target);
  }

  // optional double relative_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->relative_time(), target);
  }

  // optional double theta = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->theta(), target);
  }

  // optional double accumulated_s = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->accumulated_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectoryPoint)
  return target;
}

size_t ADCTrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectoryPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double s = 4 [deprecated = true];
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double l = 5 [deprecated = true];
    if (has_l()) {
      total_size += 1 + 8;
    }

    // optional double speed = 6;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double acceleration_s = 7;
    if (has_acceleration_s()) {
      total_size += 1 + 8;
    }

    // optional double curvature = 8;
    if (has_curvature()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double curvature_change_rate = 9;
    if (has_curvature_change_rate()) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 10;
    if (has_relative_time()) {
      total_size += 1 + 8;
    }

    // optional double theta = 11;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double accumulated_s = 12;
    if (has_accumulated_s()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCTrajectoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCTrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCTrajectoryPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectoryPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCTrajectoryPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCTrajectoryPoint)
    MergeFrom(*source);
  }
}

void ADCTrajectoryPoint::MergeFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000010u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      acceleration_s_ = from.acceleration_s_;
    }
    if (cached_has_bits & 0x00000080u) {
      curvature_ = from.curvature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      curvature_change_rate_ = from.curvature_change_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      relative_time_ = from.relative_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000800u) {
      accumulated_s_ = from.accumulated_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ADCTrajectoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectoryPoint::CopyFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectoryPoint::IsInitialized() const {
  return true;
}

void ADCTrajectoryPoint::Swap(ADCTrajectoryPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectoryPoint::InternalSwap(ADCTrajectoryPoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(s_, other->s_);
  std::swap(l_, other->l_);
  std::swap(speed_, other->speed_);
  std::swap(acceleration_s_, other->acceleration_s_);
  std::swap(curvature_, other->curvature_);
  std::swap(curvature_change_rate_, other->curvature_change_rate_);
  std::swap(relative_time_, other->relative_time_);
  std::swap(theta_, other->theta_);
  std::swap(accumulated_s_, other->accumulated_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCTrajectoryPoint::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCTrajectoryPoint

// optional double x = 1;
bool ADCTrajectoryPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ADCTrajectoryPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void ADCTrajectoryPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void ADCTrajectoryPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
double ADCTrajectoryPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.x)
  return x_;
}
void ADCTrajectoryPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.x)
}

// optional double y = 2;
bool ADCTrajectoryPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ADCTrajectoryPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void ADCTrajectoryPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void ADCTrajectoryPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
double ADCTrajectoryPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.y)
  return y_;
}
void ADCTrajectoryPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.y)
}

// optional double z = 3;
bool ADCTrajectoryPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ADCTrajectoryPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void ADCTrajectoryPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void ADCTrajectoryPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
double ADCTrajectoryPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.z)
  return z_;
}
void ADCTrajectoryPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.z)
}

// optional double speed = 6;
bool ADCTrajectoryPoint::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ADCTrajectoryPoint::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
void ADCTrajectoryPoint::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
void ADCTrajectoryPoint::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
double ADCTrajectoryPoint::speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.speed)
  return speed_;
}
void ADCTrajectoryPoint::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.speed)
}

// optional double acceleration_s = 7;
bool ADCTrajectoryPoint::has_acceleration_s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ADCTrajectoryPoint::set_has_acceleration_s() {
  _has_bits_[0] |= 0x00000040u;
}
void ADCTrajectoryPoint::clear_has_acceleration_s() {
  _has_bits_[0] &= ~0x00000040u;
}
void ADCTrajectoryPoint::clear_acceleration_s() {
  acceleration_s_ = 0;
  clear_has_acceleration_s();
}
double ADCTrajectoryPoint::acceleration_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.acceleration_s)
  return acceleration_s_;
}
void ADCTrajectoryPoint::set_acceleration_s(double value) {
  set_has_acceleration_s();
  acceleration_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.acceleration_s)
}

// optional double curvature = 8;
bool ADCTrajectoryPoint::has_curvature() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ADCTrajectoryPoint::set_has_curvature() {
  _has_bits_[0] |= 0x00000080u;
}
void ADCTrajectoryPoint::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000080u;
}
void ADCTrajectoryPoint::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
double ADCTrajectoryPoint::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.curvature)
  return curvature_;
}
void ADCTrajectoryPoint::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.curvature)
}

// optional double curvature_change_rate = 9;
bool ADCTrajectoryPoint::has_curvature_change_rate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ADCTrajectoryPoint::set_has_curvature_change_rate() {
  _has_bits_[0] |= 0x00000100u;
}
void ADCTrajectoryPoint::clear_has_curvature_change_rate() {
  _has_bits_[0] &= ~0x00000100u;
}
void ADCTrajectoryPoint::clear_curvature_change_rate() {
  curvature_change_rate_ = 0;
  clear_has_curvature_change_rate();
}
double ADCTrajectoryPoint::curvature_change_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.curvature_change_rate)
  return curvature_change_rate_;
}
void ADCTrajectoryPoint::set_curvature_change_rate(double value) {
  set_has_curvature_change_rate();
  curvature_change_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.curvature_change_rate)
}

// optional double relative_time = 10;
bool ADCTrajectoryPoint::has_relative_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ADCTrajectoryPoint::set_has_relative_time() {
  _has_bits_[0] |= 0x00000200u;
}
void ADCTrajectoryPoint::clear_has_relative_time() {
  _has_bits_[0] &= ~0x00000200u;
}
void ADCTrajectoryPoint::clear_relative_time() {
  relative_time_ = 0;
  clear_has_relative_time();
}
double ADCTrajectoryPoint::relative_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.relative_time)
  return relative_time_;
}
void ADCTrajectoryPoint::set_relative_time(double value) {
  set_has_relative_time();
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.relative_time)
}

// optional double theta = 11;
bool ADCTrajectoryPoint::has_theta() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ADCTrajectoryPoint::set_has_theta() {
  _has_bits_[0] |= 0x00000400u;
}
void ADCTrajectoryPoint::clear_has_theta() {
  _has_bits_[0] &= ~0x00000400u;
}
void ADCTrajectoryPoint::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
double ADCTrajectoryPoint::theta() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.theta)
  return theta_;
}
void ADCTrajectoryPoint::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.theta)
}

// optional double accumulated_s = 12;
bool ADCTrajectoryPoint::has_accumulated_s() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ADCTrajectoryPoint::set_has_accumulated_s() {
  _has_bits_[0] |= 0x00000800u;
}
void ADCTrajectoryPoint::clear_has_accumulated_s() {
  _has_bits_[0] &= ~0x00000800u;
}
void ADCTrajectoryPoint::clear_accumulated_s() {
  accumulated_s_ = 0;
  clear_has_accumulated_s();
}
double ADCTrajectoryPoint::accumulated_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.accumulated_s)
  return accumulated_s_;
}
void ADCTrajectoryPoint::set_accumulated_s(double value) {
  set_has_accumulated_s();
  accumulated_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.accumulated_s)
}

// optional double s = 4 [deprecated = true];
bool ADCTrajectoryPoint::has_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ADCTrajectoryPoint::set_has_s() {
  _has_bits_[0] |= 0x00000008u;
}
void ADCTrajectoryPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000008u;
}
void ADCTrajectoryPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
double ADCTrajectoryPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.s)
  return s_;
}
void ADCTrajectoryPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.s)
}

// optional double l = 5 [deprecated = true];
bool ADCTrajectoryPoint::has_l() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ADCTrajectoryPoint::set_has_l() {
  _has_bits_[0] |= 0x00000010u;
}
void ADCTrajectoryPoint::clear_has_l() {
  _has_bits_[0] &= ~0x00000010u;
}
void ADCTrajectoryPoint::clear_l() {
  l_ = 0;
  clear_has_l();
}
double ADCTrajectoryPoint::l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.l)
  return l_;
}
void ADCTrajectoryPoint::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.l)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCPathPoint::kXFieldNumber;
const int ADCPathPoint::kYFieldNumber;
const int ADCPathPoint::kZFieldNumber;
const int ADCPathPoint::kCurvatureFieldNumber;
const int ADCPathPoint::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCPathPoint::ADCPathPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCPathPoint)
}
ADCPathPoint::ADCPathPoint(const ADCPathPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&x_) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCPathPoint)
}

void ADCPathPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&x_) + sizeof(heading_));
}

ADCPathPoint::~ADCPathPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCPathPoint)
  SharedDtor();
}

void ADCPathPoint::SharedDtor() {
}

void ADCPathPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCPathPoint::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ADCPathPoint& ADCPathPoint::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

ADCPathPoint* ADCPathPoint::New(::google::protobuf::Arena* arena) const {
  ADCPathPoint* n = new ADCPathPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCPathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCPathPoint)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&x_) + sizeof(heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADCPathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCPathPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curvature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_curvature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCPathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCPathPoint)
  return false;
#undef DO_
}

void ADCPathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCPathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double curvature = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->curvature(), output);
  }

  // optional double heading = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCPathPoint)
}

::google::protobuf::uint8* ADCPathPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCPathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double curvature = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->curvature(), target);
  }

  // optional double heading = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCPathPoint)
  return target;
}

size_t ADCPathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCPathPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double curvature = 4;
    if (has_curvature()) {
      total_size += 1 + 8;
    }

    // optional double heading = 5;
    if (has_heading()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCPathPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCPathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCPathPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCPathPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCPathPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCPathPoint)
    MergeFrom(*source);
  }
}

void ADCPathPoint::MergeFrom(const ADCPathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCPathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ADCPathPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCPathPoint::CopyFrom(const ADCPathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCPathPoint::IsInitialized() const {
  return true;
}

void ADCPathPoint::Swap(ADCPathPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCPathPoint::InternalSwap(ADCPathPoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(curvature_, other->curvature_);
  std::swap(heading_, other->heading_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCPathPoint::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCPathPoint

// optional double x = 1;
bool ADCPathPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ADCPathPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void ADCPathPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void ADCPathPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
double ADCPathPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.x)
  return x_;
}
void ADCPathPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.x)
}

// optional double y = 2;
bool ADCPathPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ADCPathPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void ADCPathPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void ADCPathPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
double ADCPathPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.y)
  return y_;
}
void ADCPathPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.y)
}

// optional double z = 3;
bool ADCPathPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ADCPathPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void ADCPathPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void ADCPathPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
double ADCPathPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.z)
  return z_;
}
void ADCPathPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.z)
}

// optional double curvature = 4;
bool ADCPathPoint::has_curvature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ADCPathPoint::set_has_curvature() {
  _has_bits_[0] |= 0x00000008u;
}
void ADCPathPoint::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000008u;
}
void ADCPathPoint::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
double ADCPathPoint::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.curvature)
  return curvature_;
}
void ADCPathPoint::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.curvature)
}

// optional double heading = 5;
bool ADCPathPoint::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ADCPathPoint::set_has_heading() {
  _has_bits_[0] |= 0x00000010u;
}
void ADCPathPoint::clear_has_heading() {
  _has_bits_[0] &= ~0x00000010u;
}
void ADCPathPoint::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
double ADCPathPoint::heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.heading)
  return heading_;
}
void ADCPathPoint::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.heading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCSignals::kSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCSignals::ADCSignals()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCSignals)
}
ADCSignals::ADCSignals(const ADCSignals& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signal_(from.signal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCSignals)
}

void ADCSignals::SharedCtor() {
  _cached_size_ = 0;
}

ADCSignals::~ADCSignals() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCSignals)
  SharedDtor();
}

void ADCSignals::SharedDtor() {
}

void ADCSignals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCSignals::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ADCSignals& ADCSignals::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

ADCSignals* ADCSignals::New(::google::protobuf::Arena* arena) const {
  ADCSignals* n = new ADCSignals;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCSignals::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCSignals)
  signal_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADCSignals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCSignals)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ADCSignals_SignalType_IsValid(value)) {
            add_signal(static_cast< ::apollo::planning::ADCSignals_SignalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::apollo::planning::ADCSignals_SignalType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_signal())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCSignals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCSignals)
  return false;
#undef DO_
}

void ADCSignals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCSignals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  for (int i = 0, n = this->signal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->signal(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCSignals)
}

::google::protobuf::uint8* ADCSignals::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCSignals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->signal_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCSignals)
  return target;
}

size_t ADCSignals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCSignals)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->signal_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->signal(i));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCSignals::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCSignals)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCSignals* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCSignals>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCSignals)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCSignals)
    MergeFrom(*source);
  }
}

void ADCSignals::MergeFrom(const ADCSignals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCSignals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_.MergeFrom(from.signal_);
}

void ADCSignals::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCSignals::CopyFrom(const ADCSignals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCSignals::IsInitialized() const {
  return true;
}

void ADCSignals::Swap(ADCSignals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCSignals::InternalSwap(ADCSignals* other) {
  signal_.InternalSwap(&other->signal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCSignals::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCSignals

// repeated .apollo.planning.ADCSignals.SignalType signal = 1;
int ADCSignals::signal_size() const {
  return signal_.size();
}
void ADCSignals::clear_signal() {
  signal_.Clear();
}
::apollo::planning::ADCSignals_SignalType ADCSignals::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCSignals.signal)
  return static_cast< ::apollo::planning::ADCSignals_SignalType >(signal_.Get(index));
}
void ADCSignals::set_signal(int index, ::apollo::planning::ADCSignals_SignalType value) {
  assert(::apollo::planning::ADCSignals_SignalType_IsValid(value));
  signal_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCSignals.signal)
}
void ADCSignals::add_signal(::apollo::planning::ADCSignals_SignalType value) {
  assert(::apollo::planning::ADCSignals_SignalType_IsValid(value));
  signal_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.ADCSignals.signal)
}
const ::google::protobuf::RepeatedField<int>&
ADCSignals::signal() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCSignals.signal)
  return signal_;
}
::google::protobuf::RepeatedField<int>*
ADCSignals::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCSignals.signal)
  return &signal_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EStop::kIsEstopFieldNumber;
const int EStop::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EStop::EStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.EStop)
}
EStop::EStop(const EStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  is_estop_ = from.is_estop_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.EStop)
}

void EStop::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_estop_ = false;
}

EStop::~EStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.EStop)
  SharedDtor();
}

void EStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EStop::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EStop& EStop::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

EStop* EStop::New(::google::protobuf::Arena* arena) const {
  EStop* n = new EStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.EStop)
  if (has_reason()) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  is_estop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.EStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_estop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_estop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_estop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.EStop.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.EStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.EStop)
  return false;
#undef DO_
}

void EStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.EStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_estop = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_estop(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.EStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.EStop)
}

::google::protobuf::uint8* EStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.EStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_estop = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_estop(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.EStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.EStop)
  return target;
}

size_t EStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.EStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bool is_estop = 1;
    if (has_is_estop()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.EStop)
  GOOGLE_DCHECK_NE(&from, this);
  const EStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.EStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.EStop)
    MergeFrom(*source);
  }
}

void EStop::MergeFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.EStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_estop_ = from.is_estop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EStop::CopyFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EStop::IsInitialized() const {
  return true;
}

void EStop::Swap(EStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EStop::InternalSwap(EStop* other) {
  reason_.Swap(&other->reason_);
  std::swap(is_estop_, other->is_estop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EStop::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EStop

// optional bool is_estop = 1;
bool EStop::has_is_estop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EStop::set_has_is_estop() {
  _has_bits_[0] |= 0x00000002u;
}
void EStop::clear_has_is_estop() {
  _has_bits_[0] &= ~0x00000002u;
}
void EStop::clear_is_estop() {
  is_estop_ = false;
  clear_has_is_estop();
}
bool EStop::is_estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EStop.is_estop)
  return is_estop_;
}
void EStop::set_is_estop(bool value) {
  set_has_is_estop();
  is_estop_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.EStop.is_estop)
}

// optional string reason = 2;
bool EStop::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EStop::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void EStop::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void EStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& EStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EStop.reason)
  return reason_.GetNoArena();
}
void EStop::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.EStop.reason)
}
#if LANG_CXX11
void EStop::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.EStop.reason)
}
#endif
void EStop::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.EStop.reason)
}
void EStop::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.EStop.reason)
}
::std::string* EStop::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:apollo.planning.EStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.EStop.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EStop.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskStats::kNameFieldNumber;
const int TaskStats::kTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskStats::TaskStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TaskStats)
}
TaskStats::TaskStats(const TaskStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  time_ms_ = from.time_ms_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TaskStats)
}

void TaskStats::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ms_ = 0;
}

TaskStats::~TaskStats() {
  // @@protoc_insertion_point(destructor:apollo.planning.TaskStats)
  SharedDtor();
}

void TaskStats::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskStats::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskStats& TaskStats::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskStats* TaskStats::New(::google::protobuf::Arena* arena) const {
  TaskStats* n = new TaskStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TaskStats)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  time_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TaskStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TaskStats.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TaskStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TaskStats)
  return false;
#undef DO_
}

void TaskStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TaskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TaskStats.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TaskStats)
}

::google::protobuf::uint8* TaskStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TaskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TaskStats.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TaskStats)
  return target;
}

size_t TaskStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TaskStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double time_ms = 2;
    if (has_time_ms()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TaskStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TaskStats)
    MergeFrom(*source);
  }
}

void TaskStats::MergeFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ms_ = from.time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStats::CopyFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStats::IsInitialized() const {
  return true;
}

void TaskStats::Swap(TaskStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskStats::InternalSwap(TaskStats* other) {
  name_.Swap(&other->name_);
  std::swap(time_ms_, other->time_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskStats::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskStats

// optional string name = 1;
bool TaskStats::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskStats::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskStats::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& TaskStats::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskStats.name)
  return name_.GetNoArena();
}
void TaskStats::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.TaskStats.name)
}
#if LANG_CXX11
void TaskStats::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.TaskStats.name)
}
#endif
void TaskStats::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.TaskStats.name)
}
void TaskStats::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.TaskStats.name)
}
::std::string* TaskStats::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskStats.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskStats::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskStats.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskStats::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskStats.name)
}

// optional double time_ms = 2;
bool TaskStats::has_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskStats::set_has_time_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskStats::clear_has_time_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskStats::clear_time_ms() {
  time_ms_ = 0;
  clear_has_time_ms();
}
double TaskStats::time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskStats.time_ms)
  return time_ms_;
}
void TaskStats::set_time_ms(double value) {
  set_has_time_ms();
  time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TaskStats.time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyStats::kTotalTimeMsFieldNumber;
const int LatencyStats::kTaskStatsFieldNumber;
const int LatencyStats::kInitFrameTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyStats::LatencyStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LatencyStats)
}
LatencyStats::LatencyStats(const LatencyStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      task_stats_(from.task_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_time_ms_, &from.total_time_ms_,
    reinterpret_cast<char*>(&init_frame_time_ms_) -
    reinterpret_cast<char*>(&total_time_ms_) + sizeof(init_frame_time_ms_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LatencyStats)
}

void LatencyStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&total_time_ms_, 0, reinterpret_cast<char*>(&init_frame_time_ms_) -
    reinterpret_cast<char*>(&total_time_ms_) + sizeof(init_frame_time_ms_));
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:apollo.planning.LatencyStats)
  SharedDtor();
}

void LatencyStats::SharedDtor() {
}

void LatencyStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatencyStats::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyStats& LatencyStats::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

LatencyStats* LatencyStats::New(::google::protobuf::Arena* arena) const {
  LatencyStats* n = new LatencyStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LatencyStats)
  task_stats_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&total_time_ms_, 0, reinterpret_cast<char*>(&init_frame_time_ms_) -
      reinterpret_cast<char*>(&total_time_ms_) + sizeof(init_frame_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatencyStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.LatencyStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_time_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_total_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.TaskStats task_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double init_frame_time_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_init_frame_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_frame_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.LatencyStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.LatencyStats)
  return false;
#undef DO_
}

void LatencyStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time_ms(), output);
  }

  // repeated .apollo.planning.TaskStats task_stats = 2;
  for (unsigned int i = 0, n = this->task_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_stats(i), output);
  }

  // optional double init_frame_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->init_frame_time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.LatencyStats)
}

::google::protobuf::uint8* LatencyStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time_ms(), target);
  }

  // repeated .apollo.planning.TaskStats task_stats = 2;
  for (unsigned int i = 0, n = this->task_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->task_stats(i), deterministic, target);
  }

  // optional double init_frame_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->init_frame_time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LatencyStats)
  return target;
}

size_t LatencyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LatencyStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.planning.TaskStats task_stats = 2;
  {
    unsigned int count = this->task_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_stats(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional double total_time_ms = 1;
    if (has_total_time_ms()) {
      total_size += 1 + 8;
    }

    // optional double init_frame_time_ms = 3;
    if (has_init_frame_time_ms()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatencyStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LatencyStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LatencyStats)
    MergeFrom(*source);
  }
}

void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_stats_.MergeFrom(from.task_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      total_time_ms_ = from.total_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      init_frame_time_ms_ = from.init_frame_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {
  return true;
}

void LatencyStats::Swap(LatencyStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyStats::InternalSwap(LatencyStats* other) {
  task_stats_.InternalSwap(&other->task_stats_);
  std::swap(total_time_ms_, other->total_time_ms_);
  std::swap(init_frame_time_ms_, other->init_frame_time_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatencyStats::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatencyStats

// optional double total_time_ms = 1;
bool LatencyStats::has_total_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LatencyStats::set_has_total_time_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void LatencyStats::clear_has_total_time_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
  clear_has_total_time_ms();
}
double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.total_time_ms)
  return total_time_ms_;
}
void LatencyStats::set_total_time_ms(double value) {
  set_has_total_time_ms();
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyStats.total_time_ms)
}

// repeated .apollo.planning.TaskStats task_stats = 2;
int LatencyStats::task_stats_size() const {
  return task_stats_.size();
}
void LatencyStats::clear_task_stats() {
  task_stats_.Clear();
}
const ::apollo::planning::TaskStats& LatencyStats::task_stats(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.task_stats)
  return task_stats_.Get(index);
}
::apollo::planning::TaskStats* LatencyStats::mutable_task_stats(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.LatencyStats.task_stats)
  return task_stats_.Mutable(index);
}
::apollo::planning::TaskStats* LatencyStats::add_task_stats() {
  // @@protoc_insertion_point(field_add:apollo.planning.LatencyStats.task_stats)
  return task_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::TaskStats >*
LatencyStats::mutable_task_stats() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.LatencyStats.task_stats)
  return &task_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::TaskStats >&
LatencyStats::task_stats() const {
  // @@protoc_insertion_point(field_list:apollo.planning.LatencyStats.task_stats)
  return task_stats_;
}

// optional double init_frame_time_ms = 3;
bool LatencyStats::has_init_frame_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LatencyStats::set_has_init_frame_time_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void LatencyStats::clear_has_init_frame_time_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void LatencyStats::clear_init_frame_time_ms() {
  init_frame_time_ms_ = 0;
  clear_has_init_frame_time_ms();
}
double LatencyStats::init_frame_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.init_frame_time_ms)
  return init_frame_time_ms_;
}
void LatencyStats::set_init_frame_time_ms(double value) {
  set_has_init_frame_time_ms();
  init_frame_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyStats.init_frame_time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectory::kHeaderFieldNumber;
const int ADCTrajectory::kTotalPathLengthFieldNumber;
const int ADCTrajectory::kTotalPathTimeFieldNumber;
const int ADCTrajectory::kTrajectoryPointFieldNumber;
const int ADCTrajectory::kEstopFieldNumber;
const int ADCTrajectory::kPathPointFieldNumber;
const int ADCTrajectory::kIsReplanFieldNumber;
const int ADCTrajectory::kGearFieldNumber;
const int ADCTrajectory::kDecisionFieldNumber;
const int ADCTrajectory::kLatencyStatsFieldNumber;
const int ADCTrajectory::kRoutingHeaderFieldNumber;
const int ADCTrajectory::kDebugFieldNumber;
const int ADCTrajectory::kAdcPathPointFieldNumber;
const int ADCTrajectory::kAdcTrajectoryPointFieldNumber;
const int ADCTrajectory::kSignalFieldNumber;
const int ADCTrajectory::kRightOfWayStatusFieldNumber;
const int ADCTrajectory::kLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectory::ADCTrajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCTrajectory)
}
ADCTrajectory::ADCTrajectory(const ADCTrajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      adc_trajectory_point_(from.adc_trajectory_point_),
      adc_path_point_(from.adc_path_point_),
      trajectory_point_(from.trajectory_point_),
      path_point_(from.path_point_),
      lane_id_(from.lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_estop()) {
    estop_ = new ::apollo::planning::EStop(*from.estop_);
  } else {
    estop_ = NULL;
  }
  if (from.has_debug()) {
    debug_ = new ::apollo::planning_internal::Debug(*from.debug_);
  } else {
    debug_ = NULL;
  }
  if (from.has_signal()) {
    signal_ = new ::apollo::common::VehicleSignal(*from.signal_);
  } else {
    signal_ = NULL;
  }
  if (from.has_decision()) {
    decision_ = new ::apollo::planning::DecisionResult(*from.decision_);
  } else {
    decision_ = NULL;
  }
  if (from.has_latency_stats()) {
    latency_stats_ = new ::apollo::planning::LatencyStats(*from.latency_stats_);
  } else {
    latency_stats_ = NULL;
  }
  if (from.has_routing_header()) {
    routing_header_ = new ::apollo::common::Header(*from.routing_header_);
  } else {
    routing_header_ = NULL;
  }
  ::memcpy(&total_path_length_, &from.total_path_length_,
    reinterpret_cast<char*>(&right_of_way_status_) -
    reinterpret_cast<char*>(&total_path_length_) + sizeof(right_of_way_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectory)
}

void ADCTrajectory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&right_of_way_status_) -
    reinterpret_cast<char*>(&header_) + sizeof(right_of_way_status_));
}

ADCTrajectory::~ADCTrajectory() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectory)
  SharedDtor();
}

void ADCTrajectory::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete estop_;
  }
  if (this != internal_default_instance()) {
    delete debug_;
  }
  if (this != internal_default_instance()) {
    delete signal_;
  }
  if (this != internal_default_instance()) {
    delete decision_;
  }
  if (this != internal_default_instance()) {
    delete latency_stats_;
  }
  if (this != internal_default_instance()) {
    delete routing_header_;
  }
}

void ADCTrajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCTrajectory::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ADCTrajectory& ADCTrajectory::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

ADCTrajectory* ADCTrajectory::New(::google::protobuf::Arena* arena) const {
  ADCTrajectory* n = new ADCTrajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectory)
  adc_trajectory_point_.Clear();
  adc_path_point_.Clear();
  trajectory_point_.Clear();
  path_point_.Clear();
  lane_id_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::apollo::common::Header::Clear();
    }
    if (has_estop()) {
      GOOGLE_DCHECK(estop_ != NULL);
      estop_->::apollo::planning::EStop::Clear();
    }
    if (has_debug()) {
      GOOGLE_DCHECK(debug_ != NULL);
      debug_->::apollo::planning_internal::Debug::Clear();
    }
    if (has_signal()) {
      GOOGLE_DCHECK(signal_ != NULL);
      signal_->::apollo::common::VehicleSignal::Clear();
    }
    if (has_decision()) {
      GOOGLE_DCHECK(decision_ != NULL);
      decision_->::apollo::planning::DecisionResult::Clear();
    }
    if (has_latency_stats()) {
      GOOGLE_DCHECK(latency_stats_ != NULL);
      latency_stats_->::apollo::planning::LatencyStats::Clear();
    }
    if (has_routing_header()) {
      GOOGLE_DCHECK(routing_header_ != NULL);
      routing_header_->::apollo::common::Header::Clear();
    }
  }
  total_path_length_ = 0;
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&total_path_time_, 0, reinterpret_cast<char*>(&right_of_way_status_) -
      reinterpret_cast<char*>(&total_path_time_) + sizeof(right_of_way_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADCTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCTrajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_path_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_total_path_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_path_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_total_path_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adc_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.EStop estop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_estop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adc_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning_internal.Debug debug = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_replan = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_is_replan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.PathPoint path_point = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DecisionResult decision = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.LatencyStats latency_stats = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latency_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Header routing_header = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ADCTrajectory_RightOfWayStatus_IsValid(value)) {
            set_right_of_way_status(static_cast< ::apollo::planning::ADCTrajectory_RightOfWayStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id lane_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCTrajectory)
  return false;
#undef DO_
}

void ADCTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional double total_path_length = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_path_length(), output);
  }

  // optional double total_path_time = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->total_path_time(), output);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
  for (unsigned int i = 0, n = this->adc_trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->adc_trajectory_point(i), output);
  }

  // optional .apollo.planning.EStop estop = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->estop_, output);
  }

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
  for (unsigned int i = 0, n = this->adc_path_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->adc_path_point(i), output);
  }

  // optional .apollo.planning_internal.Debug debug = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->debug_, output);
  }

  // optional bool is_replan = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_replan(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->gear(), output);
  }

  // optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->signal_, output);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->trajectory_point(i), output);
  }

  // repeated .apollo.common.PathPoint path_point = 13;
  for (unsigned int i = 0, n = this->path_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->path_point(i), output);
  }

  // optional .apollo.planning.DecisionResult decision = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->decision_, output);
  }

  // optional .apollo.planning.LatencyStats latency_stats = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->latency_stats_, output);
  }

  // optional .apollo.common.Header routing_header = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->routing_header_, output);
  }

  // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->right_of_way_status(), output);
  }

  // repeated .apollo.hdmap.Id lane_id = 18;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->lane_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCTrajectory)
}

::google::protobuf::uint8* ADCTrajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional double total_path_length = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_path_length(), target);
  }

  // optional double total_path_time = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->total_path_time(), target);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
  for (unsigned int i = 0, n = this->adc_trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->adc_trajectory_point(i), deterministic, target);
  }

  // optional .apollo.planning.EStop estop = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->estop_, deterministic, target);
  }

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
  for (unsigned int i = 0, n = this->adc_path_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->adc_path_point(i), deterministic, target);
  }

  // optional .apollo.planning_internal.Debug debug = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->debug_, deterministic, target);
  }

  // optional bool is_replan = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_replan(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->gear(), target);
  }

  // optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->signal_, deterministic, target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->trajectory_point(i), deterministic, target);
  }

  // repeated .apollo.common.PathPoint path_point = 13;
  for (unsigned int i = 0, n = this->path_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->path_point(i), deterministic, target);
  }

  // optional .apollo.planning.DecisionResult decision = 14;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->decision_, deterministic, target);
  }

  // optional .apollo.planning.LatencyStats latency_stats = 15;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->latency_stats_, deterministic, target);
  }

  // optional .apollo.common.Header routing_header = 16;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->routing_header_, deterministic, target);
  }

  // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->right_of_way_status(), target);
  }

  // repeated .apollo.hdmap.Id lane_id = 18;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->lane_id(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectory)
  return target;
}

size_t ADCTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
  {
    unsigned int count = this->adc_trajectory_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adc_trajectory_point(i));
    }
  }

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
  {
    unsigned int count = this->adc_path_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adc_path_point(i));
    }
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  {
    unsigned int count = this->trajectory_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory_point(i));
    }
  }

  // repeated .apollo.common.PathPoint path_point = 13;
  {
    unsigned int count = this->path_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path_point(i));
    }
  }

  // repeated .apollo.hdmap.Id lane_id = 18;
  {
    unsigned int count = this->lane_id_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_id(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.planning.EStop estop = 6;
    if (has_estop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->estop_);
    }

    // optional .apollo.planning_internal.Debug debug = 8;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->debug_);
    }

    // optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signal_);
    }

    // optional .apollo.planning.DecisionResult decision = 14;
    if (has_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->decision_);
    }

    // optional .apollo.planning.LatencyStats latency_stats = 15;
    if (has_latency_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->latency_stats_);
    }

    // optional .apollo.common.Header routing_header = 16;
    if (has_routing_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routing_header_);
    }

    // optional double total_path_length = 2;
    if (has_total_path_length()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double total_path_time = 3;
    if (has_total_path_time()) {
      total_size += 1 + 8;
    }

    // optional bool is_replan = 9 [default = false];
    if (has_is_replan()) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear = 10;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear());
    }

    // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
    if (has_right_of_way_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->right_of_way_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCTrajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCTrajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCTrajectory)
    MergeFrom(*source);
  }
}

void ADCTrajectory::MergeFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  adc_trajectory_point_.MergeFrom(from.adc_trajectory_point_);
  adc_path_point_.MergeFrom(from.adc_path_point_);
  trajectory_point_.MergeFrom(from.trajectory_point_);
  path_point_.MergeFrom(from.path_point_);
  lane_id_.MergeFrom(from.lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_estop()->::apollo::planning::EStop::MergeFrom(from.estop());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_debug()->::apollo::planning_internal::Debug::MergeFrom(from.debug());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_signal()->::apollo::common::VehicleSignal::MergeFrom(from.signal());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_decision()->::apollo::planning::DecisionResult::MergeFrom(from.decision());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_latency_stats()->::apollo::planning::LatencyStats::MergeFrom(from.latency_stats());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_routing_header()->::apollo::common::Header::MergeFrom(from.routing_header());
    }
    if (cached_has_bits & 0x00000080u) {
      total_path_length_ = from.total_path_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      total_path_time_ = from.total_path_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_replan_ = from.is_replan_;
    }
    if (cached_has_bits & 0x00000400u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00000800u) {
      right_of_way_status_ = from.right_of_way_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ADCTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectory::CopyFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory::IsInitialized() const {
  return true;
}

void ADCTrajectory::Swap(ADCTrajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectory::InternalSwap(ADCTrajectory* other) {
  adc_trajectory_point_.InternalSwap(&other->adc_trajectory_point_);
  adc_path_point_.InternalSwap(&other->adc_path_point_);
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  path_point_.InternalSwap(&other->path_point_);
  lane_id_.InternalSwap(&other->lane_id_);
  std::swap(header_, other->header_);
  std::swap(estop_, other->estop_);
  std::swap(debug_, other->debug_);
  std::swap(signal_, other->signal_);
  std::swap(decision_, other->decision_);
  std::swap(latency_stats_, other->latency_stats_);
  std::swap(routing_header_, other->routing_header_);
  std::swap(total_path_length_, other->total_path_length_);
  std::swap(total_path_time_, other->total_path_time_);
  std::swap(is_replan_, other->is_replan_);
  std::swap(gear_, other->gear_);
  std::swap(right_of_way_status_, other->right_of_way_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCTrajectory::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCTrajectory

// optional .apollo.common.Header header = 1;
bool ADCTrajectory::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ADCTrajectory::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void ADCTrajectory::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void ADCTrajectory::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& ADCTrajectory::header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* ADCTrajectory::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.header)
  return header_;
}
::apollo::common::Header* ADCTrajectory::release_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.header)
}

// optional double total_path_length = 2;
bool ADCTrajectory::has_total_path_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ADCTrajectory::set_has_total_path_length() {
  _has_bits_[0] |= 0x00000080u;
}
void ADCTrajectory::clear_has_total_path_length() {
  _has_bits_[0] &= ~0x00000080u;
}
void ADCTrajectory::clear_total_path_length() {
  total_path_length_ = 0;
  clear_has_total_path_length();
}
double ADCTrajectory::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_length)
  return total_path_length_;
}
void ADCTrajectory::set_total_path_length(double value) {
  set_has_total_path_length();
  total_path_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_length)
}

// optional double total_path_time = 3;
bool ADCTrajectory::has_total_path_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ADCTrajectory::set_has_total_path_time() {
  _has_bits_[0] |= 0x00000100u;
}
void ADCTrajectory::clear_has_total_path_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void ADCTrajectory::clear_total_path_time() {
  total_path_time_ = 0;
  clear_has_total_path_time();
}
double ADCTrajectory::total_path_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_time)
  return total_path_time_;
}
void ADCTrajectory::set_total_path_time(double value) {
  set_has_total_path_time();
  total_path_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_time)
}

// repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
int ADCTrajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
void ADCTrajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
const ::apollo::common::TrajectoryPoint& ADCTrajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
::apollo::common::TrajectoryPoint* ADCTrajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
::apollo::common::TrajectoryPoint* ADCTrajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
ADCTrajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.trajectory_point)
  return &trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
ADCTrajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_;
}

// optional .apollo.planning.EStop estop = 6;
bool ADCTrajectory::has_estop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ADCTrajectory::set_has_estop() {
  _has_bits_[0] |= 0x00000002u;
}
void ADCTrajectory::clear_has_estop() {
  _has_bits_[0] &= ~0x00000002u;
}
void ADCTrajectory::clear_estop() {
  if (estop_ != NULL) estop_->::apollo::planning::EStop::Clear();
  clear_has_estop();
}
const ::apollo::planning::EStop& ADCTrajectory::estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.estop)
  return estop_ != NULL ? *estop_
                         : *::apollo::planning::EStop::internal_default_instance();
}
::apollo::planning::EStop* ADCTrajectory::mutable_estop() {
  set_has_estop();
  if (estop_ == NULL) {
    estop_ = new ::apollo::planning::EStop;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.estop)
  return estop_;
}
::apollo::planning::EStop* ADCTrajectory::release_estop() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.estop)
  clear_has_estop();
  ::apollo::planning::EStop* temp = estop_;
  estop_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_estop(::apollo::planning::EStop* estop) {
  delete estop_;
  estop_ = estop;
  if (estop) {
    set_has_estop();
  } else {
    clear_has_estop();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.estop)
}

// repeated .apollo.common.PathPoint path_point = 13;
int ADCTrajectory::path_point_size() const {
  return path_point_.size();
}
void ADCTrajectory::clear_path_point() {
  path_point_.Clear();
}
const ::apollo::common::PathPoint& ADCTrajectory::path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.path_point)
  return path_point_.Get(index);
}
::apollo::common::PathPoint* ADCTrajectory::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.path_point)
  return path_point_.Mutable(index);
}
::apollo::common::PathPoint* ADCTrajectory::add_path_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.path_point)
  return path_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >*
ADCTrajectory::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.path_point)
  return &path_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >&
ADCTrajectory::path_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.path_point)
  return path_point_;
}

// optional bool is_replan = 9 [default = false];
bool ADCTrajectory::has_is_replan() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ADCTrajectory::set_has_is_replan() {
  _has_bits_[0] |= 0x00000200u;
}
void ADCTrajectory::clear_has_is_replan() {
  _has_bits_[0] &= ~0x00000200u;
}
void ADCTrajectory::clear_is_replan() {
  is_replan_ = false;
  clear_has_is_replan();
}
bool ADCTrajectory::is_replan() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.is_replan)
  return is_replan_;
}
void ADCTrajectory::set_is_replan(bool value) {
  set_has_is_replan();
  is_replan_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.is_replan)
}

// optional .apollo.canbus.Chassis.GearPosition gear = 10;
bool ADCTrajectory::has_gear() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ADCTrajectory::set_has_gear() {
  _has_bits_[0] |= 0x00000400u;
}
void ADCTrajectory::clear_has_gear() {
  _has_bits_[0] &= ~0x00000400u;
}
void ADCTrajectory::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
::apollo::canbus::Chassis_GearPosition ADCTrajectory::gear() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.gear)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_);
}
void ADCTrajectory::set_gear(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear();
  gear_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.gear)
}

// optional .apollo.planning.DecisionResult decision = 14;
bool ADCTrajectory::has_decision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ADCTrajectory::set_has_decision() {
  _has_bits_[0] |= 0x00000010u;
}
void ADCTrajectory::clear_has_decision() {
  _has_bits_[0] &= ~0x00000010u;
}
void ADCTrajectory::clear_decision() {
  if (decision_ != NULL) decision_->::apollo::planning::DecisionResult::Clear();
  clear_has_decision();
}
const ::apollo::planning::DecisionResult& ADCTrajectory::decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.decision)
  return decision_ != NULL ? *decision_
                         : *::apollo::planning::DecisionResult::internal_default_instance();
}
::apollo::planning::DecisionResult* ADCTrajectory::mutable_decision() {
  set_has_decision();
  if (decision_ == NULL) {
    decision_ = new ::apollo::planning::DecisionResult;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.decision)
  return decision_;
}
::apollo::planning::DecisionResult* ADCTrajectory::release_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.decision)
  clear_has_decision();
  ::apollo::planning::DecisionResult* temp = decision_;
  decision_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_decision(::apollo::planning::DecisionResult* decision) {
  delete decision_;
  decision_ = decision;
  if (decision) {
    set_has_decision();
  } else {
    clear_has_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.decision)
}

// optional .apollo.planning.LatencyStats latency_stats = 15;
bool ADCTrajectory::has_latency_stats() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ADCTrajectory::set_has_latency_stats() {
  _has_bits_[0] |= 0x00000020u;
}
void ADCTrajectory::clear_has_latency_stats() {
  _has_bits_[0] &= ~0x00000020u;
}
void ADCTrajectory::clear_latency_stats() {
  if (latency_stats_ != NULL) latency_stats_->::apollo::planning::LatencyStats::Clear();
  clear_has_latency_stats();
}
const ::apollo::planning::LatencyStats& ADCTrajectory::latency_stats() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.latency_stats)
  return latency_stats_ != NULL ? *latency_stats_
                         : *::apollo::planning::LatencyStats::internal_default_instance();
}
::apollo::planning::LatencyStats* ADCTrajectory::mutable_latency_stats() {
  set_has_latency_stats();
  if (latency_stats_ == NULL) {
    latency_stats_ = new ::apollo::planning::LatencyStats;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.latency_stats)
  return latency_stats_;
}
::apollo::planning::LatencyStats* ADCTrajectory::release_latency_stats() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.latency_stats)
  clear_has_latency_stats();
  ::apollo::planning::LatencyStats* temp = latency_stats_;
  latency_stats_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_latency_stats(::apollo::planning::LatencyStats* latency_stats) {
  delete latency_stats_;
  latency_stats_ = latency_stats;
  if (latency_stats) {
    set_has_latency_stats();
  } else {
    clear_has_latency_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.latency_stats)
}

// optional .apollo.common.Header routing_header = 16;
bool ADCTrajectory::has_routing_header() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ADCTrajectory::set_has_routing_header() {
  _has_bits_[0] |= 0x00000040u;
}
void ADCTrajectory::clear_has_routing_header() {
  _has_bits_[0] &= ~0x00000040u;
}
void ADCTrajectory::clear_routing_header() {
  if (routing_header_ != NULL) routing_header_->::apollo::common::Header::Clear();
  clear_has_routing_header();
}
const ::apollo::common::Header& ADCTrajectory::routing_header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.routing_header)
  return routing_header_ != NULL ? *routing_header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* ADCTrajectory::mutable_routing_header() {
  set_has_routing_header();
  if (routing_header_ == NULL) {
    routing_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.routing_header)
  return routing_header_;
}
::apollo::common::Header* ADCTrajectory::release_routing_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.routing_header)
  clear_has_routing_header();
  ::apollo::common::Header* temp = routing_header_;
  routing_header_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_routing_header(::apollo::common::Header* routing_header) {
  delete routing_header_;
  routing_header_ = routing_header;
  if (routing_header) {
    set_has_routing_header();
  } else {
    clear_has_routing_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.routing_header)
}

// optional .apollo.planning_internal.Debug debug = 8;
bool ADCTrajectory::has_debug() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ADCTrajectory::set_has_debug() {
  _has_bits_[0] |= 0x00000004u;
}
void ADCTrajectory::clear_has_debug() {
  _has_bits_[0] &= ~0x00000004u;
}
void ADCTrajectory::clear_debug() {
  if (debug_ != NULL) debug_->::apollo::planning_internal::Debug::Clear();
  clear_has_debug();
}
const ::apollo::planning_internal::Debug& ADCTrajectory::debug() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.debug)
  return debug_ != NULL ? *debug_
                         : *::apollo::planning_internal::Debug::internal_default_instance();
}
::apollo::planning_internal::Debug* ADCTrajectory::mutable_debug() {
  set_has_debug();
  if (debug_ == NULL) {
    debug_ = new ::apollo::planning_internal::Debug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.debug)
  return debug_;
}
::apollo::planning_internal::Debug* ADCTrajectory::release_debug() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.debug)
  clear_has_debug();
  ::apollo::planning_internal::Debug* temp = debug_;
  debug_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_debug(::apollo::planning_internal::Debug* debug) {
  delete debug_;
  debug_ = debug;
  if (debug) {
    set_has_debug();
  } else {
    clear_has_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.debug)
}

// repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
int ADCTrajectory::adc_path_point_size() const {
  return adc_path_point_.size();
}
void ADCTrajectory::clear_adc_path_point() {
  adc_path_point_.Clear();
}
const ::apollo::planning::ADCPathPoint& ADCTrajectory::adc_path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Get(index);
}
::apollo::planning::ADCPathPoint* ADCTrajectory::mutable_adc_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Mutable(index);
}
::apollo::planning::ADCPathPoint* ADCTrajectory::add_adc_path_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >*
ADCTrajectory::mutable_adc_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.adc_path_point)
  return &adc_path_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCPathPoint >&
ADCTrajectory::adc_path_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.adc_path_point)
  return adc_path_point_;
}

// repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
int ADCTrajectory::adc_trajectory_point_size() const {
  return adc_trajectory_point_.size();
}
void ADCTrajectory::clear_adc_trajectory_point() {
  adc_trajectory_point_.Clear();
}
const ::apollo::planning::ADCTrajectoryPoint& ADCTrajectory::adc_trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Get(index);
}
::apollo::planning::ADCTrajectoryPoint* ADCTrajectory::mutable_adc_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Mutable(index);
}
::apollo::planning::ADCTrajectoryPoint* ADCTrajectory::add_adc_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >*
ADCTrajectory::mutable_adc_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return &adc_trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >&
ADCTrajectory::adc_trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return adc_trajectory_point_;
}

// optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
bool ADCTrajectory::has_signal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ADCTrajectory::set_has_signal() {
  _has_bits_[0] |= 0x00000008u;
}
void ADCTrajectory::clear_has_signal() {
  _has_bits_[0] &= ~0x00000008u;
}
void ADCTrajectory::clear_signal() {
  if (signal_ != NULL) signal_->::apollo::common::VehicleSignal::Clear();
  clear_has_signal();
}
const ::apollo::common::VehicleSignal& ADCTrajectory::signal() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.signal)
  return signal_ != NULL ? *signal_
                         : *::apollo::common::VehicleSignal::internal_default_instance();
}
::apollo::common::VehicleSignal* ADCTrajectory::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) {
    signal_ = new ::apollo::common::VehicleSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.signal)
  return signal_;
}
::apollo::common::VehicleSignal* ADCTrajectory::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.signal)
  clear_has_signal();
  ::apollo::common::VehicleSignal* temp = signal_;
  signal_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_signal(::apollo::common::VehicleSignal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    set_has_signal();
  } else {
    clear_has_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.signal)
}

// optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
bool ADCTrajectory::has_right_of_way_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ADCTrajectory::set_has_right_of_way_status() {
  _has_bits_[0] |= 0x00000800u;
}
void ADCTrajectory::clear_has_right_of_way_status() {
  _has_bits_[0] &= ~0x00000800u;
}
void ADCTrajectory::clear_right_of_way_status() {
  right_of_way_status_ = 0;
  clear_has_right_of_way_status();
}
::apollo::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::right_of_way_status() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.right_of_way_status)
  return static_cast< ::apollo::planning::ADCTrajectory_RightOfWayStatus >(right_of_way_status_);
}
void ADCTrajectory::set_right_of_way_status(::apollo::planning::ADCTrajectory_RightOfWayStatus value) {
  assert(::apollo::planning::ADCTrajectory_RightOfWayStatus_IsValid(value));
  set_has_right_of_way_status();
  right_of_way_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.right_of_way_status)
}

// repeated .apollo.hdmap.Id lane_id = 18;
int ADCTrajectory::lane_id_size() const {
  return lane_id_.size();
}
void ADCTrajectory::clear_lane_id() {
  lane_id_.Clear();
}
const ::apollo::hdmap::Id& ADCTrajectory::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_.Get(index);
}
::apollo::hdmap::Id* ADCTrajectory::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_.Mutable(index);
}
::apollo::hdmap::Id* ADCTrajectory::add_lane_id() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >*
ADCTrajectory::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.lane_id)
  return &lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >&
ADCTrajectory::lane_id() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
