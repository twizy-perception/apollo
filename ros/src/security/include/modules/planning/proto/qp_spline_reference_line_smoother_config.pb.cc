// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/qp_spline_reference_line_smoother_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/qp_spline_reference_line_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {
class QpSplineReferenceLineSmootherConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QpSplineReferenceLineSmootherConfig> {
} _QpSplineReferenceLineSmootherConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineReferenceLineSmootherConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineReferenceLineSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineReferenceLineSmootherConfig, spline_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineReferenceLineSmootherConfig, max_spline_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineReferenceLineSmootherConfig, max_constraint_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineReferenceLineSmootherConfig, longitudinal_boundary_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineReferenceLineSmootherConfig, lateral_boundary_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineReferenceLineSmootherConfig, second_derivative_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineReferenceLineSmootherConfig, third_derivative_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineReferenceLineSmootherConfig, num_of_total_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpSplineReferenceLineSmootherConfig, regularization_weight_),
  4,
  1,
  2,
  3,
  6,
  0,
  7,
  5,
  8,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 14, sizeof(QpSplineReferenceLineSmootherConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_QpSplineReferenceLineSmootherConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/qp_spline_reference_line_smoother_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _QpSplineReferenceLineSmootherConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _QpSplineReferenceLineSmootherConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\nEmodules/planning/proto/qp_spline_refer"
      "ence_line_smoother_config.proto\022\017apollo."
      "planning\"\337\002\n#QpSplineReferenceLineSmooth"
      "erConfig\022\027\n\014spline_order\030\001 \001(\r:\0015\022\035\n\021max"
      "_spline_length\030\002 \001(\001:\00225\022\"\n\027max_constrai"
      "nt_interval\030\003 \001(\001:\0015\022&\n\033longitudinal_bou"
      "ndary_bound\030\004 \001(\001:\0011\022#\n\026lateral_boundary"
      "_bound\030\005 \001(\001:\0030.1\022#\n\030second_derivative_w"
      "eight\030\006 \001(\001:\0010\022$\n\027third_derivative_weigh"
      "t\030\007 \001(\001:\003100\022 \n\023num_of_total_points\030\010 \001("
      "\r:\003500\022\"\n\025regularization_weight\030\t \001(\001:\0030"
      ".1"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 442);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/qp_spline_reference_line_smoother_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QpSplineReferenceLineSmootherConfig::kSplineOrderFieldNumber;
const int QpSplineReferenceLineSmootherConfig::kMaxSplineLengthFieldNumber;
const int QpSplineReferenceLineSmootherConfig::kMaxConstraintIntervalFieldNumber;
const int QpSplineReferenceLineSmootherConfig::kLongitudinalBoundaryBoundFieldNumber;
const int QpSplineReferenceLineSmootherConfig::kLateralBoundaryBoundFieldNumber;
const int QpSplineReferenceLineSmootherConfig::kSecondDerivativeWeightFieldNumber;
const int QpSplineReferenceLineSmootherConfig::kThirdDerivativeWeightFieldNumber;
const int QpSplineReferenceLineSmootherConfig::kNumOfTotalPointsFieldNumber;
const int QpSplineReferenceLineSmootherConfig::kRegularizationWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QpSplineReferenceLineSmootherConfig::QpSplineReferenceLineSmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.QpSplineReferenceLineSmootherConfig)
}
QpSplineReferenceLineSmootherConfig::QpSplineReferenceLineSmootherConfig(const QpSplineReferenceLineSmootherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&second_derivative_weight_, &from.second_derivative_weight_,
    reinterpret_cast<char*>(&regularization_weight_) -
    reinterpret_cast<char*>(&second_derivative_weight_) + sizeof(regularization_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QpSplineReferenceLineSmootherConfig)
}

void QpSplineReferenceLineSmootherConfig::SharedCtor() {
  _cached_size_ = 0;
  second_derivative_weight_ = 0;
  max_spline_length_ = 25;
  max_constraint_interval_ = 5;
  longitudinal_boundary_bound_ = 1;
  spline_order_ = 5u;
  num_of_total_points_ = 500u;
  lateral_boundary_bound_ = 0.1;
  third_derivative_weight_ = 100;
  regularization_weight_ = 0.1;
}

QpSplineReferenceLineSmootherConfig::~QpSplineReferenceLineSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.QpSplineReferenceLineSmootherConfig)
  SharedDtor();
}

void QpSplineReferenceLineSmootherConfig::SharedDtor() {
}

void QpSplineReferenceLineSmootherConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QpSplineReferenceLineSmootherConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QpSplineReferenceLineSmootherConfig& QpSplineReferenceLineSmootherConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

QpSplineReferenceLineSmootherConfig* QpSplineReferenceLineSmootherConfig::New(::google::protobuf::Arena* arena) const {
  QpSplineReferenceLineSmootherConfig* n = new QpSplineReferenceLineSmootherConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QpSplineReferenceLineSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QpSplineReferenceLineSmootherConfig)
  if (_has_bits_[0 / 32] & 255u) {
    second_derivative_weight_ = 0;
    max_spline_length_ = 25;
    max_constraint_interval_ = 5;
    longitudinal_boundary_bound_ = 1;
    spline_order_ = 5u;
    num_of_total_points_ = 500u;
    lateral_boundary_bound_ = 0.1;
    third_derivative_weight_ = 100;
  }
  regularization_weight_ = 0.1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QpSplineReferenceLineSmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.QpSplineReferenceLineSmootherConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spline_order = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_spline_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spline_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_spline_length = 2 [default = 25];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_max_spline_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_spline_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_constraint_interval = 3 [default = 5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_max_constraint_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_constraint_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitudinal_boundary_bound = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_longitudinal_boundary_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinal_boundary_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_boundary_bound = 5 [default = 0.1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_lateral_boundary_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_boundary_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double second_derivative_weight = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_second_derivative_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_derivative_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double third_derivative_weight = 7 [default = 100];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_third_derivative_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &third_derivative_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_of_total_points = 8 [default = 500];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_num_of_total_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_of_total_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double regularization_weight = 9 [default = 0.1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_regularization_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &regularization_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.QpSplineReferenceLineSmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.QpSplineReferenceLineSmootherConfig)
  return false;
#undef DO_
}

void QpSplineReferenceLineSmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.QpSplineReferenceLineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spline_order = 1 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spline_order(), output);
  }

  // optional double max_spline_length = 2 [default = 25];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_spline_length(), output);
  }

  // optional double max_constraint_interval = 3 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_constraint_interval(), output);
  }

  // optional double longitudinal_boundary_bound = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitudinal_boundary_bound(), output);
  }

  // optional double lateral_boundary_bound = 5 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lateral_boundary_bound(), output);
  }

  // optional double second_derivative_weight = 6 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->second_derivative_weight(), output);
  }

  // optional double third_derivative_weight = 7 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->third_derivative_weight(), output);
  }

  // optional uint32 num_of_total_points = 8 [default = 500];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_of_total_points(), output);
  }

  // optional double regularization_weight = 9 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->regularization_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.QpSplineReferenceLineSmootherConfig)
}

::google::protobuf::uint8* QpSplineReferenceLineSmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QpSplineReferenceLineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spline_order = 1 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spline_order(), target);
  }

  // optional double max_spline_length = 2 [default = 25];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_spline_length(), target);
  }

  // optional double max_constraint_interval = 3 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_constraint_interval(), target);
  }

  // optional double longitudinal_boundary_bound = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitudinal_boundary_bound(), target);
  }

  // optional double lateral_boundary_bound = 5 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lateral_boundary_bound(), target);
  }

  // optional double second_derivative_weight = 6 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->second_derivative_weight(), target);
  }

  // optional double third_derivative_weight = 7 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->third_derivative_weight(), target);
  }

  // optional uint32 num_of_total_points = 8 [default = 500];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_of_total_points(), target);
  }

  // optional double regularization_weight = 9 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->regularization_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QpSplineReferenceLineSmootherConfig)
  return target;
}

size_t QpSplineReferenceLineSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QpSplineReferenceLineSmootherConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double second_derivative_weight = 6 [default = 0];
    if (has_second_derivative_weight()) {
      total_size += 1 + 8;
    }

    // optional double max_spline_length = 2 [default = 25];
    if (has_max_spline_length()) {
      total_size += 1 + 8;
    }

    // optional double max_constraint_interval = 3 [default = 5];
    if (has_max_constraint_interval()) {
      total_size += 1 + 8;
    }

    // optional double longitudinal_boundary_bound = 4 [default = 1];
    if (has_longitudinal_boundary_bound()) {
      total_size += 1 + 8;
    }

    // optional uint32 spline_order = 1 [default = 5];
    if (has_spline_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spline_order());
    }

    // optional uint32 num_of_total_points = 8 [default = 500];
    if (has_num_of_total_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_of_total_points());
    }

    // optional double lateral_boundary_bound = 5 [default = 0.1];
    if (has_lateral_boundary_bound()) {
      total_size += 1 + 8;
    }

    // optional double third_derivative_weight = 7 [default = 100];
    if (has_third_derivative_weight()) {
      total_size += 1 + 8;
    }

  }
  // optional double regularization_weight = 9 [default = 0.1];
  if (has_regularization_weight()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QpSplineReferenceLineSmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.QpSplineReferenceLineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const QpSplineReferenceLineSmootherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QpSplineReferenceLineSmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.QpSplineReferenceLineSmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.QpSplineReferenceLineSmootherConfig)
    MergeFrom(*source);
  }
}

void QpSplineReferenceLineSmootherConfig::MergeFrom(const QpSplineReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QpSplineReferenceLineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      second_derivative_weight_ = from.second_derivative_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_spline_length_ = from.max_spline_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_constraint_interval_ = from.max_constraint_interval_;
    }
    if (cached_has_bits & 0x00000008u) {
      longitudinal_boundary_bound_ = from.longitudinal_boundary_bound_;
    }
    if (cached_has_bits & 0x00000010u) {
      spline_order_ = from.spline_order_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_of_total_points_ = from.num_of_total_points_;
    }
    if (cached_has_bits & 0x00000040u) {
      lateral_boundary_bound_ = from.lateral_boundary_bound_;
    }
    if (cached_has_bits & 0x00000080u) {
      third_derivative_weight_ = from.third_derivative_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_regularization_weight(from.regularization_weight());
  }
}

void QpSplineReferenceLineSmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.QpSplineReferenceLineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpSplineReferenceLineSmootherConfig::CopyFrom(const QpSplineReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QpSplineReferenceLineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpSplineReferenceLineSmootherConfig::IsInitialized() const {
  return true;
}

void QpSplineReferenceLineSmootherConfig::Swap(QpSplineReferenceLineSmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QpSplineReferenceLineSmootherConfig::InternalSwap(QpSplineReferenceLineSmootherConfig* other) {
  std::swap(second_derivative_weight_, other->second_derivative_weight_);
  std::swap(max_spline_length_, other->max_spline_length_);
  std::swap(max_constraint_interval_, other->max_constraint_interval_);
  std::swap(longitudinal_boundary_bound_, other->longitudinal_boundary_bound_);
  std::swap(spline_order_, other->spline_order_);
  std::swap(num_of_total_points_, other->num_of_total_points_);
  std::swap(lateral_boundary_bound_, other->lateral_boundary_bound_);
  std::swap(third_derivative_weight_, other->third_derivative_weight_);
  std::swap(regularization_weight_, other->regularization_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QpSplineReferenceLineSmootherConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fqp_5fspline_5freference_5fline_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QpSplineReferenceLineSmootherConfig

// optional uint32 spline_order = 1 [default = 5];
bool QpSplineReferenceLineSmootherConfig::has_spline_order() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QpSplineReferenceLineSmootherConfig::set_has_spline_order() {
  _has_bits_[0] |= 0x00000010u;
}
void QpSplineReferenceLineSmootherConfig::clear_has_spline_order() {
  _has_bits_[0] &= ~0x00000010u;
}
void QpSplineReferenceLineSmootherConfig::clear_spline_order() {
  spline_order_ = 5u;
  clear_has_spline_order();
}
::google::protobuf::uint32 QpSplineReferenceLineSmootherConfig::spline_order() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.spline_order)
  return spline_order_;
}
void QpSplineReferenceLineSmootherConfig::set_spline_order(::google::protobuf::uint32 value) {
  set_has_spline_order();
  spline_order_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.spline_order)
}

// optional double max_spline_length = 2 [default = 25];
bool QpSplineReferenceLineSmootherConfig::has_max_spline_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QpSplineReferenceLineSmootherConfig::set_has_max_spline_length() {
  _has_bits_[0] |= 0x00000002u;
}
void QpSplineReferenceLineSmootherConfig::clear_has_max_spline_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void QpSplineReferenceLineSmootherConfig::clear_max_spline_length() {
  max_spline_length_ = 25;
  clear_has_max_spline_length();
}
double QpSplineReferenceLineSmootherConfig::max_spline_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.max_spline_length)
  return max_spline_length_;
}
void QpSplineReferenceLineSmootherConfig::set_max_spline_length(double value) {
  set_has_max_spline_length();
  max_spline_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.max_spline_length)
}

// optional double max_constraint_interval = 3 [default = 5];
bool QpSplineReferenceLineSmootherConfig::has_max_constraint_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QpSplineReferenceLineSmootherConfig::set_has_max_constraint_interval() {
  _has_bits_[0] |= 0x00000004u;
}
void QpSplineReferenceLineSmootherConfig::clear_has_max_constraint_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
void QpSplineReferenceLineSmootherConfig::clear_max_constraint_interval() {
  max_constraint_interval_ = 5;
  clear_has_max_constraint_interval();
}
double QpSplineReferenceLineSmootherConfig::max_constraint_interval() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.max_constraint_interval)
  return max_constraint_interval_;
}
void QpSplineReferenceLineSmootherConfig::set_max_constraint_interval(double value) {
  set_has_max_constraint_interval();
  max_constraint_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.max_constraint_interval)
}

// optional double longitudinal_boundary_bound = 4 [default = 1];
bool QpSplineReferenceLineSmootherConfig::has_longitudinal_boundary_bound() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QpSplineReferenceLineSmootherConfig::set_has_longitudinal_boundary_bound() {
  _has_bits_[0] |= 0x00000008u;
}
void QpSplineReferenceLineSmootherConfig::clear_has_longitudinal_boundary_bound() {
  _has_bits_[0] &= ~0x00000008u;
}
void QpSplineReferenceLineSmootherConfig::clear_longitudinal_boundary_bound() {
  longitudinal_boundary_bound_ = 1;
  clear_has_longitudinal_boundary_bound();
}
double QpSplineReferenceLineSmootherConfig::longitudinal_boundary_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.longitudinal_boundary_bound)
  return longitudinal_boundary_bound_;
}
void QpSplineReferenceLineSmootherConfig::set_longitudinal_boundary_bound(double value) {
  set_has_longitudinal_boundary_bound();
  longitudinal_boundary_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.longitudinal_boundary_bound)
}

// optional double lateral_boundary_bound = 5 [default = 0.1];
bool QpSplineReferenceLineSmootherConfig::has_lateral_boundary_bound() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QpSplineReferenceLineSmootherConfig::set_has_lateral_boundary_bound() {
  _has_bits_[0] |= 0x00000040u;
}
void QpSplineReferenceLineSmootherConfig::clear_has_lateral_boundary_bound() {
  _has_bits_[0] &= ~0x00000040u;
}
void QpSplineReferenceLineSmootherConfig::clear_lateral_boundary_bound() {
  lateral_boundary_bound_ = 0.1;
  clear_has_lateral_boundary_bound();
}
double QpSplineReferenceLineSmootherConfig::lateral_boundary_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.lateral_boundary_bound)
  return lateral_boundary_bound_;
}
void QpSplineReferenceLineSmootherConfig::set_lateral_boundary_bound(double value) {
  set_has_lateral_boundary_bound();
  lateral_boundary_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.lateral_boundary_bound)
}

// optional double second_derivative_weight = 6 [default = 0];
bool QpSplineReferenceLineSmootherConfig::has_second_derivative_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QpSplineReferenceLineSmootherConfig::set_has_second_derivative_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void QpSplineReferenceLineSmootherConfig::clear_has_second_derivative_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void QpSplineReferenceLineSmootherConfig::clear_second_derivative_weight() {
  second_derivative_weight_ = 0;
  clear_has_second_derivative_weight();
}
double QpSplineReferenceLineSmootherConfig::second_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.second_derivative_weight)
  return second_derivative_weight_;
}
void QpSplineReferenceLineSmootherConfig::set_second_derivative_weight(double value) {
  set_has_second_derivative_weight();
  second_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.second_derivative_weight)
}

// optional double third_derivative_weight = 7 [default = 100];
bool QpSplineReferenceLineSmootherConfig::has_third_derivative_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QpSplineReferenceLineSmootherConfig::set_has_third_derivative_weight() {
  _has_bits_[0] |= 0x00000080u;
}
void QpSplineReferenceLineSmootherConfig::clear_has_third_derivative_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
void QpSplineReferenceLineSmootherConfig::clear_third_derivative_weight() {
  third_derivative_weight_ = 100;
  clear_has_third_derivative_weight();
}
double QpSplineReferenceLineSmootherConfig::third_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.third_derivative_weight)
  return third_derivative_weight_;
}
void QpSplineReferenceLineSmootherConfig::set_third_derivative_weight(double value) {
  set_has_third_derivative_weight();
  third_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.third_derivative_weight)
}

// optional uint32 num_of_total_points = 8 [default = 500];
bool QpSplineReferenceLineSmootherConfig::has_num_of_total_points() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QpSplineReferenceLineSmootherConfig::set_has_num_of_total_points() {
  _has_bits_[0] |= 0x00000020u;
}
void QpSplineReferenceLineSmootherConfig::clear_has_num_of_total_points() {
  _has_bits_[0] &= ~0x00000020u;
}
void QpSplineReferenceLineSmootherConfig::clear_num_of_total_points() {
  num_of_total_points_ = 500u;
  clear_has_num_of_total_points();
}
::google::protobuf::uint32 QpSplineReferenceLineSmootherConfig::num_of_total_points() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.num_of_total_points)
  return num_of_total_points_;
}
void QpSplineReferenceLineSmootherConfig::set_num_of_total_points(::google::protobuf::uint32 value) {
  set_has_num_of_total_points();
  num_of_total_points_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.num_of_total_points)
}

// optional double regularization_weight = 9 [default = 0.1];
bool QpSplineReferenceLineSmootherConfig::has_regularization_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void QpSplineReferenceLineSmootherConfig::set_has_regularization_weight() {
  _has_bits_[0] |= 0x00000100u;
}
void QpSplineReferenceLineSmootherConfig::clear_has_regularization_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
void QpSplineReferenceLineSmootherConfig::clear_regularization_weight() {
  regularization_weight_ = 0.1;
  clear_has_regularization_weight();
}
double QpSplineReferenceLineSmootherConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineReferenceLineSmootherConfig.regularization_weight)
  return regularization_weight_;
}
void QpSplineReferenceLineSmootherConfig::set_regularization_weight(double value) {
  set_has_regularization_weight();
  regularization_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineReferenceLineSmootherConfig.regularization_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
