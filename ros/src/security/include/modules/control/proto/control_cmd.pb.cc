// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/control_cmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/control/proto/control_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {
class LatencyStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LatencyStats> {
} _LatencyStats_default_instance_;
class ControlCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ControlCommand> {
} _ControlCommand_default_instance_;
class SimpleLongitudinalDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SimpleLongitudinalDebug> {
} _SimpleLongitudinalDebug_default_instance_;
class SimpleLateralDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SimpleLateralDebug> {
} _SimpleLateralDebug_default_instance_;
class SimpleMPCDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SimpleMPCDebug> {
} _SimpleMPCDebug_default_instance_;
class InputDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InputDebug> {
} _InputDebug_default_instance_;
class DebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug> {
} _Debug_default_instance_;

namespace protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, total_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, controller_time_ms_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, throttle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, steering_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, steering_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, parking_brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, reset_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, engine_on_off_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, trajectory_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, gear_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, latency_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, pad_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, left_turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, right_turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, high_beam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, low_beam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, horn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, turnsignal_),
  0,
  5,
  6,
  7,
  8,
  15,
  9,
  10,
  16,
  17,
  19,
  20,
  21,
  1,
  2,
  3,
  4,
  18,
  11,
  12,
  13,
  14,
  22,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, station_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, station_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, station_error_limited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, preview_station_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, speed_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, speed_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, speed_controller_input_limited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, preview_speed_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, preview_speed_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, preview_acceleration_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, acceleration_cmd_closeloop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, acceleration_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, acceleration_lookup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, speed_lookup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, calibration_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, throttle_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, brake_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, is_full_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLongitudinalDebug, slope_offset_compensation_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  18,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, lateral_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, ref_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, heading_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, heading_error_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, lateral_error_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_feedforward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_lateral_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_lateral_rate_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_heading_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_heading_rate_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steering_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, ref_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleLateralDebug, steer_angle_limited_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, lateral_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, ref_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, heading_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, heading_error_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, lateral_error_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_feedforward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_lateral_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_lateral_rate_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_heading_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_heading_rate_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steering_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, ref_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, steer_angle_limited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, station_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, station_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, speed_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, speed_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, acceleration_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, is_full_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, station_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMPCDebug, speed_feedback_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  24,
  22,
  23,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDebug, localization_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDebug, canbus_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDebug, trajectory_header_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, simple_lon_debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, simple_lat_debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, input_debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, simple_mpc_debug_),
  0,
  1,
  2,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(LatencyStats)},
  { 9, 37, sizeof(ControlCommand)},
  { 60, 84, sizeof(SimpleLongitudinalDebug)},
  { 103, 125, sizeof(SimpleLateralDebug)},
  { 142, 172, sizeof(SimpleMPCDebug)},
  { 197, 205, sizeof(InputDebug)},
  { 208, 217, sizeof(Debug)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LatencyStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ControlCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimpleLongitudinalDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimpleLateralDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimpleMPCDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InputDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/control/proto/control_cmd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _LatencyStats_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ControlCommand_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SimpleLongitudinalDebug_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SimpleLateralDebug_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SimpleMPCDebug_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _InputDebug_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Debug_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto::InitDefaults();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2fpad_5fmsg_2eproto::InitDefaults();
  _LatencyStats_default_instance_.DefaultConstruct();
  _ControlCommand_default_instance_.DefaultConstruct();
  _SimpleLongitudinalDebug_default_instance_.DefaultConstruct();
  _SimpleLateralDebug_default_instance_.DefaultConstruct();
  _SimpleMPCDebug_default_instance_.DefaultConstruct();
  _InputDebug_default_instance_.DefaultConstruct();
  _Debug_default_instance_.DefaultConstruct();
  _ControlCommand_default_instance_.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _ControlCommand_default_instance_.get_mutable()->debug_ = const_cast< ::apollo::control::Debug*>(
      ::apollo::control::Debug::internal_default_instance());
  _ControlCommand_default_instance_.get_mutable()->signal_ = const_cast< ::apollo::common::VehicleSignal*>(
      ::apollo::common::VehicleSignal::internal_default_instance());
  _ControlCommand_default_instance_.get_mutable()->latency_stats_ = const_cast< ::apollo::control::LatencyStats*>(
      ::apollo::control::LatencyStats::internal_default_instance());
  _ControlCommand_default_instance_.get_mutable()->pad_msg_ = const_cast< ::apollo::control::PadMessage*>(
      ::apollo::control::PadMessage::internal_default_instance());
  _InputDebug_default_instance_.get_mutable()->localization_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _InputDebug_default_instance_.get_mutable()->canbus_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _InputDebug_default_instance_.get_mutable()->trajectory_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _Debug_default_instance_.get_mutable()->simple_lon_debug_ = const_cast< ::apollo::control::SimpleLongitudinalDebug*>(
      ::apollo::control::SimpleLongitudinalDebug::internal_default_instance());
  _Debug_default_instance_.get_mutable()->simple_lat_debug_ = const_cast< ::apollo::control::SimpleLateralDebug*>(
      ::apollo::control::SimpleLateralDebug::internal_default_instance());
  _Debug_default_instance_.get_mutable()->input_debug_ = const_cast< ::apollo::control::InputDebug*>(
      ::apollo::control::InputDebug::internal_default_instance());
  _Debug_default_instance_.get_mutable()->simple_mpc_debug_ = const_cast< ::apollo::control::SimpleMPCDebug*>(
      ::apollo::control::SimpleMPCDebug::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'modules/control/proto/control_cmd.prot"
      "o\022\016apollo.control\032\"modules/canbus/proto/"
      "chassis.proto\032!modules/common/proto/head"
      "er.proto\032)modules/common/proto/vehicle_s"
      "ignal.proto\032#modules/control/proto/pad_m"
      "sg.proto\"A\n\014LatencyStats\022\025\n\rtotal_time_m"
      "s\030\001 \001(\001\022\032\n\022controller_time_ms\030\002 \003(\001\"\343\005\n\016"
      "ControlCommand\022%\n\006header\030\001 \001(\0132\025.apollo."
      "common.Header\022\020\n\010throttle\030\003 \001(\001\022\r\n\005brake"
      "\030\004 \001(\001\022\025\n\rsteering_rate\030\006 \001(\001\022\027\n\017steerin"
      "g_target\030\007 \001(\001\022\025\n\rparking_brake\030\010 \001(\010\022\r\n"
      "\005speed\030\t \001(\001\022\024\n\014acceleration\030\n \001(\001\022\027\n\013re"
      "set_model\030\020 \001(\010B\002\030\001\022\025\n\rengine_on_off\030\021 \001"
      "(\010\022\033\n\023trajectory_fraction\030\022 \001(\001\022<\n\014drivi"
      "ng_mode\030\023 \001(\0162\".apollo.canbus.Chassis.Dr"
      "ivingModeB\002\030\001\022:\n\rgear_location\030\024 \001(\0162#.a"
      "pollo.canbus.Chassis.GearPosition\022$\n\005deb"
      "ug\030\026 \001(\0132\025.apollo.control.Debug\022,\n\006signa"
      "l\030\027 \001(\0132\034.apollo.common.VehicleSignal\0223\n"
      "\rlatency_stats\030\030 \001(\0132\034.apollo.control.La"
      "tencyStats\022+\n\007pad_msg\030\031 \001(\0132\032.apollo.con"
      "trol.PadMessage\022\025\n\tleft_turn\030\r \001(\010B\002\030\001\022\026"
      "\n\nright_turn\030\016 \001(\010B\002\030\001\022\025\n\thigh_beam\030\013 \001("
      "\010B\002\030\001\022\024\n\010low_beam\030\014 \001(\010B\002\030\001\022\020\n\004horn\030\017 \001("
      "\010B\002\030\001\0222\n\nturnsignal\030\025 \001(\0162\032.apollo.contr"
      "ol.TurnSignalB\002\030\001\"\263\004\n\027SimpleLongitudinal"
      "Debug\022\031\n\021station_reference\030\001 \001(\001\022\025\n\rstat"
      "ion_error\030\002 \001(\001\022\035\n\025station_error_limited"
      "\030\003 \001(\001\022\035\n\025preview_station_error\030\004 \001(\001\022\027\n"
      "\017speed_reference\030\005 \001(\001\022\023\n\013speed_error\030\006 "
      "\001(\001\022&\n\036speed_controller_input_limited\030\007 "
      "\001(\001\022\037\n\027preview_speed_reference\030\010 \001(\001\022\033\n\023"
      "preview_speed_error\030\t \001(\001\022&\n\036preview_acc"
      "eleration_reference\030\n \001(\001\022\"\n\032acceleratio"
      "n_cmd_closeloop\030\013 \001(\001\022\030\n\020acceleration_cm"
      "d\030\014 \001(\001\022\033\n\023acceleration_lookup\030\r \001(\001\022\024\n\014"
      "speed_lookup\030\016 \001(\001\022\031\n\021calibration_value\030"
      "\017 \001(\001\022\024\n\014throttle_cmd\030\020 \001(\001\022\021\n\tbrake_cmd"
      "\030\021 \001(\001\022\024\n\014is_full_stop\030\022 \001(\010\022!\n\031slope_of"
      "fset_compensation\030\023 \001(\001\"\204\004\n\022SimpleLatera"
      "lDebug\022\025\n\rlateral_error\030\001 \001(\001\022\023\n\013ref_hea"
      "ding\030\002 \001(\001\022\017\n\007heading\030\003 \001(\001\022\025\n\rheading_e"
      "rror\030\004 \001(\001\022\032\n\022heading_error_rate\030\005 \001(\001\022\032"
      "\n\022lateral_error_rate\030\006 \001(\001\022\021\n\tcurvature\030"
      "\007 \001(\001\022\023\n\013steer_angle\030\010 \001(\001\022\037\n\027steer_angl"
      "e_feedforward\030\t \001(\001\022(\n steer_angle_later"
      "al_contribution\030\n \001(\001\022-\n%steer_angle_lat"
      "eral_rate_contribution\030\013 \001(\001\022(\n steer_an"
      "gle_heading_contribution\030\014 \001(\001\022-\n%steer_"
      "angle_heading_rate_contribution\030\r \001(\001\022\034\n"
      "\024steer_angle_feedback\030\016 \001(\001\022\031\n\021steering_"
      "position\030\017 \001(\001\022\021\n\tref_speed\030\020 \001(\001\022\033\n\023ste"
      "er_angle_limited\030\021 \001(\001\"\310\005\n\016SimpleMPCDebu"
      "g\022\025\n\rlateral_error\030\001 \001(\001\022\023\n\013ref_heading\030"
      "\002 \001(\001\022\017\n\007heading\030\003 \001(\001\022\025\n\rheading_error\030"
      "\004 \001(\001\022\032\n\022heading_error_rate\030\005 \001(\001\022\032\n\022lat"
      "eral_error_rate\030\006 \001(\001\022\021\n\tcurvature\030\007 \001(\001"
      "\022\023\n\013steer_angle\030\010 \001(\001\022\037\n\027steer_angle_fee"
      "dforward\030\t \001(\001\022(\n steer_angle_lateral_co"
      "ntribution\030\n \001(\001\022-\n%steer_angle_lateral_"
      "rate_contribution\030\013 \001(\001\022(\n steer_angle_h"
      "eading_contribution\030\014 \001(\001\022-\n%steer_angle"
      "_heading_rate_contribution\030\r \001(\001\022\034\n\024stee"
      "r_angle_feedback\030\016 \001(\001\022\031\n\021steering_posit"
      "ion\030\017 \001(\001\022\021\n\tref_speed\030\020 \001(\001\022\033\n\023steer_an"
      "gle_limited\030\021 \001(\001\022\031\n\021station_reference\030\022"
      " \001(\001\022\025\n\rstation_error\030\023 \001(\001\022\027\n\017speed_ref"
      "erence\030\024 \001(\001\022\023\n\013speed_error\030\025 \001(\001\022\036\n\026acc"
      "eleration_reference\030\026 \001(\001\022\024\n\014is_full_sto"
      "p\030\027 \001(\010\022\030\n\020station_feedback\030\030 \001(\001\022\026\n\016spe"
      "ed_feedback\030\031 \001(\001\"\240\001\n\nInputDebug\0222\n\023loca"
      "lization_header\030\001 \001(\0132\025.apollo.common.He"
      "ader\022,\n\rcanbus_header\030\002 \001(\0132\025.apollo.com"
      "mon.Header\0220\n\021trajectory_header\030\003 \001(\0132\025."
      "apollo.common.Header\"\363\001\n\005Debug\022A\n\020simple"
      "_lon_debug\030\001 \001(\0132\'.apollo.control.Simple"
      "LongitudinalDebug\022<\n\020simple_lat_debug\030\002 "
      "\001(\0132\".apollo.control.SimpleLateralDebug\022"
      "/\n\013input_debug\030\003 \001(\0132\032.apollo.control.In"
      "putDebug\0228\n\020simple_mpc_debug\030\004 \001(\0132\036.apo"
      "llo.control.SimpleMPCDebug*:\n\nTurnSignal"
      "\022\r\n\tTURN_NONE\020\000\022\r\n\tTURN_LEFT\020\001\022\016\n\nTURN_R"
      "IGHT\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/control/proto/control_cmd.proto", &protobuf_RegisterTypes);
  ::apollo::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto::AddDescriptors();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2fpad_5fmsg_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto

const ::google::protobuf::EnumDescriptor* TurnSignal_descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_enum_descriptors[0];
}
bool TurnSignal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyStats::kTotalTimeMsFieldNumber;
const int LatencyStats::kControllerTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyStats::LatencyStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.LatencyStats)
}
LatencyStats::LatencyStats(const LatencyStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      controller_time_ms_(from.controller_time_ms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_time_ms_ = from.total_time_ms_;
  // @@protoc_insertion_point(copy_constructor:apollo.control.LatencyStats)
}

void LatencyStats::SharedCtor() {
  _cached_size_ = 0;
  total_time_ms_ = 0;
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:apollo.control.LatencyStats)
  SharedDtor();
}

void LatencyStats::SharedDtor() {
}

void LatencyStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatencyStats::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyStats& LatencyStats::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

LatencyStats* LatencyStats::New(::google::protobuf::Arena* arena) const {
  LatencyStats* n = new LatencyStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LatencyStats)
  controller_time_ms_.Clear();
  total_time_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatencyStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.LatencyStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_time_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_total_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double controller_time_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_controller_time_ms())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_controller_time_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.LatencyStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.LatencyStats)
  return false;
#undef DO_
}

void LatencyStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time_ms(), output);
  }

  // repeated double controller_time_ms = 2;
  for (int i = 0, n = this->controller_time_ms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->controller_time_ms(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.LatencyStats)
}

::google::protobuf::uint8* LatencyStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time_ms(), target);
  }

  // repeated double controller_time_ms = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->controller_time_ms_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LatencyStats)
  return target;
}

size_t LatencyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LatencyStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double controller_time_ms = 2;
  {
    unsigned int count = this->controller_time_ms_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->controller_time_ms_size());
    total_size += data_size;
  }

  // optional double total_time_ms = 1;
  if (has_total_time_ms()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatencyStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.LatencyStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.LatencyStats)
    MergeFrom(*source);
  }
}

void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controller_time_ms_.MergeFrom(from.controller_time_ms_);
  if (from.has_total_time_ms()) {
    set_total_time_ms(from.total_time_ms());
  }
}

void LatencyStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {
  return true;
}

void LatencyStats::Swap(LatencyStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyStats::InternalSwap(LatencyStats* other) {
  controller_time_ms_.InternalSwap(&other->controller_time_ms_);
  std::swap(total_time_ms_, other->total_time_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatencyStats::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatencyStats

// optional double total_time_ms = 1;
bool LatencyStats::has_total_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LatencyStats::set_has_total_time_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void LatencyStats::clear_has_total_time_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
  clear_has_total_time_ms();
}
double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.control.LatencyStats.total_time_ms)
  return total_time_ms_;
}
void LatencyStats::set_total_time_ms(double value) {
  set_has_total_time_ms();
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LatencyStats.total_time_ms)
}

// repeated double controller_time_ms = 2;
int LatencyStats::controller_time_ms_size() const {
  return controller_time_ms_.size();
}
void LatencyStats::clear_controller_time_ms() {
  controller_time_ms_.Clear();
}
double LatencyStats::controller_time_ms(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.LatencyStats.controller_time_ms)
  return controller_time_ms_.Get(index);
}
void LatencyStats::set_controller_time_ms(int index, double value) {
  controller_time_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.LatencyStats.controller_time_ms)
}
void LatencyStats::add_controller_time_ms(double value) {
  controller_time_ms_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.control.LatencyStats.controller_time_ms)
}
const ::google::protobuf::RepeatedField< double >&
LatencyStats::controller_time_ms() const {
  // @@protoc_insertion_point(field_list:apollo.control.LatencyStats.controller_time_ms)
  return controller_time_ms_;
}
::google::protobuf::RepeatedField< double >*
LatencyStats::mutable_controller_time_ms() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.LatencyStats.controller_time_ms)
  return &controller_time_ms_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlCommand::kHeaderFieldNumber;
const int ControlCommand::kThrottleFieldNumber;
const int ControlCommand::kBrakeFieldNumber;
const int ControlCommand::kSteeringRateFieldNumber;
const int ControlCommand::kSteeringTargetFieldNumber;
const int ControlCommand::kParkingBrakeFieldNumber;
const int ControlCommand::kSpeedFieldNumber;
const int ControlCommand::kAccelerationFieldNumber;
const int ControlCommand::kResetModelFieldNumber;
const int ControlCommand::kEngineOnOffFieldNumber;
const int ControlCommand::kTrajectoryFractionFieldNumber;
const int ControlCommand::kDrivingModeFieldNumber;
const int ControlCommand::kGearLocationFieldNumber;
const int ControlCommand::kDebugFieldNumber;
const int ControlCommand::kSignalFieldNumber;
const int ControlCommand::kLatencyStatsFieldNumber;
const int ControlCommand::kPadMsgFieldNumber;
const int ControlCommand::kLeftTurnFieldNumber;
const int ControlCommand::kRightTurnFieldNumber;
const int ControlCommand::kHighBeamFieldNumber;
const int ControlCommand::kLowBeamFieldNumber;
const int ControlCommand::kHornFieldNumber;
const int ControlCommand::kTurnsignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlCommand::ControlCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.ControlCommand)
}
ControlCommand::ControlCommand(const ControlCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_debug()) {
    debug_ = new ::apollo::control::Debug(*from.debug_);
  } else {
    debug_ = NULL;
  }
  if (from.has_signal()) {
    signal_ = new ::apollo::common::VehicleSignal(*from.signal_);
  } else {
    signal_ = NULL;
  }
  if (from.has_latency_stats()) {
    latency_stats_ = new ::apollo::control::LatencyStats(*from.latency_stats_);
  } else {
    latency_stats_ = NULL;
  }
  if (from.has_pad_msg()) {
    pad_msg_ = new ::apollo::control::PadMessage(*from.pad_msg_);
  } else {
    pad_msg_ = NULL;
  }
  ::memcpy(&throttle_, &from.throttle_,
    reinterpret_cast<char*>(&turnsignal_) -
    reinterpret_cast<char*>(&throttle_) + sizeof(turnsignal_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.ControlCommand)
}

void ControlCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&turnsignal_) -
    reinterpret_cast<char*>(&header_) + sizeof(turnsignal_));
}

ControlCommand::~ControlCommand() {
  // @@protoc_insertion_point(destructor:apollo.control.ControlCommand)
  SharedDtor();
}

void ControlCommand::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete debug_;
  }
  if (this != internal_default_instance()) {
    delete signal_;
  }
  if (this != internal_default_instance()) {
    delete latency_stats_;
  }
  if (this != internal_default_instance()) {
    delete pad_msg_;
  }
}

void ControlCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlCommand::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlCommand& ControlCommand::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

ControlCommand* ControlCommand::New(::google::protobuf::Arena* arena) const {
  ControlCommand* n = new ControlCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.ControlCommand)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::apollo::common::Header::Clear();
    }
    if (has_debug()) {
      GOOGLE_DCHECK(debug_ != NULL);
      debug_->::apollo::control::Debug::Clear();
    }
    if (has_signal()) {
      GOOGLE_DCHECK(signal_ != NULL);
      signal_->::apollo::common::VehicleSignal::Clear();
    }
    if (has_latency_stats()) {
      GOOGLE_DCHECK(latency_stats_ != NULL);
      latency_stats_->::apollo::control::LatencyStats::Clear();
    }
    if (has_pad_msg()) {
      GOOGLE_DCHECK(pad_msg_ != NULL);
      pad_msg_->::apollo::control::PadMessage::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&throttle_, 0, reinterpret_cast<char*>(&steering_rate_) -
      reinterpret_cast<char*>(&throttle_) + sizeof(steering_rate_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&steering_target_, 0, reinterpret_cast<char*>(&parking_brake_) -
      reinterpret_cast<char*>(&steering_target_) + sizeof(parking_brake_));
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    ::memset(&reset_model_, 0, reinterpret_cast<char*>(&turnsignal_) -
      reinterpret_cast<char*>(&reset_model_) + sizeof(turnsignal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.ControlCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_throttle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_brake();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_steering_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_target = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_steering_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool parking_brake = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_parking_brake();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceleration = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool high_beam = 11 [deprecated = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_high_beam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_beam = 12 [deprecated = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_low_beam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool left_turn = 13 [deprecated = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_left_turn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_turn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool right_turn = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_right_turn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_turn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horn = 15 [deprecated = true];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_horn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reset_model = 16 [deprecated = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_reset_model();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool engine_on_off = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_engine_on_off();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_on_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double trajectory_fraction = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_trajectory_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trajectory_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_location(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::control::TurnSignal_IsValid(value)) {
            set_turnsignal(static_cast< ::apollo::control::TurnSignal >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.Debug debug = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.VehicleSignal signal = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.LatencyStats latency_stats = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latency_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.PadMessage pad_msg = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pad_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.ControlCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.ControlCommand)
  return false;
#undef DO_
}

void ControlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.ControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional double throttle = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->throttle(), output);
  }

  // optional double brake = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->brake(), output);
  }

  // optional double steering_rate = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->steering_rate(), output);
  }

  // optional double steering_target = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->steering_target(), output);
  }

  // optional bool parking_brake = 8;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->parking_brake(), output);
  }

  // optional double speed = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->speed(), output);
  }

  // optional double acceleration = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->acceleration(), output);
  }

  // optional bool high_beam = 11 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->high_beam(), output);
  }

  // optional bool low_beam = 12 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->low_beam(), output);
  }

  // optional bool left_turn = 13 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->left_turn(), output);
  }

  // optional bool right_turn = 14 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->right_turn(), output);
  }

  // optional bool horn = 15 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->horn(), output);
  }

  // optional bool reset_model = 16 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->reset_model(), output);
  }

  // optional bool engine_on_off = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->engine_on_off(), output);
  }

  // optional double trajectory_fraction = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->trajectory_fraction(), output);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->driving_mode(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->gear_location(), output);
  }

  // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->turnsignal(), output);
  }

  // optional .apollo.control.Debug debug = 22;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->debug_, output);
  }

  // optional .apollo.common.VehicleSignal signal = 23;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->signal_, output);
  }

  // optional .apollo.control.LatencyStats latency_stats = 24;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->latency_stats_, output);
  }

  // optional .apollo.control.PadMessage pad_msg = 25;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->pad_msg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.ControlCommand)
}

::google::protobuf::uint8* ControlCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.ControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional double throttle = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->throttle(), target);
  }

  // optional double brake = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->brake(), target);
  }

  // optional double steering_rate = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->steering_rate(), target);
  }

  // optional double steering_target = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->steering_target(), target);
  }

  // optional bool parking_brake = 8;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->parking_brake(), target);
  }

  // optional double speed = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->speed(), target);
  }

  // optional double acceleration = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->acceleration(), target);
  }

  // optional bool high_beam = 11 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->high_beam(), target);
  }

  // optional bool low_beam = 12 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->low_beam(), target);
  }

  // optional bool left_turn = 13 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->left_turn(), target);
  }

  // optional bool right_turn = 14 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->right_turn(), target);
  }

  // optional bool horn = 15 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->horn(), target);
  }

  // optional bool reset_model = 16 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->reset_model(), target);
  }

  // optional bool engine_on_off = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->engine_on_off(), target);
  }

  // optional double trajectory_fraction = 18;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->trajectory_fraction(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->driving_mode(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->gear_location(), target);
  }

  // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->turnsignal(), target);
  }

  // optional .apollo.control.Debug debug = 22;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->debug_, deterministic, target);
  }

  // optional .apollo.common.VehicleSignal signal = 23;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->signal_, deterministic, target);
  }

  // optional .apollo.control.LatencyStats latency_stats = 24;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->latency_stats_, deterministic, target);
  }

  // optional .apollo.control.PadMessage pad_msg = 25;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->pad_msg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.ControlCommand)
  return target;
}

size_t ControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.ControlCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.control.Debug debug = 22;
    if (has_debug()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->debug_);
    }

    // optional .apollo.common.VehicleSignal signal = 23;
    if (has_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signal_);
    }

    // optional .apollo.control.LatencyStats latency_stats = 24;
    if (has_latency_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->latency_stats_);
    }

    // optional .apollo.control.PadMessage pad_msg = 25;
    if (has_pad_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pad_msg_);
    }

    // optional double throttle = 3;
    if (has_throttle()) {
      total_size += 1 + 8;
    }

    // optional double brake = 4;
    if (has_brake()) {
      total_size += 1 + 8;
    }

    // optional double steering_rate = 6;
    if (has_steering_rate()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double steering_target = 7;
    if (has_steering_target()) {
      total_size += 1 + 8;
    }

    // optional double speed = 9;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double acceleration = 10;
    if (has_acceleration()) {
      total_size += 1 + 8;
    }

    // optional bool right_turn = 14 [deprecated = true];
    if (has_right_turn()) {
      total_size += 1 + 1;
    }

    // optional bool high_beam = 11 [deprecated = true];
    if (has_high_beam()) {
      total_size += 1 + 1;
    }

    // optional bool low_beam = 12 [deprecated = true];
    if (has_low_beam()) {
      total_size += 1 + 1;
    }

    // optional bool horn = 15 [deprecated = true];
    if (has_horn()) {
      total_size += 1 + 1;
    }

    // optional bool parking_brake = 8;
    if (has_parking_brake()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional bool reset_model = 16 [deprecated = true];
    if (has_reset_model()) {
      total_size += 2 + 1;
    }

    // optional bool engine_on_off = 17;
    if (has_engine_on_off()) {
      total_size += 2 + 1;
    }

    // optional bool left_turn = 13 [deprecated = true];
    if (has_left_turn()) {
      total_size += 1 + 1;
    }

    // optional double trajectory_fraction = 18;
    if (has_trajectory_fraction()) {
      total_size += 2 + 8;
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
    if (has_driving_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
    if (has_gear_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_location());
    }

    // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
    if (has_turnsignal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->turnsignal());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.ControlCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.ControlCommand)
    MergeFrom(*source);
  }
}

void ControlCommand::MergeFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_debug()->::apollo::control::Debug::MergeFrom(from.debug());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_signal()->::apollo::common::VehicleSignal::MergeFrom(from.signal());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_latency_stats()->::apollo::control::LatencyStats::MergeFrom(from.latency_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_pad_msg()->::apollo::control::PadMessage::MergeFrom(from.pad_msg());
    }
    if (cached_has_bits & 0x00000020u) {
      throttle_ = from.throttle_;
    }
    if (cached_has_bits & 0x00000040u) {
      brake_ = from.brake_;
    }
    if (cached_has_bits & 0x00000080u) {
      steering_rate_ = from.steering_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      steering_target_ = from.steering_target_;
    }
    if (cached_has_bits & 0x00000200u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000400u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00000800u) {
      right_turn_ = from.right_turn_;
    }
    if (cached_has_bits & 0x00001000u) {
      high_beam_ = from.high_beam_;
    }
    if (cached_has_bits & 0x00002000u) {
      low_beam_ = from.low_beam_;
    }
    if (cached_has_bits & 0x00004000u) {
      horn_ = from.horn_;
    }
    if (cached_has_bits & 0x00008000u) {
      parking_brake_ = from.parking_brake_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      reset_model_ = from.reset_model_;
    }
    if (cached_has_bits & 0x00020000u) {
      engine_on_off_ = from.engine_on_off_;
    }
    if (cached_has_bits & 0x00040000u) {
      left_turn_ = from.left_turn_;
    }
    if (cached_has_bits & 0x00080000u) {
      trajectory_fraction_ = from.trajectory_fraction_;
    }
    if (cached_has_bits & 0x00100000u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00200000u) {
      gear_location_ = from.gear_location_;
    }
    if (cached_has_bits & 0x00400000u) {
      turnsignal_ = from.turnsignal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControlCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCommand::CopyFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommand::IsInitialized() const {
  return true;
}

void ControlCommand::Swap(ControlCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlCommand::InternalSwap(ControlCommand* other) {
  std::swap(header_, other->header_);
  std::swap(debug_, other->debug_);
  std::swap(signal_, other->signal_);
  std::swap(latency_stats_, other->latency_stats_);
  std::swap(pad_msg_, other->pad_msg_);
  std::swap(throttle_, other->throttle_);
  std::swap(brake_, other->brake_);
  std::swap(steering_rate_, other->steering_rate_);
  std::swap(steering_target_, other->steering_target_);
  std::swap(speed_, other->speed_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(right_turn_, other->right_turn_);
  std::swap(high_beam_, other->high_beam_);
  std::swap(low_beam_, other->low_beam_);
  std::swap(horn_, other->horn_);
  std::swap(parking_brake_, other->parking_brake_);
  std::swap(reset_model_, other->reset_model_);
  std::swap(engine_on_off_, other->engine_on_off_);
  std::swap(left_turn_, other->left_turn_);
  std::swap(trajectory_fraction_, other->trajectory_fraction_);
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(gear_location_, other->gear_location_);
  std::swap(turnsignal_, other->turnsignal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlCommand::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlCommand

// optional .apollo.common.Header header = 1;
bool ControlCommand::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ControlCommand::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void ControlCommand::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void ControlCommand::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& ControlCommand::header() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* ControlCommand::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.header)
  return header_;
}
::apollo::common::Header* ControlCommand::release_header() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void ControlCommand::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.header)
}

// optional double throttle = 3;
bool ControlCommand::has_throttle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ControlCommand::set_has_throttle() {
  _has_bits_[0] |= 0x00000020u;
}
void ControlCommand::clear_has_throttle() {
  _has_bits_[0] &= ~0x00000020u;
}
void ControlCommand::clear_throttle() {
  throttle_ = 0;
  clear_has_throttle();
}
double ControlCommand::throttle() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.throttle)
  return throttle_;
}
void ControlCommand::set_throttle(double value) {
  set_has_throttle();
  throttle_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.throttle)
}

// optional double brake = 4;
bool ControlCommand::has_brake() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ControlCommand::set_has_brake() {
  _has_bits_[0] |= 0x00000040u;
}
void ControlCommand::clear_has_brake() {
  _has_bits_[0] &= ~0x00000040u;
}
void ControlCommand::clear_brake() {
  brake_ = 0;
  clear_has_brake();
}
double ControlCommand::brake() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.brake)
  return brake_;
}
void ControlCommand::set_brake(double value) {
  set_has_brake();
  brake_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.brake)
}

// optional double steering_rate = 6;
bool ControlCommand::has_steering_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ControlCommand::set_has_steering_rate() {
  _has_bits_[0] |= 0x00000080u;
}
void ControlCommand::clear_has_steering_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
void ControlCommand::clear_steering_rate() {
  steering_rate_ = 0;
  clear_has_steering_rate();
}
double ControlCommand::steering_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.steering_rate)
  return steering_rate_;
}
void ControlCommand::set_steering_rate(double value) {
  set_has_steering_rate();
  steering_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.steering_rate)
}

// optional double steering_target = 7;
bool ControlCommand::has_steering_target() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ControlCommand::set_has_steering_target() {
  _has_bits_[0] |= 0x00000100u;
}
void ControlCommand::clear_has_steering_target() {
  _has_bits_[0] &= ~0x00000100u;
}
void ControlCommand::clear_steering_target() {
  steering_target_ = 0;
  clear_has_steering_target();
}
double ControlCommand::steering_target() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.steering_target)
  return steering_target_;
}
void ControlCommand::set_steering_target(double value) {
  set_has_steering_target();
  steering_target_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.steering_target)
}

// optional bool parking_brake = 8;
bool ControlCommand::has_parking_brake() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ControlCommand::set_has_parking_brake() {
  _has_bits_[0] |= 0x00008000u;
}
void ControlCommand::clear_has_parking_brake() {
  _has_bits_[0] &= ~0x00008000u;
}
void ControlCommand::clear_parking_brake() {
  parking_brake_ = false;
  clear_has_parking_brake();
}
bool ControlCommand::parking_brake() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.parking_brake)
  return parking_brake_;
}
void ControlCommand::set_parking_brake(bool value) {
  set_has_parking_brake();
  parking_brake_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.parking_brake)
}

// optional double speed = 9;
bool ControlCommand::has_speed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ControlCommand::set_has_speed() {
  _has_bits_[0] |= 0x00000200u;
}
void ControlCommand::clear_has_speed() {
  _has_bits_[0] &= ~0x00000200u;
}
void ControlCommand::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
double ControlCommand::speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.speed)
  return speed_;
}
void ControlCommand::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.speed)
}

// optional double acceleration = 10;
bool ControlCommand::has_acceleration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ControlCommand::set_has_acceleration() {
  _has_bits_[0] |= 0x00000400u;
}
void ControlCommand::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000400u;
}
void ControlCommand::clear_acceleration() {
  acceleration_ = 0;
  clear_has_acceleration();
}
double ControlCommand::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.acceleration)
  return acceleration_;
}
void ControlCommand::set_acceleration(double value) {
  set_has_acceleration();
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.acceleration)
}

// optional bool reset_model = 16 [deprecated = true];
bool ControlCommand::has_reset_model() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ControlCommand::set_has_reset_model() {
  _has_bits_[0] |= 0x00010000u;
}
void ControlCommand::clear_has_reset_model() {
  _has_bits_[0] &= ~0x00010000u;
}
void ControlCommand::clear_reset_model() {
  reset_model_ = false;
  clear_has_reset_model();
}
bool ControlCommand::reset_model() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.reset_model)
  return reset_model_;
}
void ControlCommand::set_reset_model(bool value) {
  set_has_reset_model();
  reset_model_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.reset_model)
}

// optional bool engine_on_off = 17;
bool ControlCommand::has_engine_on_off() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ControlCommand::set_has_engine_on_off() {
  _has_bits_[0] |= 0x00020000u;
}
void ControlCommand::clear_has_engine_on_off() {
  _has_bits_[0] &= ~0x00020000u;
}
void ControlCommand::clear_engine_on_off() {
  engine_on_off_ = false;
  clear_has_engine_on_off();
}
bool ControlCommand::engine_on_off() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.engine_on_off)
  return engine_on_off_;
}
void ControlCommand::set_engine_on_off(bool value) {
  set_has_engine_on_off();
  engine_on_off_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.engine_on_off)
}

// optional double trajectory_fraction = 18;
bool ControlCommand::has_trajectory_fraction() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ControlCommand::set_has_trajectory_fraction() {
  _has_bits_[0] |= 0x00080000u;
}
void ControlCommand::clear_has_trajectory_fraction() {
  _has_bits_[0] &= ~0x00080000u;
}
void ControlCommand::clear_trajectory_fraction() {
  trajectory_fraction_ = 0;
  clear_has_trajectory_fraction();
}
double ControlCommand::trajectory_fraction() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.trajectory_fraction)
  return trajectory_fraction_;
}
void ControlCommand::set_trajectory_fraction(double value) {
  set_has_trajectory_fraction();
  trajectory_fraction_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.trajectory_fraction)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
bool ControlCommand::has_driving_mode() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ControlCommand::set_has_driving_mode() {
  _has_bits_[0] |= 0x00100000u;
}
void ControlCommand::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00100000u;
}
void ControlCommand::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
::apollo::canbus::Chassis_DrivingMode ControlCommand::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
void ControlCommand::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.driving_mode)
}

// optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
bool ControlCommand::has_gear_location() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ControlCommand::set_has_gear_location() {
  _has_bits_[0] |= 0x00200000u;
}
void ControlCommand::clear_has_gear_location() {
  _has_bits_[0] &= ~0x00200000u;
}
void ControlCommand::clear_gear_location() {
  gear_location_ = 0;
  clear_has_gear_location();
}
::apollo::canbus::Chassis_GearPosition ControlCommand::gear_location() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.gear_location)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_location_);
}
void ControlCommand::set_gear_location(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_location();
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.gear_location)
}

// optional .apollo.control.Debug debug = 22;
bool ControlCommand::has_debug() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ControlCommand::set_has_debug() {
  _has_bits_[0] |= 0x00000002u;
}
void ControlCommand::clear_has_debug() {
  _has_bits_[0] &= ~0x00000002u;
}
void ControlCommand::clear_debug() {
  if (debug_ != NULL) debug_->::apollo::control::Debug::Clear();
  clear_has_debug();
}
const ::apollo::control::Debug& ControlCommand::debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.debug)
  return debug_ != NULL ? *debug_
                         : *::apollo::control::Debug::internal_default_instance();
}
::apollo::control::Debug* ControlCommand::mutable_debug() {
  set_has_debug();
  if (debug_ == NULL) {
    debug_ = new ::apollo::control::Debug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.debug)
  return debug_;
}
::apollo::control::Debug* ControlCommand::release_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.debug)
  clear_has_debug();
  ::apollo::control::Debug* temp = debug_;
  debug_ = NULL;
  return temp;
}
void ControlCommand::set_allocated_debug(::apollo::control::Debug* debug) {
  delete debug_;
  debug_ = debug;
  if (debug) {
    set_has_debug();
  } else {
    clear_has_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.debug)
}

// optional .apollo.common.VehicleSignal signal = 23;
bool ControlCommand::has_signal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ControlCommand::set_has_signal() {
  _has_bits_[0] |= 0x00000004u;
}
void ControlCommand::clear_has_signal() {
  _has_bits_[0] &= ~0x00000004u;
}
void ControlCommand::clear_signal() {
  if (signal_ != NULL) signal_->::apollo::common::VehicleSignal::Clear();
  clear_has_signal();
}
const ::apollo::common::VehicleSignal& ControlCommand::signal() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.signal)
  return signal_ != NULL ? *signal_
                         : *::apollo::common::VehicleSignal::internal_default_instance();
}
::apollo::common::VehicleSignal* ControlCommand::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) {
    signal_ = new ::apollo::common::VehicleSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.signal)
  return signal_;
}
::apollo::common::VehicleSignal* ControlCommand::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.signal)
  clear_has_signal();
  ::apollo::common::VehicleSignal* temp = signal_;
  signal_ = NULL;
  return temp;
}
void ControlCommand::set_allocated_signal(::apollo::common::VehicleSignal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    set_has_signal();
  } else {
    clear_has_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.signal)
}

// optional .apollo.control.LatencyStats latency_stats = 24;
bool ControlCommand::has_latency_stats() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ControlCommand::set_has_latency_stats() {
  _has_bits_[0] |= 0x00000008u;
}
void ControlCommand::clear_has_latency_stats() {
  _has_bits_[0] &= ~0x00000008u;
}
void ControlCommand::clear_latency_stats() {
  if (latency_stats_ != NULL) latency_stats_->::apollo::control::LatencyStats::Clear();
  clear_has_latency_stats();
}
const ::apollo::control::LatencyStats& ControlCommand::latency_stats() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.latency_stats)
  return latency_stats_ != NULL ? *latency_stats_
                         : *::apollo::control::LatencyStats::internal_default_instance();
}
::apollo::control::LatencyStats* ControlCommand::mutable_latency_stats() {
  set_has_latency_stats();
  if (latency_stats_ == NULL) {
    latency_stats_ = new ::apollo::control::LatencyStats;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.latency_stats)
  return latency_stats_;
}
::apollo::control::LatencyStats* ControlCommand::release_latency_stats() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.latency_stats)
  clear_has_latency_stats();
  ::apollo::control::LatencyStats* temp = latency_stats_;
  latency_stats_ = NULL;
  return temp;
}
void ControlCommand::set_allocated_latency_stats(::apollo::control::LatencyStats* latency_stats) {
  delete latency_stats_;
  latency_stats_ = latency_stats;
  if (latency_stats) {
    set_has_latency_stats();
  } else {
    clear_has_latency_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.latency_stats)
}

// optional .apollo.control.PadMessage pad_msg = 25;
bool ControlCommand::has_pad_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ControlCommand::set_has_pad_msg() {
  _has_bits_[0] |= 0x00000010u;
}
void ControlCommand::clear_has_pad_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
void ControlCommand::clear_pad_msg() {
  if (pad_msg_ != NULL) pad_msg_->::apollo::control::PadMessage::Clear();
  clear_has_pad_msg();
}
const ::apollo::control::PadMessage& ControlCommand::pad_msg() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.pad_msg)
  return pad_msg_ != NULL ? *pad_msg_
                         : *::apollo::control::PadMessage::internal_default_instance();
}
::apollo::control::PadMessage* ControlCommand::mutable_pad_msg() {
  set_has_pad_msg();
  if (pad_msg_ == NULL) {
    pad_msg_ = new ::apollo::control::PadMessage;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlCommand.pad_msg)
  return pad_msg_;
}
::apollo::control::PadMessage* ControlCommand::release_pad_msg() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlCommand.pad_msg)
  clear_has_pad_msg();
  ::apollo::control::PadMessage* temp = pad_msg_;
  pad_msg_ = NULL;
  return temp;
}
void ControlCommand::set_allocated_pad_msg(::apollo::control::PadMessage* pad_msg) {
  delete pad_msg_;
  pad_msg_ = pad_msg;
  if (pad_msg) {
    set_has_pad_msg();
  } else {
    clear_has_pad_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlCommand.pad_msg)
}

// optional bool left_turn = 13 [deprecated = true];
bool ControlCommand::has_left_turn() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ControlCommand::set_has_left_turn() {
  _has_bits_[0] |= 0x00040000u;
}
void ControlCommand::clear_has_left_turn() {
  _has_bits_[0] &= ~0x00040000u;
}
void ControlCommand::clear_left_turn() {
  left_turn_ = false;
  clear_has_left_turn();
}
bool ControlCommand::left_turn() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.left_turn)
  return left_turn_;
}
void ControlCommand::set_left_turn(bool value) {
  set_has_left_turn();
  left_turn_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.left_turn)
}

// optional bool right_turn = 14 [deprecated = true];
bool ControlCommand::has_right_turn() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ControlCommand::set_has_right_turn() {
  _has_bits_[0] |= 0x00000800u;
}
void ControlCommand::clear_has_right_turn() {
  _has_bits_[0] &= ~0x00000800u;
}
void ControlCommand::clear_right_turn() {
  right_turn_ = false;
  clear_has_right_turn();
}
bool ControlCommand::right_turn() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.right_turn)
  return right_turn_;
}
void ControlCommand::set_right_turn(bool value) {
  set_has_right_turn();
  right_turn_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.right_turn)
}

// optional bool high_beam = 11 [deprecated = true];
bool ControlCommand::has_high_beam() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ControlCommand::set_has_high_beam() {
  _has_bits_[0] |= 0x00001000u;
}
void ControlCommand::clear_has_high_beam() {
  _has_bits_[0] &= ~0x00001000u;
}
void ControlCommand::clear_high_beam() {
  high_beam_ = false;
  clear_has_high_beam();
}
bool ControlCommand::high_beam() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.high_beam)
  return high_beam_;
}
void ControlCommand::set_high_beam(bool value) {
  set_has_high_beam();
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.high_beam)
}

// optional bool low_beam = 12 [deprecated = true];
bool ControlCommand::has_low_beam() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ControlCommand::set_has_low_beam() {
  _has_bits_[0] |= 0x00002000u;
}
void ControlCommand::clear_has_low_beam() {
  _has_bits_[0] &= ~0x00002000u;
}
void ControlCommand::clear_low_beam() {
  low_beam_ = false;
  clear_has_low_beam();
}
bool ControlCommand::low_beam() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.low_beam)
  return low_beam_;
}
void ControlCommand::set_low_beam(bool value) {
  set_has_low_beam();
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.low_beam)
}

// optional bool horn = 15 [deprecated = true];
bool ControlCommand::has_horn() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ControlCommand::set_has_horn() {
  _has_bits_[0] |= 0x00004000u;
}
void ControlCommand::clear_has_horn() {
  _has_bits_[0] &= ~0x00004000u;
}
void ControlCommand::clear_horn() {
  horn_ = false;
  clear_has_horn();
}
bool ControlCommand::horn() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.horn)
  return horn_;
}
void ControlCommand::set_horn(bool value) {
  set_has_horn();
  horn_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.horn)
}

// optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
bool ControlCommand::has_turnsignal() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ControlCommand::set_has_turnsignal() {
  _has_bits_[0] |= 0x00400000u;
}
void ControlCommand::clear_has_turnsignal() {
  _has_bits_[0] &= ~0x00400000u;
}
void ControlCommand::clear_turnsignal() {
  turnsignal_ = 0;
  clear_has_turnsignal();
}
::apollo::control::TurnSignal ControlCommand::turnsignal() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommand.turnsignal)
  return static_cast< ::apollo::control::TurnSignal >(turnsignal_);
}
void ControlCommand::set_turnsignal(::apollo::control::TurnSignal value) {
  assert(::apollo::control::TurnSignal_IsValid(value));
  set_has_turnsignal();
  turnsignal_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommand.turnsignal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleLongitudinalDebug::kStationReferenceFieldNumber;
const int SimpleLongitudinalDebug::kStationErrorFieldNumber;
const int SimpleLongitudinalDebug::kStationErrorLimitedFieldNumber;
const int SimpleLongitudinalDebug::kPreviewStationErrorFieldNumber;
const int SimpleLongitudinalDebug::kSpeedReferenceFieldNumber;
const int SimpleLongitudinalDebug::kSpeedErrorFieldNumber;
const int SimpleLongitudinalDebug::kSpeedControllerInputLimitedFieldNumber;
const int SimpleLongitudinalDebug::kPreviewSpeedReferenceFieldNumber;
const int SimpleLongitudinalDebug::kPreviewSpeedErrorFieldNumber;
const int SimpleLongitudinalDebug::kPreviewAccelerationReferenceFieldNumber;
const int SimpleLongitudinalDebug::kAccelerationCmdCloseloopFieldNumber;
const int SimpleLongitudinalDebug::kAccelerationCmdFieldNumber;
const int SimpleLongitudinalDebug::kAccelerationLookupFieldNumber;
const int SimpleLongitudinalDebug::kSpeedLookupFieldNumber;
const int SimpleLongitudinalDebug::kCalibrationValueFieldNumber;
const int SimpleLongitudinalDebug::kThrottleCmdFieldNumber;
const int SimpleLongitudinalDebug::kBrakeCmdFieldNumber;
const int SimpleLongitudinalDebug::kIsFullStopFieldNumber;
const int SimpleLongitudinalDebug::kSlopeOffsetCompensationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleLongitudinalDebug::SimpleLongitudinalDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.SimpleLongitudinalDebug)
}
SimpleLongitudinalDebug::SimpleLongitudinalDebug(const SimpleLongitudinalDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&station_reference_, &from.station_reference_,
    reinterpret_cast<char*>(&is_full_stop_) -
    reinterpret_cast<char*>(&station_reference_) + sizeof(is_full_stop_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleLongitudinalDebug)
}

void SimpleLongitudinalDebug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&station_reference_, 0, reinterpret_cast<char*>(&is_full_stop_) -
    reinterpret_cast<char*>(&station_reference_) + sizeof(is_full_stop_));
}

SimpleLongitudinalDebug::~SimpleLongitudinalDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleLongitudinalDebug)
  SharedDtor();
}

void SimpleLongitudinalDebug::SharedDtor() {
}

void SimpleLongitudinalDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleLongitudinalDebug::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleLongitudinalDebug& SimpleLongitudinalDebug::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimpleLongitudinalDebug* SimpleLongitudinalDebug::New(::google::protobuf::Arena* arena) const {
  SimpleLongitudinalDebug* n = new SimpleLongitudinalDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleLongitudinalDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleLongitudinalDebug)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&station_reference_, 0, reinterpret_cast<char*>(&preview_speed_reference_) -
      reinterpret_cast<char*>(&station_reference_) + sizeof(preview_speed_reference_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&preview_speed_error_, 0, reinterpret_cast<char*>(&throttle_cmd_) -
      reinterpret_cast<char*>(&preview_speed_error_) + sizeof(throttle_cmd_));
  }
  if (_has_bits_[16 / 32] & 458752u) {
    ::memset(&brake_cmd_, 0, reinterpret_cast<char*>(&is_full_stop_) -
      reinterpret_cast<char*>(&brake_cmd_) + sizeof(is_full_stop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimpleLongitudinalDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.SimpleLongitudinalDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double station_reference = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_station_reference();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double station_error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_station_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double station_error_limited = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_station_error_limited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_limited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preview_station_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_preview_station_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_station_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_reference = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_speed_reference();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_error = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_speed_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_controller_input_limited = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_speed_controller_input_limited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_controller_input_limited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preview_speed_reference = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_preview_speed_reference();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_speed_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preview_speed_error = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_preview_speed_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_speed_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preview_acceleration_reference = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_preview_acceleration_reference();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_acceleration_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceleration_cmd_closeloop = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_acceleration_cmd_closeloop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_cmd_closeloop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceleration_cmd = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_acceleration_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceleration_lookup = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_acceleration_lookup();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_lookup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_lookup = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_speed_lookup();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_lookup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double calibration_value = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_calibration_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &calibration_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_cmd = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_throttle_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_cmd = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_brake_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_full_stop = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_is_full_stop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_full_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double slope_offset_compensation = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {
          set_has_slope_offset_compensation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slope_offset_compensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.SimpleLongitudinalDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.SimpleLongitudinalDebug)
  return false;
#undef DO_
}

void SimpleLongitudinalDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.SimpleLongitudinalDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double station_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->station_reference(), output);
  }

  // optional double station_error = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->station_error(), output);
  }

  // optional double station_error_limited = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->station_error_limited(), output);
  }

  // optional double preview_station_error = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->preview_station_error(), output);
  }

  // optional double speed_reference = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed_reference(), output);
  }

  // optional double speed_error = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed_error(), output);
  }

  // optional double speed_controller_input_limited = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->speed_controller_input_limited(), output);
  }

  // optional double preview_speed_reference = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->preview_speed_reference(), output);
  }

  // optional double preview_speed_error = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->preview_speed_error(), output);
  }

  // optional double preview_acceleration_reference = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->preview_acceleration_reference(), output);
  }

  // optional double acceleration_cmd_closeloop = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->acceleration_cmd_closeloop(), output);
  }

  // optional double acceleration_cmd = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->acceleration_cmd(), output);
  }

  // optional double acceleration_lookup = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->acceleration_lookup(), output);
  }

  // optional double speed_lookup = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->speed_lookup(), output);
  }

  // optional double calibration_value = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->calibration_value(), output);
  }

  // optional double throttle_cmd = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->throttle_cmd(), output);
  }

  // optional double brake_cmd = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->brake_cmd(), output);
  }

  // optional bool is_full_stop = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_full_stop(), output);
  }

  // optional double slope_offset_compensation = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->slope_offset_compensation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.SimpleLongitudinalDebug)
}

::google::protobuf::uint8* SimpleLongitudinalDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleLongitudinalDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double station_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->station_reference(), target);
  }

  // optional double station_error = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->station_error(), target);
  }

  // optional double station_error_limited = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->station_error_limited(), target);
  }

  // optional double preview_station_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->preview_station_error(), target);
  }

  // optional double speed_reference = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speed_reference(), target);
  }

  // optional double speed_error = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed_error(), target);
  }

  // optional double speed_controller_input_limited = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->speed_controller_input_limited(), target);
  }

  // optional double preview_speed_reference = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->preview_speed_reference(), target);
  }

  // optional double preview_speed_error = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->preview_speed_error(), target);
  }

  // optional double preview_acceleration_reference = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->preview_acceleration_reference(), target);
  }

  // optional double acceleration_cmd_closeloop = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->acceleration_cmd_closeloop(), target);
  }

  // optional double acceleration_cmd = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->acceleration_cmd(), target);
  }

  // optional double acceleration_lookup = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->acceleration_lookup(), target);
  }

  // optional double speed_lookup = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->speed_lookup(), target);
  }

  // optional double calibration_value = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->calibration_value(), target);
  }

  // optional double throttle_cmd = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->throttle_cmd(), target);
  }

  // optional double brake_cmd = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->brake_cmd(), target);
  }

  // optional bool is_full_stop = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_full_stop(), target);
  }

  // optional double slope_offset_compensation = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->slope_offset_compensation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleLongitudinalDebug)
  return target;
}

size_t SimpleLongitudinalDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleLongitudinalDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double station_reference = 1;
    if (has_station_reference()) {
      total_size += 1 + 8;
    }

    // optional double station_error = 2;
    if (has_station_error()) {
      total_size += 1 + 8;
    }

    // optional double station_error_limited = 3;
    if (has_station_error_limited()) {
      total_size += 1 + 8;
    }

    // optional double preview_station_error = 4;
    if (has_preview_station_error()) {
      total_size += 1 + 8;
    }

    // optional double speed_reference = 5;
    if (has_speed_reference()) {
      total_size += 1 + 8;
    }

    // optional double speed_error = 6;
    if (has_speed_error()) {
      total_size += 1 + 8;
    }

    // optional double speed_controller_input_limited = 7;
    if (has_speed_controller_input_limited()) {
      total_size += 1 + 8;
    }

    // optional double preview_speed_reference = 8;
    if (has_preview_speed_reference()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double preview_speed_error = 9;
    if (has_preview_speed_error()) {
      total_size += 1 + 8;
    }

    // optional double preview_acceleration_reference = 10;
    if (has_preview_acceleration_reference()) {
      total_size += 1 + 8;
    }

    // optional double acceleration_cmd_closeloop = 11;
    if (has_acceleration_cmd_closeloop()) {
      total_size += 1 + 8;
    }

    // optional double acceleration_cmd = 12;
    if (has_acceleration_cmd()) {
      total_size += 1 + 8;
    }

    // optional double acceleration_lookup = 13;
    if (has_acceleration_lookup()) {
      total_size += 1 + 8;
    }

    // optional double speed_lookup = 14;
    if (has_speed_lookup()) {
      total_size += 1 + 8;
    }

    // optional double calibration_value = 15;
    if (has_calibration_value()) {
      total_size += 1 + 8;
    }

    // optional double throttle_cmd = 16;
    if (has_throttle_cmd()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional double brake_cmd = 17;
    if (has_brake_cmd()) {
      total_size += 2 + 8;
    }

    // optional double slope_offset_compensation = 19;
    if (has_slope_offset_compensation()) {
      total_size += 2 + 8;
    }

    // optional bool is_full_stop = 18;
    if (has_is_full_stop()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleLongitudinalDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.SimpleLongitudinalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleLongitudinalDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleLongitudinalDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.SimpleLongitudinalDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.SimpleLongitudinalDebug)
    MergeFrom(*source);
  }
}

void SimpleLongitudinalDebug::MergeFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleLongitudinalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      station_reference_ = from.station_reference_;
    }
    if (cached_has_bits & 0x00000002u) {
      station_error_ = from.station_error_;
    }
    if (cached_has_bits & 0x00000004u) {
      station_error_limited_ = from.station_error_limited_;
    }
    if (cached_has_bits & 0x00000008u) {
      preview_station_error_ = from.preview_station_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      speed_reference_ = from.speed_reference_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_error_ = from.speed_error_;
    }
    if (cached_has_bits & 0x00000040u) {
      speed_controller_input_limited_ = from.speed_controller_input_limited_;
    }
    if (cached_has_bits & 0x00000080u) {
      preview_speed_reference_ = from.preview_speed_reference_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      preview_speed_error_ = from.preview_speed_error_;
    }
    if (cached_has_bits & 0x00000200u) {
      preview_acceleration_reference_ = from.preview_acceleration_reference_;
    }
    if (cached_has_bits & 0x00000400u) {
      acceleration_cmd_closeloop_ = from.acceleration_cmd_closeloop_;
    }
    if (cached_has_bits & 0x00000800u) {
      acceleration_cmd_ = from.acceleration_cmd_;
    }
    if (cached_has_bits & 0x00001000u) {
      acceleration_lookup_ = from.acceleration_lookup_;
    }
    if (cached_has_bits & 0x00002000u) {
      speed_lookup_ = from.speed_lookup_;
    }
    if (cached_has_bits & 0x00004000u) {
      calibration_value_ = from.calibration_value_;
    }
    if (cached_has_bits & 0x00008000u) {
      throttle_cmd_ = from.throttle_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      brake_cmd_ = from.brake_cmd_;
    }
    if (cached_has_bits & 0x00020000u) {
      slope_offset_compensation_ = from.slope_offset_compensation_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_full_stop_ = from.is_full_stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimpleLongitudinalDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.SimpleLongitudinalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleLongitudinalDebug::CopyFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleLongitudinalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLongitudinalDebug::IsInitialized() const {
  return true;
}

void SimpleLongitudinalDebug::Swap(SimpleLongitudinalDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleLongitudinalDebug::InternalSwap(SimpleLongitudinalDebug* other) {
  std::swap(station_reference_, other->station_reference_);
  std::swap(station_error_, other->station_error_);
  std::swap(station_error_limited_, other->station_error_limited_);
  std::swap(preview_station_error_, other->preview_station_error_);
  std::swap(speed_reference_, other->speed_reference_);
  std::swap(speed_error_, other->speed_error_);
  std::swap(speed_controller_input_limited_, other->speed_controller_input_limited_);
  std::swap(preview_speed_reference_, other->preview_speed_reference_);
  std::swap(preview_speed_error_, other->preview_speed_error_);
  std::swap(preview_acceleration_reference_, other->preview_acceleration_reference_);
  std::swap(acceleration_cmd_closeloop_, other->acceleration_cmd_closeloop_);
  std::swap(acceleration_cmd_, other->acceleration_cmd_);
  std::swap(acceleration_lookup_, other->acceleration_lookup_);
  std::swap(speed_lookup_, other->speed_lookup_);
  std::swap(calibration_value_, other->calibration_value_);
  std::swap(throttle_cmd_, other->throttle_cmd_);
  std::swap(brake_cmd_, other->brake_cmd_);
  std::swap(slope_offset_compensation_, other->slope_offset_compensation_);
  std::swap(is_full_stop_, other->is_full_stop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleLongitudinalDebug::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleLongitudinalDebug

// optional double station_reference = 1;
bool SimpleLongitudinalDebug::has_station_reference() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SimpleLongitudinalDebug::set_has_station_reference() {
  _has_bits_[0] |= 0x00000001u;
}
void SimpleLongitudinalDebug::clear_has_station_reference() {
  _has_bits_[0] &= ~0x00000001u;
}
void SimpleLongitudinalDebug::clear_station_reference() {
  station_reference_ = 0;
  clear_has_station_reference();
}
double SimpleLongitudinalDebug::station_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.station_reference)
  return station_reference_;
}
void SimpleLongitudinalDebug::set_station_reference(double value) {
  set_has_station_reference();
  station_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.station_reference)
}

// optional double station_error = 2;
bool SimpleLongitudinalDebug::has_station_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SimpleLongitudinalDebug::set_has_station_error() {
  _has_bits_[0] |= 0x00000002u;
}
void SimpleLongitudinalDebug::clear_has_station_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void SimpleLongitudinalDebug::clear_station_error() {
  station_error_ = 0;
  clear_has_station_error();
}
double SimpleLongitudinalDebug::station_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.station_error)
  return station_error_;
}
void SimpleLongitudinalDebug::set_station_error(double value) {
  set_has_station_error();
  station_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.station_error)
}

// optional double station_error_limited = 3;
bool SimpleLongitudinalDebug::has_station_error_limited() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SimpleLongitudinalDebug::set_has_station_error_limited() {
  _has_bits_[0] |= 0x00000004u;
}
void SimpleLongitudinalDebug::clear_has_station_error_limited() {
  _has_bits_[0] &= ~0x00000004u;
}
void SimpleLongitudinalDebug::clear_station_error_limited() {
  station_error_limited_ = 0;
  clear_has_station_error_limited();
}
double SimpleLongitudinalDebug::station_error_limited() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.station_error_limited)
  return station_error_limited_;
}
void SimpleLongitudinalDebug::set_station_error_limited(double value) {
  set_has_station_error_limited();
  station_error_limited_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.station_error_limited)
}

// optional double preview_station_error = 4;
bool SimpleLongitudinalDebug::has_preview_station_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SimpleLongitudinalDebug::set_has_preview_station_error() {
  _has_bits_[0] |= 0x00000008u;
}
void SimpleLongitudinalDebug::clear_has_preview_station_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void SimpleLongitudinalDebug::clear_preview_station_error() {
  preview_station_error_ = 0;
  clear_has_preview_station_error();
}
double SimpleLongitudinalDebug::preview_station_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.preview_station_error)
  return preview_station_error_;
}
void SimpleLongitudinalDebug::set_preview_station_error(double value) {
  set_has_preview_station_error();
  preview_station_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.preview_station_error)
}

// optional double speed_reference = 5;
bool SimpleLongitudinalDebug::has_speed_reference() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SimpleLongitudinalDebug::set_has_speed_reference() {
  _has_bits_[0] |= 0x00000010u;
}
void SimpleLongitudinalDebug::clear_has_speed_reference() {
  _has_bits_[0] &= ~0x00000010u;
}
void SimpleLongitudinalDebug::clear_speed_reference() {
  speed_reference_ = 0;
  clear_has_speed_reference();
}
double SimpleLongitudinalDebug::speed_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.speed_reference)
  return speed_reference_;
}
void SimpleLongitudinalDebug::set_speed_reference(double value) {
  set_has_speed_reference();
  speed_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.speed_reference)
}

// optional double speed_error = 6;
bool SimpleLongitudinalDebug::has_speed_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SimpleLongitudinalDebug::set_has_speed_error() {
  _has_bits_[0] |= 0x00000020u;
}
void SimpleLongitudinalDebug::clear_has_speed_error() {
  _has_bits_[0] &= ~0x00000020u;
}
void SimpleLongitudinalDebug::clear_speed_error() {
  speed_error_ = 0;
  clear_has_speed_error();
}
double SimpleLongitudinalDebug::speed_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.speed_error)
  return speed_error_;
}
void SimpleLongitudinalDebug::set_speed_error(double value) {
  set_has_speed_error();
  speed_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.speed_error)
}

// optional double speed_controller_input_limited = 7;
bool SimpleLongitudinalDebug::has_speed_controller_input_limited() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SimpleLongitudinalDebug::set_has_speed_controller_input_limited() {
  _has_bits_[0] |= 0x00000040u;
}
void SimpleLongitudinalDebug::clear_has_speed_controller_input_limited() {
  _has_bits_[0] &= ~0x00000040u;
}
void SimpleLongitudinalDebug::clear_speed_controller_input_limited() {
  speed_controller_input_limited_ = 0;
  clear_has_speed_controller_input_limited();
}
double SimpleLongitudinalDebug::speed_controller_input_limited() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.speed_controller_input_limited)
  return speed_controller_input_limited_;
}
void SimpleLongitudinalDebug::set_speed_controller_input_limited(double value) {
  set_has_speed_controller_input_limited();
  speed_controller_input_limited_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.speed_controller_input_limited)
}

// optional double preview_speed_reference = 8;
bool SimpleLongitudinalDebug::has_preview_speed_reference() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SimpleLongitudinalDebug::set_has_preview_speed_reference() {
  _has_bits_[0] |= 0x00000080u;
}
void SimpleLongitudinalDebug::clear_has_preview_speed_reference() {
  _has_bits_[0] &= ~0x00000080u;
}
void SimpleLongitudinalDebug::clear_preview_speed_reference() {
  preview_speed_reference_ = 0;
  clear_has_preview_speed_reference();
}
double SimpleLongitudinalDebug::preview_speed_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.preview_speed_reference)
  return preview_speed_reference_;
}
void SimpleLongitudinalDebug::set_preview_speed_reference(double value) {
  set_has_preview_speed_reference();
  preview_speed_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.preview_speed_reference)
}

// optional double preview_speed_error = 9;
bool SimpleLongitudinalDebug::has_preview_speed_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SimpleLongitudinalDebug::set_has_preview_speed_error() {
  _has_bits_[0] |= 0x00000100u;
}
void SimpleLongitudinalDebug::clear_has_preview_speed_error() {
  _has_bits_[0] &= ~0x00000100u;
}
void SimpleLongitudinalDebug::clear_preview_speed_error() {
  preview_speed_error_ = 0;
  clear_has_preview_speed_error();
}
double SimpleLongitudinalDebug::preview_speed_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.preview_speed_error)
  return preview_speed_error_;
}
void SimpleLongitudinalDebug::set_preview_speed_error(double value) {
  set_has_preview_speed_error();
  preview_speed_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.preview_speed_error)
}

// optional double preview_acceleration_reference = 10;
bool SimpleLongitudinalDebug::has_preview_acceleration_reference() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SimpleLongitudinalDebug::set_has_preview_acceleration_reference() {
  _has_bits_[0] |= 0x00000200u;
}
void SimpleLongitudinalDebug::clear_has_preview_acceleration_reference() {
  _has_bits_[0] &= ~0x00000200u;
}
void SimpleLongitudinalDebug::clear_preview_acceleration_reference() {
  preview_acceleration_reference_ = 0;
  clear_has_preview_acceleration_reference();
}
double SimpleLongitudinalDebug::preview_acceleration_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.preview_acceleration_reference)
  return preview_acceleration_reference_;
}
void SimpleLongitudinalDebug::set_preview_acceleration_reference(double value) {
  set_has_preview_acceleration_reference();
  preview_acceleration_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.preview_acceleration_reference)
}

// optional double acceleration_cmd_closeloop = 11;
bool SimpleLongitudinalDebug::has_acceleration_cmd_closeloop() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SimpleLongitudinalDebug::set_has_acceleration_cmd_closeloop() {
  _has_bits_[0] |= 0x00000400u;
}
void SimpleLongitudinalDebug::clear_has_acceleration_cmd_closeloop() {
  _has_bits_[0] &= ~0x00000400u;
}
void SimpleLongitudinalDebug::clear_acceleration_cmd_closeloop() {
  acceleration_cmd_closeloop_ = 0;
  clear_has_acceleration_cmd_closeloop();
}
double SimpleLongitudinalDebug::acceleration_cmd_closeloop() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.acceleration_cmd_closeloop)
  return acceleration_cmd_closeloop_;
}
void SimpleLongitudinalDebug::set_acceleration_cmd_closeloop(double value) {
  set_has_acceleration_cmd_closeloop();
  acceleration_cmd_closeloop_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.acceleration_cmd_closeloop)
}

// optional double acceleration_cmd = 12;
bool SimpleLongitudinalDebug::has_acceleration_cmd() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SimpleLongitudinalDebug::set_has_acceleration_cmd() {
  _has_bits_[0] |= 0x00000800u;
}
void SimpleLongitudinalDebug::clear_has_acceleration_cmd() {
  _has_bits_[0] &= ~0x00000800u;
}
void SimpleLongitudinalDebug::clear_acceleration_cmd() {
  acceleration_cmd_ = 0;
  clear_has_acceleration_cmd();
}
double SimpleLongitudinalDebug::acceleration_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.acceleration_cmd)
  return acceleration_cmd_;
}
void SimpleLongitudinalDebug::set_acceleration_cmd(double value) {
  set_has_acceleration_cmd();
  acceleration_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.acceleration_cmd)
}

// optional double acceleration_lookup = 13;
bool SimpleLongitudinalDebug::has_acceleration_lookup() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SimpleLongitudinalDebug::set_has_acceleration_lookup() {
  _has_bits_[0] |= 0x00001000u;
}
void SimpleLongitudinalDebug::clear_has_acceleration_lookup() {
  _has_bits_[0] &= ~0x00001000u;
}
void SimpleLongitudinalDebug::clear_acceleration_lookup() {
  acceleration_lookup_ = 0;
  clear_has_acceleration_lookup();
}
double SimpleLongitudinalDebug::acceleration_lookup() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.acceleration_lookup)
  return acceleration_lookup_;
}
void SimpleLongitudinalDebug::set_acceleration_lookup(double value) {
  set_has_acceleration_lookup();
  acceleration_lookup_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.acceleration_lookup)
}

// optional double speed_lookup = 14;
bool SimpleLongitudinalDebug::has_speed_lookup() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SimpleLongitudinalDebug::set_has_speed_lookup() {
  _has_bits_[0] |= 0x00002000u;
}
void SimpleLongitudinalDebug::clear_has_speed_lookup() {
  _has_bits_[0] &= ~0x00002000u;
}
void SimpleLongitudinalDebug::clear_speed_lookup() {
  speed_lookup_ = 0;
  clear_has_speed_lookup();
}
double SimpleLongitudinalDebug::speed_lookup() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.speed_lookup)
  return speed_lookup_;
}
void SimpleLongitudinalDebug::set_speed_lookup(double value) {
  set_has_speed_lookup();
  speed_lookup_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.speed_lookup)
}

// optional double calibration_value = 15;
bool SimpleLongitudinalDebug::has_calibration_value() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SimpleLongitudinalDebug::set_has_calibration_value() {
  _has_bits_[0] |= 0x00004000u;
}
void SimpleLongitudinalDebug::clear_has_calibration_value() {
  _has_bits_[0] &= ~0x00004000u;
}
void SimpleLongitudinalDebug::clear_calibration_value() {
  calibration_value_ = 0;
  clear_has_calibration_value();
}
double SimpleLongitudinalDebug::calibration_value() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.calibration_value)
  return calibration_value_;
}
void SimpleLongitudinalDebug::set_calibration_value(double value) {
  set_has_calibration_value();
  calibration_value_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.calibration_value)
}

// optional double throttle_cmd = 16;
bool SimpleLongitudinalDebug::has_throttle_cmd() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SimpleLongitudinalDebug::set_has_throttle_cmd() {
  _has_bits_[0] |= 0x00008000u;
}
void SimpleLongitudinalDebug::clear_has_throttle_cmd() {
  _has_bits_[0] &= ~0x00008000u;
}
void SimpleLongitudinalDebug::clear_throttle_cmd() {
  throttle_cmd_ = 0;
  clear_has_throttle_cmd();
}
double SimpleLongitudinalDebug::throttle_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.throttle_cmd)
  return throttle_cmd_;
}
void SimpleLongitudinalDebug::set_throttle_cmd(double value) {
  set_has_throttle_cmd();
  throttle_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.throttle_cmd)
}

// optional double brake_cmd = 17;
bool SimpleLongitudinalDebug::has_brake_cmd() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SimpleLongitudinalDebug::set_has_brake_cmd() {
  _has_bits_[0] |= 0x00010000u;
}
void SimpleLongitudinalDebug::clear_has_brake_cmd() {
  _has_bits_[0] &= ~0x00010000u;
}
void SimpleLongitudinalDebug::clear_brake_cmd() {
  brake_cmd_ = 0;
  clear_has_brake_cmd();
}
double SimpleLongitudinalDebug::brake_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.brake_cmd)
  return brake_cmd_;
}
void SimpleLongitudinalDebug::set_brake_cmd(double value) {
  set_has_brake_cmd();
  brake_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.brake_cmd)
}

// optional bool is_full_stop = 18;
bool SimpleLongitudinalDebug::has_is_full_stop() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SimpleLongitudinalDebug::set_has_is_full_stop() {
  _has_bits_[0] |= 0x00040000u;
}
void SimpleLongitudinalDebug::clear_has_is_full_stop() {
  _has_bits_[0] &= ~0x00040000u;
}
void SimpleLongitudinalDebug::clear_is_full_stop() {
  is_full_stop_ = false;
  clear_has_is_full_stop();
}
bool SimpleLongitudinalDebug::is_full_stop() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.is_full_stop)
  return is_full_stop_;
}
void SimpleLongitudinalDebug::set_is_full_stop(bool value) {
  set_has_is_full_stop();
  is_full_stop_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.is_full_stop)
}

// optional double slope_offset_compensation = 19;
bool SimpleLongitudinalDebug::has_slope_offset_compensation() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SimpleLongitudinalDebug::set_has_slope_offset_compensation() {
  _has_bits_[0] |= 0x00020000u;
}
void SimpleLongitudinalDebug::clear_has_slope_offset_compensation() {
  _has_bits_[0] &= ~0x00020000u;
}
void SimpleLongitudinalDebug::clear_slope_offset_compensation() {
  slope_offset_compensation_ = 0;
  clear_has_slope_offset_compensation();
}
double SimpleLongitudinalDebug::slope_offset_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLongitudinalDebug.slope_offset_compensation)
  return slope_offset_compensation_;
}
void SimpleLongitudinalDebug::set_slope_offset_compensation(double value) {
  set_has_slope_offset_compensation();
  slope_offset_compensation_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLongitudinalDebug.slope_offset_compensation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleLateralDebug::kLateralErrorFieldNumber;
const int SimpleLateralDebug::kRefHeadingFieldNumber;
const int SimpleLateralDebug::kHeadingFieldNumber;
const int SimpleLateralDebug::kHeadingErrorFieldNumber;
const int SimpleLateralDebug::kHeadingErrorRateFieldNumber;
const int SimpleLateralDebug::kLateralErrorRateFieldNumber;
const int SimpleLateralDebug::kCurvatureFieldNumber;
const int SimpleLateralDebug::kSteerAngleFieldNumber;
const int SimpleLateralDebug::kSteerAngleFeedforwardFieldNumber;
const int SimpleLateralDebug::kSteerAngleLateralContributionFieldNumber;
const int SimpleLateralDebug::kSteerAngleLateralRateContributionFieldNumber;
const int SimpleLateralDebug::kSteerAngleHeadingContributionFieldNumber;
const int SimpleLateralDebug::kSteerAngleHeadingRateContributionFieldNumber;
const int SimpleLateralDebug::kSteerAngleFeedbackFieldNumber;
const int SimpleLateralDebug::kSteeringPositionFieldNumber;
const int SimpleLateralDebug::kRefSpeedFieldNumber;
const int SimpleLateralDebug::kSteerAngleLimitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleLateralDebug::SimpleLateralDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.SimpleLateralDebug)
}
SimpleLateralDebug::SimpleLateralDebug(const SimpleLateralDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lateral_error_, &from.lateral_error_,
    reinterpret_cast<char*>(&steer_angle_limited_) -
    reinterpret_cast<char*>(&lateral_error_) + sizeof(steer_angle_limited_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleLateralDebug)
}

void SimpleLateralDebug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lateral_error_, 0, reinterpret_cast<char*>(&steer_angle_limited_) -
    reinterpret_cast<char*>(&lateral_error_) + sizeof(steer_angle_limited_));
}

SimpleLateralDebug::~SimpleLateralDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleLateralDebug)
  SharedDtor();
}

void SimpleLateralDebug::SharedDtor() {
}

void SimpleLateralDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleLateralDebug::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleLateralDebug& SimpleLateralDebug::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimpleLateralDebug* SimpleLateralDebug::New(::google::protobuf::Arena* arena) const {
  SimpleLateralDebug* n = new SimpleLateralDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleLateralDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleLateralDebug)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&lateral_error_, 0, reinterpret_cast<char*>(&steer_angle_) -
      reinterpret_cast<char*>(&lateral_error_) + sizeof(steer_angle_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&steer_angle_feedforward_, 0, reinterpret_cast<char*>(&ref_speed_) -
      reinterpret_cast<char*>(&steer_angle_feedforward_) + sizeof(ref_speed_));
  }
  steer_angle_limited_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimpleLateralDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.SimpleLateralDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lateral_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_lateral_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ref_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_heading_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_error_rate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_heading_error_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_error_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_lateral_error_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curvature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_curvature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_steer_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_feedforward = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_steer_angle_feedforward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_feedforward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_lateral_contribution = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_steer_angle_lateral_contribution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_lateral_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_lateral_rate_contribution = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_steer_angle_lateral_rate_contribution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_lateral_rate_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_heading_contribution = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_steer_angle_heading_contribution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_heading_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_heading_rate_contribution = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_steer_angle_heading_rate_contribution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_heading_rate_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_feedback = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_steer_angle_feedback();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_position = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_steering_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_speed = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_ref_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_limited = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_steer_angle_limited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_limited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.SimpleLateralDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.SimpleLateralDebug)
  return false;
#undef DO_
}

void SimpleLateralDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.SimpleLateralDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lateral_error(), output);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ref_heading(), output);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading_error(), output);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading_error_rate(), output);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lateral_error_rate(), output);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->curvature(), output);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->steer_angle(), output);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->steer_angle_feedforward(), output);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->steer_angle_lateral_contribution(), output);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->steer_angle_lateral_rate_contribution(), output);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->steer_angle_heading_contribution(), output);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->steer_angle_heading_rate_contribution(), output);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->steer_angle_feedback(), output);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->steering_position(), output);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->ref_speed(), output);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->steer_angle_limited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.SimpleLateralDebug)
}

::google::protobuf::uint8* SimpleLateralDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleLateralDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ref_heading(), target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->curvature(), target);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->steer_angle_limited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleLateralDebug)
  return target;
}

size_t SimpleLateralDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleLateralDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double lateral_error = 1;
    if (has_lateral_error()) {
      total_size += 1 + 8;
    }

    // optional double ref_heading = 2;
    if (has_ref_heading()) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (has_heading_error()) {
      total_size += 1 + 8;
    }

    // optional double heading_error_rate = 5;
    if (has_heading_error_rate()) {
      total_size += 1 + 8;
    }

    // optional double lateral_error_rate = 6;
    if (has_lateral_error_rate()) {
      total_size += 1 + 8;
    }

    // optional double curvature = 7;
    if (has_curvature()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle = 8;
    if (has_steer_angle()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double steer_angle_feedforward = 9;
    if (has_steer_angle_feedforward()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_contribution = 10;
    if (has_steer_angle_lateral_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_rate_contribution = 11;
    if (has_steer_angle_lateral_rate_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_contribution = 12;
    if (has_steer_angle_heading_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_rate_contribution = 13;
    if (has_steer_angle_heading_rate_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedback = 14;
    if (has_steer_angle_feedback()) {
      total_size += 1 + 8;
    }

    // optional double steering_position = 15;
    if (has_steering_position()) {
      total_size += 1 + 8;
    }

    // optional double ref_speed = 16;
    if (has_ref_speed()) {
      total_size += 2 + 8;
    }

  }
  // optional double steer_angle_limited = 17;
  if (has_steer_angle_limited()) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleLateralDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.SimpleLateralDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleLateralDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleLateralDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.SimpleLateralDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.SimpleLateralDebug)
    MergeFrom(*source);
  }
}

void SimpleLateralDebug::MergeFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleLateralDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      lateral_error_ = from.lateral_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      ref_heading_ = from.ref_heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      heading_error_ = from.heading_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_error_rate_ = from.heading_error_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      lateral_error_rate_ = from.lateral_error_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000080u) {
      steer_angle_ = from.steer_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      steer_angle_feedforward_ = from.steer_angle_feedforward_;
    }
    if (cached_has_bits & 0x00000200u) {
      steer_angle_lateral_contribution_ = from.steer_angle_lateral_contribution_;
    }
    if (cached_has_bits & 0x00000400u) {
      steer_angle_lateral_rate_contribution_ = from.steer_angle_lateral_rate_contribution_;
    }
    if (cached_has_bits & 0x00000800u) {
      steer_angle_heading_contribution_ = from.steer_angle_heading_contribution_;
    }
    if (cached_has_bits & 0x00001000u) {
      steer_angle_heading_rate_contribution_ = from.steer_angle_heading_rate_contribution_;
    }
    if (cached_has_bits & 0x00002000u) {
      steer_angle_feedback_ = from.steer_angle_feedback_;
    }
    if (cached_has_bits & 0x00004000u) {
      steering_position_ = from.steering_position_;
    }
    if (cached_has_bits & 0x00008000u) {
      ref_speed_ = from.ref_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_steer_angle_limited(from.steer_angle_limited());
  }
}

void SimpleLateralDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.SimpleLateralDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleLateralDebug::CopyFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleLateralDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLateralDebug::IsInitialized() const {
  return true;
}

void SimpleLateralDebug::Swap(SimpleLateralDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleLateralDebug::InternalSwap(SimpleLateralDebug* other) {
  std::swap(lateral_error_, other->lateral_error_);
  std::swap(ref_heading_, other->ref_heading_);
  std::swap(heading_, other->heading_);
  std::swap(heading_error_, other->heading_error_);
  std::swap(heading_error_rate_, other->heading_error_rate_);
  std::swap(lateral_error_rate_, other->lateral_error_rate_);
  std::swap(curvature_, other->curvature_);
  std::swap(steer_angle_, other->steer_angle_);
  std::swap(steer_angle_feedforward_, other->steer_angle_feedforward_);
  std::swap(steer_angle_lateral_contribution_, other->steer_angle_lateral_contribution_);
  std::swap(steer_angle_lateral_rate_contribution_, other->steer_angle_lateral_rate_contribution_);
  std::swap(steer_angle_heading_contribution_, other->steer_angle_heading_contribution_);
  std::swap(steer_angle_heading_rate_contribution_, other->steer_angle_heading_rate_contribution_);
  std::swap(steer_angle_feedback_, other->steer_angle_feedback_);
  std::swap(steering_position_, other->steering_position_);
  std::swap(ref_speed_, other->ref_speed_);
  std::swap(steer_angle_limited_, other->steer_angle_limited_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleLateralDebug::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleLateralDebug

// optional double lateral_error = 1;
bool SimpleLateralDebug::has_lateral_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SimpleLateralDebug::set_has_lateral_error() {
  _has_bits_[0] |= 0x00000001u;
}
void SimpleLateralDebug::clear_has_lateral_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void SimpleLateralDebug::clear_lateral_error() {
  lateral_error_ = 0;
  clear_has_lateral_error();
}
double SimpleLateralDebug::lateral_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.lateral_error)
  return lateral_error_;
}
void SimpleLateralDebug::set_lateral_error(double value) {
  set_has_lateral_error();
  lateral_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.lateral_error)
}

// optional double ref_heading = 2;
bool SimpleLateralDebug::has_ref_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SimpleLateralDebug::set_has_ref_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void SimpleLateralDebug::clear_has_ref_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void SimpleLateralDebug::clear_ref_heading() {
  ref_heading_ = 0;
  clear_has_ref_heading();
}
double SimpleLateralDebug::ref_heading() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.ref_heading)
  return ref_heading_;
}
void SimpleLateralDebug::set_ref_heading(double value) {
  set_has_ref_heading();
  ref_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.ref_heading)
}

// optional double heading = 3;
bool SimpleLateralDebug::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SimpleLateralDebug::set_has_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void SimpleLateralDebug::clear_has_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void SimpleLateralDebug::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
double SimpleLateralDebug::heading() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.heading)
  return heading_;
}
void SimpleLateralDebug::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.heading)
}

// optional double heading_error = 4;
bool SimpleLateralDebug::has_heading_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SimpleLateralDebug::set_has_heading_error() {
  _has_bits_[0] |= 0x00000008u;
}
void SimpleLateralDebug::clear_has_heading_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void SimpleLateralDebug::clear_heading_error() {
  heading_error_ = 0;
  clear_has_heading_error();
}
double SimpleLateralDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.heading_error)
  return heading_error_;
}
void SimpleLateralDebug::set_heading_error(double value) {
  set_has_heading_error();
  heading_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.heading_error)
}

// optional double heading_error_rate = 5;
bool SimpleLateralDebug::has_heading_error_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SimpleLateralDebug::set_has_heading_error_rate() {
  _has_bits_[0] |= 0x00000010u;
}
void SimpleLateralDebug::clear_has_heading_error_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
void SimpleLateralDebug::clear_heading_error_rate() {
  heading_error_rate_ = 0;
  clear_has_heading_error_rate();
}
double SimpleLateralDebug::heading_error_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.heading_error_rate)
  return heading_error_rate_;
}
void SimpleLateralDebug::set_heading_error_rate(double value) {
  set_has_heading_error_rate();
  heading_error_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.heading_error_rate)
}

// optional double lateral_error_rate = 6;
bool SimpleLateralDebug::has_lateral_error_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SimpleLateralDebug::set_has_lateral_error_rate() {
  _has_bits_[0] |= 0x00000020u;
}
void SimpleLateralDebug::clear_has_lateral_error_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
void SimpleLateralDebug::clear_lateral_error_rate() {
  lateral_error_rate_ = 0;
  clear_has_lateral_error_rate();
}
double SimpleLateralDebug::lateral_error_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.lateral_error_rate)
  return lateral_error_rate_;
}
void SimpleLateralDebug::set_lateral_error_rate(double value) {
  set_has_lateral_error_rate();
  lateral_error_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.lateral_error_rate)
}

// optional double curvature = 7;
bool SimpleLateralDebug::has_curvature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SimpleLateralDebug::set_has_curvature() {
  _has_bits_[0] |= 0x00000040u;
}
void SimpleLateralDebug::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000040u;
}
void SimpleLateralDebug::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
double SimpleLateralDebug::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.curvature)
  return curvature_;
}
void SimpleLateralDebug::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.curvature)
}

// optional double steer_angle = 8;
bool SimpleLateralDebug::has_steer_angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle() {
  _has_bits_[0] |= 0x00000080u;
}
void SimpleLateralDebug::clear_has_steer_angle() {
  _has_bits_[0] &= ~0x00000080u;
}
void SimpleLateralDebug::clear_steer_angle() {
  steer_angle_ = 0;
  clear_has_steer_angle();
}
double SimpleLateralDebug::steer_angle() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle)
  return steer_angle_;
}
void SimpleLateralDebug::set_steer_angle(double value) {
  set_has_steer_angle();
  steer_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle)
}

// optional double steer_angle_feedforward = 9;
bool SimpleLateralDebug::has_steer_angle_feedforward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_feedforward() {
  _has_bits_[0] |= 0x00000100u;
}
void SimpleLateralDebug::clear_has_steer_angle_feedforward() {
  _has_bits_[0] &= ~0x00000100u;
}
void SimpleLateralDebug::clear_steer_angle_feedforward() {
  steer_angle_feedforward_ = 0;
  clear_has_steer_angle_feedforward();
}
double SimpleLateralDebug::steer_angle_feedforward() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_feedforward)
  return steer_angle_feedforward_;
}
void SimpleLateralDebug::set_steer_angle_feedforward(double value) {
  set_has_steer_angle_feedforward();
  steer_angle_feedforward_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_feedforward)
}

// optional double steer_angle_lateral_contribution = 10;
bool SimpleLateralDebug::has_steer_angle_lateral_contribution() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_lateral_contribution() {
  _has_bits_[0] |= 0x00000200u;
}
void SimpleLateralDebug::clear_has_steer_angle_lateral_contribution() {
  _has_bits_[0] &= ~0x00000200u;
}
void SimpleLateralDebug::clear_steer_angle_lateral_contribution() {
  steer_angle_lateral_contribution_ = 0;
  clear_has_steer_angle_lateral_contribution();
}
double SimpleLateralDebug::steer_angle_lateral_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_lateral_contribution)
  return steer_angle_lateral_contribution_;
}
void SimpleLateralDebug::set_steer_angle_lateral_contribution(double value) {
  set_has_steer_angle_lateral_contribution();
  steer_angle_lateral_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_lateral_contribution)
}

// optional double steer_angle_lateral_rate_contribution = 11;
bool SimpleLateralDebug::has_steer_angle_lateral_rate_contribution() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_lateral_rate_contribution() {
  _has_bits_[0] |= 0x00000400u;
}
void SimpleLateralDebug::clear_has_steer_angle_lateral_rate_contribution() {
  _has_bits_[0] &= ~0x00000400u;
}
void SimpleLateralDebug::clear_steer_angle_lateral_rate_contribution() {
  steer_angle_lateral_rate_contribution_ = 0;
  clear_has_steer_angle_lateral_rate_contribution();
}
double SimpleLateralDebug::steer_angle_lateral_rate_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_lateral_rate_contribution)
  return steer_angle_lateral_rate_contribution_;
}
void SimpleLateralDebug::set_steer_angle_lateral_rate_contribution(double value) {
  set_has_steer_angle_lateral_rate_contribution();
  steer_angle_lateral_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_lateral_rate_contribution)
}

// optional double steer_angle_heading_contribution = 12;
bool SimpleLateralDebug::has_steer_angle_heading_contribution() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_heading_contribution() {
  _has_bits_[0] |= 0x00000800u;
}
void SimpleLateralDebug::clear_has_steer_angle_heading_contribution() {
  _has_bits_[0] &= ~0x00000800u;
}
void SimpleLateralDebug::clear_steer_angle_heading_contribution() {
  steer_angle_heading_contribution_ = 0;
  clear_has_steer_angle_heading_contribution();
}
double SimpleLateralDebug::steer_angle_heading_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_heading_contribution)
  return steer_angle_heading_contribution_;
}
void SimpleLateralDebug::set_steer_angle_heading_contribution(double value) {
  set_has_steer_angle_heading_contribution();
  steer_angle_heading_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_heading_contribution)
}

// optional double steer_angle_heading_rate_contribution = 13;
bool SimpleLateralDebug::has_steer_angle_heading_rate_contribution() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_heading_rate_contribution() {
  _has_bits_[0] |= 0x00001000u;
}
void SimpleLateralDebug::clear_has_steer_angle_heading_rate_contribution() {
  _has_bits_[0] &= ~0x00001000u;
}
void SimpleLateralDebug::clear_steer_angle_heading_rate_contribution() {
  steer_angle_heading_rate_contribution_ = 0;
  clear_has_steer_angle_heading_rate_contribution();
}
double SimpleLateralDebug::steer_angle_heading_rate_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_heading_rate_contribution)
  return steer_angle_heading_rate_contribution_;
}
void SimpleLateralDebug::set_steer_angle_heading_rate_contribution(double value) {
  set_has_steer_angle_heading_rate_contribution();
  steer_angle_heading_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_heading_rate_contribution)
}

// optional double steer_angle_feedback = 14;
bool SimpleLateralDebug::has_steer_angle_feedback() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_feedback() {
  _has_bits_[0] |= 0x00002000u;
}
void SimpleLateralDebug::clear_has_steer_angle_feedback() {
  _has_bits_[0] &= ~0x00002000u;
}
void SimpleLateralDebug::clear_steer_angle_feedback() {
  steer_angle_feedback_ = 0;
  clear_has_steer_angle_feedback();
}
double SimpleLateralDebug::steer_angle_feedback() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_feedback)
  return steer_angle_feedback_;
}
void SimpleLateralDebug::set_steer_angle_feedback(double value) {
  set_has_steer_angle_feedback();
  steer_angle_feedback_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_feedback)
}

// optional double steering_position = 15;
bool SimpleLateralDebug::has_steering_position() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SimpleLateralDebug::set_has_steering_position() {
  _has_bits_[0] |= 0x00004000u;
}
void SimpleLateralDebug::clear_has_steering_position() {
  _has_bits_[0] &= ~0x00004000u;
}
void SimpleLateralDebug::clear_steering_position() {
  steering_position_ = 0;
  clear_has_steering_position();
}
double SimpleLateralDebug::steering_position() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steering_position)
  return steering_position_;
}
void SimpleLateralDebug::set_steering_position(double value) {
  set_has_steering_position();
  steering_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steering_position)
}

// optional double ref_speed = 16;
bool SimpleLateralDebug::has_ref_speed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SimpleLateralDebug::set_has_ref_speed() {
  _has_bits_[0] |= 0x00008000u;
}
void SimpleLateralDebug::clear_has_ref_speed() {
  _has_bits_[0] &= ~0x00008000u;
}
void SimpleLateralDebug::clear_ref_speed() {
  ref_speed_ = 0;
  clear_has_ref_speed();
}
double SimpleLateralDebug::ref_speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.ref_speed)
  return ref_speed_;
}
void SimpleLateralDebug::set_ref_speed(double value) {
  set_has_ref_speed();
  ref_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.ref_speed)
}

// optional double steer_angle_limited = 17;
bool SimpleLateralDebug::has_steer_angle_limited() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SimpleLateralDebug::set_has_steer_angle_limited() {
  _has_bits_[0] |= 0x00010000u;
}
void SimpleLateralDebug::clear_has_steer_angle_limited() {
  _has_bits_[0] &= ~0x00010000u;
}
void SimpleLateralDebug::clear_steer_angle_limited() {
  steer_angle_limited_ = 0;
  clear_has_steer_angle_limited();
}
double SimpleLateralDebug::steer_angle_limited() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleLateralDebug.steer_angle_limited)
  return steer_angle_limited_;
}
void SimpleLateralDebug::set_steer_angle_limited(double value) {
  set_has_steer_angle_limited();
  steer_angle_limited_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleLateralDebug.steer_angle_limited)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleMPCDebug::kLateralErrorFieldNumber;
const int SimpleMPCDebug::kRefHeadingFieldNumber;
const int SimpleMPCDebug::kHeadingFieldNumber;
const int SimpleMPCDebug::kHeadingErrorFieldNumber;
const int SimpleMPCDebug::kHeadingErrorRateFieldNumber;
const int SimpleMPCDebug::kLateralErrorRateFieldNumber;
const int SimpleMPCDebug::kCurvatureFieldNumber;
const int SimpleMPCDebug::kSteerAngleFieldNumber;
const int SimpleMPCDebug::kSteerAngleFeedforwardFieldNumber;
const int SimpleMPCDebug::kSteerAngleLateralContributionFieldNumber;
const int SimpleMPCDebug::kSteerAngleLateralRateContributionFieldNumber;
const int SimpleMPCDebug::kSteerAngleHeadingContributionFieldNumber;
const int SimpleMPCDebug::kSteerAngleHeadingRateContributionFieldNumber;
const int SimpleMPCDebug::kSteerAngleFeedbackFieldNumber;
const int SimpleMPCDebug::kSteeringPositionFieldNumber;
const int SimpleMPCDebug::kRefSpeedFieldNumber;
const int SimpleMPCDebug::kSteerAngleLimitedFieldNumber;
const int SimpleMPCDebug::kStationReferenceFieldNumber;
const int SimpleMPCDebug::kStationErrorFieldNumber;
const int SimpleMPCDebug::kSpeedReferenceFieldNumber;
const int SimpleMPCDebug::kSpeedErrorFieldNumber;
const int SimpleMPCDebug::kAccelerationReferenceFieldNumber;
const int SimpleMPCDebug::kIsFullStopFieldNumber;
const int SimpleMPCDebug::kStationFeedbackFieldNumber;
const int SimpleMPCDebug::kSpeedFeedbackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleMPCDebug::SimpleMPCDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.SimpleMPCDebug)
}
SimpleMPCDebug::SimpleMPCDebug(const SimpleMPCDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lateral_error_, &from.lateral_error_,
    reinterpret_cast<char*>(&is_full_stop_) -
    reinterpret_cast<char*>(&lateral_error_) + sizeof(is_full_stop_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleMPCDebug)
}

void SimpleMPCDebug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lateral_error_, 0, reinterpret_cast<char*>(&is_full_stop_) -
    reinterpret_cast<char*>(&lateral_error_) + sizeof(is_full_stop_));
}

SimpleMPCDebug::~SimpleMPCDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleMPCDebug)
  SharedDtor();
}

void SimpleMPCDebug::SharedDtor() {
}

void SimpleMPCDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleMPCDebug::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleMPCDebug& SimpleMPCDebug::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimpleMPCDebug* SimpleMPCDebug::New(::google::protobuf::Arena* arena) const {
  SimpleMPCDebug* n = new SimpleMPCDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleMPCDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleMPCDebug)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&lateral_error_, 0, reinterpret_cast<char*>(&steer_angle_) -
      reinterpret_cast<char*>(&lateral_error_) + sizeof(steer_angle_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&steer_angle_feedforward_, 0, reinterpret_cast<char*>(&ref_speed_) -
      reinterpret_cast<char*>(&steer_angle_feedforward_) + sizeof(ref_speed_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&steer_angle_limited_, 0, reinterpret_cast<char*>(&speed_feedback_) -
      reinterpret_cast<char*>(&steer_angle_limited_) + sizeof(speed_feedback_));
  }
  is_full_stop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimpleMPCDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.SimpleMPCDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lateral_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_lateral_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ref_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_heading_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_error_rate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_heading_error_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_error_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_lateral_error_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curvature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_curvature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_steer_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_feedforward = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_steer_angle_feedforward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_feedforward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_lateral_contribution = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_steer_angle_lateral_contribution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_lateral_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_lateral_rate_contribution = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_steer_angle_lateral_rate_contribution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_lateral_rate_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_heading_contribution = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_steer_angle_heading_contribution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_heading_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_heading_rate_contribution = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_steer_angle_heading_rate_contribution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_heading_rate_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_feedback = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_steer_angle_feedback();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_position = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_steering_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_speed = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_ref_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_limited = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_steer_angle_limited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_limited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double station_reference = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_station_reference();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double station_error = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {
          set_has_station_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_reference = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_speed_reference();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_error = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u)) {
          set_has_speed_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceleration_reference = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u)) {
          set_has_acceleration_reference();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_full_stop = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_is_full_stop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_full_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double station_feedback = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u)) {
          set_has_station_feedback();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_feedback = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u)) {
          set_has_speed_feedback();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.SimpleMPCDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.SimpleMPCDebug)
  return false;
#undef DO_
}

void SimpleMPCDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.SimpleMPCDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lateral_error(), output);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ref_heading(), output);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading_error(), output);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading_error_rate(), output);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lateral_error_rate(), output);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->curvature(), output);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->steer_angle(), output);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->steer_angle_feedforward(), output);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->steer_angle_lateral_contribution(), output);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->steer_angle_lateral_rate_contribution(), output);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->steer_angle_heading_contribution(), output);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->steer_angle_heading_rate_contribution(), output);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->steer_angle_feedback(), output);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->steering_position(), output);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->ref_speed(), output);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->steer_angle_limited(), output);
  }

  // optional double station_reference = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->station_reference(), output);
  }

  // optional double station_error = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->station_error(), output);
  }

  // optional double speed_reference = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->speed_reference(), output);
  }

  // optional double speed_error = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->speed_error(), output);
  }

  // optional double acceleration_reference = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->acceleration_reference(), output);
  }

  // optional bool is_full_stop = 23;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->is_full_stop(), output);
  }

  // optional double station_feedback = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->station_feedback(), output);
  }

  // optional double speed_feedback = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->speed_feedback(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.SimpleMPCDebug)
}

::google::protobuf::uint8* SimpleMPCDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleMPCDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ref_heading(), target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->curvature(), target);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->steer_angle_limited(), target);
  }

  // optional double station_reference = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->station_reference(), target);
  }

  // optional double station_error = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->station_error(), target);
  }

  // optional double speed_reference = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->speed_reference(), target);
  }

  // optional double speed_error = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->speed_error(), target);
  }

  // optional double acceleration_reference = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->acceleration_reference(), target);
  }

  // optional bool is_full_stop = 23;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->is_full_stop(), target);
  }

  // optional double station_feedback = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->station_feedback(), target);
  }

  // optional double speed_feedback = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->speed_feedback(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleMPCDebug)
  return target;
}

size_t SimpleMPCDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleMPCDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double lateral_error = 1;
    if (has_lateral_error()) {
      total_size += 1 + 8;
    }

    // optional double ref_heading = 2;
    if (has_ref_heading()) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (has_heading_error()) {
      total_size += 1 + 8;
    }

    // optional double heading_error_rate = 5;
    if (has_heading_error_rate()) {
      total_size += 1 + 8;
    }

    // optional double lateral_error_rate = 6;
    if (has_lateral_error_rate()) {
      total_size += 1 + 8;
    }

    // optional double curvature = 7;
    if (has_curvature()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle = 8;
    if (has_steer_angle()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double steer_angle_feedforward = 9;
    if (has_steer_angle_feedforward()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_contribution = 10;
    if (has_steer_angle_lateral_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_rate_contribution = 11;
    if (has_steer_angle_lateral_rate_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_contribution = 12;
    if (has_steer_angle_heading_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_rate_contribution = 13;
    if (has_steer_angle_heading_rate_contribution()) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedback = 14;
    if (has_steer_angle_feedback()) {
      total_size += 1 + 8;
    }

    // optional double steering_position = 15;
    if (has_steering_position()) {
      total_size += 1 + 8;
    }

    // optional double ref_speed = 16;
    if (has_ref_speed()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double steer_angle_limited = 17;
    if (has_steer_angle_limited()) {
      total_size += 2 + 8;
    }

    // optional double station_reference = 18;
    if (has_station_reference()) {
      total_size += 2 + 8;
    }

    // optional double station_error = 19;
    if (has_station_error()) {
      total_size += 2 + 8;
    }

    // optional double speed_reference = 20;
    if (has_speed_reference()) {
      total_size += 2 + 8;
    }

    // optional double speed_error = 21;
    if (has_speed_error()) {
      total_size += 2 + 8;
    }

    // optional double acceleration_reference = 22;
    if (has_acceleration_reference()) {
      total_size += 2 + 8;
    }

    // optional double station_feedback = 24;
    if (has_station_feedback()) {
      total_size += 2 + 8;
    }

    // optional double speed_feedback = 25;
    if (has_speed_feedback()) {
      total_size += 2 + 8;
    }

  }
  // optional bool is_full_stop = 23;
  if (has_is_full_stop()) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleMPCDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.SimpleMPCDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleMPCDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleMPCDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.SimpleMPCDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.SimpleMPCDebug)
    MergeFrom(*source);
  }
}

void SimpleMPCDebug::MergeFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleMPCDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      lateral_error_ = from.lateral_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      ref_heading_ = from.ref_heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      heading_error_ = from.heading_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_error_rate_ = from.heading_error_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      lateral_error_rate_ = from.lateral_error_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000080u) {
      steer_angle_ = from.steer_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      steer_angle_feedforward_ = from.steer_angle_feedforward_;
    }
    if (cached_has_bits & 0x00000200u) {
      steer_angle_lateral_contribution_ = from.steer_angle_lateral_contribution_;
    }
    if (cached_has_bits & 0x00000400u) {
      steer_angle_lateral_rate_contribution_ = from.steer_angle_lateral_rate_contribution_;
    }
    if (cached_has_bits & 0x00000800u) {
      steer_angle_heading_contribution_ = from.steer_angle_heading_contribution_;
    }
    if (cached_has_bits & 0x00001000u) {
      steer_angle_heading_rate_contribution_ = from.steer_angle_heading_rate_contribution_;
    }
    if (cached_has_bits & 0x00002000u) {
      steer_angle_feedback_ = from.steer_angle_feedback_;
    }
    if (cached_has_bits & 0x00004000u) {
      steering_position_ = from.steering_position_;
    }
    if (cached_has_bits & 0x00008000u) {
      ref_speed_ = from.ref_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      steer_angle_limited_ = from.steer_angle_limited_;
    }
    if (cached_has_bits & 0x00020000u) {
      station_reference_ = from.station_reference_;
    }
    if (cached_has_bits & 0x00040000u) {
      station_error_ = from.station_error_;
    }
    if (cached_has_bits & 0x00080000u) {
      speed_reference_ = from.speed_reference_;
    }
    if (cached_has_bits & 0x00100000u) {
      speed_error_ = from.speed_error_;
    }
    if (cached_has_bits & 0x00200000u) {
      acceleration_reference_ = from.acceleration_reference_;
    }
    if (cached_has_bits & 0x00400000u) {
      station_feedback_ = from.station_feedback_;
    }
    if (cached_has_bits & 0x00800000u) {
      speed_feedback_ = from.speed_feedback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_is_full_stop(from.is_full_stop());
  }
}

void SimpleMPCDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.SimpleMPCDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleMPCDebug::CopyFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleMPCDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMPCDebug::IsInitialized() const {
  return true;
}

void SimpleMPCDebug::Swap(SimpleMPCDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleMPCDebug::InternalSwap(SimpleMPCDebug* other) {
  std::swap(lateral_error_, other->lateral_error_);
  std::swap(ref_heading_, other->ref_heading_);
  std::swap(heading_, other->heading_);
  std::swap(heading_error_, other->heading_error_);
  std::swap(heading_error_rate_, other->heading_error_rate_);
  std::swap(lateral_error_rate_, other->lateral_error_rate_);
  std::swap(curvature_, other->curvature_);
  std::swap(steer_angle_, other->steer_angle_);
  std::swap(steer_angle_feedforward_, other->steer_angle_feedforward_);
  std::swap(steer_angle_lateral_contribution_, other->steer_angle_lateral_contribution_);
  std::swap(steer_angle_lateral_rate_contribution_, other->steer_angle_lateral_rate_contribution_);
  std::swap(steer_angle_heading_contribution_, other->steer_angle_heading_contribution_);
  std::swap(steer_angle_heading_rate_contribution_, other->steer_angle_heading_rate_contribution_);
  std::swap(steer_angle_feedback_, other->steer_angle_feedback_);
  std::swap(steering_position_, other->steering_position_);
  std::swap(ref_speed_, other->ref_speed_);
  std::swap(steer_angle_limited_, other->steer_angle_limited_);
  std::swap(station_reference_, other->station_reference_);
  std::swap(station_error_, other->station_error_);
  std::swap(speed_reference_, other->speed_reference_);
  std::swap(speed_error_, other->speed_error_);
  std::swap(acceleration_reference_, other->acceleration_reference_);
  std::swap(station_feedback_, other->station_feedback_);
  std::swap(speed_feedback_, other->speed_feedback_);
  std::swap(is_full_stop_, other->is_full_stop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleMPCDebug::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleMPCDebug

// optional double lateral_error = 1;
bool SimpleMPCDebug::has_lateral_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SimpleMPCDebug::set_has_lateral_error() {
  _has_bits_[0] |= 0x00000001u;
}
void SimpleMPCDebug::clear_has_lateral_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void SimpleMPCDebug::clear_lateral_error() {
  lateral_error_ = 0;
  clear_has_lateral_error();
}
double SimpleMPCDebug::lateral_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.lateral_error)
  return lateral_error_;
}
void SimpleMPCDebug::set_lateral_error(double value) {
  set_has_lateral_error();
  lateral_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.lateral_error)
}

// optional double ref_heading = 2;
bool SimpleMPCDebug::has_ref_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SimpleMPCDebug::set_has_ref_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void SimpleMPCDebug::clear_has_ref_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void SimpleMPCDebug::clear_ref_heading() {
  ref_heading_ = 0;
  clear_has_ref_heading();
}
double SimpleMPCDebug::ref_heading() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.ref_heading)
  return ref_heading_;
}
void SimpleMPCDebug::set_ref_heading(double value) {
  set_has_ref_heading();
  ref_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.ref_heading)
}

// optional double heading = 3;
bool SimpleMPCDebug::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SimpleMPCDebug::set_has_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void SimpleMPCDebug::clear_has_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void SimpleMPCDebug::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
double SimpleMPCDebug::heading() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.heading)
  return heading_;
}
void SimpleMPCDebug::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.heading)
}

// optional double heading_error = 4;
bool SimpleMPCDebug::has_heading_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SimpleMPCDebug::set_has_heading_error() {
  _has_bits_[0] |= 0x00000008u;
}
void SimpleMPCDebug::clear_has_heading_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void SimpleMPCDebug::clear_heading_error() {
  heading_error_ = 0;
  clear_has_heading_error();
}
double SimpleMPCDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.heading_error)
  return heading_error_;
}
void SimpleMPCDebug::set_heading_error(double value) {
  set_has_heading_error();
  heading_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.heading_error)
}

// optional double heading_error_rate = 5;
bool SimpleMPCDebug::has_heading_error_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SimpleMPCDebug::set_has_heading_error_rate() {
  _has_bits_[0] |= 0x00000010u;
}
void SimpleMPCDebug::clear_has_heading_error_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
void SimpleMPCDebug::clear_heading_error_rate() {
  heading_error_rate_ = 0;
  clear_has_heading_error_rate();
}
double SimpleMPCDebug::heading_error_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.heading_error_rate)
  return heading_error_rate_;
}
void SimpleMPCDebug::set_heading_error_rate(double value) {
  set_has_heading_error_rate();
  heading_error_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.heading_error_rate)
}

// optional double lateral_error_rate = 6;
bool SimpleMPCDebug::has_lateral_error_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SimpleMPCDebug::set_has_lateral_error_rate() {
  _has_bits_[0] |= 0x00000020u;
}
void SimpleMPCDebug::clear_has_lateral_error_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
void SimpleMPCDebug::clear_lateral_error_rate() {
  lateral_error_rate_ = 0;
  clear_has_lateral_error_rate();
}
double SimpleMPCDebug::lateral_error_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.lateral_error_rate)
  return lateral_error_rate_;
}
void SimpleMPCDebug::set_lateral_error_rate(double value) {
  set_has_lateral_error_rate();
  lateral_error_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.lateral_error_rate)
}

// optional double curvature = 7;
bool SimpleMPCDebug::has_curvature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SimpleMPCDebug::set_has_curvature() {
  _has_bits_[0] |= 0x00000040u;
}
void SimpleMPCDebug::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000040u;
}
void SimpleMPCDebug::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
double SimpleMPCDebug::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.curvature)
  return curvature_;
}
void SimpleMPCDebug::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.curvature)
}

// optional double steer_angle = 8;
bool SimpleMPCDebug::has_steer_angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle() {
  _has_bits_[0] |= 0x00000080u;
}
void SimpleMPCDebug::clear_has_steer_angle() {
  _has_bits_[0] &= ~0x00000080u;
}
void SimpleMPCDebug::clear_steer_angle() {
  steer_angle_ = 0;
  clear_has_steer_angle();
}
double SimpleMPCDebug::steer_angle() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle)
  return steer_angle_;
}
void SimpleMPCDebug::set_steer_angle(double value) {
  set_has_steer_angle();
  steer_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle)
}

// optional double steer_angle_feedforward = 9;
bool SimpleMPCDebug::has_steer_angle_feedforward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_feedforward() {
  _has_bits_[0] |= 0x00000100u;
}
void SimpleMPCDebug::clear_has_steer_angle_feedforward() {
  _has_bits_[0] &= ~0x00000100u;
}
void SimpleMPCDebug::clear_steer_angle_feedforward() {
  steer_angle_feedforward_ = 0;
  clear_has_steer_angle_feedforward();
}
double SimpleMPCDebug::steer_angle_feedforward() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_feedforward)
  return steer_angle_feedforward_;
}
void SimpleMPCDebug::set_steer_angle_feedforward(double value) {
  set_has_steer_angle_feedforward();
  steer_angle_feedforward_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_feedforward)
}

// optional double steer_angle_lateral_contribution = 10;
bool SimpleMPCDebug::has_steer_angle_lateral_contribution() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_lateral_contribution() {
  _has_bits_[0] |= 0x00000200u;
}
void SimpleMPCDebug::clear_has_steer_angle_lateral_contribution() {
  _has_bits_[0] &= ~0x00000200u;
}
void SimpleMPCDebug::clear_steer_angle_lateral_contribution() {
  steer_angle_lateral_contribution_ = 0;
  clear_has_steer_angle_lateral_contribution();
}
double SimpleMPCDebug::steer_angle_lateral_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_lateral_contribution)
  return steer_angle_lateral_contribution_;
}
void SimpleMPCDebug::set_steer_angle_lateral_contribution(double value) {
  set_has_steer_angle_lateral_contribution();
  steer_angle_lateral_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_lateral_contribution)
}

// optional double steer_angle_lateral_rate_contribution = 11;
bool SimpleMPCDebug::has_steer_angle_lateral_rate_contribution() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_lateral_rate_contribution() {
  _has_bits_[0] |= 0x00000400u;
}
void SimpleMPCDebug::clear_has_steer_angle_lateral_rate_contribution() {
  _has_bits_[0] &= ~0x00000400u;
}
void SimpleMPCDebug::clear_steer_angle_lateral_rate_contribution() {
  steer_angle_lateral_rate_contribution_ = 0;
  clear_has_steer_angle_lateral_rate_contribution();
}
double SimpleMPCDebug::steer_angle_lateral_rate_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_lateral_rate_contribution)
  return steer_angle_lateral_rate_contribution_;
}
void SimpleMPCDebug::set_steer_angle_lateral_rate_contribution(double value) {
  set_has_steer_angle_lateral_rate_contribution();
  steer_angle_lateral_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_lateral_rate_contribution)
}

// optional double steer_angle_heading_contribution = 12;
bool SimpleMPCDebug::has_steer_angle_heading_contribution() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_heading_contribution() {
  _has_bits_[0] |= 0x00000800u;
}
void SimpleMPCDebug::clear_has_steer_angle_heading_contribution() {
  _has_bits_[0] &= ~0x00000800u;
}
void SimpleMPCDebug::clear_steer_angle_heading_contribution() {
  steer_angle_heading_contribution_ = 0;
  clear_has_steer_angle_heading_contribution();
}
double SimpleMPCDebug::steer_angle_heading_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_heading_contribution)
  return steer_angle_heading_contribution_;
}
void SimpleMPCDebug::set_steer_angle_heading_contribution(double value) {
  set_has_steer_angle_heading_contribution();
  steer_angle_heading_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_heading_contribution)
}

// optional double steer_angle_heading_rate_contribution = 13;
bool SimpleMPCDebug::has_steer_angle_heading_rate_contribution() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_heading_rate_contribution() {
  _has_bits_[0] |= 0x00001000u;
}
void SimpleMPCDebug::clear_has_steer_angle_heading_rate_contribution() {
  _has_bits_[0] &= ~0x00001000u;
}
void SimpleMPCDebug::clear_steer_angle_heading_rate_contribution() {
  steer_angle_heading_rate_contribution_ = 0;
  clear_has_steer_angle_heading_rate_contribution();
}
double SimpleMPCDebug::steer_angle_heading_rate_contribution() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_heading_rate_contribution)
  return steer_angle_heading_rate_contribution_;
}
void SimpleMPCDebug::set_steer_angle_heading_rate_contribution(double value) {
  set_has_steer_angle_heading_rate_contribution();
  steer_angle_heading_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_heading_rate_contribution)
}

// optional double steer_angle_feedback = 14;
bool SimpleMPCDebug::has_steer_angle_feedback() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_feedback() {
  _has_bits_[0] |= 0x00002000u;
}
void SimpleMPCDebug::clear_has_steer_angle_feedback() {
  _has_bits_[0] &= ~0x00002000u;
}
void SimpleMPCDebug::clear_steer_angle_feedback() {
  steer_angle_feedback_ = 0;
  clear_has_steer_angle_feedback();
}
double SimpleMPCDebug::steer_angle_feedback() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_feedback)
  return steer_angle_feedback_;
}
void SimpleMPCDebug::set_steer_angle_feedback(double value) {
  set_has_steer_angle_feedback();
  steer_angle_feedback_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_feedback)
}

// optional double steering_position = 15;
bool SimpleMPCDebug::has_steering_position() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SimpleMPCDebug::set_has_steering_position() {
  _has_bits_[0] |= 0x00004000u;
}
void SimpleMPCDebug::clear_has_steering_position() {
  _has_bits_[0] &= ~0x00004000u;
}
void SimpleMPCDebug::clear_steering_position() {
  steering_position_ = 0;
  clear_has_steering_position();
}
double SimpleMPCDebug::steering_position() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steering_position)
  return steering_position_;
}
void SimpleMPCDebug::set_steering_position(double value) {
  set_has_steering_position();
  steering_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steering_position)
}

// optional double ref_speed = 16;
bool SimpleMPCDebug::has_ref_speed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SimpleMPCDebug::set_has_ref_speed() {
  _has_bits_[0] |= 0x00008000u;
}
void SimpleMPCDebug::clear_has_ref_speed() {
  _has_bits_[0] &= ~0x00008000u;
}
void SimpleMPCDebug::clear_ref_speed() {
  ref_speed_ = 0;
  clear_has_ref_speed();
}
double SimpleMPCDebug::ref_speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.ref_speed)
  return ref_speed_;
}
void SimpleMPCDebug::set_ref_speed(double value) {
  set_has_ref_speed();
  ref_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.ref_speed)
}

// optional double steer_angle_limited = 17;
bool SimpleMPCDebug::has_steer_angle_limited() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SimpleMPCDebug::set_has_steer_angle_limited() {
  _has_bits_[0] |= 0x00010000u;
}
void SimpleMPCDebug::clear_has_steer_angle_limited() {
  _has_bits_[0] &= ~0x00010000u;
}
void SimpleMPCDebug::clear_steer_angle_limited() {
  steer_angle_limited_ = 0;
  clear_has_steer_angle_limited();
}
double SimpleMPCDebug::steer_angle_limited() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.steer_angle_limited)
  return steer_angle_limited_;
}
void SimpleMPCDebug::set_steer_angle_limited(double value) {
  set_has_steer_angle_limited();
  steer_angle_limited_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.steer_angle_limited)
}

// optional double station_reference = 18;
bool SimpleMPCDebug::has_station_reference() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SimpleMPCDebug::set_has_station_reference() {
  _has_bits_[0] |= 0x00020000u;
}
void SimpleMPCDebug::clear_has_station_reference() {
  _has_bits_[0] &= ~0x00020000u;
}
void SimpleMPCDebug::clear_station_reference() {
  station_reference_ = 0;
  clear_has_station_reference();
}
double SimpleMPCDebug::station_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.station_reference)
  return station_reference_;
}
void SimpleMPCDebug::set_station_reference(double value) {
  set_has_station_reference();
  station_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.station_reference)
}

// optional double station_error = 19;
bool SimpleMPCDebug::has_station_error() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SimpleMPCDebug::set_has_station_error() {
  _has_bits_[0] |= 0x00040000u;
}
void SimpleMPCDebug::clear_has_station_error() {
  _has_bits_[0] &= ~0x00040000u;
}
void SimpleMPCDebug::clear_station_error() {
  station_error_ = 0;
  clear_has_station_error();
}
double SimpleMPCDebug::station_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.station_error)
  return station_error_;
}
void SimpleMPCDebug::set_station_error(double value) {
  set_has_station_error();
  station_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.station_error)
}

// optional double speed_reference = 20;
bool SimpleMPCDebug::has_speed_reference() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SimpleMPCDebug::set_has_speed_reference() {
  _has_bits_[0] |= 0x00080000u;
}
void SimpleMPCDebug::clear_has_speed_reference() {
  _has_bits_[0] &= ~0x00080000u;
}
void SimpleMPCDebug::clear_speed_reference() {
  speed_reference_ = 0;
  clear_has_speed_reference();
}
double SimpleMPCDebug::speed_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.speed_reference)
  return speed_reference_;
}
void SimpleMPCDebug::set_speed_reference(double value) {
  set_has_speed_reference();
  speed_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.speed_reference)
}

// optional double speed_error = 21;
bool SimpleMPCDebug::has_speed_error() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SimpleMPCDebug::set_has_speed_error() {
  _has_bits_[0] |= 0x00100000u;
}
void SimpleMPCDebug::clear_has_speed_error() {
  _has_bits_[0] &= ~0x00100000u;
}
void SimpleMPCDebug::clear_speed_error() {
  speed_error_ = 0;
  clear_has_speed_error();
}
double SimpleMPCDebug::speed_error() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.speed_error)
  return speed_error_;
}
void SimpleMPCDebug::set_speed_error(double value) {
  set_has_speed_error();
  speed_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.speed_error)
}

// optional double acceleration_reference = 22;
bool SimpleMPCDebug::has_acceleration_reference() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SimpleMPCDebug::set_has_acceleration_reference() {
  _has_bits_[0] |= 0x00200000u;
}
void SimpleMPCDebug::clear_has_acceleration_reference() {
  _has_bits_[0] &= ~0x00200000u;
}
void SimpleMPCDebug::clear_acceleration_reference() {
  acceleration_reference_ = 0;
  clear_has_acceleration_reference();
}
double SimpleMPCDebug::acceleration_reference() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.acceleration_reference)
  return acceleration_reference_;
}
void SimpleMPCDebug::set_acceleration_reference(double value) {
  set_has_acceleration_reference();
  acceleration_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.acceleration_reference)
}

// optional bool is_full_stop = 23;
bool SimpleMPCDebug::has_is_full_stop() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void SimpleMPCDebug::set_has_is_full_stop() {
  _has_bits_[0] |= 0x01000000u;
}
void SimpleMPCDebug::clear_has_is_full_stop() {
  _has_bits_[0] &= ~0x01000000u;
}
void SimpleMPCDebug::clear_is_full_stop() {
  is_full_stop_ = false;
  clear_has_is_full_stop();
}
bool SimpleMPCDebug::is_full_stop() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.is_full_stop)
  return is_full_stop_;
}
void SimpleMPCDebug::set_is_full_stop(bool value) {
  set_has_is_full_stop();
  is_full_stop_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.is_full_stop)
}

// optional double station_feedback = 24;
bool SimpleMPCDebug::has_station_feedback() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SimpleMPCDebug::set_has_station_feedback() {
  _has_bits_[0] |= 0x00400000u;
}
void SimpleMPCDebug::clear_has_station_feedback() {
  _has_bits_[0] &= ~0x00400000u;
}
void SimpleMPCDebug::clear_station_feedback() {
  station_feedback_ = 0;
  clear_has_station_feedback();
}
double SimpleMPCDebug::station_feedback() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.station_feedback)
  return station_feedback_;
}
void SimpleMPCDebug::set_station_feedback(double value) {
  set_has_station_feedback();
  station_feedback_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.station_feedback)
}

// optional double speed_feedback = 25;
bool SimpleMPCDebug::has_speed_feedback() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SimpleMPCDebug::set_has_speed_feedback() {
  _has_bits_[0] |= 0x00800000u;
}
void SimpleMPCDebug::clear_has_speed_feedback() {
  _has_bits_[0] &= ~0x00800000u;
}
void SimpleMPCDebug::clear_speed_feedback() {
  speed_feedback_ = 0;
  clear_has_speed_feedback();
}
double SimpleMPCDebug::speed_feedback() const {
  // @@protoc_insertion_point(field_get:apollo.control.SimpleMPCDebug.speed_feedback)
  return speed_feedback_;
}
void SimpleMPCDebug::set_speed_feedback(double value) {
  set_has_speed_feedback();
  speed_feedback_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.SimpleMPCDebug.speed_feedback)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputDebug::kLocalizationHeaderFieldNumber;
const int InputDebug::kCanbusHeaderFieldNumber;
const int InputDebug::kTrajectoryHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputDebug::InputDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.InputDebug)
}
InputDebug::InputDebug(const InputDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_localization_header()) {
    localization_header_ = new ::apollo::common::Header(*from.localization_header_);
  } else {
    localization_header_ = NULL;
  }
  if (from.has_canbus_header()) {
    canbus_header_ = new ::apollo::common::Header(*from.canbus_header_);
  } else {
    canbus_header_ = NULL;
  }
  if (from.has_trajectory_header()) {
    trajectory_header_ = new ::apollo::common::Header(*from.trajectory_header_);
  } else {
    trajectory_header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.control.InputDebug)
}

void InputDebug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&localization_header_, 0, reinterpret_cast<char*>(&trajectory_header_) -
    reinterpret_cast<char*>(&localization_header_) + sizeof(trajectory_header_));
}

InputDebug::~InputDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.InputDebug)
  SharedDtor();
}

void InputDebug::SharedDtor() {
  if (this != internal_default_instance()) {
    delete localization_header_;
  }
  if (this != internal_default_instance()) {
    delete canbus_header_;
  }
  if (this != internal_default_instance()) {
    delete trajectory_header_;
  }
}

void InputDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputDebug::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InputDebug& InputDebug::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

InputDebug* InputDebug::New(::google::protobuf::Arena* arena) const {
  InputDebug* n = new InputDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.InputDebug)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_localization_header()) {
      GOOGLE_DCHECK(localization_header_ != NULL);
      localization_header_->::apollo::common::Header::Clear();
    }
    if (has_canbus_header()) {
      GOOGLE_DCHECK(canbus_header_ != NULL);
      canbus_header_->::apollo::common::Header::Clear();
    }
    if (has_trajectory_header()) {
      GOOGLE_DCHECK(trajectory_header_ != NULL);
      trajectory_header_->::apollo::common::Header::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InputDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.InputDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header localization_header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localization_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Header canbus_header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_canbus_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Header trajectory_header = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.InputDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.InputDebug)
  return false;
#undef DO_
}

void InputDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.InputDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header localization_header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->localization_header_, output);
  }

  // optional .apollo.common.Header canbus_header = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->canbus_header_, output);
  }

  // optional .apollo.common.Header trajectory_header = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->trajectory_header_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.InputDebug)
}

::google::protobuf::uint8* InputDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.InputDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header localization_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->localization_header_, deterministic, target);
  }

  // optional .apollo.common.Header canbus_header = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->canbus_header_, deterministic, target);
  }

  // optional .apollo.common.Header trajectory_header = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->trajectory_header_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.InputDebug)
  return target;
}

size_t InputDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.InputDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.common.Header localization_header = 1;
    if (has_localization_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->localization_header_);
    }

    // optional .apollo.common.Header canbus_header = 2;
    if (has_canbus_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->canbus_header_);
    }

    // optional .apollo.common.Header trajectory_header = 3;
    if (has_trajectory_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trajectory_header_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.InputDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const InputDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.InputDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.InputDebug)
    MergeFrom(*source);
  }
}

void InputDebug::MergeFrom(const InputDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.InputDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_localization_header()->::apollo::common::Header::MergeFrom(from.localization_header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_canbus_header()->::apollo::common::Header::MergeFrom(from.canbus_header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_trajectory_header()->::apollo::common::Header::MergeFrom(from.trajectory_header());
    }
  }
}

void InputDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.InputDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputDebug::CopyFrom(const InputDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.InputDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDebug::IsInitialized() const {
  return true;
}

void InputDebug::Swap(InputDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputDebug::InternalSwap(InputDebug* other) {
  std::swap(localization_header_, other->localization_header_);
  std::swap(canbus_header_, other->canbus_header_);
  std::swap(trajectory_header_, other->trajectory_header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputDebug::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputDebug

// optional .apollo.common.Header localization_header = 1;
bool InputDebug::has_localization_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InputDebug::set_has_localization_header() {
  _has_bits_[0] |= 0x00000001u;
}
void InputDebug::clear_has_localization_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void InputDebug::clear_localization_header() {
  if (localization_header_ != NULL) localization_header_->::apollo::common::Header::Clear();
  clear_has_localization_header();
}
const ::apollo::common::Header& InputDebug::localization_header() const {
  // @@protoc_insertion_point(field_get:apollo.control.InputDebug.localization_header)
  return localization_header_ != NULL ? *localization_header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* InputDebug::mutable_localization_header() {
  set_has_localization_header();
  if (localization_header_ == NULL) {
    localization_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.InputDebug.localization_header)
  return localization_header_;
}
::apollo::common::Header* InputDebug::release_localization_header() {
  // @@protoc_insertion_point(field_release:apollo.control.InputDebug.localization_header)
  clear_has_localization_header();
  ::apollo::common::Header* temp = localization_header_;
  localization_header_ = NULL;
  return temp;
}
void InputDebug::set_allocated_localization_header(::apollo::common::Header* localization_header) {
  delete localization_header_;
  localization_header_ = localization_header;
  if (localization_header) {
    set_has_localization_header();
  } else {
    clear_has_localization_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.InputDebug.localization_header)
}

// optional .apollo.common.Header canbus_header = 2;
bool InputDebug::has_canbus_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InputDebug::set_has_canbus_header() {
  _has_bits_[0] |= 0x00000002u;
}
void InputDebug::clear_has_canbus_header() {
  _has_bits_[0] &= ~0x00000002u;
}
void InputDebug::clear_canbus_header() {
  if (canbus_header_ != NULL) canbus_header_->::apollo::common::Header::Clear();
  clear_has_canbus_header();
}
const ::apollo::common::Header& InputDebug::canbus_header() const {
  // @@protoc_insertion_point(field_get:apollo.control.InputDebug.canbus_header)
  return canbus_header_ != NULL ? *canbus_header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* InputDebug::mutable_canbus_header() {
  set_has_canbus_header();
  if (canbus_header_ == NULL) {
    canbus_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.InputDebug.canbus_header)
  return canbus_header_;
}
::apollo::common::Header* InputDebug::release_canbus_header() {
  // @@protoc_insertion_point(field_release:apollo.control.InputDebug.canbus_header)
  clear_has_canbus_header();
  ::apollo::common::Header* temp = canbus_header_;
  canbus_header_ = NULL;
  return temp;
}
void InputDebug::set_allocated_canbus_header(::apollo::common::Header* canbus_header) {
  delete canbus_header_;
  canbus_header_ = canbus_header;
  if (canbus_header) {
    set_has_canbus_header();
  } else {
    clear_has_canbus_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.InputDebug.canbus_header)
}

// optional .apollo.common.Header trajectory_header = 3;
bool InputDebug::has_trajectory_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InputDebug::set_has_trajectory_header() {
  _has_bits_[0] |= 0x00000004u;
}
void InputDebug::clear_has_trajectory_header() {
  _has_bits_[0] &= ~0x00000004u;
}
void InputDebug::clear_trajectory_header() {
  if (trajectory_header_ != NULL) trajectory_header_->::apollo::common::Header::Clear();
  clear_has_trajectory_header();
}
const ::apollo::common::Header& InputDebug::trajectory_header() const {
  // @@protoc_insertion_point(field_get:apollo.control.InputDebug.trajectory_header)
  return trajectory_header_ != NULL ? *trajectory_header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* InputDebug::mutable_trajectory_header() {
  set_has_trajectory_header();
  if (trajectory_header_ == NULL) {
    trajectory_header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.InputDebug.trajectory_header)
  return trajectory_header_;
}
::apollo::common::Header* InputDebug::release_trajectory_header() {
  // @@protoc_insertion_point(field_release:apollo.control.InputDebug.trajectory_header)
  clear_has_trajectory_header();
  ::apollo::common::Header* temp = trajectory_header_;
  trajectory_header_ = NULL;
  return temp;
}
void InputDebug::set_allocated_trajectory_header(::apollo::common::Header* trajectory_header) {
  delete trajectory_header_;
  trajectory_header_ = trajectory_header;
  if (trajectory_header) {
    set_has_trajectory_header();
  } else {
    clear_has_trajectory_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.InputDebug.trajectory_header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug::kSimpleLonDebugFieldNumber;
const int Debug::kSimpleLatDebugFieldNumber;
const int Debug::kInputDebugFieldNumber;
const int Debug::kSimpleMpcDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug::Debug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.Debug)
}
Debug::Debug(const Debug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_simple_lon_debug()) {
    simple_lon_debug_ = new ::apollo::control::SimpleLongitudinalDebug(*from.simple_lon_debug_);
  } else {
    simple_lon_debug_ = NULL;
  }
  if (from.has_simple_lat_debug()) {
    simple_lat_debug_ = new ::apollo::control::SimpleLateralDebug(*from.simple_lat_debug_);
  } else {
    simple_lat_debug_ = NULL;
  }
  if (from.has_input_debug()) {
    input_debug_ = new ::apollo::control::InputDebug(*from.input_debug_);
  } else {
    input_debug_ = NULL;
  }
  if (from.has_simple_mpc_debug()) {
    simple_mpc_debug_ = new ::apollo::control::SimpleMPCDebug(*from.simple_mpc_debug_);
  } else {
    simple_mpc_debug_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.control.Debug)
}

void Debug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&simple_lon_debug_, 0, reinterpret_cast<char*>(&simple_mpc_debug_) -
    reinterpret_cast<char*>(&simple_lon_debug_) + sizeof(simple_mpc_debug_));
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:apollo.control.Debug)
  SharedDtor();
}

void Debug::SharedDtor() {
  if (this != internal_default_instance()) {
    delete simple_lon_debug_;
  }
  if (this != internal_default_instance()) {
    delete simple_lat_debug_;
  }
  if (this != internal_default_instance()) {
    delete input_debug_;
  }
  if (this != internal_default_instance()) {
    delete simple_mpc_debug_;
  }
}

void Debug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug& Debug::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

Debug* Debug::New(::google::protobuf::Arena* arena) const {
  Debug* n = new Debug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.Debug)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_simple_lon_debug()) {
      GOOGLE_DCHECK(simple_lon_debug_ != NULL);
      simple_lon_debug_->::apollo::control::SimpleLongitudinalDebug::Clear();
    }
    if (has_simple_lat_debug()) {
      GOOGLE_DCHECK(simple_lat_debug_ != NULL);
      simple_lat_debug_->::apollo::control::SimpleLateralDebug::Clear();
    }
    if (has_input_debug()) {
      GOOGLE_DCHECK(input_debug_ != NULL);
      input_debug_->::apollo::control::InputDebug::Clear();
    }
    if (has_simple_mpc_debug()) {
      GOOGLE_DCHECK(simple_mpc_debug_ != NULL);
      simple_mpc_debug_->::apollo::control::SimpleMPCDebug::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.Debug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_lon_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_lat_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.InputDebug input_debug = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_mpc_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.Debug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.Debug)
  return false;
#undef DO_
}

void Debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.Debug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->simple_lon_debug_, output);
  }

  // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->simple_lat_debug_, output);
  }

  // optional .apollo.control.InputDebug input_debug = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->input_debug_, output);
  }

  // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->simple_mpc_debug_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.Debug)
}

::google::protobuf::uint8* Debug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.Debug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->simple_lon_debug_, deterministic, target);
  }

  // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->simple_lat_debug_, deterministic, target);
  }

  // optional .apollo.control.InputDebug input_debug = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->input_debug_, deterministic, target);
  }

  // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->simple_mpc_debug_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.Debug)
  return target;
}

size_t Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.Debug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
    if (has_simple_lon_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->simple_lon_debug_);
    }

    // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
    if (has_simple_lat_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->simple_lat_debug_);
    }

    // optional .apollo.control.InputDebug input_debug = 3;
    if (has_input_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->input_debug_);
    }

    // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
    if (has_simple_mpc_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->simple_mpc_debug_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.Debug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.Debug)
    MergeFrom(*source);
  }
}

void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_simple_lon_debug()->::apollo::control::SimpleLongitudinalDebug::MergeFrom(from.simple_lon_debug());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_simple_lat_debug()->::apollo::control::SimpleLateralDebug::MergeFrom(from.simple_lat_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_input_debug()->::apollo::control::InputDebug::MergeFrom(from.input_debug());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_simple_mpc_debug()->::apollo::control::SimpleMPCDebug::MergeFrom(from.simple_mpc_debug());
    }
  }
}

void Debug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {
  return true;
}

void Debug::Swap(Debug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug::InternalSwap(Debug* other) {
  std::swap(simple_lon_debug_, other->simple_lon_debug_);
  std::swap(simple_lat_debug_, other->simple_lat_debug_);
  std::swap(input_debug_, other->input_debug_);
  std::swap(simple_mpc_debug_, other->simple_mpc_debug_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug

// optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
bool Debug::has_simple_lon_debug() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Debug::set_has_simple_lon_debug() {
  _has_bits_[0] |= 0x00000001u;
}
void Debug::clear_has_simple_lon_debug() {
  _has_bits_[0] &= ~0x00000001u;
}
void Debug::clear_simple_lon_debug() {
  if (simple_lon_debug_ != NULL) simple_lon_debug_->::apollo::control::SimpleLongitudinalDebug::Clear();
  clear_has_simple_lon_debug();
}
const ::apollo::control::SimpleLongitudinalDebug& Debug::simple_lon_debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.Debug.simple_lon_debug)
  return simple_lon_debug_ != NULL ? *simple_lon_debug_
                         : *::apollo::control::SimpleLongitudinalDebug::internal_default_instance();
}
::apollo::control::SimpleLongitudinalDebug* Debug::mutable_simple_lon_debug() {
  set_has_simple_lon_debug();
  if (simple_lon_debug_ == NULL) {
    simple_lon_debug_ = new ::apollo::control::SimpleLongitudinalDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.Debug.simple_lon_debug)
  return simple_lon_debug_;
}
::apollo::control::SimpleLongitudinalDebug* Debug::release_simple_lon_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.Debug.simple_lon_debug)
  clear_has_simple_lon_debug();
  ::apollo::control::SimpleLongitudinalDebug* temp = simple_lon_debug_;
  simple_lon_debug_ = NULL;
  return temp;
}
void Debug::set_allocated_simple_lon_debug(::apollo::control::SimpleLongitudinalDebug* simple_lon_debug) {
  delete simple_lon_debug_;
  simple_lon_debug_ = simple_lon_debug;
  if (simple_lon_debug) {
    set_has_simple_lon_debug();
  } else {
    clear_has_simple_lon_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Debug.simple_lon_debug)
}

// optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
bool Debug::has_simple_lat_debug() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Debug::set_has_simple_lat_debug() {
  _has_bits_[0] |= 0x00000002u;
}
void Debug::clear_has_simple_lat_debug() {
  _has_bits_[0] &= ~0x00000002u;
}
void Debug::clear_simple_lat_debug() {
  if (simple_lat_debug_ != NULL) simple_lat_debug_->::apollo::control::SimpleLateralDebug::Clear();
  clear_has_simple_lat_debug();
}
const ::apollo::control::SimpleLateralDebug& Debug::simple_lat_debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.Debug.simple_lat_debug)
  return simple_lat_debug_ != NULL ? *simple_lat_debug_
                         : *::apollo::control::SimpleLateralDebug::internal_default_instance();
}
::apollo::control::SimpleLateralDebug* Debug::mutable_simple_lat_debug() {
  set_has_simple_lat_debug();
  if (simple_lat_debug_ == NULL) {
    simple_lat_debug_ = new ::apollo::control::SimpleLateralDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.Debug.simple_lat_debug)
  return simple_lat_debug_;
}
::apollo::control::SimpleLateralDebug* Debug::release_simple_lat_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.Debug.simple_lat_debug)
  clear_has_simple_lat_debug();
  ::apollo::control::SimpleLateralDebug* temp = simple_lat_debug_;
  simple_lat_debug_ = NULL;
  return temp;
}
void Debug::set_allocated_simple_lat_debug(::apollo::control::SimpleLateralDebug* simple_lat_debug) {
  delete simple_lat_debug_;
  simple_lat_debug_ = simple_lat_debug;
  if (simple_lat_debug) {
    set_has_simple_lat_debug();
  } else {
    clear_has_simple_lat_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Debug.simple_lat_debug)
}

// optional .apollo.control.InputDebug input_debug = 3;
bool Debug::has_input_debug() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Debug::set_has_input_debug() {
  _has_bits_[0] |= 0x00000004u;
}
void Debug::clear_has_input_debug() {
  _has_bits_[0] &= ~0x00000004u;
}
void Debug::clear_input_debug() {
  if (input_debug_ != NULL) input_debug_->::apollo::control::InputDebug::Clear();
  clear_has_input_debug();
}
const ::apollo::control::InputDebug& Debug::input_debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.Debug.input_debug)
  return input_debug_ != NULL ? *input_debug_
                         : *::apollo::control::InputDebug::internal_default_instance();
}
::apollo::control::InputDebug* Debug::mutable_input_debug() {
  set_has_input_debug();
  if (input_debug_ == NULL) {
    input_debug_ = new ::apollo::control::InputDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.Debug.input_debug)
  return input_debug_;
}
::apollo::control::InputDebug* Debug::release_input_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.Debug.input_debug)
  clear_has_input_debug();
  ::apollo::control::InputDebug* temp = input_debug_;
  input_debug_ = NULL;
  return temp;
}
void Debug::set_allocated_input_debug(::apollo::control::InputDebug* input_debug) {
  delete input_debug_;
  input_debug_ = input_debug;
  if (input_debug) {
    set_has_input_debug();
  } else {
    clear_has_input_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Debug.input_debug)
}

// optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
bool Debug::has_simple_mpc_debug() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Debug::set_has_simple_mpc_debug() {
  _has_bits_[0] |= 0x00000008u;
}
void Debug::clear_has_simple_mpc_debug() {
  _has_bits_[0] &= ~0x00000008u;
}
void Debug::clear_simple_mpc_debug() {
  if (simple_mpc_debug_ != NULL) simple_mpc_debug_->::apollo::control::SimpleMPCDebug::Clear();
  clear_has_simple_mpc_debug();
}
const ::apollo::control::SimpleMPCDebug& Debug::simple_mpc_debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.Debug.simple_mpc_debug)
  return simple_mpc_debug_ != NULL ? *simple_mpc_debug_
                         : *::apollo::control::SimpleMPCDebug::internal_default_instance();
}
::apollo::control::SimpleMPCDebug* Debug::mutable_simple_mpc_debug() {
  set_has_simple_mpc_debug();
  if (simple_mpc_debug_ == NULL) {
    simple_mpc_debug_ = new ::apollo::control::SimpleMPCDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.Debug.simple_mpc_debug)
  return simple_mpc_debug_;
}
::apollo::control::SimpleMPCDebug* Debug::release_simple_mpc_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.Debug.simple_mpc_debug)
  clear_has_simple_mpc_debug();
  ::apollo::control::SimpleMPCDebug* temp = simple_mpc_debug_;
  simple_mpc_debug_ = NULL;
  return temp;
}
void Debug::set_allocated_simple_mpc_debug(::apollo::control::SimpleMPCDebug* simple_mpc_debug) {
  delete simple_mpc_debug_;
  simple_mpc_debug_ = simple_mpc_debug;
  if (simple_mpc_debug) {
    set_has_simple_mpc_debug();
  } else {
    clear_has_simple_mpc_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Debug.simple_mpc_debug)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
