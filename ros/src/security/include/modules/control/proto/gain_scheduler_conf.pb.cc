// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/gain_scheduler_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/control/proto/gain_scheduler_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {
class GainSchedulerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GainScheduler> {
} _GainScheduler_default_instance_;
class GainSchedulerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GainSchedulerInfo> {
} _GainSchedulerInfo_default_instance_;

namespace protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainScheduler, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainScheduler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainScheduler, scheduler_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSchedulerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSchedulerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSchedulerInfo, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSchedulerInfo, ratio_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(GainScheduler)},
  { 7, 14, sizeof(GainSchedulerInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GainScheduler_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GainSchedulerInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/control/proto/gain_scheduler_conf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _GainScheduler_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _GainSchedulerInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _GainScheduler_default_instance_.DefaultConstruct();
  _GainSchedulerInfo_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n/modules/control/proto/gain_scheduler_c"
      "onf.proto\022\016apollo.control\"E\n\rGainSchedul"
      "er\0224\n\tscheduler\030\001 \003(\0132!.apollo.control.G"
      "ainSchedulerInfo\"1\n\021GainSchedulerInfo\022\r\n"
      "\005speed\030\001 \001(\001\022\r\n\005ratio\030\002 \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/control/proto/gain_scheduler_conf.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GainScheduler::kSchedulerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GainScheduler::GainScheduler()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.GainScheduler)
}
GainScheduler::GainScheduler(const GainScheduler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      scheduler_(from.scheduler_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.control.GainScheduler)
}

void GainScheduler::SharedCtor() {
  _cached_size_ = 0;
}

GainScheduler::~GainScheduler() {
  // @@protoc_insertion_point(destructor:apollo.control.GainScheduler)
  SharedDtor();
}

void GainScheduler::SharedDtor() {
}

void GainScheduler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GainScheduler::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GainScheduler& GainScheduler::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

GainScheduler* GainScheduler::New(::google::protobuf::Arena* arena) const {
  GainScheduler* n = new GainScheduler;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GainScheduler::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.GainScheduler)
  scheduler_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GainScheduler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.GainScheduler)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.control.GainSchedulerInfo scheduler = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.GainScheduler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.GainScheduler)
  return false;
#undef DO_
}

void GainScheduler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.GainScheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.control.GainSchedulerInfo scheduler = 1;
  for (unsigned int i = 0, n = this->scheduler_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scheduler(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.GainScheduler)
}

::google::protobuf::uint8* GainScheduler::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.GainScheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.control.GainSchedulerInfo scheduler = 1;
  for (unsigned int i = 0, n = this->scheduler_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->scheduler(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.GainScheduler)
  return target;
}

size_t GainScheduler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.GainScheduler)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.control.GainSchedulerInfo scheduler = 1;
  {
    unsigned int count = this->scheduler_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scheduler(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GainScheduler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.GainScheduler)
  GOOGLE_DCHECK_NE(&from, this);
  const GainScheduler* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GainScheduler>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.GainScheduler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.GainScheduler)
    MergeFrom(*source);
  }
}

void GainScheduler::MergeFrom(const GainScheduler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.GainScheduler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scheduler_.MergeFrom(from.scheduler_);
}

void GainScheduler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.GainScheduler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainScheduler::CopyFrom(const GainScheduler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.GainScheduler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainScheduler::IsInitialized() const {
  return true;
}

void GainScheduler::Swap(GainScheduler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GainScheduler::InternalSwap(GainScheduler* other) {
  scheduler_.InternalSwap(&other->scheduler_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GainScheduler::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GainScheduler

// repeated .apollo.control.GainSchedulerInfo scheduler = 1;
int GainScheduler::scheduler_size() const {
  return scheduler_.size();
}
void GainScheduler::clear_scheduler() {
  scheduler_.Clear();
}
const ::apollo::control::GainSchedulerInfo& GainScheduler::scheduler(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.GainScheduler.scheduler)
  return scheduler_.Get(index);
}
::apollo::control::GainSchedulerInfo* GainScheduler::mutable_scheduler(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.control.GainScheduler.scheduler)
  return scheduler_.Mutable(index);
}
::apollo::control::GainSchedulerInfo* GainScheduler::add_scheduler() {
  // @@protoc_insertion_point(field_add:apollo.control.GainScheduler.scheduler)
  return scheduler_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::control::GainSchedulerInfo >*
GainScheduler::mutable_scheduler() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.GainScheduler.scheduler)
  return &scheduler_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::control::GainSchedulerInfo >&
GainScheduler::scheduler() const {
  // @@protoc_insertion_point(field_list:apollo.control.GainScheduler.scheduler)
  return scheduler_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GainSchedulerInfo::kSpeedFieldNumber;
const int GainSchedulerInfo::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GainSchedulerInfo::GainSchedulerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.GainSchedulerInfo)
}
GainSchedulerInfo::GainSchedulerInfo(const GainSchedulerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&speed_) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.GainSchedulerInfo)
}

void GainSchedulerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&speed_, 0, reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&speed_) + sizeof(ratio_));
}

GainSchedulerInfo::~GainSchedulerInfo() {
  // @@protoc_insertion_point(destructor:apollo.control.GainSchedulerInfo)
  SharedDtor();
}

void GainSchedulerInfo::SharedDtor() {
}

void GainSchedulerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GainSchedulerInfo::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GainSchedulerInfo& GainSchedulerInfo::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

GainSchedulerInfo* GainSchedulerInfo::New(::google::protobuf::Arena* arena) const {
  GainSchedulerInfo* n = new GainSchedulerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GainSchedulerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.GainSchedulerInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&speed_, 0, reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&speed_) + sizeof(ratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GainSchedulerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.GainSchedulerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ratio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.GainSchedulerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.GainSchedulerInfo)
  return false;
#undef DO_
}

void GainSchedulerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.GainSchedulerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->speed(), output);
  }

  // optional double ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.GainSchedulerInfo)
}

::google::protobuf::uint8* GainSchedulerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.GainSchedulerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->speed(), target);
  }

  // optional double ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.GainSchedulerInfo)
  return target;
}

size_t GainSchedulerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.GainSchedulerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double speed = 1;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double ratio = 2;
    if (has_ratio()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GainSchedulerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.GainSchedulerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GainSchedulerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GainSchedulerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.GainSchedulerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.GainSchedulerInfo)
    MergeFrom(*source);
  }
}

void GainSchedulerInfo::MergeFrom(const GainSchedulerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.GainSchedulerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      ratio_ = from.ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GainSchedulerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.GainSchedulerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainSchedulerInfo::CopyFrom(const GainSchedulerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.GainSchedulerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainSchedulerInfo::IsInitialized() const {
  return true;
}

void GainSchedulerInfo::Swap(GainSchedulerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GainSchedulerInfo::InternalSwap(GainSchedulerInfo* other) {
  std::swap(speed_, other->speed_);
  std::swap(ratio_, other->ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GainSchedulerInfo::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GainSchedulerInfo

// optional double speed = 1;
bool GainSchedulerInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GainSchedulerInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
void GainSchedulerInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
void GainSchedulerInfo::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
double GainSchedulerInfo::speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.GainSchedulerInfo.speed)
  return speed_;
}
void GainSchedulerInfo::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.GainSchedulerInfo.speed)
}

// optional double ratio = 2;
bool GainSchedulerInfo::has_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GainSchedulerInfo::set_has_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
void GainSchedulerInfo::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
void GainSchedulerInfo::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
double GainSchedulerInfo::ratio() const {
  // @@protoc_insertion_point(field_get:apollo.control.GainSchedulerInfo.ratio)
  return ratio_;
}
void GainSchedulerInfo::set_ratio(double value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.GainSchedulerInfo.ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
