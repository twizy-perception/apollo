// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/mpc_controller_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/control/proto/mpc_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {
class MPCControllerConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MPCControllerConf> {
} _MPCControllerConf_default_instance_;

namespace protobuf_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, cf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, cr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, mass_fl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, mass_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, mass_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, mass_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, eps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, matrix_q_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, matrix_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, cutoff_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, mean_filter_window_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, max_iteration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, max_lateral_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, standstill_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, throttle_deadzone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, brake_deadzone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, lat_err_gain_scheduler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, heading_err_gain_scheduler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, steer_weight_gain_scheduler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, feedforwardterm_gain_scheduler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPCControllerConf, calibration_table_),
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  ~0u,
  ~0u,
  13,
  14,
  19,
  15,
  16,
  17,
  18,
  0,
  1,
  2,
  3,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 27, sizeof(MPCControllerConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MPCControllerConf_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/control/proto/mpc_controller_conf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _MPCControllerConf_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::control::calibrationtable::protobuf_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto::InitDefaults();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::InitDefaults();
  _MPCControllerConf_default_instance_.DefaultConstruct();
  _MPCControllerConf_default_instance_.get_mutable()->lat_err_gain_scheduler_ = const_cast< ::apollo::control::GainScheduler*>(
      ::apollo::control::GainScheduler::internal_default_instance());
  _MPCControllerConf_default_instance_.get_mutable()->heading_err_gain_scheduler_ = const_cast< ::apollo::control::GainScheduler*>(
      ::apollo::control::GainScheduler::internal_default_instance());
  _MPCControllerConf_default_instance_.get_mutable()->steer_weight_gain_scheduler_ = const_cast< ::apollo::control::GainScheduler*>(
      ::apollo::control::GainScheduler::internal_default_instance());
  _MPCControllerConf_default_instance_.get_mutable()->feedforwardterm_gain_scheduler_ = const_cast< ::apollo::control::GainScheduler*>(
      ::apollo::control::GainScheduler::internal_default_instance());
  _MPCControllerConf_default_instance_.get_mutable()->calibration_table_ = const_cast< ::apollo::control::calibrationtable::ControlCalibrationTable*>(
      ::apollo::control::calibrationtable::ControlCalibrationTable::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n/modules/control/proto/mpc_controller_c"
      "onf.proto\022\016apollo.control\032-modules/contr"
      "ol/proto/calibration_table.proto\032/module"
      "s/control/proto/gain_scheduler_conf.prot"
      "o\"\321\005\n\021MPCControllerConf\022\n\n\002ts\030\001 \001(\001\022\n\n\002c"
      "f\030\002 \001(\001\022\n\n\002cr\030\003 \001(\001\022\017\n\007mass_fl\030\004 \001(\005\022\017\n\007"
      "mass_fr\030\005 \001(\005\022\017\n\007mass_rl\030\006 \001(\005\022\017\n\007mass_r"
      "r\030\007 \001(\005\022\013\n\003eps\030\010 \001(\001\022\020\n\010matrix_q\030\t \003(\001\022\020"
      "\n\010matrix_r\030\n \003(\001\022\023\n\013cutoff_freq\030\013 \001(\005\022\037\n"
      "\027mean_filter_window_size\030\014 \001(\005\022\025\n\rmax_it"
      "eration\030\r \001(\005\022 \n\030max_lateral_acceleratio"
      "n\030\016 \001(\001\022\037\n\027standstill_acceleration\030\017 \001(\001"
      "\022\031\n\021throttle_deadzone\030\020 \001(\001\022\026\n\016brake_dea"
      "dzone\030\021 \001(\001\022=\n\026lat_err_gain_scheduler\030\022 "
      "\001(\0132\035.apollo.control.GainScheduler\022A\n\032he"
      "ading_err_gain_scheduler\030\023 \001(\0132\035.apollo."
      "control.GainScheduler\022B\n\033steer_weight_ga"
      "in_scheduler\030\024 \001(\0132\035.apollo.control.Gain"
      "Scheduler\022E\n\036feedforwardterm_gain_schedu"
      "ler\030\025 \001(\0132\035.apollo.control.GainScheduler"
      "\022S\n\021calibration_table\030\026 \001(\01328.apollo.con"
      "trol.calibrationtable.ControlCalibration"
      "Table"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 885);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/control/proto/mpc_controller_conf.proto", &protobuf_RegisterTypes);
  ::apollo::control::calibrationtable::protobuf_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto::AddDescriptors();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MPCControllerConf::kTsFieldNumber;
const int MPCControllerConf::kCfFieldNumber;
const int MPCControllerConf::kCrFieldNumber;
const int MPCControllerConf::kMassFlFieldNumber;
const int MPCControllerConf::kMassFrFieldNumber;
const int MPCControllerConf::kMassRlFieldNumber;
const int MPCControllerConf::kMassRrFieldNumber;
const int MPCControllerConf::kEpsFieldNumber;
const int MPCControllerConf::kMatrixQFieldNumber;
const int MPCControllerConf::kMatrixRFieldNumber;
const int MPCControllerConf::kCutoffFreqFieldNumber;
const int MPCControllerConf::kMeanFilterWindowSizeFieldNumber;
const int MPCControllerConf::kMaxIterationFieldNumber;
const int MPCControllerConf::kMaxLateralAccelerationFieldNumber;
const int MPCControllerConf::kStandstillAccelerationFieldNumber;
const int MPCControllerConf::kThrottleDeadzoneFieldNumber;
const int MPCControllerConf::kBrakeDeadzoneFieldNumber;
const int MPCControllerConf::kLatErrGainSchedulerFieldNumber;
const int MPCControllerConf::kHeadingErrGainSchedulerFieldNumber;
const int MPCControllerConf::kSteerWeightGainSchedulerFieldNumber;
const int MPCControllerConf::kFeedforwardtermGainSchedulerFieldNumber;
const int MPCControllerConf::kCalibrationTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MPCControllerConf::MPCControllerConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.MPCControllerConf)
}
MPCControllerConf::MPCControllerConf(const MPCControllerConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      matrix_q_(from.matrix_q_),
      matrix_r_(from.matrix_r_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lat_err_gain_scheduler()) {
    lat_err_gain_scheduler_ = new ::apollo::control::GainScheduler(*from.lat_err_gain_scheduler_);
  } else {
    lat_err_gain_scheduler_ = NULL;
  }
  if (from.has_heading_err_gain_scheduler()) {
    heading_err_gain_scheduler_ = new ::apollo::control::GainScheduler(*from.heading_err_gain_scheduler_);
  } else {
    heading_err_gain_scheduler_ = NULL;
  }
  if (from.has_steer_weight_gain_scheduler()) {
    steer_weight_gain_scheduler_ = new ::apollo::control::GainScheduler(*from.steer_weight_gain_scheduler_);
  } else {
    steer_weight_gain_scheduler_ = NULL;
  }
  if (from.has_feedforwardterm_gain_scheduler()) {
    feedforwardterm_gain_scheduler_ = new ::apollo::control::GainScheduler(*from.feedforwardterm_gain_scheduler_);
  } else {
    feedforwardterm_gain_scheduler_ = NULL;
  }
  if (from.has_calibration_table()) {
    calibration_table_ = new ::apollo::control::calibrationtable::ControlCalibrationTable(*from.calibration_table_);
  } else {
    calibration_table_ = NULL;
  }
  ::memcpy(&ts_, &from.ts_,
    reinterpret_cast<char*>(&max_iteration_) -
    reinterpret_cast<char*>(&ts_) + sizeof(max_iteration_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.MPCControllerConf)
}

void MPCControllerConf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lat_err_gain_scheduler_, 0, reinterpret_cast<char*>(&max_iteration_) -
    reinterpret_cast<char*>(&lat_err_gain_scheduler_) + sizeof(max_iteration_));
}

MPCControllerConf::~MPCControllerConf() {
  // @@protoc_insertion_point(destructor:apollo.control.MPCControllerConf)
  SharedDtor();
}

void MPCControllerConf::SharedDtor() {
  if (this != internal_default_instance()) {
    delete lat_err_gain_scheduler_;
  }
  if (this != internal_default_instance()) {
    delete heading_err_gain_scheduler_;
  }
  if (this != internal_default_instance()) {
    delete steer_weight_gain_scheduler_;
  }
  if (this != internal_default_instance()) {
    delete feedforwardterm_gain_scheduler_;
  }
  if (this != internal_default_instance()) {
    delete calibration_table_;
  }
}

void MPCControllerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MPCControllerConf::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MPCControllerConf& MPCControllerConf::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

MPCControllerConf* MPCControllerConf::New(::google::protobuf::Arena* arena) const {
  MPCControllerConf* n = new MPCControllerConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MPCControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.MPCControllerConf)
  matrix_q_.Clear();
  matrix_r_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_lat_err_gain_scheduler()) {
      GOOGLE_DCHECK(lat_err_gain_scheduler_ != NULL);
      lat_err_gain_scheduler_->::apollo::control::GainScheduler::Clear();
    }
    if (has_heading_err_gain_scheduler()) {
      GOOGLE_DCHECK(heading_err_gain_scheduler_ != NULL);
      heading_err_gain_scheduler_->::apollo::control::GainScheduler::Clear();
    }
    if (has_steer_weight_gain_scheduler()) {
      GOOGLE_DCHECK(steer_weight_gain_scheduler_ != NULL);
      steer_weight_gain_scheduler_->::apollo::control::GainScheduler::Clear();
    }
    if (has_feedforwardterm_gain_scheduler()) {
      GOOGLE_DCHECK(feedforwardterm_gain_scheduler_ != NULL);
      feedforwardterm_gain_scheduler_->::apollo::control::GainScheduler::Clear();
    }
    if (has_calibration_table()) {
      GOOGLE_DCHECK(calibration_table_ != NULL);
      calibration_table_->::apollo::control::calibrationtable::ControlCalibrationTable::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&ts_, 0, reinterpret_cast<char*>(&cr_) -
      reinterpret_cast<char*>(&ts_) + sizeof(cr_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&mass_fl_, 0, reinterpret_cast<char*>(&max_lateral_acceleration_) -
      reinterpret_cast<char*>(&mass_fl_) + sizeof(max_lateral_acceleration_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&standstill_acceleration_, 0, reinterpret_cast<char*>(&max_iteration_) -
      reinterpret_cast<char*>(&standstill_acceleration_) + sizeof(max_iteration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MPCControllerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.MPCControllerConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_cf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_cr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mass_fl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_mass_fl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mass_fr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_mass_fr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mass_rl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_mass_rl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mass_rr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_mass_rr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double eps = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double matrix_q = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 73u, input, this->mutable_matrix_q())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_matrix_q())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double matrix_r = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81u, input, this->mutable_matrix_r())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_matrix_r())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cutoff_freq = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_cutoff_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutoff_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mean_filter_window_size = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_mean_filter_window_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mean_filter_window_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_iteration = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_max_iteration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iteration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_lateral_acceleration = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_max_lateral_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_lateral_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double standstill_acceleration = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_standstill_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &standstill_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_deadzone = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_throttle_deadzone();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_deadzone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_deadzone = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_brake_deadzone();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_deadzone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.GainScheduler lat_err_gain_scheduler = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lat_err_gain_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.GainScheduler heading_err_gain_scheduler = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heading_err_gain_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.GainScheduler steer_weight_gain_scheduler = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_steer_weight_gain_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.GainScheduler feedforwardterm_gain_scheduler = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feedforwardterm_gain_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibration_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.MPCControllerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.MPCControllerConf)
  return false;
#undef DO_
}

void MPCControllerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.MPCControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ts(), output);
  }

  // optional double cf = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cf(), output);
  }

  // optional double cr = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cr(), output);
  }

  // optional int32 mass_fl = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mass_fl(), output);
  }

  // optional int32 mass_fr = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mass_fr(), output);
  }

  // optional int32 mass_rl = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mass_rl(), output);
  }

  // optional int32 mass_rr = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mass_rr(), output);
  }

  // optional double eps = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->eps(), output);
  }

  // repeated double matrix_q = 9;
  for (int i = 0, n = this->matrix_q_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      9, this->matrix_q(i), output);
  }

  // repeated double matrix_r = 10;
  for (int i = 0, n = this->matrix_r_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->matrix_r(i), output);
  }

  // optional int32 cutoff_freq = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cutoff_freq(), output);
  }

  // optional int32 mean_filter_window_size = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mean_filter_window_size(), output);
  }

  // optional int32 max_iteration = 13;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->max_iteration(), output);
  }

  // optional double max_lateral_acceleration = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->max_lateral_acceleration(), output);
  }

  // optional double standstill_acceleration = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->standstill_acceleration(), output);
  }

  // optional double throttle_deadzone = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->throttle_deadzone(), output);
  }

  // optional double brake_deadzone = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->brake_deadzone(), output);
  }

  // optional .apollo.control.GainScheduler lat_err_gain_scheduler = 18;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->lat_err_gain_scheduler_, output);
  }

  // optional .apollo.control.GainScheduler heading_err_gain_scheduler = 19;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->heading_err_gain_scheduler_, output);
  }

  // optional .apollo.control.GainScheduler steer_weight_gain_scheduler = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->steer_weight_gain_scheduler_, output);
  }

  // optional .apollo.control.GainScheduler feedforwardterm_gain_scheduler = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->feedforwardterm_gain_scheduler_, output);
  }

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 22;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->calibration_table_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.MPCControllerConf)
}

::google::protobuf::uint8* MPCControllerConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.MPCControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ts(), target);
  }

  // optional double cf = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cf(), target);
  }

  // optional double cr = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cr(), target);
  }

  // optional int32 mass_fl = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mass_fl(), target);
  }

  // optional int32 mass_fr = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mass_fr(), target);
  }

  // optional int32 mass_rl = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mass_rl(), target);
  }

  // optional int32 mass_rr = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mass_rr(), target);
  }

  // optional double eps = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->eps(), target);
  }

  // repeated double matrix_q = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(9, this->matrix_q_, target);

  // repeated double matrix_r = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(10, this->matrix_r_, target);

  // optional int32 cutoff_freq = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cutoff_freq(), target);
  }

  // optional int32 mean_filter_window_size = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mean_filter_window_size(), target);
  }

  // optional int32 max_iteration = 13;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->max_iteration(), target);
  }

  // optional double max_lateral_acceleration = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->max_lateral_acceleration(), target);
  }

  // optional double standstill_acceleration = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->standstill_acceleration(), target);
  }

  // optional double throttle_deadzone = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->throttle_deadzone(), target);
  }

  // optional double brake_deadzone = 17;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->brake_deadzone(), target);
  }

  // optional .apollo.control.GainScheduler lat_err_gain_scheduler = 18;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->lat_err_gain_scheduler_, deterministic, target);
  }

  // optional .apollo.control.GainScheduler heading_err_gain_scheduler = 19;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->heading_err_gain_scheduler_, deterministic, target);
  }

  // optional .apollo.control.GainScheduler steer_weight_gain_scheduler = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->steer_weight_gain_scheduler_, deterministic, target);
  }

  // optional .apollo.control.GainScheduler feedforwardterm_gain_scheduler = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->feedforwardterm_gain_scheduler_, deterministic, target);
  }

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 22;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->calibration_table_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.MPCControllerConf)
  return target;
}

size_t MPCControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.MPCControllerConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double matrix_q = 9;
  {
    unsigned int count = this->matrix_q_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->matrix_q_size());
    total_size += data_size;
  }

  // repeated double matrix_r = 10;
  {
    unsigned int count = this->matrix_r_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->matrix_r_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.control.GainScheduler lat_err_gain_scheduler = 18;
    if (has_lat_err_gain_scheduler()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lat_err_gain_scheduler_);
    }

    // optional .apollo.control.GainScheduler heading_err_gain_scheduler = 19;
    if (has_heading_err_gain_scheduler()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->heading_err_gain_scheduler_);
    }

    // optional .apollo.control.GainScheduler steer_weight_gain_scheduler = 20;
    if (has_steer_weight_gain_scheduler()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->steer_weight_gain_scheduler_);
    }

    // optional .apollo.control.GainScheduler feedforwardterm_gain_scheduler = 21;
    if (has_feedforwardterm_gain_scheduler()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->feedforwardterm_gain_scheduler_);
    }

    // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 22;
    if (has_calibration_table()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->calibration_table_);
    }

    // optional double ts = 1;
    if (has_ts()) {
      total_size += 1 + 8;
    }

    // optional double cf = 2;
    if (has_cf()) {
      total_size += 1 + 8;
    }

    // optional double cr = 3;
    if (has_cr()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 mass_fl = 4;
    if (has_mass_fl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_fl());
    }

    // optional int32 mass_fr = 5;
    if (has_mass_fr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_fr());
    }

    // optional int32 mass_rl = 6;
    if (has_mass_rl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_rl());
    }

    // optional int32 mass_rr = 7;
    if (has_mass_rr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_rr());
    }

    // optional double eps = 8;
    if (has_eps()) {
      total_size += 1 + 8;
    }

    // optional int32 cutoff_freq = 11;
    if (has_cutoff_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cutoff_freq());
    }

    // optional int32 mean_filter_window_size = 12;
    if (has_mean_filter_window_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mean_filter_window_size());
    }

    // optional double max_lateral_acceleration = 14;
    if (has_max_lateral_acceleration()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional double standstill_acceleration = 15;
    if (has_standstill_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double throttle_deadzone = 16;
    if (has_throttle_deadzone()) {
      total_size += 2 + 8;
    }

    // optional double brake_deadzone = 17;
    if (has_brake_deadzone()) {
      total_size += 2 + 8;
    }

    // optional int32 max_iteration = 13;
    if (has_max_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iteration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MPCControllerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.MPCControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const MPCControllerConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MPCControllerConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.MPCControllerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.MPCControllerConf)
    MergeFrom(*source);
  }
}

void MPCControllerConf::MergeFrom(const MPCControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.MPCControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_q_.MergeFrom(from.matrix_q_);
  matrix_r_.MergeFrom(from.matrix_r_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lat_err_gain_scheduler()->::apollo::control::GainScheduler::MergeFrom(from.lat_err_gain_scheduler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_heading_err_gain_scheduler()->::apollo::control::GainScheduler::MergeFrom(from.heading_err_gain_scheduler());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_steer_weight_gain_scheduler()->::apollo::control::GainScheduler::MergeFrom(from.steer_weight_gain_scheduler());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_feedforwardterm_gain_scheduler()->::apollo::control::GainScheduler::MergeFrom(from.feedforwardterm_gain_scheduler());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_calibration_table()->::apollo::control::calibrationtable::ControlCalibrationTable::MergeFrom(from.calibration_table());
    }
    if (cached_has_bits & 0x00000020u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00000040u) {
      cf_ = from.cf_;
    }
    if (cached_has_bits & 0x00000080u) {
      cr_ = from.cr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mass_fl_ = from.mass_fl_;
    }
    if (cached_has_bits & 0x00000200u) {
      mass_fr_ = from.mass_fr_;
    }
    if (cached_has_bits & 0x00000400u) {
      mass_rl_ = from.mass_rl_;
    }
    if (cached_has_bits & 0x00000800u) {
      mass_rr_ = from.mass_rr_;
    }
    if (cached_has_bits & 0x00001000u) {
      eps_ = from.eps_;
    }
    if (cached_has_bits & 0x00002000u) {
      cutoff_freq_ = from.cutoff_freq_;
    }
    if (cached_has_bits & 0x00004000u) {
      mean_filter_window_size_ = from.mean_filter_window_size_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_lateral_acceleration_ = from.max_lateral_acceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      standstill_acceleration_ = from.standstill_acceleration_;
    }
    if (cached_has_bits & 0x00020000u) {
      throttle_deadzone_ = from.throttle_deadzone_;
    }
    if (cached_has_bits & 0x00040000u) {
      brake_deadzone_ = from.brake_deadzone_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_iteration_ = from.max_iteration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MPCControllerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.MPCControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPCControllerConf::CopyFrom(const MPCControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.MPCControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPCControllerConf::IsInitialized() const {
  return true;
}

void MPCControllerConf::Swap(MPCControllerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MPCControllerConf::InternalSwap(MPCControllerConf* other) {
  matrix_q_.InternalSwap(&other->matrix_q_);
  matrix_r_.InternalSwap(&other->matrix_r_);
  std::swap(lat_err_gain_scheduler_, other->lat_err_gain_scheduler_);
  std::swap(heading_err_gain_scheduler_, other->heading_err_gain_scheduler_);
  std::swap(steer_weight_gain_scheduler_, other->steer_weight_gain_scheduler_);
  std::swap(feedforwardterm_gain_scheduler_, other->feedforwardterm_gain_scheduler_);
  std::swap(calibration_table_, other->calibration_table_);
  std::swap(ts_, other->ts_);
  std::swap(cf_, other->cf_);
  std::swap(cr_, other->cr_);
  std::swap(mass_fl_, other->mass_fl_);
  std::swap(mass_fr_, other->mass_fr_);
  std::swap(mass_rl_, other->mass_rl_);
  std::swap(mass_rr_, other->mass_rr_);
  std::swap(eps_, other->eps_);
  std::swap(cutoff_freq_, other->cutoff_freq_);
  std::swap(mean_filter_window_size_, other->mean_filter_window_size_);
  std::swap(max_lateral_acceleration_, other->max_lateral_acceleration_);
  std::swap(standstill_acceleration_, other->standstill_acceleration_);
  std::swap(throttle_deadzone_, other->throttle_deadzone_);
  std::swap(brake_deadzone_, other->brake_deadzone_);
  std::swap(max_iteration_, other->max_iteration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MPCControllerConf::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MPCControllerConf

// optional double ts = 1;
bool MPCControllerConf::has_ts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MPCControllerConf::set_has_ts() {
  _has_bits_[0] |= 0x00000020u;
}
void MPCControllerConf::clear_has_ts() {
  _has_bits_[0] &= ~0x00000020u;
}
void MPCControllerConf::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
double MPCControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.ts)
  return ts_;
}
void MPCControllerConf::set_ts(double value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.ts)
}

// optional double cf = 2;
bool MPCControllerConf::has_cf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MPCControllerConf::set_has_cf() {
  _has_bits_[0] |= 0x00000040u;
}
void MPCControllerConf::clear_has_cf() {
  _has_bits_[0] &= ~0x00000040u;
}
void MPCControllerConf::clear_cf() {
  cf_ = 0;
  clear_has_cf();
}
double MPCControllerConf::cf() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.cf)
  return cf_;
}
void MPCControllerConf::set_cf(double value) {
  set_has_cf();
  cf_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.cf)
}

// optional double cr = 3;
bool MPCControllerConf::has_cr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MPCControllerConf::set_has_cr() {
  _has_bits_[0] |= 0x00000080u;
}
void MPCControllerConf::clear_has_cr() {
  _has_bits_[0] &= ~0x00000080u;
}
void MPCControllerConf::clear_cr() {
  cr_ = 0;
  clear_has_cr();
}
double MPCControllerConf::cr() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.cr)
  return cr_;
}
void MPCControllerConf::set_cr(double value) {
  set_has_cr();
  cr_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.cr)
}

// optional int32 mass_fl = 4;
bool MPCControllerConf::has_mass_fl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MPCControllerConf::set_has_mass_fl() {
  _has_bits_[0] |= 0x00000100u;
}
void MPCControllerConf::clear_has_mass_fl() {
  _has_bits_[0] &= ~0x00000100u;
}
void MPCControllerConf::clear_mass_fl() {
  mass_fl_ = 0;
  clear_has_mass_fl();
}
::google::protobuf::int32 MPCControllerConf::mass_fl() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mass_fl)
  return mass_fl_;
}
void MPCControllerConf::set_mass_fl(::google::protobuf::int32 value) {
  set_has_mass_fl();
  mass_fl_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mass_fl)
}

// optional int32 mass_fr = 5;
bool MPCControllerConf::has_mass_fr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MPCControllerConf::set_has_mass_fr() {
  _has_bits_[0] |= 0x00000200u;
}
void MPCControllerConf::clear_has_mass_fr() {
  _has_bits_[0] &= ~0x00000200u;
}
void MPCControllerConf::clear_mass_fr() {
  mass_fr_ = 0;
  clear_has_mass_fr();
}
::google::protobuf::int32 MPCControllerConf::mass_fr() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mass_fr)
  return mass_fr_;
}
void MPCControllerConf::set_mass_fr(::google::protobuf::int32 value) {
  set_has_mass_fr();
  mass_fr_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mass_fr)
}

// optional int32 mass_rl = 6;
bool MPCControllerConf::has_mass_rl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MPCControllerConf::set_has_mass_rl() {
  _has_bits_[0] |= 0x00000400u;
}
void MPCControllerConf::clear_has_mass_rl() {
  _has_bits_[0] &= ~0x00000400u;
}
void MPCControllerConf::clear_mass_rl() {
  mass_rl_ = 0;
  clear_has_mass_rl();
}
::google::protobuf::int32 MPCControllerConf::mass_rl() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mass_rl)
  return mass_rl_;
}
void MPCControllerConf::set_mass_rl(::google::protobuf::int32 value) {
  set_has_mass_rl();
  mass_rl_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mass_rl)
}

// optional int32 mass_rr = 7;
bool MPCControllerConf::has_mass_rr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MPCControllerConf::set_has_mass_rr() {
  _has_bits_[0] |= 0x00000800u;
}
void MPCControllerConf::clear_has_mass_rr() {
  _has_bits_[0] &= ~0x00000800u;
}
void MPCControllerConf::clear_mass_rr() {
  mass_rr_ = 0;
  clear_has_mass_rr();
}
::google::protobuf::int32 MPCControllerConf::mass_rr() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mass_rr)
  return mass_rr_;
}
void MPCControllerConf::set_mass_rr(::google::protobuf::int32 value) {
  set_has_mass_rr();
  mass_rr_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mass_rr)
}

// optional double eps = 8;
bool MPCControllerConf::has_eps() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MPCControllerConf::set_has_eps() {
  _has_bits_[0] |= 0x00001000u;
}
void MPCControllerConf::clear_has_eps() {
  _has_bits_[0] &= ~0x00001000u;
}
void MPCControllerConf::clear_eps() {
  eps_ = 0;
  clear_has_eps();
}
double MPCControllerConf::eps() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.eps)
  return eps_;
}
void MPCControllerConf::set_eps(double value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.eps)
}

// repeated double matrix_q = 9;
int MPCControllerConf::matrix_q_size() const {
  return matrix_q_.size();
}
void MPCControllerConf::clear_matrix_q() {
  matrix_q_.Clear();
}
double MPCControllerConf::matrix_q(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.matrix_q)
  return matrix_q_.Get(index);
}
void MPCControllerConf::set_matrix_q(int index, double value) {
  matrix_q_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.matrix_q)
}
void MPCControllerConf::add_matrix_q(double value) {
  matrix_q_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.control.MPCControllerConf.matrix_q)
}
const ::google::protobuf::RepeatedField< double >&
MPCControllerConf::matrix_q() const {
  // @@protoc_insertion_point(field_list:apollo.control.MPCControllerConf.matrix_q)
  return matrix_q_;
}
::google::protobuf::RepeatedField< double >*
MPCControllerConf::mutable_matrix_q() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.MPCControllerConf.matrix_q)
  return &matrix_q_;
}

// repeated double matrix_r = 10;
int MPCControllerConf::matrix_r_size() const {
  return matrix_r_.size();
}
void MPCControllerConf::clear_matrix_r() {
  matrix_r_.Clear();
}
double MPCControllerConf::matrix_r(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.matrix_r)
  return matrix_r_.Get(index);
}
void MPCControllerConf::set_matrix_r(int index, double value) {
  matrix_r_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.matrix_r)
}
void MPCControllerConf::add_matrix_r(double value) {
  matrix_r_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.control.MPCControllerConf.matrix_r)
}
const ::google::protobuf::RepeatedField< double >&
MPCControllerConf::matrix_r() const {
  // @@protoc_insertion_point(field_list:apollo.control.MPCControllerConf.matrix_r)
  return matrix_r_;
}
::google::protobuf::RepeatedField< double >*
MPCControllerConf::mutable_matrix_r() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.MPCControllerConf.matrix_r)
  return &matrix_r_;
}

// optional int32 cutoff_freq = 11;
bool MPCControllerConf::has_cutoff_freq() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void MPCControllerConf::set_has_cutoff_freq() {
  _has_bits_[0] |= 0x00002000u;
}
void MPCControllerConf::clear_has_cutoff_freq() {
  _has_bits_[0] &= ~0x00002000u;
}
void MPCControllerConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
  clear_has_cutoff_freq();
}
::google::protobuf::int32 MPCControllerConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.cutoff_freq)
  return cutoff_freq_;
}
void MPCControllerConf::set_cutoff_freq(::google::protobuf::int32 value) {
  set_has_cutoff_freq();
  cutoff_freq_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.cutoff_freq)
}

// optional int32 mean_filter_window_size = 12;
bool MPCControllerConf::has_mean_filter_window_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void MPCControllerConf::set_has_mean_filter_window_size() {
  _has_bits_[0] |= 0x00004000u;
}
void MPCControllerConf::clear_has_mean_filter_window_size() {
  _has_bits_[0] &= ~0x00004000u;
}
void MPCControllerConf::clear_mean_filter_window_size() {
  mean_filter_window_size_ = 0;
  clear_has_mean_filter_window_size();
}
::google::protobuf::int32 MPCControllerConf::mean_filter_window_size() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mean_filter_window_size)
  return mean_filter_window_size_;
}
void MPCControllerConf::set_mean_filter_window_size(::google::protobuf::int32 value) {
  set_has_mean_filter_window_size();
  mean_filter_window_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mean_filter_window_size)
}

// optional int32 max_iteration = 13;
bool MPCControllerConf::has_max_iteration() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void MPCControllerConf::set_has_max_iteration() {
  _has_bits_[0] |= 0x00080000u;
}
void MPCControllerConf::clear_has_max_iteration() {
  _has_bits_[0] &= ~0x00080000u;
}
void MPCControllerConf::clear_max_iteration() {
  max_iteration_ = 0;
  clear_has_max_iteration();
}
::google::protobuf::int32 MPCControllerConf::max_iteration() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.max_iteration)
  return max_iteration_;
}
void MPCControllerConf::set_max_iteration(::google::protobuf::int32 value) {
  set_has_max_iteration();
  max_iteration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.max_iteration)
}

// optional double max_lateral_acceleration = 14;
bool MPCControllerConf::has_max_lateral_acceleration() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void MPCControllerConf::set_has_max_lateral_acceleration() {
  _has_bits_[0] |= 0x00008000u;
}
void MPCControllerConf::clear_has_max_lateral_acceleration() {
  _has_bits_[0] &= ~0x00008000u;
}
void MPCControllerConf::clear_max_lateral_acceleration() {
  max_lateral_acceleration_ = 0;
  clear_has_max_lateral_acceleration();
}
double MPCControllerConf::max_lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.max_lateral_acceleration)
  return max_lateral_acceleration_;
}
void MPCControllerConf::set_max_lateral_acceleration(double value) {
  set_has_max_lateral_acceleration();
  max_lateral_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.max_lateral_acceleration)
}

// optional double standstill_acceleration = 15;
bool MPCControllerConf::has_standstill_acceleration() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void MPCControllerConf::set_has_standstill_acceleration() {
  _has_bits_[0] |= 0x00010000u;
}
void MPCControllerConf::clear_has_standstill_acceleration() {
  _has_bits_[0] &= ~0x00010000u;
}
void MPCControllerConf::clear_standstill_acceleration() {
  standstill_acceleration_ = 0;
  clear_has_standstill_acceleration();
}
double MPCControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.standstill_acceleration)
  return standstill_acceleration_;
}
void MPCControllerConf::set_standstill_acceleration(double value) {
  set_has_standstill_acceleration();
  standstill_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.standstill_acceleration)
}

// optional double throttle_deadzone = 16;
bool MPCControllerConf::has_throttle_deadzone() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void MPCControllerConf::set_has_throttle_deadzone() {
  _has_bits_[0] |= 0x00020000u;
}
void MPCControllerConf::clear_has_throttle_deadzone() {
  _has_bits_[0] &= ~0x00020000u;
}
void MPCControllerConf::clear_throttle_deadzone() {
  throttle_deadzone_ = 0;
  clear_has_throttle_deadzone();
}
double MPCControllerConf::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.throttle_deadzone)
  return throttle_deadzone_;
}
void MPCControllerConf::set_throttle_deadzone(double value) {
  set_has_throttle_deadzone();
  throttle_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.throttle_deadzone)
}

// optional double brake_deadzone = 17;
bool MPCControllerConf::has_brake_deadzone() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void MPCControllerConf::set_has_brake_deadzone() {
  _has_bits_[0] |= 0x00040000u;
}
void MPCControllerConf::clear_has_brake_deadzone() {
  _has_bits_[0] &= ~0x00040000u;
}
void MPCControllerConf::clear_brake_deadzone() {
  brake_deadzone_ = 0;
  clear_has_brake_deadzone();
}
double MPCControllerConf::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.brake_deadzone)
  return brake_deadzone_;
}
void MPCControllerConf::set_brake_deadzone(double value) {
  set_has_brake_deadzone();
  brake_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.brake_deadzone)
}

// optional .apollo.control.GainScheduler lat_err_gain_scheduler = 18;
bool MPCControllerConf::has_lat_err_gain_scheduler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MPCControllerConf::set_has_lat_err_gain_scheduler() {
  _has_bits_[0] |= 0x00000001u;
}
void MPCControllerConf::clear_has_lat_err_gain_scheduler() {
  _has_bits_[0] &= ~0x00000001u;
}
void MPCControllerConf::clear_lat_err_gain_scheduler() {
  if (lat_err_gain_scheduler_ != NULL) lat_err_gain_scheduler_->::apollo::control::GainScheduler::Clear();
  clear_has_lat_err_gain_scheduler();
}
const ::apollo::control::GainScheduler& MPCControllerConf::lat_err_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.lat_err_gain_scheduler)
  return lat_err_gain_scheduler_ != NULL ? *lat_err_gain_scheduler_
                         : *::apollo::control::GainScheduler::internal_default_instance();
}
::apollo::control::GainScheduler* MPCControllerConf::mutable_lat_err_gain_scheduler() {
  set_has_lat_err_gain_scheduler();
  if (lat_err_gain_scheduler_ == NULL) {
    lat_err_gain_scheduler_ = new ::apollo::control::GainScheduler;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.lat_err_gain_scheduler)
  return lat_err_gain_scheduler_;
}
::apollo::control::GainScheduler* MPCControllerConf::release_lat_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.lat_err_gain_scheduler)
  clear_has_lat_err_gain_scheduler();
  ::apollo::control::GainScheduler* temp = lat_err_gain_scheduler_;
  lat_err_gain_scheduler_ = NULL;
  return temp;
}
void MPCControllerConf::set_allocated_lat_err_gain_scheduler(::apollo::control::GainScheduler* lat_err_gain_scheduler) {
  delete lat_err_gain_scheduler_;
  lat_err_gain_scheduler_ = lat_err_gain_scheduler;
  if (lat_err_gain_scheduler) {
    set_has_lat_err_gain_scheduler();
  } else {
    clear_has_lat_err_gain_scheduler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.lat_err_gain_scheduler)
}

// optional .apollo.control.GainScheduler heading_err_gain_scheduler = 19;
bool MPCControllerConf::has_heading_err_gain_scheduler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MPCControllerConf::set_has_heading_err_gain_scheduler() {
  _has_bits_[0] |= 0x00000002u;
}
void MPCControllerConf::clear_has_heading_err_gain_scheduler() {
  _has_bits_[0] &= ~0x00000002u;
}
void MPCControllerConf::clear_heading_err_gain_scheduler() {
  if (heading_err_gain_scheduler_ != NULL) heading_err_gain_scheduler_->::apollo::control::GainScheduler::Clear();
  clear_has_heading_err_gain_scheduler();
}
const ::apollo::control::GainScheduler& MPCControllerConf::heading_err_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.heading_err_gain_scheduler)
  return heading_err_gain_scheduler_ != NULL ? *heading_err_gain_scheduler_
                         : *::apollo::control::GainScheduler::internal_default_instance();
}
::apollo::control::GainScheduler* MPCControllerConf::mutable_heading_err_gain_scheduler() {
  set_has_heading_err_gain_scheduler();
  if (heading_err_gain_scheduler_ == NULL) {
    heading_err_gain_scheduler_ = new ::apollo::control::GainScheduler;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.heading_err_gain_scheduler)
  return heading_err_gain_scheduler_;
}
::apollo::control::GainScheduler* MPCControllerConf::release_heading_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.heading_err_gain_scheduler)
  clear_has_heading_err_gain_scheduler();
  ::apollo::control::GainScheduler* temp = heading_err_gain_scheduler_;
  heading_err_gain_scheduler_ = NULL;
  return temp;
}
void MPCControllerConf::set_allocated_heading_err_gain_scheduler(::apollo::control::GainScheduler* heading_err_gain_scheduler) {
  delete heading_err_gain_scheduler_;
  heading_err_gain_scheduler_ = heading_err_gain_scheduler;
  if (heading_err_gain_scheduler) {
    set_has_heading_err_gain_scheduler();
  } else {
    clear_has_heading_err_gain_scheduler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.heading_err_gain_scheduler)
}

// optional .apollo.control.GainScheduler steer_weight_gain_scheduler = 20;
bool MPCControllerConf::has_steer_weight_gain_scheduler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MPCControllerConf::set_has_steer_weight_gain_scheduler() {
  _has_bits_[0] |= 0x00000004u;
}
void MPCControllerConf::clear_has_steer_weight_gain_scheduler() {
  _has_bits_[0] &= ~0x00000004u;
}
void MPCControllerConf::clear_steer_weight_gain_scheduler() {
  if (steer_weight_gain_scheduler_ != NULL) steer_weight_gain_scheduler_->::apollo::control::GainScheduler::Clear();
  clear_has_steer_weight_gain_scheduler();
}
const ::apollo::control::GainScheduler& MPCControllerConf::steer_weight_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.steer_weight_gain_scheduler)
  return steer_weight_gain_scheduler_ != NULL ? *steer_weight_gain_scheduler_
                         : *::apollo::control::GainScheduler::internal_default_instance();
}
::apollo::control::GainScheduler* MPCControllerConf::mutable_steer_weight_gain_scheduler() {
  set_has_steer_weight_gain_scheduler();
  if (steer_weight_gain_scheduler_ == NULL) {
    steer_weight_gain_scheduler_ = new ::apollo::control::GainScheduler;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.steer_weight_gain_scheduler)
  return steer_weight_gain_scheduler_;
}
::apollo::control::GainScheduler* MPCControllerConf::release_steer_weight_gain_scheduler() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.steer_weight_gain_scheduler)
  clear_has_steer_weight_gain_scheduler();
  ::apollo::control::GainScheduler* temp = steer_weight_gain_scheduler_;
  steer_weight_gain_scheduler_ = NULL;
  return temp;
}
void MPCControllerConf::set_allocated_steer_weight_gain_scheduler(::apollo::control::GainScheduler* steer_weight_gain_scheduler) {
  delete steer_weight_gain_scheduler_;
  steer_weight_gain_scheduler_ = steer_weight_gain_scheduler;
  if (steer_weight_gain_scheduler) {
    set_has_steer_weight_gain_scheduler();
  } else {
    clear_has_steer_weight_gain_scheduler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.steer_weight_gain_scheduler)
}

// optional .apollo.control.GainScheduler feedforwardterm_gain_scheduler = 21;
bool MPCControllerConf::has_feedforwardterm_gain_scheduler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MPCControllerConf::set_has_feedforwardterm_gain_scheduler() {
  _has_bits_[0] |= 0x00000008u;
}
void MPCControllerConf::clear_has_feedforwardterm_gain_scheduler() {
  _has_bits_[0] &= ~0x00000008u;
}
void MPCControllerConf::clear_feedforwardterm_gain_scheduler() {
  if (feedforwardterm_gain_scheduler_ != NULL) feedforwardterm_gain_scheduler_->::apollo::control::GainScheduler::Clear();
  clear_has_feedforwardterm_gain_scheduler();
}
const ::apollo::control::GainScheduler& MPCControllerConf::feedforwardterm_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.feedforwardterm_gain_scheduler)
  return feedforwardterm_gain_scheduler_ != NULL ? *feedforwardterm_gain_scheduler_
                         : *::apollo::control::GainScheduler::internal_default_instance();
}
::apollo::control::GainScheduler* MPCControllerConf::mutable_feedforwardterm_gain_scheduler() {
  set_has_feedforwardterm_gain_scheduler();
  if (feedforwardterm_gain_scheduler_ == NULL) {
    feedforwardterm_gain_scheduler_ = new ::apollo::control::GainScheduler;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.feedforwardterm_gain_scheduler)
  return feedforwardterm_gain_scheduler_;
}
::apollo::control::GainScheduler* MPCControllerConf::release_feedforwardterm_gain_scheduler() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.feedforwardterm_gain_scheduler)
  clear_has_feedforwardterm_gain_scheduler();
  ::apollo::control::GainScheduler* temp = feedforwardterm_gain_scheduler_;
  feedforwardterm_gain_scheduler_ = NULL;
  return temp;
}
void MPCControllerConf::set_allocated_feedforwardterm_gain_scheduler(::apollo::control::GainScheduler* feedforwardterm_gain_scheduler) {
  delete feedforwardterm_gain_scheduler_;
  feedforwardterm_gain_scheduler_ = feedforwardterm_gain_scheduler;
  if (feedforwardterm_gain_scheduler) {
    set_has_feedforwardterm_gain_scheduler();
  } else {
    clear_has_feedforwardterm_gain_scheduler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.feedforwardterm_gain_scheduler)
}

// optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 22;
bool MPCControllerConf::has_calibration_table() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MPCControllerConf::set_has_calibration_table() {
  _has_bits_[0] |= 0x00000010u;
}
void MPCControllerConf::clear_has_calibration_table() {
  _has_bits_[0] &= ~0x00000010u;
}
void MPCControllerConf::clear_calibration_table() {
  if (calibration_table_ != NULL) calibration_table_->::apollo::control::calibrationtable::ControlCalibrationTable::Clear();
  clear_has_calibration_table();
}
const ::apollo::control::calibrationtable::ControlCalibrationTable& MPCControllerConf::calibration_table() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.calibration_table)
  return calibration_table_ != NULL ? *calibration_table_
                         : *::apollo::control::calibrationtable::ControlCalibrationTable::internal_default_instance();
}
::apollo::control::calibrationtable::ControlCalibrationTable* MPCControllerConf::mutable_calibration_table() {
  set_has_calibration_table();
  if (calibration_table_ == NULL) {
    calibration_table_ = new ::apollo::control::calibrationtable::ControlCalibrationTable;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.calibration_table)
  return calibration_table_;
}
::apollo::control::calibrationtable::ControlCalibrationTable* MPCControllerConf::release_calibration_table() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.calibration_table)
  clear_has_calibration_table();
  ::apollo::control::calibrationtable::ControlCalibrationTable* temp = calibration_table_;
  calibration_table_ = NULL;
  return temp;
}
void MPCControllerConf::set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table) {
  delete calibration_table_;
  calibration_table_ = calibration_table;
  if (calibration_table) {
    set_has_calibration_table();
  } else {
    clear_has_calibration_table();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.calibration_table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
