// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/control_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/control/proto/control_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {
class ControlConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ControlConf> {
} _ControlConf_default_instance_;

namespace protobuf_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, control_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, max_planning_interval_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, max_planning_delay_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, soft_estop_brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, active_controllers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, max_steering_percentage_allowed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, max_status_interval_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, lat_controller_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, lon_controller_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, trajectory_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, chassis_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, localization_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, minimum_speed_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlConf, mpc_controller_conf_),
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  14,
  9,
  0,
  1,
  10,
  11,
  12,
  13,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 21, sizeof(ControlConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ControlConf_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/control/proto/control_conf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ControlConf_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2fpad_5fmsg_2eproto::InitDefaults();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto::InitDefaults();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::InitDefaults();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto::InitDefaults();
  _ControlConf_default_instance_.DefaultConstruct();
  _ControlConf_default_instance_.get_mutable()->lat_controller_conf_ = const_cast< ::apollo::control::LatControllerConf*>(
      ::apollo::control::LatControllerConf::internal_default_instance());
  _ControlConf_default_instance_.get_mutable()->lon_controller_conf_ = const_cast< ::apollo::control::LonControllerConf*>(
      ::apollo::control::LonControllerConf::internal_default_instance());
  _ControlConf_default_instance_.get_mutable()->mpc_controller_conf_ = const_cast< ::apollo::control::MPCControllerConf*>(
      ::apollo::control::MPCControllerConf::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n(modules/control/proto/control_conf.pro"
      "to\022\016apollo.control\032\"modules/canbus/proto"
      "/chassis.proto\032#modules/control/proto/pa"
      "d_msg.proto\032/modules/control/proto/lat_c"
      "ontroller_conf.proto\032/modules/control/pr"
      "oto/lon_controller_conf.proto\032/modules/c"
      "ontrol/proto/mpc_controller_conf.proto\"\203"
      "\006\n\013ControlConf\022\026\n\016control_period\030\001 \001(\001\022!"
      "\n\031max_planning_interval_sec\030\002 \001(\001\022$\n\034max"
      "_planning_delay_threshold\030\003 \001(\001\0228\n\014drivi"
      "ng_mode\030\004 \001(\0162\".apollo.canbus.Chassis.Dr"
      "ivingMode\022-\n\006action\030\005 \001(\0162\035.apollo.contr"
      "ol.DrivingAction\022\030\n\020soft_estop_brake\030\006 \001"
      "(\001\022F\n\022active_controllers\030\007 \003(\0162*.apollo."
      "control.ControlConf.ControllerType\022\'\n\037ma"
      "x_steering_percentage_allowed\030\010 \001(\005\022\037\n\027m"
      "ax_status_interval_sec\030\t \001(\001\022>\n\023lat_cont"
      "roller_conf\030\n \001(\0132!.apollo.control.LatCo"
      "ntrollerConf\022>\n\023lon_controller_conf\030\013 \001("
      "\0132!.apollo.control.LonControllerConf\022\031\n\021"
      "trajectory_period\030\014 \001(\001\022\026\n\016chassis_perio"
      "d\030\r \001(\001\022\033\n\023localization_period\030\016 \001(\001\022 \n\030"
      "minimum_speed_resolution\030\017 \001(\001\022>\n\023mpc_co"
      "ntroller_conf\030\020 \001(\0132!.apollo.control.MPC"
      "ControllerConf\"L\n\016ControllerType\022\022\n\016LAT_"
      "CONTROLLER\020\000\022\022\n\016LON_CONTROLLER\020\001\022\022\n\016MPC_"
      "CONTROLLER\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1052);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/control/proto/control_conf.proto", &protobuf_RegisterTypes);
  ::apollo::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2fpad_5fmsg_2eproto::AddDescriptors();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto::AddDescriptors();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::AddDescriptors();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto

const ::google::protobuf::EnumDescriptor* ControlConf_ControllerType_descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto::file_level_enum_descriptors[0];
}
bool ControlConf_ControllerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ControlConf_ControllerType ControlConf::LAT_CONTROLLER;
const ControlConf_ControllerType ControlConf::LON_CONTROLLER;
const ControlConf_ControllerType ControlConf::MPC_CONTROLLER;
const ControlConf_ControllerType ControlConf::ControllerType_MIN;
const ControlConf_ControllerType ControlConf::ControllerType_MAX;
const int ControlConf::ControllerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlConf::kControlPeriodFieldNumber;
const int ControlConf::kMaxPlanningIntervalSecFieldNumber;
const int ControlConf::kMaxPlanningDelayThresholdFieldNumber;
const int ControlConf::kDrivingModeFieldNumber;
const int ControlConf::kActionFieldNumber;
const int ControlConf::kSoftEstopBrakeFieldNumber;
const int ControlConf::kActiveControllersFieldNumber;
const int ControlConf::kMaxSteeringPercentageAllowedFieldNumber;
const int ControlConf::kMaxStatusIntervalSecFieldNumber;
const int ControlConf::kLatControllerConfFieldNumber;
const int ControlConf::kLonControllerConfFieldNumber;
const int ControlConf::kTrajectoryPeriodFieldNumber;
const int ControlConf::kChassisPeriodFieldNumber;
const int ControlConf::kLocalizationPeriodFieldNumber;
const int ControlConf::kMinimumSpeedResolutionFieldNumber;
const int ControlConf::kMpcControllerConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlConf::ControlConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.ControlConf)
}
ControlConf::ControlConf(const ControlConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      active_controllers_(from.active_controllers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lat_controller_conf()) {
    lat_controller_conf_ = new ::apollo::control::LatControllerConf(*from.lat_controller_conf_);
  } else {
    lat_controller_conf_ = NULL;
  }
  if (from.has_lon_controller_conf()) {
    lon_controller_conf_ = new ::apollo::control::LonControllerConf(*from.lon_controller_conf_);
  } else {
    lon_controller_conf_ = NULL;
  }
  if (from.has_mpc_controller_conf()) {
    mpc_controller_conf_ = new ::apollo::control::MPCControllerConf(*from.mpc_controller_conf_);
  } else {
    mpc_controller_conf_ = NULL;
  }
  ::memcpy(&control_period_, &from.control_period_,
    reinterpret_cast<char*>(&max_steering_percentage_allowed_) -
    reinterpret_cast<char*>(&control_period_) + sizeof(max_steering_percentage_allowed_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.ControlConf)
}

void ControlConf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lat_controller_conf_, 0, reinterpret_cast<char*>(&max_steering_percentage_allowed_) -
    reinterpret_cast<char*>(&lat_controller_conf_) + sizeof(max_steering_percentage_allowed_));
}

ControlConf::~ControlConf() {
  // @@protoc_insertion_point(destructor:apollo.control.ControlConf)
  SharedDtor();
}

void ControlConf::SharedDtor() {
  if (this != internal_default_instance()) {
    delete lat_controller_conf_;
  }
  if (this != internal_default_instance()) {
    delete lon_controller_conf_;
  }
  if (this != internal_default_instance()) {
    delete mpc_controller_conf_;
  }
}

void ControlConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlConf::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlConf& ControlConf::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

ControlConf* ControlConf::New(::google::protobuf::Arena* arena) const {
  ControlConf* n = new ControlConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.ControlConf)
  active_controllers_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_lat_controller_conf()) {
      GOOGLE_DCHECK(lat_controller_conf_ != NULL);
      lat_controller_conf_->::apollo::control::LatControllerConf::Clear();
    }
    if (has_lon_controller_conf()) {
      GOOGLE_DCHECK(lon_controller_conf_ != NULL);
      lon_controller_conf_->::apollo::control::LonControllerConf::Clear();
    }
    if (has_mpc_controller_conf()) {
      GOOGLE_DCHECK(mpc_controller_conf_ != NULL);
      mpc_controller_conf_->::apollo::control::MPCControllerConf::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&control_period_, 0, reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&control_period_) + sizeof(action_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&soft_estop_brake_, 0, reinterpret_cast<char*>(&max_steering_percentage_allowed_) -
      reinterpret_cast<char*>(&soft_estop_brake_) + sizeof(max_steering_percentage_allowed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControlConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.ControlConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double control_period = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_control_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &control_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_planning_interval_sec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_max_planning_interval_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_planning_interval_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_planning_delay_threshold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_max_planning_delay_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_planning_delay_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.DrivingAction action = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::control::DrivingAction_IsValid(value)) {
            set_action(static_cast< ::apollo::control::DrivingAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double soft_estop_brake = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_soft_estop_brake();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &soft_estop_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::control::ControlConf_ControllerType_IsValid(value)) {
            add_active_controllers(static_cast< ::apollo::control::ControlConf_ControllerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 7,
                 ::apollo::control::ControlConf_ControllerType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_active_controllers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_steering_percentage_allowed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_max_steering_percentage_allowed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_steering_percentage_allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_status_interval_sec = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_max_status_interval_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_status_interval_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.LatControllerConf lat_controller_conf = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lat_controller_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.LonControllerConf lon_controller_conf = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lon_controller_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double trajectory_period = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_trajectory_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trajectory_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double chassis_period = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_chassis_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chassis_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double localization_period = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_localization_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &localization_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double minimum_speed_resolution = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_minimum_speed_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimum_speed_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.MPCControllerConf mpc_controller_conf = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mpc_controller_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.ControlConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.ControlConf)
  return false;
#undef DO_
}

void ControlConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.ControlConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double control_period = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->control_period(), output);
  }

  // optional double max_planning_interval_sec = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_planning_interval_sec(), output);
  }

  // optional double max_planning_delay_threshold = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_planning_delay_threshold(), output);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->driving_mode(), output);
  }

  // optional .apollo.control.DrivingAction action = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->action(), output);
  }

  // optional double soft_estop_brake = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->soft_estop_brake(), output);
  }

  // repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
  for (int i = 0, n = this->active_controllers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->active_controllers(i), output);
  }

  // optional int32 max_steering_percentage_allowed = 8;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_steering_percentage_allowed(), output);
  }

  // optional double max_status_interval_sec = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->max_status_interval_sec(), output);
  }

  // optional .apollo.control.LatControllerConf lat_controller_conf = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->lat_controller_conf_, output);
  }

  // optional .apollo.control.LonControllerConf lon_controller_conf = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->lon_controller_conf_, output);
  }

  // optional double trajectory_period = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->trajectory_period(), output);
  }

  // optional double chassis_period = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->chassis_period(), output);
  }

  // optional double localization_period = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->localization_period(), output);
  }

  // optional double minimum_speed_resolution = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->minimum_speed_resolution(), output);
  }

  // optional .apollo.control.MPCControllerConf mpc_controller_conf = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->mpc_controller_conf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.ControlConf)
}

::google::protobuf::uint8* ControlConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.ControlConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double control_period = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->control_period(), target);
  }

  // optional double max_planning_interval_sec = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_planning_interval_sec(), target);
  }

  // optional double max_planning_delay_threshold = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_planning_delay_threshold(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->driving_mode(), target);
  }

  // optional .apollo.control.DrivingAction action = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->action(), target);
  }

  // optional double soft_estop_brake = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->soft_estop_brake(), target);
  }

  // repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    7, this->active_controllers_, target);

  // optional int32 max_steering_percentage_allowed = 8;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_steering_percentage_allowed(), target);
  }

  // optional double max_status_interval_sec = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->max_status_interval_sec(), target);
  }

  // optional .apollo.control.LatControllerConf lat_controller_conf = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->lat_controller_conf_, deterministic, target);
  }

  // optional .apollo.control.LonControllerConf lon_controller_conf = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->lon_controller_conf_, deterministic, target);
  }

  // optional double trajectory_period = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->trajectory_period(), target);
  }

  // optional double chassis_period = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->chassis_period(), target);
  }

  // optional double localization_period = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->localization_period(), target);
  }

  // optional double minimum_speed_resolution = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->minimum_speed_resolution(), target);
  }

  // optional .apollo.control.MPCControllerConf mpc_controller_conf = 16;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->mpc_controller_conf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.ControlConf)
  return target;
}

size_t ControlConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.ControlConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
  {
    size_t data_size = 0;
    unsigned int count = this->active_controllers_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->active_controllers(i));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.control.LatControllerConf lat_controller_conf = 10;
    if (has_lat_controller_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lat_controller_conf_);
    }

    // optional .apollo.control.LonControllerConf lon_controller_conf = 11;
    if (has_lon_controller_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lon_controller_conf_);
    }

    // optional .apollo.control.MPCControllerConf mpc_controller_conf = 16;
    if (has_mpc_controller_conf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mpc_controller_conf_);
    }

    // optional double control_period = 1;
    if (has_control_period()) {
      total_size += 1 + 8;
    }

    // optional double max_planning_interval_sec = 2;
    if (has_max_planning_interval_sec()) {
      total_size += 1 + 8;
    }

    // optional double max_planning_delay_threshold = 3;
    if (has_max_planning_delay_threshold()) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
    if (has_driving_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional .apollo.control.DrivingAction action = 5;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional double soft_estop_brake = 6;
    if (has_soft_estop_brake()) {
      total_size += 1 + 8;
    }

    // optional double max_status_interval_sec = 9;
    if (has_max_status_interval_sec()) {
      total_size += 1 + 8;
    }

    // optional double trajectory_period = 12;
    if (has_trajectory_period()) {
      total_size += 1 + 8;
    }

    // optional double chassis_period = 13;
    if (has_chassis_period()) {
      total_size += 1 + 8;
    }

    // optional double localization_period = 14;
    if (has_localization_period()) {
      total_size += 1 + 8;
    }

    // optional double minimum_speed_resolution = 15;
    if (has_minimum_speed_resolution()) {
      total_size += 1 + 8;
    }

    // optional int32 max_steering_percentage_allowed = 8;
    if (has_max_steering_percentage_allowed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_steering_percentage_allowed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.ControlConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.ControlConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.ControlConf)
    MergeFrom(*source);
  }
}

void ControlConf::MergeFrom(const ControlConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.ControlConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_controllers_.MergeFrom(from.active_controllers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lat_controller_conf()->::apollo::control::LatControllerConf::MergeFrom(from.lat_controller_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lon_controller_conf()->::apollo::control::LonControllerConf::MergeFrom(from.lon_controller_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_mpc_controller_conf()->::apollo::control::MPCControllerConf::MergeFrom(from.mpc_controller_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      control_period_ = from.control_period_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_planning_interval_sec_ = from.max_planning_interval_sec_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_planning_delay_threshold_ = from.max_planning_delay_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      soft_estop_brake_ = from.soft_estop_brake_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_status_interval_sec_ = from.max_status_interval_sec_;
    }
    if (cached_has_bits & 0x00000400u) {
      trajectory_period_ = from.trajectory_period_;
    }
    if (cached_has_bits & 0x00000800u) {
      chassis_period_ = from.chassis_period_;
    }
    if (cached_has_bits & 0x00001000u) {
      localization_period_ = from.localization_period_;
    }
    if (cached_has_bits & 0x00002000u) {
      minimum_speed_resolution_ = from.minimum_speed_resolution_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_steering_percentage_allowed_ = from.max_steering_percentage_allowed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControlConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.ControlConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlConf::CopyFrom(const ControlConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.ControlConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlConf::IsInitialized() const {
  return true;
}

void ControlConf::Swap(ControlConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlConf::InternalSwap(ControlConf* other) {
  active_controllers_.InternalSwap(&other->active_controllers_);
  std::swap(lat_controller_conf_, other->lat_controller_conf_);
  std::swap(lon_controller_conf_, other->lon_controller_conf_);
  std::swap(mpc_controller_conf_, other->mpc_controller_conf_);
  std::swap(control_period_, other->control_period_);
  std::swap(max_planning_interval_sec_, other->max_planning_interval_sec_);
  std::swap(max_planning_delay_threshold_, other->max_planning_delay_threshold_);
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(action_, other->action_);
  std::swap(soft_estop_brake_, other->soft_estop_brake_);
  std::swap(max_status_interval_sec_, other->max_status_interval_sec_);
  std::swap(trajectory_period_, other->trajectory_period_);
  std::swap(chassis_period_, other->chassis_period_);
  std::swap(localization_period_, other->localization_period_);
  std::swap(minimum_speed_resolution_, other->minimum_speed_resolution_);
  std::swap(max_steering_percentage_allowed_, other->max_steering_percentage_allowed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlConf::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlConf

// optional double control_period = 1;
bool ControlConf::has_control_period() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ControlConf::set_has_control_period() {
  _has_bits_[0] |= 0x00000008u;
}
void ControlConf::clear_has_control_period() {
  _has_bits_[0] &= ~0x00000008u;
}
void ControlConf::clear_control_period() {
  control_period_ = 0;
  clear_has_control_period();
}
double ControlConf::control_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.control_period)
  return control_period_;
}
void ControlConf::set_control_period(double value) {
  set_has_control_period();
  control_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.control_period)
}

// optional double max_planning_interval_sec = 2;
bool ControlConf::has_max_planning_interval_sec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ControlConf::set_has_max_planning_interval_sec() {
  _has_bits_[0] |= 0x00000010u;
}
void ControlConf::clear_has_max_planning_interval_sec() {
  _has_bits_[0] &= ~0x00000010u;
}
void ControlConf::clear_max_planning_interval_sec() {
  max_planning_interval_sec_ = 0;
  clear_has_max_planning_interval_sec();
}
double ControlConf::max_planning_interval_sec() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.max_planning_interval_sec)
  return max_planning_interval_sec_;
}
void ControlConf::set_max_planning_interval_sec(double value) {
  set_has_max_planning_interval_sec();
  max_planning_interval_sec_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.max_planning_interval_sec)
}

// optional double max_planning_delay_threshold = 3;
bool ControlConf::has_max_planning_delay_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ControlConf::set_has_max_planning_delay_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
void ControlConf::clear_has_max_planning_delay_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
void ControlConf::clear_max_planning_delay_threshold() {
  max_planning_delay_threshold_ = 0;
  clear_has_max_planning_delay_threshold();
}
double ControlConf::max_planning_delay_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.max_planning_delay_threshold)
  return max_planning_delay_threshold_;
}
void ControlConf::set_max_planning_delay_threshold(double value) {
  set_has_max_planning_delay_threshold();
  max_planning_delay_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.max_planning_delay_threshold)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
bool ControlConf::has_driving_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ControlConf::set_has_driving_mode() {
  _has_bits_[0] |= 0x00000040u;
}
void ControlConf::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
void ControlConf::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
::apollo::canbus::Chassis_DrivingMode ControlConf::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
void ControlConf::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.driving_mode)
}

// optional .apollo.control.DrivingAction action = 5;
bool ControlConf::has_action() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ControlConf::set_has_action() {
  _has_bits_[0] |= 0x00000080u;
}
void ControlConf::clear_has_action() {
  _has_bits_[0] &= ~0x00000080u;
}
void ControlConf::clear_action() {
  action_ = 0;
  clear_has_action();
}
::apollo::control::DrivingAction ControlConf::action() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.action)
  return static_cast< ::apollo::control::DrivingAction >(action_);
}
void ControlConf::set_action(::apollo::control::DrivingAction value) {
  assert(::apollo::control::DrivingAction_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.action)
}

// optional double soft_estop_brake = 6;
bool ControlConf::has_soft_estop_brake() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ControlConf::set_has_soft_estop_brake() {
  _has_bits_[0] |= 0x00000100u;
}
void ControlConf::clear_has_soft_estop_brake() {
  _has_bits_[0] &= ~0x00000100u;
}
void ControlConf::clear_soft_estop_brake() {
  soft_estop_brake_ = 0;
  clear_has_soft_estop_brake();
}
double ControlConf::soft_estop_brake() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.soft_estop_brake)
  return soft_estop_brake_;
}
void ControlConf::set_soft_estop_brake(double value) {
  set_has_soft_estop_brake();
  soft_estop_brake_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.soft_estop_brake)
}

// repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
int ControlConf::active_controllers_size() const {
  return active_controllers_.size();
}
void ControlConf::clear_active_controllers() {
  active_controllers_.Clear();
}
::apollo::control::ControlConf_ControllerType ControlConf::active_controllers(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.active_controllers)
  return static_cast< ::apollo::control::ControlConf_ControllerType >(active_controllers_.Get(index));
}
void ControlConf::set_active_controllers(int index, ::apollo::control::ControlConf_ControllerType value) {
  assert(::apollo::control::ControlConf_ControllerType_IsValid(value));
  active_controllers_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.active_controllers)
}
void ControlConf::add_active_controllers(::apollo::control::ControlConf_ControllerType value) {
  assert(::apollo::control::ControlConf_ControllerType_IsValid(value));
  active_controllers_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.control.ControlConf.active_controllers)
}
const ::google::protobuf::RepeatedField<int>&
ControlConf::active_controllers() const {
  // @@protoc_insertion_point(field_list:apollo.control.ControlConf.active_controllers)
  return active_controllers_;
}
::google::protobuf::RepeatedField<int>*
ControlConf::mutable_active_controllers() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.ControlConf.active_controllers)
  return &active_controllers_;
}

// optional int32 max_steering_percentage_allowed = 8;
bool ControlConf::has_max_steering_percentage_allowed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ControlConf::set_has_max_steering_percentage_allowed() {
  _has_bits_[0] |= 0x00004000u;
}
void ControlConf::clear_has_max_steering_percentage_allowed() {
  _has_bits_[0] &= ~0x00004000u;
}
void ControlConf::clear_max_steering_percentage_allowed() {
  max_steering_percentage_allowed_ = 0;
  clear_has_max_steering_percentage_allowed();
}
::google::protobuf::int32 ControlConf::max_steering_percentage_allowed() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.max_steering_percentage_allowed)
  return max_steering_percentage_allowed_;
}
void ControlConf::set_max_steering_percentage_allowed(::google::protobuf::int32 value) {
  set_has_max_steering_percentage_allowed();
  max_steering_percentage_allowed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.max_steering_percentage_allowed)
}

// optional double max_status_interval_sec = 9;
bool ControlConf::has_max_status_interval_sec() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ControlConf::set_has_max_status_interval_sec() {
  _has_bits_[0] |= 0x00000200u;
}
void ControlConf::clear_has_max_status_interval_sec() {
  _has_bits_[0] &= ~0x00000200u;
}
void ControlConf::clear_max_status_interval_sec() {
  max_status_interval_sec_ = 0;
  clear_has_max_status_interval_sec();
}
double ControlConf::max_status_interval_sec() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.max_status_interval_sec)
  return max_status_interval_sec_;
}
void ControlConf::set_max_status_interval_sec(double value) {
  set_has_max_status_interval_sec();
  max_status_interval_sec_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.max_status_interval_sec)
}

// optional .apollo.control.LatControllerConf lat_controller_conf = 10;
bool ControlConf::has_lat_controller_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ControlConf::set_has_lat_controller_conf() {
  _has_bits_[0] |= 0x00000001u;
}
void ControlConf::clear_has_lat_controller_conf() {
  _has_bits_[0] &= ~0x00000001u;
}
void ControlConf::clear_lat_controller_conf() {
  if (lat_controller_conf_ != NULL) lat_controller_conf_->::apollo::control::LatControllerConf::Clear();
  clear_has_lat_controller_conf();
}
const ::apollo::control::LatControllerConf& ControlConf::lat_controller_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.lat_controller_conf)
  return lat_controller_conf_ != NULL ? *lat_controller_conf_
                         : *::apollo::control::LatControllerConf::internal_default_instance();
}
::apollo::control::LatControllerConf* ControlConf::mutable_lat_controller_conf() {
  set_has_lat_controller_conf();
  if (lat_controller_conf_ == NULL) {
    lat_controller_conf_ = new ::apollo::control::LatControllerConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlConf.lat_controller_conf)
  return lat_controller_conf_;
}
::apollo::control::LatControllerConf* ControlConf::release_lat_controller_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlConf.lat_controller_conf)
  clear_has_lat_controller_conf();
  ::apollo::control::LatControllerConf* temp = lat_controller_conf_;
  lat_controller_conf_ = NULL;
  return temp;
}
void ControlConf::set_allocated_lat_controller_conf(::apollo::control::LatControllerConf* lat_controller_conf) {
  delete lat_controller_conf_;
  lat_controller_conf_ = lat_controller_conf;
  if (lat_controller_conf) {
    set_has_lat_controller_conf();
  } else {
    clear_has_lat_controller_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlConf.lat_controller_conf)
}

// optional .apollo.control.LonControllerConf lon_controller_conf = 11;
bool ControlConf::has_lon_controller_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ControlConf::set_has_lon_controller_conf() {
  _has_bits_[0] |= 0x00000002u;
}
void ControlConf::clear_has_lon_controller_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
void ControlConf::clear_lon_controller_conf() {
  if (lon_controller_conf_ != NULL) lon_controller_conf_->::apollo::control::LonControllerConf::Clear();
  clear_has_lon_controller_conf();
}
const ::apollo::control::LonControllerConf& ControlConf::lon_controller_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.lon_controller_conf)
  return lon_controller_conf_ != NULL ? *lon_controller_conf_
                         : *::apollo::control::LonControllerConf::internal_default_instance();
}
::apollo::control::LonControllerConf* ControlConf::mutable_lon_controller_conf() {
  set_has_lon_controller_conf();
  if (lon_controller_conf_ == NULL) {
    lon_controller_conf_ = new ::apollo::control::LonControllerConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlConf.lon_controller_conf)
  return lon_controller_conf_;
}
::apollo::control::LonControllerConf* ControlConf::release_lon_controller_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlConf.lon_controller_conf)
  clear_has_lon_controller_conf();
  ::apollo::control::LonControllerConf* temp = lon_controller_conf_;
  lon_controller_conf_ = NULL;
  return temp;
}
void ControlConf::set_allocated_lon_controller_conf(::apollo::control::LonControllerConf* lon_controller_conf) {
  delete lon_controller_conf_;
  lon_controller_conf_ = lon_controller_conf;
  if (lon_controller_conf) {
    set_has_lon_controller_conf();
  } else {
    clear_has_lon_controller_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlConf.lon_controller_conf)
}

// optional double trajectory_period = 12;
bool ControlConf::has_trajectory_period() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ControlConf::set_has_trajectory_period() {
  _has_bits_[0] |= 0x00000400u;
}
void ControlConf::clear_has_trajectory_period() {
  _has_bits_[0] &= ~0x00000400u;
}
void ControlConf::clear_trajectory_period() {
  trajectory_period_ = 0;
  clear_has_trajectory_period();
}
double ControlConf::trajectory_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.trajectory_period)
  return trajectory_period_;
}
void ControlConf::set_trajectory_period(double value) {
  set_has_trajectory_period();
  trajectory_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.trajectory_period)
}

// optional double chassis_period = 13;
bool ControlConf::has_chassis_period() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ControlConf::set_has_chassis_period() {
  _has_bits_[0] |= 0x00000800u;
}
void ControlConf::clear_has_chassis_period() {
  _has_bits_[0] &= ~0x00000800u;
}
void ControlConf::clear_chassis_period() {
  chassis_period_ = 0;
  clear_has_chassis_period();
}
double ControlConf::chassis_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.chassis_period)
  return chassis_period_;
}
void ControlConf::set_chassis_period(double value) {
  set_has_chassis_period();
  chassis_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.chassis_period)
}

// optional double localization_period = 14;
bool ControlConf::has_localization_period() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ControlConf::set_has_localization_period() {
  _has_bits_[0] |= 0x00001000u;
}
void ControlConf::clear_has_localization_period() {
  _has_bits_[0] &= ~0x00001000u;
}
void ControlConf::clear_localization_period() {
  localization_period_ = 0;
  clear_has_localization_period();
}
double ControlConf::localization_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.localization_period)
  return localization_period_;
}
void ControlConf::set_localization_period(double value) {
  set_has_localization_period();
  localization_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.localization_period)
}

// optional double minimum_speed_resolution = 15;
bool ControlConf::has_minimum_speed_resolution() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ControlConf::set_has_minimum_speed_resolution() {
  _has_bits_[0] |= 0x00002000u;
}
void ControlConf::clear_has_minimum_speed_resolution() {
  _has_bits_[0] &= ~0x00002000u;
}
void ControlConf::clear_minimum_speed_resolution() {
  minimum_speed_resolution_ = 0;
  clear_has_minimum_speed_resolution();
}
double ControlConf::minimum_speed_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.minimum_speed_resolution)
  return minimum_speed_resolution_;
}
void ControlConf::set_minimum_speed_resolution(double value) {
  set_has_minimum_speed_resolution();
  minimum_speed_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.minimum_speed_resolution)
}

// optional .apollo.control.MPCControllerConf mpc_controller_conf = 16;
bool ControlConf::has_mpc_controller_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ControlConf::set_has_mpc_controller_conf() {
  _has_bits_[0] |= 0x00000004u;
}
void ControlConf::clear_has_mpc_controller_conf() {
  _has_bits_[0] &= ~0x00000004u;
}
void ControlConf::clear_mpc_controller_conf() {
  if (mpc_controller_conf_ != NULL) mpc_controller_conf_->::apollo::control::MPCControllerConf::Clear();
  clear_has_mpc_controller_conf();
}
const ::apollo::control::MPCControllerConf& ControlConf::mpc_controller_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.mpc_controller_conf)
  return mpc_controller_conf_ != NULL ? *mpc_controller_conf_
                         : *::apollo::control::MPCControllerConf::internal_default_instance();
}
::apollo::control::MPCControllerConf* ControlConf::mutable_mpc_controller_conf() {
  set_has_mpc_controller_conf();
  if (mpc_controller_conf_ == NULL) {
    mpc_controller_conf_ = new ::apollo::control::MPCControllerConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlConf.mpc_controller_conf)
  return mpc_controller_conf_;
}
::apollo::control::MPCControllerConf* ControlConf::release_mpc_controller_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlConf.mpc_controller_conf)
  clear_has_mpc_controller_conf();
  ::apollo::control::MPCControllerConf* temp = mpc_controller_conf_;
  mpc_controller_conf_ = NULL;
  return temp;
}
void ControlConf::set_allocated_mpc_controller_conf(::apollo::control::MPCControllerConf* mpc_controller_conf) {
  delete mpc_controller_conf_;
  mpc_controller_conf_ = mpc_controller_conf;
  if (mpc_controller_conf) {
    set_has_mpc_controller_conf();
  } else {
    clear_has_mpc_controller_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlConf.mpc_controller_conf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
