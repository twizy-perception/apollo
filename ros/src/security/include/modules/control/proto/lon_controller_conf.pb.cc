// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/lon_controller_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/control/proto/lon_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace control {
class FilterConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FilterConf> {
} _FilterConf_default_instance_;
class LonControllerConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LonControllerConf> {
} _LonControllerConf_default_instance_;

namespace protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, cutoff_freq_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, brake_deadzone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, throttle_deadzone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, speed_controller_input_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, station_error_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, preview_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, standstill_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, station_pid_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, low_speed_pid_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, high_speed_pid_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, switch_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, pitch_angle_filter_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LonControllerConf, calibration_table_),
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  0,
  1,
  2,
  12,
  3,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(FilterConf)},
  { 7, 25, sizeof(LonControllerConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FilterConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LonControllerConf_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/control/proto/lon_controller_conf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _FilterConf_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LonControllerConf_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::control::calibrationtable::protobuf_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto::InitDefaults();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2fpid_5fconf_2eproto::InitDefaults();
  _FilterConf_default_instance_.DefaultConstruct();
  _LonControllerConf_default_instance_.DefaultConstruct();
  _LonControllerConf_default_instance_.get_mutable()->station_pid_conf_ = const_cast< ::apollo::control::PidConf*>(
      ::apollo::control::PidConf::internal_default_instance());
  _LonControllerConf_default_instance_.get_mutable()->low_speed_pid_conf_ = const_cast< ::apollo::control::PidConf*>(
      ::apollo::control::PidConf::internal_default_instance());
  _LonControllerConf_default_instance_.get_mutable()->high_speed_pid_conf_ = const_cast< ::apollo::control::PidConf*>(
      ::apollo::control::PidConf::internal_default_instance());
  _LonControllerConf_default_instance_.get_mutable()->pitch_angle_filter_conf_ = const_cast< ::apollo::control::FilterConf*>(
      ::apollo::control::FilterConf::internal_default_instance());
  _LonControllerConf_default_instance_.get_mutable()->calibration_table_ = const_cast< ::apollo::control::calibrationtable::ControlCalibrationTable*>(
      ::apollo::control::calibrationtable::ControlCalibrationTable::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n/modules/control/proto/lon_controller_c"
      "onf.proto\022\016apollo.control\032-modules/contr"
      "ol/proto/calibration_table.proto\032$module"
      "s/control/proto/pid_conf.proto\"!\n\nFilter"
      "Conf\022\023\n\013cutoff_freq\030\001 \001(\005\"\224\004\n\021LonControl"
      "lerConf\022\n\n\002ts\030\001 \001(\001\022\026\n\016brake_deadzone\030\002 "
      "\001(\001\022\031\n\021throttle_deadzone\030\003 \001(\001\022$\n\034speed_"
      "controller_input_limit\030\004 \001(\001\022\033\n\023station_"
      "error_limit\030\005 \001(\001\022\026\n\016preview_window\030\006 \001("
      "\001\022\037\n\027standstill_acceleration\030\007 \001(\001\0221\n\020st"
      "ation_pid_conf\030\010 \001(\0132\027.apollo.control.Pi"
      "dConf\0223\n\022low_speed_pid_conf\030\t \001(\0132\027.apol"
      "lo.control.PidConf\0224\n\023high_speed_pid_con"
      "f\030\n \001(\0132\027.apollo.control.PidConf\022\024\n\014swit"
      "ch_speed\030\013 \001(\001\022;\n\027pitch_angle_filter_con"
      "f\030\014 \001(\0132\032.apollo.control.FilterConf\022S\n\021c"
      "alibration_table\030\r \001(\01328.apollo.control."
      "calibrationtable.ControlCalibrationTable"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 720);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/control/proto/lon_controller_conf.proto", &protobuf_RegisterTypes);
  ::apollo::control::calibrationtable::protobuf_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto::AddDescriptors();
  ::apollo::control::protobuf_modules_2fcontrol_2fproto_2fpid_5fconf_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterConf::kCutoffFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterConf::FilterConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.FilterConf)
}
FilterConf::FilterConf(const FilterConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cutoff_freq_ = from.cutoff_freq_;
  // @@protoc_insertion_point(copy_constructor:apollo.control.FilterConf)
}

void FilterConf::SharedCtor() {
  _cached_size_ = 0;
  cutoff_freq_ = 0;
}

FilterConf::~FilterConf() {
  // @@protoc_insertion_point(destructor:apollo.control.FilterConf)
  SharedDtor();
}

void FilterConf::SharedDtor() {
}

void FilterConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterConf::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FilterConf& FilterConf::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

FilterConf* FilterConf::New(::google::protobuf::Arena* arena) const {
  FilterConf* n = new FilterConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilterConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.FilterConf)
  cutoff_freq_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FilterConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.FilterConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cutoff_freq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cutoff_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutoff_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.FilterConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.FilterConf)
  return false;
#undef DO_
}

void FilterConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.FilterConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cutoff_freq = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cutoff_freq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.FilterConf)
}

::google::protobuf::uint8* FilterConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.FilterConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cutoff_freq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cutoff_freq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.FilterConf)
  return target;
}

size_t FilterConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.FilterConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 cutoff_freq = 1;
  if (has_cutoff_freq()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cutoff_freq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.FilterConf)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.FilterConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.FilterConf)
    MergeFrom(*source);
  }
}

void FilterConf::MergeFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.FilterConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cutoff_freq()) {
    set_cutoff_freq(from.cutoff_freq());
  }
}

void FilterConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterConf::CopyFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterConf::IsInitialized() const {
  return true;
}

void FilterConf::Swap(FilterConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterConf::InternalSwap(FilterConf* other) {
  std::swap(cutoff_freq_, other->cutoff_freq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilterConf::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilterConf

// optional int32 cutoff_freq = 1;
bool FilterConf::has_cutoff_freq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FilterConf::set_has_cutoff_freq() {
  _has_bits_[0] |= 0x00000001u;
}
void FilterConf::clear_has_cutoff_freq() {
  _has_bits_[0] &= ~0x00000001u;
}
void FilterConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
  clear_has_cutoff_freq();
}
::google::protobuf::int32 FilterConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:apollo.control.FilterConf.cutoff_freq)
  return cutoff_freq_;
}
void FilterConf::set_cutoff_freq(::google::protobuf::int32 value) {
  set_has_cutoff_freq();
  cutoff_freq_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.FilterConf.cutoff_freq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LonControllerConf::kTsFieldNumber;
const int LonControllerConf::kBrakeDeadzoneFieldNumber;
const int LonControllerConf::kThrottleDeadzoneFieldNumber;
const int LonControllerConf::kSpeedControllerInputLimitFieldNumber;
const int LonControllerConf::kStationErrorLimitFieldNumber;
const int LonControllerConf::kPreviewWindowFieldNumber;
const int LonControllerConf::kStandstillAccelerationFieldNumber;
const int LonControllerConf::kStationPidConfFieldNumber;
const int LonControllerConf::kLowSpeedPidConfFieldNumber;
const int LonControllerConf::kHighSpeedPidConfFieldNumber;
const int LonControllerConf::kSwitchSpeedFieldNumber;
const int LonControllerConf::kPitchAngleFilterConfFieldNumber;
const int LonControllerConf::kCalibrationTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LonControllerConf::LonControllerConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.LonControllerConf)
}
LonControllerConf::LonControllerConf(const LonControllerConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_station_pid_conf()) {
    station_pid_conf_ = new ::apollo::control::PidConf(*from.station_pid_conf_);
  } else {
    station_pid_conf_ = NULL;
  }
  if (from.has_low_speed_pid_conf()) {
    low_speed_pid_conf_ = new ::apollo::control::PidConf(*from.low_speed_pid_conf_);
  } else {
    low_speed_pid_conf_ = NULL;
  }
  if (from.has_high_speed_pid_conf()) {
    high_speed_pid_conf_ = new ::apollo::control::PidConf(*from.high_speed_pid_conf_);
  } else {
    high_speed_pid_conf_ = NULL;
  }
  if (from.has_pitch_angle_filter_conf()) {
    pitch_angle_filter_conf_ = new ::apollo::control::FilterConf(*from.pitch_angle_filter_conf_);
  } else {
    pitch_angle_filter_conf_ = NULL;
  }
  if (from.has_calibration_table()) {
    calibration_table_ = new ::apollo::control::calibrationtable::ControlCalibrationTable(*from.calibration_table_);
  } else {
    calibration_table_ = NULL;
  }
  ::memcpy(&ts_, &from.ts_,
    reinterpret_cast<char*>(&switch_speed_) -
    reinterpret_cast<char*>(&ts_) + sizeof(switch_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.LonControllerConf)
}

void LonControllerConf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&station_pid_conf_, 0, reinterpret_cast<char*>(&switch_speed_) -
    reinterpret_cast<char*>(&station_pid_conf_) + sizeof(switch_speed_));
}

LonControllerConf::~LonControllerConf() {
  // @@protoc_insertion_point(destructor:apollo.control.LonControllerConf)
  SharedDtor();
}

void LonControllerConf::SharedDtor() {
  if (this != internal_default_instance()) {
    delete station_pid_conf_;
  }
  if (this != internal_default_instance()) {
    delete low_speed_pid_conf_;
  }
  if (this != internal_default_instance()) {
    delete high_speed_pid_conf_;
  }
  if (this != internal_default_instance()) {
    delete pitch_angle_filter_conf_;
  }
  if (this != internal_default_instance()) {
    delete calibration_table_;
  }
}

void LonControllerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LonControllerConf::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LonControllerConf& LonControllerConf::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

LonControllerConf* LonControllerConf::New(::google::protobuf::Arena* arena) const {
  LonControllerConf* n = new LonControllerConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LonControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LonControllerConf)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_station_pid_conf()) {
      GOOGLE_DCHECK(station_pid_conf_ != NULL);
      station_pid_conf_->::apollo::control::PidConf::Clear();
    }
    if (has_low_speed_pid_conf()) {
      GOOGLE_DCHECK(low_speed_pid_conf_ != NULL);
      low_speed_pid_conf_->::apollo::control::PidConf::Clear();
    }
    if (has_high_speed_pid_conf()) {
      GOOGLE_DCHECK(high_speed_pid_conf_ != NULL);
      high_speed_pid_conf_->::apollo::control::PidConf::Clear();
    }
    if (has_pitch_angle_filter_conf()) {
      GOOGLE_DCHECK(pitch_angle_filter_conf_ != NULL);
      pitch_angle_filter_conf_->::apollo::control::FilterConf::Clear();
    }
    if (has_calibration_table()) {
      GOOGLE_DCHECK(calibration_table_ != NULL);
      calibration_table_->::apollo::control::calibrationtable::ControlCalibrationTable::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&ts_, 0, reinterpret_cast<char*>(&throttle_deadzone_) -
      reinterpret_cast<char*>(&ts_) + sizeof(throttle_deadzone_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&speed_controller_input_limit_, 0, reinterpret_cast<char*>(&switch_speed_) -
      reinterpret_cast<char*>(&speed_controller_input_limit_) + sizeof(switch_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LonControllerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.control.LonControllerConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_deadzone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_brake_deadzone();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_deadzone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_deadzone = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_throttle_deadzone();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_deadzone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_controller_input_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_speed_controller_input_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_controller_input_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double station_error_limit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_station_error_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preview_window = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_preview_window();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double standstill_acceleration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_standstill_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &standstill_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.PidConf station_pid_conf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_station_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.PidConf low_speed_pid_conf = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low_speed_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.PidConf high_speed_pid_conf = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high_speed_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double switch_speed = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_switch_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &switch_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.FilterConf pitch_angle_filter_conf = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pitch_angle_filter_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibration_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.control.LonControllerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.control.LonControllerConf)
  return false;
#undef DO_
}

void LonControllerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.control.LonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ts(), output);
  }

  // optional double brake_deadzone = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->brake_deadzone(), output);
  }

  // optional double throttle_deadzone = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->throttle_deadzone(), output);
  }

  // optional double speed_controller_input_limit = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed_controller_input_limit(), output);
  }

  // optional double station_error_limit = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->station_error_limit(), output);
  }

  // optional double preview_window = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->preview_window(), output);
  }

  // optional double standstill_acceleration = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->standstill_acceleration(), output);
  }

  // optional .apollo.control.PidConf station_pid_conf = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->station_pid_conf_, output);
  }

  // optional .apollo.control.PidConf low_speed_pid_conf = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->low_speed_pid_conf_, output);
  }

  // optional .apollo.control.PidConf high_speed_pid_conf = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->high_speed_pid_conf_, output);
  }

  // optional double switch_speed = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->switch_speed(), output);
  }

  // optional .apollo.control.FilterConf pitch_angle_filter_conf = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->pitch_angle_filter_conf_, output);
  }

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->calibration_table_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.control.LonControllerConf)
}

::google::protobuf::uint8* LonControllerConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ts(), target);
  }

  // optional double brake_deadzone = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->brake_deadzone(), target);
  }

  // optional double throttle_deadzone = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->throttle_deadzone(), target);
  }

  // optional double speed_controller_input_limit = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_controller_input_limit(), target);
  }

  // optional double station_error_limit = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->station_error_limit(), target);
  }

  // optional double preview_window = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->preview_window(), target);
  }

  // optional double standstill_acceleration = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->standstill_acceleration(), target);
  }

  // optional .apollo.control.PidConf station_pid_conf = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->station_pid_conf_, deterministic, target);
  }

  // optional .apollo.control.PidConf low_speed_pid_conf = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->low_speed_pid_conf_, deterministic, target);
  }

  // optional .apollo.control.PidConf high_speed_pid_conf = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->high_speed_pid_conf_, deterministic, target);
  }

  // optional double switch_speed = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->switch_speed(), target);
  }

  // optional .apollo.control.FilterConf pitch_angle_filter_conf = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->pitch_angle_filter_conf_, deterministic, target);
  }

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->calibration_table_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LonControllerConf)
  return target;
}

size_t LonControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LonControllerConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.control.PidConf station_pid_conf = 8;
    if (has_station_pid_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->station_pid_conf_);
    }

    // optional .apollo.control.PidConf low_speed_pid_conf = 9;
    if (has_low_speed_pid_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->low_speed_pid_conf_);
    }

    // optional .apollo.control.PidConf high_speed_pid_conf = 10;
    if (has_high_speed_pid_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->high_speed_pid_conf_);
    }

    // optional .apollo.control.FilterConf pitch_angle_filter_conf = 12;
    if (has_pitch_angle_filter_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pitch_angle_filter_conf_);
    }

    // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 13;
    if (has_calibration_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->calibration_table_);
    }

    // optional double ts = 1;
    if (has_ts()) {
      total_size += 1 + 8;
    }

    // optional double brake_deadzone = 2;
    if (has_brake_deadzone()) {
      total_size += 1 + 8;
    }

    // optional double throttle_deadzone = 3;
    if (has_throttle_deadzone()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional double speed_controller_input_limit = 4;
    if (has_speed_controller_input_limit()) {
      total_size += 1 + 8;
    }

    // optional double station_error_limit = 5;
    if (has_station_error_limit()) {
      total_size += 1 + 8;
    }

    // optional double preview_window = 6;
    if (has_preview_window()) {
      total_size += 1 + 8;
    }

    // optional double standstill_acceleration = 7;
    if (has_standstill_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double switch_speed = 11;
    if (has_switch_speed()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LonControllerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.LonControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LonControllerConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LonControllerConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.LonControllerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.LonControllerConf)
    MergeFrom(*source);
  }
}

void LonControllerConf::MergeFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LonControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_station_pid_conf()->::apollo::control::PidConf::MergeFrom(from.station_pid_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_low_speed_pid_conf()->::apollo::control::PidConf::MergeFrom(from.low_speed_pid_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_high_speed_pid_conf()->::apollo::control::PidConf::MergeFrom(from.high_speed_pid_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_pitch_angle_filter_conf()->::apollo::control::FilterConf::MergeFrom(from.pitch_angle_filter_conf());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_calibration_table()->::apollo::control::calibrationtable::ControlCalibrationTable::MergeFrom(from.calibration_table());
    }
    if (cached_has_bits & 0x00000020u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00000040u) {
      brake_deadzone_ = from.brake_deadzone_;
    }
    if (cached_has_bits & 0x00000080u) {
      throttle_deadzone_ = from.throttle_deadzone_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      speed_controller_input_limit_ = from.speed_controller_input_limit_;
    }
    if (cached_has_bits & 0x00000200u) {
      station_error_limit_ = from.station_error_limit_;
    }
    if (cached_has_bits & 0x00000400u) {
      preview_window_ = from.preview_window_;
    }
    if (cached_has_bits & 0x00000800u) {
      standstill_acceleration_ = from.standstill_acceleration_;
    }
    if (cached_has_bits & 0x00001000u) {
      switch_speed_ = from.switch_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LonControllerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LonControllerConf::CopyFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LonControllerConf::IsInitialized() const {
  return true;
}

void LonControllerConf::Swap(LonControllerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LonControllerConf::InternalSwap(LonControllerConf* other) {
  std::swap(station_pid_conf_, other->station_pid_conf_);
  std::swap(low_speed_pid_conf_, other->low_speed_pid_conf_);
  std::swap(high_speed_pid_conf_, other->high_speed_pid_conf_);
  std::swap(pitch_angle_filter_conf_, other->pitch_angle_filter_conf_);
  std::swap(calibration_table_, other->calibration_table_);
  std::swap(ts_, other->ts_);
  std::swap(brake_deadzone_, other->brake_deadzone_);
  std::swap(throttle_deadzone_, other->throttle_deadzone_);
  std::swap(speed_controller_input_limit_, other->speed_controller_input_limit_);
  std::swap(station_error_limit_, other->station_error_limit_);
  std::swap(preview_window_, other->preview_window_);
  std::swap(standstill_acceleration_, other->standstill_acceleration_);
  std::swap(switch_speed_, other->switch_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LonControllerConf::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LonControllerConf

// optional double ts = 1;
bool LonControllerConf::has_ts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LonControllerConf::set_has_ts() {
  _has_bits_[0] |= 0x00000020u;
}
void LonControllerConf::clear_has_ts() {
  _has_bits_[0] &= ~0x00000020u;
}
void LonControllerConf::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
double LonControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.ts)
  return ts_;
}
void LonControllerConf::set_ts(double value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.ts)
}

// optional double brake_deadzone = 2;
bool LonControllerConf::has_brake_deadzone() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LonControllerConf::set_has_brake_deadzone() {
  _has_bits_[0] |= 0x00000040u;
}
void LonControllerConf::clear_has_brake_deadzone() {
  _has_bits_[0] &= ~0x00000040u;
}
void LonControllerConf::clear_brake_deadzone() {
  brake_deadzone_ = 0;
  clear_has_brake_deadzone();
}
double LonControllerConf::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.brake_deadzone)
  return brake_deadzone_;
}
void LonControllerConf::set_brake_deadzone(double value) {
  set_has_brake_deadzone();
  brake_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.brake_deadzone)
}

// optional double throttle_deadzone = 3;
bool LonControllerConf::has_throttle_deadzone() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LonControllerConf::set_has_throttle_deadzone() {
  _has_bits_[0] |= 0x00000080u;
}
void LonControllerConf::clear_has_throttle_deadzone() {
  _has_bits_[0] &= ~0x00000080u;
}
void LonControllerConf::clear_throttle_deadzone() {
  throttle_deadzone_ = 0;
  clear_has_throttle_deadzone();
}
double LonControllerConf::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.throttle_deadzone)
  return throttle_deadzone_;
}
void LonControllerConf::set_throttle_deadzone(double value) {
  set_has_throttle_deadzone();
  throttle_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.throttle_deadzone)
}

// optional double speed_controller_input_limit = 4;
bool LonControllerConf::has_speed_controller_input_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LonControllerConf::set_has_speed_controller_input_limit() {
  _has_bits_[0] |= 0x00000100u;
}
void LonControllerConf::clear_has_speed_controller_input_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
void LonControllerConf::clear_speed_controller_input_limit() {
  speed_controller_input_limit_ = 0;
  clear_has_speed_controller_input_limit();
}
double LonControllerConf::speed_controller_input_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.speed_controller_input_limit)
  return speed_controller_input_limit_;
}
void LonControllerConf::set_speed_controller_input_limit(double value) {
  set_has_speed_controller_input_limit();
  speed_controller_input_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.speed_controller_input_limit)
}

// optional double station_error_limit = 5;
bool LonControllerConf::has_station_error_limit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LonControllerConf::set_has_station_error_limit() {
  _has_bits_[0] |= 0x00000200u;
}
void LonControllerConf::clear_has_station_error_limit() {
  _has_bits_[0] &= ~0x00000200u;
}
void LonControllerConf::clear_station_error_limit() {
  station_error_limit_ = 0;
  clear_has_station_error_limit();
}
double LonControllerConf::station_error_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.station_error_limit)
  return station_error_limit_;
}
void LonControllerConf::set_station_error_limit(double value) {
  set_has_station_error_limit();
  station_error_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.station_error_limit)
}

// optional double preview_window = 6;
bool LonControllerConf::has_preview_window() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LonControllerConf::set_has_preview_window() {
  _has_bits_[0] |= 0x00000400u;
}
void LonControllerConf::clear_has_preview_window() {
  _has_bits_[0] &= ~0x00000400u;
}
void LonControllerConf::clear_preview_window() {
  preview_window_ = 0;
  clear_has_preview_window();
}
double LonControllerConf::preview_window() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.preview_window)
  return preview_window_;
}
void LonControllerConf::set_preview_window(double value) {
  set_has_preview_window();
  preview_window_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.preview_window)
}

// optional double standstill_acceleration = 7;
bool LonControllerConf::has_standstill_acceleration() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LonControllerConf::set_has_standstill_acceleration() {
  _has_bits_[0] |= 0x00000800u;
}
void LonControllerConf::clear_has_standstill_acceleration() {
  _has_bits_[0] &= ~0x00000800u;
}
void LonControllerConf::clear_standstill_acceleration() {
  standstill_acceleration_ = 0;
  clear_has_standstill_acceleration();
}
double LonControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.standstill_acceleration)
  return standstill_acceleration_;
}
void LonControllerConf::set_standstill_acceleration(double value) {
  set_has_standstill_acceleration();
  standstill_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.standstill_acceleration)
}

// optional .apollo.control.PidConf station_pid_conf = 8;
bool LonControllerConf::has_station_pid_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LonControllerConf::set_has_station_pid_conf() {
  _has_bits_[0] |= 0x00000001u;
}
void LonControllerConf::clear_has_station_pid_conf() {
  _has_bits_[0] &= ~0x00000001u;
}
void LonControllerConf::clear_station_pid_conf() {
  if (station_pid_conf_ != NULL) station_pid_conf_->::apollo::control::PidConf::Clear();
  clear_has_station_pid_conf();
}
const ::apollo::control::PidConf& LonControllerConf::station_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.station_pid_conf)
  return station_pid_conf_ != NULL ? *station_pid_conf_
                         : *::apollo::control::PidConf::internal_default_instance();
}
::apollo::control::PidConf* LonControllerConf::mutable_station_pid_conf() {
  set_has_station_pid_conf();
  if (station_pid_conf_ == NULL) {
    station_pid_conf_ = new ::apollo::control::PidConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.station_pid_conf)
  return station_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::release_station_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.station_pid_conf)
  clear_has_station_pid_conf();
  ::apollo::control::PidConf* temp = station_pid_conf_;
  station_pid_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_station_pid_conf(::apollo::control::PidConf* station_pid_conf) {
  delete station_pid_conf_;
  station_pid_conf_ = station_pid_conf;
  if (station_pid_conf) {
    set_has_station_pid_conf();
  } else {
    clear_has_station_pid_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.station_pid_conf)
}

// optional .apollo.control.PidConf low_speed_pid_conf = 9;
bool LonControllerConf::has_low_speed_pid_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LonControllerConf::set_has_low_speed_pid_conf() {
  _has_bits_[0] |= 0x00000002u;
}
void LonControllerConf::clear_has_low_speed_pid_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
void LonControllerConf::clear_low_speed_pid_conf() {
  if (low_speed_pid_conf_ != NULL) low_speed_pid_conf_->::apollo::control::PidConf::Clear();
  clear_has_low_speed_pid_conf();
}
const ::apollo::control::PidConf& LonControllerConf::low_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.low_speed_pid_conf)
  return low_speed_pid_conf_ != NULL ? *low_speed_pid_conf_
                         : *::apollo::control::PidConf::internal_default_instance();
}
::apollo::control::PidConf* LonControllerConf::mutable_low_speed_pid_conf() {
  set_has_low_speed_pid_conf();
  if (low_speed_pid_conf_ == NULL) {
    low_speed_pid_conf_ = new ::apollo::control::PidConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.low_speed_pid_conf)
  return low_speed_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::release_low_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.low_speed_pid_conf)
  clear_has_low_speed_pid_conf();
  ::apollo::control::PidConf* temp = low_speed_pid_conf_;
  low_speed_pid_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_low_speed_pid_conf(::apollo::control::PidConf* low_speed_pid_conf) {
  delete low_speed_pid_conf_;
  low_speed_pid_conf_ = low_speed_pid_conf;
  if (low_speed_pid_conf) {
    set_has_low_speed_pid_conf();
  } else {
    clear_has_low_speed_pid_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.low_speed_pid_conf)
}

// optional .apollo.control.PidConf high_speed_pid_conf = 10;
bool LonControllerConf::has_high_speed_pid_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LonControllerConf::set_has_high_speed_pid_conf() {
  _has_bits_[0] |= 0x00000004u;
}
void LonControllerConf::clear_has_high_speed_pid_conf() {
  _has_bits_[0] &= ~0x00000004u;
}
void LonControllerConf::clear_high_speed_pid_conf() {
  if (high_speed_pid_conf_ != NULL) high_speed_pid_conf_->::apollo::control::PidConf::Clear();
  clear_has_high_speed_pid_conf();
}
const ::apollo::control::PidConf& LonControllerConf::high_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.high_speed_pid_conf)
  return high_speed_pid_conf_ != NULL ? *high_speed_pid_conf_
                         : *::apollo::control::PidConf::internal_default_instance();
}
::apollo::control::PidConf* LonControllerConf::mutable_high_speed_pid_conf() {
  set_has_high_speed_pid_conf();
  if (high_speed_pid_conf_ == NULL) {
    high_speed_pid_conf_ = new ::apollo::control::PidConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.high_speed_pid_conf)
  return high_speed_pid_conf_;
}
::apollo::control::PidConf* LonControllerConf::release_high_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.high_speed_pid_conf)
  clear_has_high_speed_pid_conf();
  ::apollo::control::PidConf* temp = high_speed_pid_conf_;
  high_speed_pid_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_high_speed_pid_conf(::apollo::control::PidConf* high_speed_pid_conf) {
  delete high_speed_pid_conf_;
  high_speed_pid_conf_ = high_speed_pid_conf;
  if (high_speed_pid_conf) {
    set_has_high_speed_pid_conf();
  } else {
    clear_has_high_speed_pid_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.high_speed_pid_conf)
}

// optional double switch_speed = 11;
bool LonControllerConf::has_switch_speed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LonControllerConf::set_has_switch_speed() {
  _has_bits_[0] |= 0x00001000u;
}
void LonControllerConf::clear_has_switch_speed() {
  _has_bits_[0] &= ~0x00001000u;
}
void LonControllerConf::clear_switch_speed() {
  switch_speed_ = 0;
  clear_has_switch_speed();
}
double LonControllerConf::switch_speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.switch_speed)
  return switch_speed_;
}
void LonControllerConf::set_switch_speed(double value) {
  set_has_switch_speed();
  switch_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.switch_speed)
}

// optional .apollo.control.FilterConf pitch_angle_filter_conf = 12;
bool LonControllerConf::has_pitch_angle_filter_conf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LonControllerConf::set_has_pitch_angle_filter_conf() {
  _has_bits_[0] |= 0x00000008u;
}
void LonControllerConf::clear_has_pitch_angle_filter_conf() {
  _has_bits_[0] &= ~0x00000008u;
}
void LonControllerConf::clear_pitch_angle_filter_conf() {
  if (pitch_angle_filter_conf_ != NULL) pitch_angle_filter_conf_->::apollo::control::FilterConf::Clear();
  clear_has_pitch_angle_filter_conf();
}
const ::apollo::control::FilterConf& LonControllerConf::pitch_angle_filter_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.pitch_angle_filter_conf)
  return pitch_angle_filter_conf_ != NULL ? *pitch_angle_filter_conf_
                         : *::apollo::control::FilterConf::internal_default_instance();
}
::apollo::control::FilterConf* LonControllerConf::mutable_pitch_angle_filter_conf() {
  set_has_pitch_angle_filter_conf();
  if (pitch_angle_filter_conf_ == NULL) {
    pitch_angle_filter_conf_ = new ::apollo::control::FilterConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.pitch_angle_filter_conf)
  return pitch_angle_filter_conf_;
}
::apollo::control::FilterConf* LonControllerConf::release_pitch_angle_filter_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.pitch_angle_filter_conf)
  clear_has_pitch_angle_filter_conf();
  ::apollo::control::FilterConf* temp = pitch_angle_filter_conf_;
  pitch_angle_filter_conf_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_pitch_angle_filter_conf(::apollo::control::FilterConf* pitch_angle_filter_conf) {
  delete pitch_angle_filter_conf_;
  pitch_angle_filter_conf_ = pitch_angle_filter_conf;
  if (pitch_angle_filter_conf) {
    set_has_pitch_angle_filter_conf();
  } else {
    clear_has_pitch_angle_filter_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.pitch_angle_filter_conf)
}

// optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 13;
bool LonControllerConf::has_calibration_table() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LonControllerConf::set_has_calibration_table() {
  _has_bits_[0] |= 0x00000010u;
}
void LonControllerConf::clear_has_calibration_table() {
  _has_bits_[0] &= ~0x00000010u;
}
void LonControllerConf::clear_calibration_table() {
  if (calibration_table_ != NULL) calibration_table_->::apollo::control::calibrationtable::ControlCalibrationTable::Clear();
  clear_has_calibration_table();
}
const ::apollo::control::calibrationtable::ControlCalibrationTable& LonControllerConf::calibration_table() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.calibration_table)
  return calibration_table_ != NULL ? *calibration_table_
                         : *::apollo::control::calibrationtable::ControlCalibrationTable::internal_default_instance();
}
::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::mutable_calibration_table() {
  set_has_calibration_table();
  if (calibration_table_ == NULL) {
    calibration_table_ = new ::apollo::control::calibrationtable::ControlCalibrationTable;
  }
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.calibration_table)
  return calibration_table_;
}
::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::release_calibration_table() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.calibration_table)
  clear_has_calibration_table();
  ::apollo::control::calibrationtable::ControlCalibrationTable* temp = calibration_table_;
  calibration_table_ = NULL;
  return temp;
}
void LonControllerConf::set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table) {
  delete calibration_table_;
  calibration_table_ = calibration_table;
  if (calibration_table) {
    set_has_calibration_table();
  } else {
    clear_has_calibration_table();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.calibration_table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
