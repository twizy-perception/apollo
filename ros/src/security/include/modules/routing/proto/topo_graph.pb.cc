// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/topo_graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/routing/proto/topo_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace routing {
class CurvePointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CurvePoint> {
} _CurvePoint_default_instance_;
class CurveRangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CurveRange> {
} _CurveRange_default_instance_;
class NodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Node> {
} _Node_default_instance_;
class EdgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Edge> {
} _Edge_default_instance_;
class GraphDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Graph> {
} _Graph_default_instance_;

namespace protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurvePoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurvePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurvePoint, s_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveRange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveRange, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveRange, end_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, left_out_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, right_out_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, central_curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, is_virtual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, road_id_),
  0,
  3,
  ~0u,
  ~0u,
  4,
  2,
  5,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, from_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, to_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, direction_type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, hdmap_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, hdmap_district_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, edge_),
  0,
  1,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(CurvePoint)},
  { 7, 14, sizeof(CurveRange)},
  { 16, 29, sizeof(Node)},
  { 37, 46, sizeof(Edge)},
  { 50, 59, sizeof(Graph)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CurvePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CurveRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Edge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Graph_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/routing/proto/topo_graph.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _CurvePoint_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CurveRange_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Node_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Edge_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Graph_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::InitDefaults();
  _CurvePoint_default_instance_.DefaultConstruct();
  _CurveRange_default_instance_.DefaultConstruct();
  _Node_default_instance_.DefaultConstruct();
  _Edge_default_instance_.DefaultConstruct();
  _Graph_default_instance_.DefaultConstruct();
  _CurveRange_default_instance_.get_mutable()->start_ = const_cast< ::apollo::routing::CurvePoint*>(
      ::apollo::routing::CurvePoint::internal_default_instance());
  _CurveRange_default_instance_.get_mutable()->end_ = const_cast< ::apollo::routing::CurvePoint*>(
      ::apollo::routing::CurvePoint::internal_default_instance());
  _Node_default_instance_.get_mutable()->central_curve_ = const_cast< ::apollo::hdmap::Curve*>(
      ::apollo::hdmap::Curve::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n&modules/routing/proto/topo_graph.proto"
      "\022\016apollo.routing\032$modules/map/proto/map_"
      "geometry.proto\"\027\n\nCurvePoint\022\t\n\001s\030\001 \001(\001\""
      "`\n\nCurveRange\022)\n\005start\030\001 \001(\0132\032.apollo.ro"
      "uting.CurvePoint\022\'\n\003end\030\002 \001(\0132\032.apollo.r"
      "outing.CurvePoint\"\351\001\n\004Node\022\017\n\007lane_id\030\001 "
      "\001(\t\022\016\n\006length\030\002 \001(\001\022,\n\010left_out\030\003 \003(\0132\032."
      "apollo.routing.CurveRange\022-\n\tright_out\030\004"
      " \003(\0132\032.apollo.routing.CurveRange\022\014\n\004cost"
      "\030\005 \001(\001\022*\n\rcentral_curve\030\006 \001(\0132\023.apollo.h"
      "dmap.Curve\022\030\n\nis_virtual\030\007 \001(\010:\004true\022\017\n\007"
      "road_id\030\010 \001(\t\"\255\001\n\004Edge\022\024\n\014from_lane_id\030\001"
      " \001(\t\022\022\n\nto_lane_id\030\002 \001(\t\022\014\n\004cost\030\003 \001(\001\022:"
      "\n\016direction_type\030\004 \001(\0162\".apollo.routing."
      "Edge.DirectionType\"1\n\rDirectionType\022\013\n\007F"
      "ORWARD\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\"~\n\005Graph\022\025"
      "\n\rhdmap_version\030\001 \001(\t\022\026\n\016hdmap_district\030"
      "\002 \001(\t\022\"\n\004node\030\003 \003(\0132\024.apollo.routing.Nod"
      "e\022\"\n\004edge\030\004 \003(\0132\024.apollo.routing.Edge"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 757);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/routing/proto/topo_graph.proto", &protobuf_RegisterTypes);
  ::apollo::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto

const ::google::protobuf::EnumDescriptor* Edge_DirectionType_descriptor() {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_enum_descriptors[0];
}
bool Edge_DirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Edge_DirectionType Edge::FORWARD;
const Edge_DirectionType Edge::LEFT;
const Edge_DirectionType Edge::RIGHT;
const Edge_DirectionType Edge::DirectionType_MIN;
const Edge_DirectionType Edge::DirectionType_MAX;
const int Edge::DirectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurvePoint::kSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurvePoint::CurvePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.CurvePoint)
}
CurvePoint::CurvePoint(const CurvePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  s_ = from.s_;
  // @@protoc_insertion_point(copy_constructor:apollo.routing.CurvePoint)
}

void CurvePoint::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
}

CurvePoint::~CurvePoint() {
  // @@protoc_insertion_point(destructor:apollo.routing.CurvePoint)
  SharedDtor();
}

void CurvePoint::SharedDtor() {
}

void CurvePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurvePoint::descriptor() {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurvePoint& CurvePoint::default_instance() {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

CurvePoint* CurvePoint::New(::google::protobuf::Arena* arena) const {
  CurvePoint* n = new CurvePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurvePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.CurvePoint)
  s_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurvePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.CurvePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.CurvePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.CurvePoint)
  return false;
#undef DO_
}

void CurvePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.CurvePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.CurvePoint)
}

::google::protobuf::uint8* CurvePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.CurvePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.CurvePoint)
  return target;
}

size_t CurvePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.CurvePoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional double s = 1;
  if (has_s()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurvePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.CurvePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const CurvePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurvePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.CurvePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.CurvePoint)
    MergeFrom(*source);
  }
}

void CurvePoint::MergeFrom(const CurvePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.CurvePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_s()) {
    set_s(from.s());
  }
}

void CurvePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.CurvePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurvePoint::CopyFrom(const CurvePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.CurvePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurvePoint::IsInitialized() const {
  return true;
}

void CurvePoint::Swap(CurvePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurvePoint::InternalSwap(CurvePoint* other) {
  std::swap(s_, other->s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurvePoint::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurvePoint

// optional double s = 1;
bool CurvePoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CurvePoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void CurvePoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void CurvePoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
double CurvePoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.routing.CurvePoint.s)
  return s_;
}
void CurvePoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.CurvePoint.s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurveRange::kStartFieldNumber;
const int CurveRange::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurveRange::CurveRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.CurveRange)
}
CurveRange::CurveRange(const CurveRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::apollo::routing::CurvePoint(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_end()) {
    end_ = new ::apollo::routing::CurvePoint(*from.end_);
  } else {
    end_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.CurveRange)
}

void CurveRange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
}

CurveRange::~CurveRange() {
  // @@protoc_insertion_point(destructor:apollo.routing.CurveRange)
  SharedDtor();
}

void CurveRange::SharedDtor() {
  if (this != internal_default_instance()) {
    delete start_;
  }
  if (this != internal_default_instance()) {
    delete end_;
  }
}

void CurveRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurveRange::descriptor() {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurveRange& CurveRange::default_instance() {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

CurveRange* CurveRange::New(::google::protobuf::Arena* arena) const {
  CurveRange* n = new CurveRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurveRange::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.CurveRange)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_start()) {
      GOOGLE_DCHECK(start_ != NULL);
      start_->::apollo::routing::CurvePoint::Clear();
    }
    if (has_end()) {
      GOOGLE_DCHECK(end_ != NULL);
      end_->::apollo::routing::CurvePoint::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurveRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.CurveRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.routing.CurvePoint start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.CurvePoint end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.CurveRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.CurveRange)
  return false;
#undef DO_
}

void CurveRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.CurveRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.routing.CurvePoint start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->start_, output);
  }

  // optional .apollo.routing.CurvePoint end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->end_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.CurveRange)
}

::google::protobuf::uint8* CurveRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.CurveRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.routing.CurvePoint start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->start_, deterministic, target);
  }

  // optional .apollo.routing.CurvePoint end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->end_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.CurveRange)
  return target;
}

size_t CurveRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.CurveRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.routing.CurvePoint start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_);
    }

    // optional .apollo.routing.CurvePoint end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->end_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurveRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.CurveRange)
  GOOGLE_DCHECK_NE(&from, this);
  const CurveRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurveRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.CurveRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.CurveRange)
    MergeFrom(*source);
  }
}

void CurveRange::MergeFrom(const CurveRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.CurveRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_start()->::apollo::routing::CurvePoint::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_end()->::apollo::routing::CurvePoint::MergeFrom(from.end());
    }
  }
}

void CurveRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.CurveRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurveRange::CopyFrom(const CurveRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.CurveRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurveRange::IsInitialized() const {
  return true;
}

void CurveRange::Swap(CurveRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurveRange::InternalSwap(CurveRange* other) {
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurveRange::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurveRange

// optional .apollo.routing.CurvePoint start = 1;
bool CurveRange::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CurveRange::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
void CurveRange::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
void CurveRange::clear_start() {
  if (start_ != NULL) start_->::apollo::routing::CurvePoint::Clear();
  clear_has_start();
}
const ::apollo::routing::CurvePoint& CurveRange::start() const {
  // @@protoc_insertion_point(field_get:apollo.routing.CurveRange.start)
  return start_ != NULL ? *start_
                         : *::apollo::routing::CurvePoint::internal_default_instance();
}
::apollo::routing::CurvePoint* CurveRange::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::apollo::routing::CurvePoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.CurveRange.start)
  return start_;
}
::apollo::routing::CurvePoint* CurveRange::release_start() {
  // @@protoc_insertion_point(field_release:apollo.routing.CurveRange.start)
  clear_has_start();
  ::apollo::routing::CurvePoint* temp = start_;
  start_ = NULL;
  return temp;
}
void CurveRange::set_allocated_start(::apollo::routing::CurvePoint* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.CurveRange.start)
}

// optional .apollo.routing.CurvePoint end = 2;
bool CurveRange::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CurveRange::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
void CurveRange::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void CurveRange::clear_end() {
  if (end_ != NULL) end_->::apollo::routing::CurvePoint::Clear();
  clear_has_end();
}
const ::apollo::routing::CurvePoint& CurveRange::end() const {
  // @@protoc_insertion_point(field_get:apollo.routing.CurveRange.end)
  return end_ != NULL ? *end_
                         : *::apollo::routing::CurvePoint::internal_default_instance();
}
::apollo::routing::CurvePoint* CurveRange::mutable_end() {
  set_has_end();
  if (end_ == NULL) {
    end_ = new ::apollo::routing::CurvePoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.CurveRange.end)
  return end_;
}
::apollo::routing::CurvePoint* CurveRange::release_end() {
  // @@protoc_insertion_point(field_release:apollo.routing.CurveRange.end)
  clear_has_end();
  ::apollo::routing::CurvePoint* temp = end_;
  end_ = NULL;
  return temp;
}
void CurveRange::set_allocated_end(::apollo::routing::CurvePoint* end) {
  delete end_;
  end_ = end;
  if (end) {
    set_has_end();
  } else {
    clear_has_end();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.CurveRange.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kLaneIdFieldNumber;
const int Node::kLengthFieldNumber;
const int Node::kLeftOutFieldNumber;
const int Node::kRightOutFieldNumber;
const int Node::kCostFieldNumber;
const int Node::kCentralCurveFieldNumber;
const int Node::kIsVirtualFieldNumber;
const int Node::kRoadIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      left_out_(from.left_out_),
      right_out_(from.right_out_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lane_id()) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_road_id()) {
    road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.road_id_);
  }
  if (from.has_central_curve()) {
    central_curve_ = new ::apollo::hdmap::Curve(*from.central_curve_);
  } else {
    central_curve_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    reinterpret_cast<char*>(&is_virtual_) -
    reinterpret_cast<char*>(&length_) + sizeof(is_virtual_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Node)
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&central_curve_, 0, reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&central_curve_) + sizeof(cost_));
  is_virtual_ = true;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:apollo.routing.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  road_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete central_curve_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node& Node::default_instance() {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Node)
  left_out_.Clear();
  right_out_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_lane_id()) {
      GOOGLE_DCHECK(!lane_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lane_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_road_id()) {
      GOOGLE_DCHECK(!road_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*road_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_central_curve()) {
      GOOGLE_DCHECK(central_curve_ != NULL);
      central_curve_->::apollo::hdmap::Curve::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&length_, 0, reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&length_) + sizeof(cost_));
    is_virtual_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), this->lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Node.lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.routing.CurveRange left_out = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_left_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.routing.CurveRange right_out = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_right_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cost = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Curve central_curve = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_central_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_virtual = 7 [default = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_virtual();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_virtual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string road_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_road_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->road_id().data(), this->road_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Node.road_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Node.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // repeated .apollo.routing.CurveRange left_out = 3;
  for (unsigned int i = 0, n = this->left_out_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->left_out(i), output);
  }

  // repeated .apollo.routing.CurveRange right_out = 4;
  for (unsigned int i = 0, n = this->right_out_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->right_out(i), output);
  }

  // optional double cost = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->cost(), output);
  }

  // optional .apollo.hdmap.Curve central_curve = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->central_curve_, output);
  }

  // optional bool is_virtual = 7 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_virtual(), output);
  }

  // optional string road_id = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road_id().data(), this->road_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Node.road_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->road_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Node.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // repeated .apollo.routing.CurveRange left_out = 3;
  for (unsigned int i = 0, n = this->left_out_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->left_out(i), deterministic, target);
  }

  // repeated .apollo.routing.CurveRange right_out = 4;
  for (unsigned int i = 0, n = this->right_out_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->right_out(i), deterministic, target);
  }

  // optional double cost = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->cost(), target);
  }

  // optional .apollo.hdmap.Curve central_curve = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->central_curve_, deterministic, target);
  }

  // optional bool is_virtual = 7 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_virtual(), target);
  }

  // optional string road_id = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road_id().data(), this->road_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Node.road_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->road_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.routing.CurveRange left_out = 3;
  {
    unsigned int count = this->left_out_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_out(i));
    }
  }

  // repeated .apollo.routing.CurveRange right_out = 4;
  {
    unsigned int count = this->right_out_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_out(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string lane_id = 1;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional string road_id = 8;
    if (has_road_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->road_id());
    }

    // optional .apollo.hdmap.Curve central_curve = 6;
    if (has_central_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->central_curve_);
    }

    // optional double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double cost = 5;
    if (has_cost()) {
      total_size += 1 + 8;
    }

    // optional bool is_virtual = 7 [default = true];
    if (has_is_virtual()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_out_.MergeFrom(from.left_out_);
  right_out_.MergeFrom(from.right_out_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_road_id();
      road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.road_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_central_curve()->::apollo::hdmap::Curve::MergeFrom(from.central_curve());
    }
    if (cached_has_bits & 0x00000008u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000010u) {
      cost_ = from.cost_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_virtual_ = from.is_virtual_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  left_out_.InternalSwap(&other->left_out_);
  right_out_.InternalSwap(&other->right_out_);
  lane_id_.Swap(&other->lane_id_);
  road_id_.Swap(&other->road_id_);
  std::swap(central_curve_, other->central_curve_);
  std::swap(length_, other->length_);
  std::swap(cost_, other->cost_);
  std::swap(is_virtual_, other->is_virtual_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional string lane_id = 1;
bool Node::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Node::set_has_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Node::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Node::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
const ::std::string& Node::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.lane_id)
  return lane_id_.GetNoArena();
}
void Node::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.Node.lane_id)
}
#if LANG_CXX11
void Node::set_lane_id(::std::string&& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.Node.lane_id)
}
#endif
void Node::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.Node.lane_id)
}
void Node::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.Node.lane_id)
}
::std::string* Node::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Node.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.Node.lane_id)
  clear_has_lane_id();
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Node.lane_id)
}

// optional double length = 2;
bool Node::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Node::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
void Node::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
void Node::clear_length() {
  length_ = 0;
  clear_has_length();
}
double Node::length() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.length)
  return length_;
}
void Node::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.Node.length)
}

// repeated .apollo.routing.CurveRange left_out = 3;
int Node::left_out_size() const {
  return left_out_.size();
}
void Node::clear_left_out() {
  left_out_.Clear();
}
const ::apollo::routing::CurveRange& Node::left_out(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.left_out)
  return left_out_.Get(index);
}
::apollo::routing::CurveRange* Node::mutable_left_out(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Node.left_out)
  return left_out_.Mutable(index);
}
::apollo::routing::CurveRange* Node::add_left_out() {
  // @@protoc_insertion_point(field_add:apollo.routing.Node.left_out)
  return left_out_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::routing::CurveRange >*
Node::mutable_left_out() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Node.left_out)
  return &left_out_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::routing::CurveRange >&
Node::left_out() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Node.left_out)
  return left_out_;
}

// repeated .apollo.routing.CurveRange right_out = 4;
int Node::right_out_size() const {
  return right_out_.size();
}
void Node::clear_right_out() {
  right_out_.Clear();
}
const ::apollo::routing::CurveRange& Node::right_out(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.right_out)
  return right_out_.Get(index);
}
::apollo::routing::CurveRange* Node::mutable_right_out(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Node.right_out)
  return right_out_.Mutable(index);
}
::apollo::routing::CurveRange* Node::add_right_out() {
  // @@protoc_insertion_point(field_add:apollo.routing.Node.right_out)
  return right_out_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::routing::CurveRange >*
Node::mutable_right_out() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Node.right_out)
  return &right_out_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::routing::CurveRange >&
Node::right_out() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Node.right_out)
  return right_out_;
}

// optional double cost = 5;
bool Node::has_cost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Node::set_has_cost() {
  _has_bits_[0] |= 0x00000010u;
}
void Node::clear_has_cost() {
  _has_bits_[0] &= ~0x00000010u;
}
void Node::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
double Node::cost() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.cost)
  return cost_;
}
void Node::set_cost(double value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.Node.cost)
}

// optional .apollo.hdmap.Curve central_curve = 6;
bool Node::has_central_curve() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Node::set_has_central_curve() {
  _has_bits_[0] |= 0x00000004u;
}
void Node::clear_has_central_curve() {
  _has_bits_[0] &= ~0x00000004u;
}
void Node::clear_central_curve() {
  if (central_curve_ != NULL) central_curve_->::apollo::hdmap::Curve::Clear();
  clear_has_central_curve();
}
const ::apollo::hdmap::Curve& Node::central_curve() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.central_curve)
  return central_curve_ != NULL ? *central_curve_
                         : *::apollo::hdmap::Curve::internal_default_instance();
}
::apollo::hdmap::Curve* Node::mutable_central_curve() {
  set_has_central_curve();
  if (central_curve_ == NULL) {
    central_curve_ = new ::apollo::hdmap::Curve;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.Node.central_curve)
  return central_curve_;
}
::apollo::hdmap::Curve* Node::release_central_curve() {
  // @@protoc_insertion_point(field_release:apollo.routing.Node.central_curve)
  clear_has_central_curve();
  ::apollo::hdmap::Curve* temp = central_curve_;
  central_curve_ = NULL;
  return temp;
}
void Node::set_allocated_central_curve(::apollo::hdmap::Curve* central_curve) {
  delete central_curve_;
  central_curve_ = central_curve;
  if (central_curve) {
    set_has_central_curve();
  } else {
    clear_has_central_curve();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Node.central_curve)
}

// optional bool is_virtual = 7 [default = true];
bool Node::has_is_virtual() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Node::set_has_is_virtual() {
  _has_bits_[0] |= 0x00000020u;
}
void Node::clear_has_is_virtual() {
  _has_bits_[0] &= ~0x00000020u;
}
void Node::clear_is_virtual() {
  is_virtual_ = true;
  clear_has_is_virtual();
}
bool Node::is_virtual() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.is_virtual)
  return is_virtual_;
}
void Node::set_is_virtual(bool value) {
  set_has_is_virtual();
  is_virtual_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.Node.is_virtual)
}

// optional string road_id = 8;
bool Node::has_road_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Node::set_has_road_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Node::clear_has_road_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Node::clear_road_id() {
  road_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_road_id();
}
const ::std::string& Node::road_id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.road_id)
  return road_id_.GetNoArena();
}
void Node::set_road_id(const ::std::string& value) {
  set_has_road_id();
  road_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.Node.road_id)
}
#if LANG_CXX11
void Node::set_road_id(::std::string&& value) {
  set_has_road_id();
  road_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.Node.road_id)
}
#endif
void Node::set_road_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_road_id();
  road_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.Node.road_id)
}
void Node::set_road_id(const char* value, size_t size) {
  set_has_road_id();
  road_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.Node.road_id)
}
::std::string* Node::mutable_road_id() {
  set_has_road_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Node.road_id)
  return road_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node::release_road_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.Node.road_id)
  clear_has_road_id();
  return road_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_allocated_road_id(::std::string* road_id) {
  if (road_id != NULL) {
    set_has_road_id();
  } else {
    clear_has_road_id();
  }
  road_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), road_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Node.road_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edge::kFromLaneIdFieldNumber;
const int Edge::kToLaneIdFieldNumber;
const int Edge::kCostFieldNumber;
const int Edge::kDirectionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edge::Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.Edge)
}
Edge::Edge(const Edge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_lane_id()) {
    from_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_lane_id_);
  }
  to_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_lane_id()) {
    to_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_lane_id_);
  }
  ::memcpy(&cost_, &from.cost_,
    reinterpret_cast<char*>(&direction_type_) -
    reinterpret_cast<char*>(&cost_) + sizeof(direction_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Edge)
}

void Edge::SharedCtor() {
  _cached_size_ = 0;
  from_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cost_, 0, reinterpret_cast<char*>(&direction_type_) -
    reinterpret_cast<char*>(&cost_) + sizeof(direction_type_));
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:apollo.routing.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
  from_lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Edge& Edge::default_instance() {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

Edge* Edge::New(::google::protobuf::Arena* arena) const {
  Edge* n = new Edge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Edge)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_from_lane_id()) {
      GOOGLE_DCHECK(!from_lane_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_lane_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_to_lane_id()) {
      GOOGLE_DCHECK(!to_lane_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_lane_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&cost_, 0, reinterpret_cast<char*>(&direction_type_) -
      reinterpret_cast<char*>(&cost_) + sizeof(direction_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from_lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_lane_id().data(), this->from_lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Edge.from_lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_lane_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_lane_id().data(), this->to_lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Edge.to_lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.Edge.DirectionType direction_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::routing::Edge_DirectionType_IsValid(value)) {
            set_direction_type(static_cast< ::apollo::routing::Edge_DirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from_lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_lane_id().data(), this->from_lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Edge.from_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_lane_id(), output);
  }

  // optional string to_lane_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_lane_id().data(), this->to_lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Edge.to_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->to_lane_id(), output);
  }

  // optional double cost = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cost(), output);
  }

  // optional .apollo.routing.Edge.DirectionType direction_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.Edge)
}

::google::protobuf::uint8* Edge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from_lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_lane_id().data(), this->from_lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Edge.from_lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_lane_id(), target);
  }

  // optional string to_lane_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_lane_id().data(), this->to_lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Edge.to_lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to_lane_id(), target);
  }

  // optional double cost = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cost(), target);
  }

  // optional .apollo.routing.Edge.DirectionType direction_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Edge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string from_lane_id = 1;
    if (has_from_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_lane_id());
    }

    // optional string to_lane_id = 2;
    if (has_to_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_lane_id());
    }

    // optional double cost = 3;
    if (has_cost()) {
      total_size += 1 + 8;
    }

    // optional .apollo.routing.Edge.DirectionType direction_type = 4;
    if (has_direction_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const Edge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.Edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_lane_id();
      from_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to_lane_id();
      to_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_lane_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      cost_ = from.cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      direction_type_ = from.direction_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::Swap(Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edge::InternalSwap(Edge* other) {
  from_lane_id_.Swap(&other->from_lane_id_);
  to_lane_id_.Swap(&other->to_lane_id_);
  std::swap(cost_, other->cost_);
  std::swap(direction_type_, other->direction_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edge

// optional string from_lane_id = 1;
bool Edge::has_from_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Edge::set_has_from_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Edge::clear_has_from_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Edge::clear_from_lane_id() {
  from_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_lane_id();
}
const ::std::string& Edge::from_lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Edge.from_lane_id)
  return from_lane_id_.GetNoArena();
}
void Edge::set_from_lane_id(const ::std::string& value) {
  set_has_from_lane_id();
  from_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.Edge.from_lane_id)
}
#if LANG_CXX11
void Edge::set_from_lane_id(::std::string&& value) {
  set_has_from_lane_id();
  from_lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.Edge.from_lane_id)
}
#endif
void Edge::set_from_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_lane_id();
  from_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.Edge.from_lane_id)
}
void Edge::set_from_lane_id(const char* value, size_t size) {
  set_has_from_lane_id();
  from_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.Edge.from_lane_id)
}
::std::string* Edge::mutable_from_lane_id() {
  set_has_from_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Edge.from_lane_id)
  return from_lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Edge::release_from_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.Edge.from_lane_id)
  clear_has_from_lane_id();
  return from_lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Edge::set_allocated_from_lane_id(::std::string* from_lane_id) {
  if (from_lane_id != NULL) {
    set_has_from_lane_id();
  } else {
    clear_has_from_lane_id();
  }
  from_lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Edge.from_lane_id)
}

// optional string to_lane_id = 2;
bool Edge::has_to_lane_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Edge::set_has_to_lane_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Edge::clear_has_to_lane_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Edge::clear_to_lane_id() {
  to_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_lane_id();
}
const ::std::string& Edge::to_lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Edge.to_lane_id)
  return to_lane_id_.GetNoArena();
}
void Edge::set_to_lane_id(const ::std::string& value) {
  set_has_to_lane_id();
  to_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.Edge.to_lane_id)
}
#if LANG_CXX11
void Edge::set_to_lane_id(::std::string&& value) {
  set_has_to_lane_id();
  to_lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.Edge.to_lane_id)
}
#endif
void Edge::set_to_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_lane_id();
  to_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.Edge.to_lane_id)
}
void Edge::set_to_lane_id(const char* value, size_t size) {
  set_has_to_lane_id();
  to_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.Edge.to_lane_id)
}
::std::string* Edge::mutable_to_lane_id() {
  set_has_to_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Edge.to_lane_id)
  return to_lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Edge::release_to_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.Edge.to_lane_id)
  clear_has_to_lane_id();
  return to_lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Edge::set_allocated_to_lane_id(::std::string* to_lane_id) {
  if (to_lane_id != NULL) {
    set_has_to_lane_id();
  } else {
    clear_has_to_lane_id();
  }
  to_lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Edge.to_lane_id)
}

// optional double cost = 3;
bool Edge::has_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Edge::set_has_cost() {
  _has_bits_[0] |= 0x00000004u;
}
void Edge::clear_has_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
void Edge::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
double Edge::cost() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Edge.cost)
  return cost_;
}
void Edge::set_cost(double value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.Edge.cost)
}

// optional .apollo.routing.Edge.DirectionType direction_type = 4;
bool Edge::has_direction_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Edge::set_has_direction_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Edge::clear_has_direction_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Edge::clear_direction_type() {
  direction_type_ = 0;
  clear_has_direction_type();
}
::apollo::routing::Edge_DirectionType Edge::direction_type() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Edge.direction_type)
  return static_cast< ::apollo::routing::Edge_DirectionType >(direction_type_);
}
void Edge::set_direction_type(::apollo::routing::Edge_DirectionType value) {
  assert(::apollo::routing::Edge_DirectionType_IsValid(value));
  set_has_direction_type();
  direction_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.Edge.direction_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Graph::kHdmapVersionFieldNumber;
const int Graph::kHdmapDistrictFieldNumber;
const int Graph::kNodeFieldNumber;
const int Graph::kEdgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Graph::Graph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.Graph)
}
Graph::Graph(const Graph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      node_(from.node_),
      edge_(from.edge_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdmap_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hdmap_version()) {
    hdmap_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdmap_version_);
  }
  hdmap_district_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hdmap_district()) {
    hdmap_district_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdmap_district_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Graph)
}

void Graph::SharedCtor() {
  _cached_size_ = 0;
  hdmap_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hdmap_district_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:apollo.routing.Graph)
  SharedDtor();
}

void Graph::SharedDtor() {
  hdmap_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hdmap_district_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Graph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Graph::descriptor() {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Graph& Graph::default_instance() {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

Graph* Graph::New(::google::protobuf::Arena* arena) const {
  Graph* n = new Graph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Graph)
  node_.Clear();
  edge_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hdmap_version()) {
      GOOGLE_DCHECK(!hdmap_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hdmap_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_hdmap_district()) {
      GOOGLE_DCHECK(!hdmap_district_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hdmap_district_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Graph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.Graph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hdmap_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdmap_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hdmap_version().data(), this->hdmap_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Graph.hdmap_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hdmap_district = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdmap_district()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hdmap_district().data(), this->hdmap_district().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Graph.hdmap_district");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.routing.Node node = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.routing.Edge edge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.Graph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.Graph)
  return false;
#undef DO_
}

void Graph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.Graph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hdmap_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hdmap_version().data(), this->hdmap_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Graph.hdmap_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hdmap_version(), output);
  }

  // optional string hdmap_district = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hdmap_district().data(), this->hdmap_district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Graph.hdmap_district");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hdmap_district(), output);
  }

  // repeated .apollo.routing.Node node = 3;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node(i), output);
  }

  // repeated .apollo.routing.Edge edge = 4;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->edge(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.Graph)
}

::google::protobuf::uint8* Graph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Graph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hdmap_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hdmap_version().data(), this->hdmap_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Graph.hdmap_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hdmap_version(), target);
  }

  // optional string hdmap_district = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hdmap_district().data(), this->hdmap_district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Graph.hdmap_district");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hdmap_district(), target);
  }

  // repeated .apollo.routing.Node node = 3;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->node(i), deterministic, target);
  }

  // repeated .apollo.routing.Edge edge = 4;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->edge(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Graph)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.routing.Node node = 3;
  {
    unsigned int count = this->node_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node(i));
    }
  }

  // repeated .apollo.routing.Edge edge = 4;
  {
    unsigned int count = this->edge_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edge(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string hdmap_version = 1;
    if (has_hdmap_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hdmap_version());
    }

    // optional string hdmap_district = 2;
    if (has_hdmap_district()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hdmap_district());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Graph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  const Graph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Graph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.Graph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.Graph)
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  edge_.MergeFrom(from.edge_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hdmap_version();
      hdmap_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdmap_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hdmap_district();
      hdmap_district_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdmap_district_);
    }
  }
}

void Graph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::Swap(Graph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Graph::InternalSwap(Graph* other) {
  node_.InternalSwap(&other->node_);
  edge_.InternalSwap(&other->edge_);
  hdmap_version_.Swap(&other->hdmap_version_);
  hdmap_district_.Swap(&other->hdmap_district_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Graph::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Graph

// optional string hdmap_version = 1;
bool Graph::has_hdmap_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Graph::set_has_hdmap_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Graph::clear_has_hdmap_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Graph::clear_hdmap_version() {
  hdmap_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hdmap_version();
}
const ::std::string& Graph::hdmap_version() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Graph.hdmap_version)
  return hdmap_version_.GetNoArena();
}
void Graph::set_hdmap_version(const ::std::string& value) {
  set_has_hdmap_version();
  hdmap_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.Graph.hdmap_version)
}
#if LANG_CXX11
void Graph::set_hdmap_version(::std::string&& value) {
  set_has_hdmap_version();
  hdmap_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.Graph.hdmap_version)
}
#endif
void Graph::set_hdmap_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hdmap_version();
  hdmap_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.Graph.hdmap_version)
}
void Graph::set_hdmap_version(const char* value, size_t size) {
  set_has_hdmap_version();
  hdmap_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.Graph.hdmap_version)
}
::std::string* Graph::mutable_hdmap_version() {
  set_has_hdmap_version();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Graph.hdmap_version)
  return hdmap_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Graph::release_hdmap_version() {
  // @@protoc_insertion_point(field_release:apollo.routing.Graph.hdmap_version)
  clear_has_hdmap_version();
  return hdmap_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Graph::set_allocated_hdmap_version(::std::string* hdmap_version) {
  if (hdmap_version != NULL) {
    set_has_hdmap_version();
  } else {
    clear_has_hdmap_version();
  }
  hdmap_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hdmap_version);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Graph.hdmap_version)
}

// optional string hdmap_district = 2;
bool Graph::has_hdmap_district() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Graph::set_has_hdmap_district() {
  _has_bits_[0] |= 0x00000002u;
}
void Graph::clear_has_hdmap_district() {
  _has_bits_[0] &= ~0x00000002u;
}
void Graph::clear_hdmap_district() {
  hdmap_district_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hdmap_district();
}
const ::std::string& Graph::hdmap_district() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Graph.hdmap_district)
  return hdmap_district_.GetNoArena();
}
void Graph::set_hdmap_district(const ::std::string& value) {
  set_has_hdmap_district();
  hdmap_district_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.Graph.hdmap_district)
}
#if LANG_CXX11
void Graph::set_hdmap_district(::std::string&& value) {
  set_has_hdmap_district();
  hdmap_district_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.Graph.hdmap_district)
}
#endif
void Graph::set_hdmap_district(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hdmap_district();
  hdmap_district_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.Graph.hdmap_district)
}
void Graph::set_hdmap_district(const char* value, size_t size) {
  set_has_hdmap_district();
  hdmap_district_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.Graph.hdmap_district)
}
::std::string* Graph::mutable_hdmap_district() {
  set_has_hdmap_district();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Graph.hdmap_district)
  return hdmap_district_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Graph::release_hdmap_district() {
  // @@protoc_insertion_point(field_release:apollo.routing.Graph.hdmap_district)
  clear_has_hdmap_district();
  return hdmap_district_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Graph::set_allocated_hdmap_district(::std::string* hdmap_district) {
  if (hdmap_district != NULL) {
    set_has_hdmap_district();
  } else {
    clear_has_hdmap_district();
  }
  hdmap_district_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hdmap_district);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Graph.hdmap_district)
}

// repeated .apollo.routing.Node node = 3;
int Graph::node_size() const {
  return node_.size();
}
void Graph::clear_node() {
  node_.Clear();
}
const ::apollo::routing::Node& Graph::node(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Graph.node)
  return node_.Get(index);
}
::apollo::routing::Node* Graph::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Graph.node)
  return node_.Mutable(index);
}
::apollo::routing::Node* Graph::add_node() {
  // @@protoc_insertion_point(field_add:apollo.routing.Graph.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::routing::Node >*
Graph::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Graph.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::routing::Node >&
Graph::node() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Graph.node)
  return node_;
}

// repeated .apollo.routing.Edge edge = 4;
int Graph::edge_size() const {
  return edge_.size();
}
void Graph::clear_edge() {
  edge_.Clear();
}
const ::apollo::routing::Edge& Graph::edge(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Graph.edge)
  return edge_.Get(index);
}
::apollo::routing::Edge* Graph::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Graph.edge)
  return edge_.Mutable(index);
}
::apollo::routing::Edge* Graph::add_edge() {
  // @@protoc_insertion_point(field_add:apollo.routing.Graph.edge)
  return edge_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::routing::Edge >*
Graph::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Graph.edge)
  return &edge_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::routing::Edge >&
Graph::edge() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Graph.edge)
  return edge_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
