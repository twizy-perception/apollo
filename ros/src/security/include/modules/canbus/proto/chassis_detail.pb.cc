// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/chassis_detail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/canbus/proto/chassis_detail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace canbus {
class ChassisDetailDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChassisDetail> {
} _ChassisDetail_default_instance_;
class CheckResponseSignalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckResponseSignal> {
} _CheckResponseSignal_default_instance_;
class BatteryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Battery> {
} _Battery_default_instance_;
class LightDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Light> {
} _Light_default_instance_;
class EpsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Eps> {
} _Eps_default_instance_;
class VehicleSpdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleSpd> {
} _VehicleSpd_default_instance_;
class DecelerationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Deceleration> {
} _Deceleration_default_instance_;
class BrakeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Brake> {
} _Brake_default_instance_;
class EpbDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Epb> {
} _Epb_default_instance_;
class GasDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gas> {
} _Gas_default_instance_;
class EspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esp> {
} _Esp_default_instance_;
class EmsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ems> {
} _Ems_default_instance_;
class GearDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gear> {
} _Gear_default_instance_;
class SafetyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Safety> {
} _Safety_default_instance_;
class BasicInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BasicInfo> {
} _BasicInfo_default_instance_;
class LicenseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<License> {
} _License_default_instance_;

namespace protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[16];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[13];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, car_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, basic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, safety_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, ems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, esp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, gas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, epb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, vehicle_spd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, eps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, battery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, check_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisDetail, license_),
  15,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_eps_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_epb_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_esp_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_vtog_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_scu_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_switch_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponseSignal, is_vcu_online_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battery, battery_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battery, fuel_level_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, turn_light_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, lamp_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, is_brake_lamp_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, is_auto_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, wiper_gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, lotion_gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, is_horn_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, lincoln_lamp_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, lincoln_wiper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, lincoln_ambient_),
  0,
  1,
  2,
  3,
  5,
  6,
  4,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, is_eps_fail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, eps_control_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, eps_driver_hand_torq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, is_steering_angle_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, steering_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, steering_angle_spd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, is_trimming_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, is_calibration_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, is_failure_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, allow_enter_autonomous_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, current_driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, steering_angle_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, vehicle_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, epas_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, steering_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, driver_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, driver_activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, watchdog_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, channel_1_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, channel_2_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, calibration_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, connector_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, timestamp_65_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, major_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, minor_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps, build_number_),
  2,
  1,
  0,
  3,
  6,
  7,
  4,
  5,
  13,
  8,
  9,
  10,
  11,
  12,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  22,
  21,
  23,
  24,
  25,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_vehicle_standstill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_vehicle_spd_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, vehicle_spd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_wheel_spd_rr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_direction_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_spd_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_wheel_spd_rl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_direction_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_spd_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_wheel_spd_fr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_direction_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_spd_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_wheel_spd_fl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_direction_fl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, wheel_spd_fl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_yaw_rate_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, yaw_rate_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_ax_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, ax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, ax_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, is_ay_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, ay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, ay_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, lat_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, long_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, vert_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, roll_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, acc_est_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleSpd, timestamp_sec_),
  1,
  2,
  0,
  3,
  5,
  6,
  4,
  8,
  7,
  12,
  9,
  10,
  13,
  11,
  16,
  14,
  17,
  18,
  15,
  19,
  20,
  29,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, is_deceleration_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, is_deceleration_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, is_evb_fail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, evb_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, brake_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deceleration, brake_pressure_spd_),
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, is_brake_pedal_pressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, is_brake_force_exist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, is_brake_over_heat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, is_hand_brake_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_pedal_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, is_brake_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, boo_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, boo_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, boo_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, watchdog_applying_brakes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, watchdog_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, driver_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, driver_activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, watchdog_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, channel_1_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, channel_2_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, boo_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, connector_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_torque_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, hsa_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, brake_torque_act_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, hsa_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, wheel_torque_act_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, major_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, minor_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brake, build_number_),
  1,
  2,
  3,
  4,
  0,
  5,
  9,
  10,
  11,
  6,
  7,
  8,
  13,
  12,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  24,
  23,
  25,
  26,
  27,
  28,
  29,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Epb, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Epb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Epb, is_epb_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Epb, is_epb_released_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Epb, epb_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Epb, parking_brake_status_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, is_gas_pedal_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, is_gas_pedal_pressed_more_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, gas_pedal_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, is_gas_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, throttle_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, throttle_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, throttle_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, watchdog_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, throttle_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, driver_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, driver_activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, watchdog_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, channel_1_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, channel_2_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, connector_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, accelerator_pedal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, accelerator_pedal_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, major_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, minor_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gas, build_number_),
  1,
  2,
  0,
  3,
  6,
  7,
  8,
  5,
  4,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_esp_acc_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_esp_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_esp_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_abs_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_abs_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_tcsvdc_fail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_abs_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_stab_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_stab_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_trac_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp, is_trac_enabled_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, is_engine_acc_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, is_engine_acc_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, engine_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, max_engine_torq_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, min_engine_torq_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, base_engine_torq_constant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, is_engine_speed_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, engine_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, engine_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, is_over_engine_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ems, engine_rpm_),
  2,
  3,
  1,
  0,
  6,
  7,
  4,
  9,
  8,
  5,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, is_shift_position_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, gear_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, driver_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, gear_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gear, canbus_fault_),
  1,
  0,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_driver_car_door_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_driver_buckled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, emergency_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, has_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_motor_invertor_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_system_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_power_battery_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_motor_invertor_over_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_small_battery_charge_discharge_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_passenger_door_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_rearleft_door_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_rearright_door_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_hood_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_trunk_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_passenger_detected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_passenger_airbag_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, is_passenger_buckled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, front_left_tire_press_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, front_right_tire_press_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, rear_left_tire_press_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, rear_right_tire_press_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Safety, car_driving_mode_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, is_auto_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, power_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, is_air_bag_deployed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, odo_meter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, drive_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, is_system_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, is_human_interrupt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_on_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_off_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_res_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_cancel_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_on_off_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_res_cancel_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_inc_spd_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_dec_spd_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_inc_gap_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, acc_dec_gap_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, lka_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, canbus_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, gps_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, hours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, minutes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, compass_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, pdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, is_gps_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, is_inferred_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, hdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, vdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, num_satellites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicInfo, gps_speed_),
  1,
  0,
  2,
  5,
  6,
  3,
  4,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  20,
  21,
  27,
  19,
  22,
  23,
  24,
  25,
  26,
  30,
  31,
  28,
  29,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, vin_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 21, sizeof(ChassisDetail)},
  { 37, 49, sizeof(CheckResponseSignal)},
  { 56, 63, sizeof(Battery)},
  { 65, 80, sizeof(Light)},
  { 90, 121, sizeof(Eps)},
  { 147, 182, sizeof(VehicleSpd)},
  { 212, 224, sizeof(Deceleration)},
  { 231, 266, sizeof(Brake)},
  { 296, 305, sizeof(Epb)},
  { 309, 334, sizeof(Gas)},
  { 354, 370, sizeof(Esp)},
  { 381, 397, sizeof(Ems)},
  { 408, 418, sizeof(Gear)},
  { 423, 451, sizeof(Safety)},
  { 474, 518, sizeof(BasicInfo)},
  { 557, 563, sizeof(License)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChassisDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckResponseSignal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Battery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Light_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Eps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleSpd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Deceleration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Brake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Epb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gas_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ems_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gear_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Safety_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BasicInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_License_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/canbus/proto/chassis_detail.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

}  // namespace

void TableStruct::Shutdown() {
  _ChassisDetail_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CheckResponseSignal_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Battery_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Light_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Eps_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _VehicleSpd_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Deceleration_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Brake_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Epb_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Gas_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Esp_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Ems_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _Gear_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _Safety_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _BasicInfo_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _License_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  _ChassisDetail_default_instance_.DefaultConstruct();
  _CheckResponseSignal_default_instance_.DefaultConstruct();
  _Battery_default_instance_.DefaultConstruct();
  _Light_default_instance_.DefaultConstruct();
  _Eps_default_instance_.DefaultConstruct();
  _VehicleSpd_default_instance_.DefaultConstruct();
  _Deceleration_default_instance_.DefaultConstruct();
  _Brake_default_instance_.DefaultConstruct();
  _Epb_default_instance_.DefaultConstruct();
  _Gas_default_instance_.DefaultConstruct();
  _Esp_default_instance_.DefaultConstruct();
  _Ems_default_instance_.DefaultConstruct();
  _Gear_default_instance_.DefaultConstruct();
  _Safety_default_instance_.DefaultConstruct();
  _BasicInfo_default_instance_.DefaultConstruct();
  _License_default_instance_.DefaultConstruct();
  _ChassisDetail_default_instance_.get_mutable()->basic_ = const_cast< ::apollo::canbus::BasicInfo*>(
      ::apollo::canbus::BasicInfo::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->safety_ = const_cast< ::apollo::canbus::Safety*>(
      ::apollo::canbus::Safety::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->gear_ = const_cast< ::apollo::canbus::Gear*>(
      ::apollo::canbus::Gear::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->ems_ = const_cast< ::apollo::canbus::Ems*>(
      ::apollo::canbus::Ems::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->esp_ = const_cast< ::apollo::canbus::Esp*>(
      ::apollo::canbus::Esp::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->gas_ = const_cast< ::apollo::canbus::Gas*>(
      ::apollo::canbus::Gas::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->epb_ = const_cast< ::apollo::canbus::Epb*>(
      ::apollo::canbus::Epb::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->brake_ = const_cast< ::apollo::canbus::Brake*>(
      ::apollo::canbus::Brake::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->deceleration_ = const_cast< ::apollo::canbus::Deceleration*>(
      ::apollo::canbus::Deceleration::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->vehicle_spd_ = const_cast< ::apollo::canbus::VehicleSpd*>(
      ::apollo::canbus::VehicleSpd::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->eps_ = const_cast< ::apollo::canbus::Eps*>(
      ::apollo::canbus::Eps::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->light_ = const_cast< ::apollo::canbus::Light*>(
      ::apollo::canbus::Light::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->battery_ = const_cast< ::apollo::canbus::Battery*>(
      ::apollo::canbus::Battery::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->check_response_ = const_cast< ::apollo::canbus::CheckResponseSignal*>(
      ::apollo::canbus::CheckResponseSignal::internal_default_instance());
  _ChassisDetail_default_instance_.get_mutable()->license_ = const_cast< ::apollo::canbus::License*>(
      ::apollo::canbus::License::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n)modules/canbus/proto/chassis_detail.pr"
      "oto\022\rapollo.canbus\032\"modules/canbus/proto"
      "/chassis.proto\"\306\005\n\rChassisDetail\0223\n\010car_"
      "type\030\001 \001(\0162!.apollo.canbus.ChassisDetail"
      ".Type\022\'\n\005basic\030\002 \001(\0132\030.apollo.canbus.Bas"
      "icInfo\022%\n\006safety\030\003 \001(\0132\025.apollo.canbus.S"
      "afety\022!\n\004gear\030\004 \001(\0132\023.apollo.canbus.Gear"
      "\022\037\n\003ems\030\005 \001(\0132\022.apollo.canbus.Ems\022\037\n\003esp"
      "\030\006 \001(\0132\022.apollo.canbus.Esp\022\037\n\003gas\030\007 \001(\0132"
      "\022.apollo.canbus.Gas\022\037\n\003epb\030\010 \001(\0132\022.apoll"
      "o.canbus.Epb\022#\n\005brake\030\t \001(\0132\024.apollo.can"
      "bus.Brake\0221\n\014deceleration\030\n \001(\0132\033.apollo"
      ".canbus.Deceleration\022.\n\013vehicle_spd\030\013 \001("
      "\0132\031.apollo.canbus.VehicleSpd\022\037\n\003eps\030\014 \001("
      "\0132\022.apollo.canbus.Eps\022#\n\005light\030\r \001(\0132\024.a"
      "pollo.canbus.Light\022\'\n\007battery\030\016 \001(\0132\026.ap"
      "ollo.canbus.Battery\022:\n\016check_response\030\017 "
      "\001(\0132\".apollo.canbus.CheckResponseSignal\022"
      "\'\n\007license\030\020 \001(\0132\026.apollo.canbus.License"
      "\"-\n\004Type\022\017\n\013QIRUI_EQ_15\020\000\022\024\n\020CHANGAN_RUI"
      "CHENG\020\001\"\353\001\n\023CheckResponseSignal\022\034\n\ris_ep"
      "s_online\030\001 \001(\010:\005false\022\034\n\ris_epb_online\030\002"
      " \001(\010:\005false\022\034\n\ris_esp_online\030\003 \001(\010:\005fals"
      "e\022\035\n\016is_vtog_online\030\004 \001(\010:\005false\022\034\n\ris_s"
      "cu_online\030\005 \001(\010:\005false\022\037\n\020is_switch_onli"
      "ne\030\006 \001(\010:\005false\022\034\n\ris_vcu_online\030\007 \001(\010:\005"
      "false\"6\n\007Battery\022\027\n\017battery_percent\030\001 \001("
      "\001\022\022\n\nfuel_level\030\002 \001(\001\"\244\t\n\005Light\022;\n\017turn_"
      "light_type\030\001 \001(\0162\".apollo.canbus.Light.T"
      "urnLightType\0220\n\tlamp_type\030\002 \001(\0162\035.apollo"
      ".canbus.Light.LampType\022\030\n\020is_brake_lamp_"
      "on\030\003 \001(\010\022\025\n\ris_auto_light\030\004 \001(\010\022\022\n\nwiper"
      "_gear\030\005 \001(\005\022\023\n\013lotion_gear\030\006 \001(\005\022\022\n\nis_h"
      "orn_on\030\007 \001(\010\022\?\n\021lincoln_lamp_type\030\010 \001(\0162"
      "$.apollo.canbus.Light.LincolnLampType\022<\n"
      "\rlincoln_wiper\030\t \001(\0162%.apollo.canbus.Lig"
      "ht.LincolnWiperType\022@\n\017lincoln_ambient\030\n"
      " \001(\0162\'.apollo.canbus.Light.LincolnAmbien"
      "tType\"[\n\rTurnLightType\022\022\n\016TURN_LIGHT_OFF"
      "\020\000\022\020\n\014TURN_LEFT_ON\020\001\022\021\n\rTURN_RIGHT_ON\020\002\022"
      "\021\n\rTURN_LIGHT_ON\020\003\";\n\010LampType\022\014\n\010BEAM_O"
      "FF\020\000\022\020\n\014HIGH_BEAM_ON\020\001\022\017\n\013LOW_BEAM_ON\020\002\""
      "Y\n\017LincolnLampType\022\r\n\tBEAM_NULL\020\000\022\026\n\022BEA"
      "M_FLASH_TO_PASS\020\001\022\r\n\tBEAM_HIGH\020\002\022\020\n\014BEAM"
      "_INVALID\020\003\"\334\002\n\020LincolnWiperType\022\r\n\tWIPER"
      "_OFF\020\000\022\022\n\016WIPER_AUTO_OFF\020\001\022\024\n\020WIPER_OFF_"
      "MOVING\020\002\022\024\n\020WIPER_MANUAL_OFF\020\003\022\023\n\017WIPER_"
      "MANUAL_ON\020\004\022\024\n\020WIPER_MANUAL_LOW\020\005\022\025\n\021WIP"
      "ER_MANUAL_HIGH\020\006\022\024\n\020WIPER_MIST_FLICK\020\007\022\016"
      "\n\nWIPER_WASH\020\010\022\022\n\016WIPER_AUTO_LOW\020\t\022\023\n\017WI"
      "PER_AUTO_HIGH\020\n\022\027\n\023WIPER_COURTESY_WIPE\020\013"
      "\022\025\n\021WIPER_AUTO_ADJUST\020\014\022\022\n\016WIPER_RESERVE"
      "D\020\r\022\021\n\rWIPER_STALLED\020\016\022\021\n\rWIPER_NO_DATA\020"
      "\017\"\250\001\n\022LincolnAmbientType\022\020\n\014AMBIENT_DARK"
      "\020\000\022\021\n\rAMBIENT_LIGHT\020\001\022\024\n\020AMBIENT_TWILIGH"
      "T\020\002\022\025\n\021AMBIENT_TUNNEL_ON\020\003\022\026\n\022AMBIENT_TU"
      "NNEL_OFF\020\004\022\023\n\017AMBIENT_INVALID\020\005\022\023\n\017AMBIE"
      "NT_NO_DATA\020\007\"\205\006\n\003Eps\022\023\n\013is_eps_fail\030\001 \001("
      "\010\0222\n\021eps_control_state\030\002 \001(\0162\027.apollo.ca"
      "nbus.Eps.Type\022\034\n\024eps_driver_hand_torq\030\003 "
      "\001(\001\022\037\n\027is_steering_angle_valid\030\004 \001(\010\022\026\n\016"
      "steering_angle\030\005 \001(\001\022\032\n\022steering_angle_s"
      "pd\030\006 \001(\001\022\032\n\022is_trimming_status\030\007 \001(\010\022\035\n\025"
      "is_calibration_status\030\010 \001(\010\022\031\n\021is_failur"
      "e_status\030\t \001(\010\022#\n\033allow_enter_autonomous"
      "_mode\030\n \001(\005\022\034\n\024current_driving_mode\030\013 \001("
      "\005\022\032\n\022steering_angle_cmd\030\014 \001(\001\022\025\n\rvehicle"
      "_speed\030\r \001(\001\022\023\n\013epas_torque\030\016 \001(\001\022\030\n\020ste"
      "ering_enabled\030\017 \001(\010\022\027\n\017driver_override\030\020"
      " \001(\010\022\027\n\017driver_activity\030\021 \001(\010\022\026\n\016watchdo"
      "g_fault\030\022 \001(\010\022\027\n\017channel_1_fault\030\023 \001(\010\022\027"
      "\n\017channel_2_fault\030\024 \001(\010\022\031\n\021calibration_f"
      "ault\030\025 \001(\010\022\027\n\017connector_fault\030\026 \001(\010\022\024\n\014t"
      "imestamp_65\030\027 \001(\001\022\025\n\rmajor_version\030\030 \001(\005"
      "\022\025\n\rminor_version\030\031 \001(\005\022\024\n\014build_number\030"
      "\032 \001(\005\"=\n\004Type\022\021\n\rNOT_AVAILABLE\020\000\022\t\n\005READ"
      "Y\020\001\022\n\n\006ACTIVE\020\002\022\013\n\007INVALID\020\003\"\203\007\n\nVehicle"
      "Spd\022\035\n\025is_vehicle_standstill\030\001 \001(\010\022\034\n\024is"
      "_vehicle_spd_valid\030\002 \001(\010\022\026\n\013vehicle_spd\030"
      "\003 \001(\001:\0010\022\035\n\025is_wheel_spd_rr_valid\030\004 \001(\010\022"
      ":\n\022wheel_direction_rr\030\005 \001(\0162\036.apollo.can"
      "bus.VehicleSpd.Type\022\024\n\014wheel_spd_rr\030\006 \001("
      "\001\022\035\n\025is_wheel_spd_rl_valid\030\007 \001(\010\022:\n\022whee"
      "l_direction_rl\030\010 \001(\0162\036.apollo.canbus.Veh"
      "icleSpd.Type\022\024\n\014wheel_spd_rl\030\t \001(\001\022\035\n\025is"
      "_wheel_spd_fr_valid\030\n \001(\010\022:\n\022wheel_direc"
      "tion_fr\030\013 \001(\0162\036.apollo.canbus.VehicleSpd"
      ".Type\022\024\n\014wheel_spd_fr\030\014 \001(\001\022\035\n\025is_wheel_"
      "spd_fl_valid\030\r \001(\010\022:\n\022wheel_direction_fl"
      "\030\016 \001(\0162\036.apollo.canbus.VehicleSpd.Type\022\024"
      "\n\014wheel_spd_fl\030\017 \001(\001\022\031\n\021is_yaw_rate_vali"
      "d\030\020 \001(\010\022\020\n\010yaw_rate\030\021 \001(\001\022\027\n\017yaw_rate_of"
      "fset\030\022 \001(\001\022\023\n\013is_ax_valid\030\023 \001(\010\022\n\n\002ax\030\024 "
      "\001(\001\022\021\n\tax_offset\030\025 \001(\001\022\023\n\013is_ay_valid\030\026 "
      "\001(\010\022\n\n\002ay\030\027 \001(\001\022\021\n\tay_offset\030\030 \001(\001\022\017\n\007la"
      "t_acc\030\031 \001(\001\022\020\n\010long_acc\030\032 \001(\001\022\020\n\010vert_ac"
      "c\030\033 \001(\001\022\021\n\troll_rate\030\034 \001(\001\022\017\n\007acc_est\030\035 "
      "\001(\001\022\025\n\rtimestamp_sec\030\036 \001(\001\">\n\004Type\022\013\n\007FO"
      "RWARD\020\000\022\014\n\010BACKWARD\020\001\022\016\n\nSTANDSTILL\020\002\022\013\n"
      "\007INVALID\020\003\"\322\001\n\014Deceleration\022!\n\031is_decele"
      "ration_available\030\001 \001(\010\022\036\n\026is_deceleratio"
      "n_active\030\002 \001(\010\022\027\n\014deceleration\030\003 \001(\001:\0010\022"
      "\023\n\013is_evb_fail\030\004 \001(\001\022\027\n\014evb_pressure\030\005 \001"
      "(\001:\0010\022\031\n\016brake_pressure\030\006 \001(\001:\0010\022\035\n\022brak"
      "e_pressure_spd\030\007 \001(\001:\0010\"\266\010\n\005Brake\022%\n\026is_"
      "brake_pedal_pressed\030\001 \001(\010:\005false\022\034\n\024is_b"
      "rake_force_exist\030\002 \001(\010\022\032\n\022is_brake_over_"
      "heat\030\003 \001(\010\022\030\n\020is_hand_brake_on\030\004 \001(\010\022\034\n\024"
      "brake_pedal_position\030\005 \001(\001\022\026\n\016is_brake_v"
      "alid\030\006 \001(\010\022\023\n\013brake_input\030\007 \001(\001\022\021\n\tbrake"
      "_cmd\030\010 \001(\001\022\024\n\014brake_output\030\t \001(\001\022\021\n\tboo_"
      "input\030\n \001(\010\022\017\n\007boo_cmd\030\013 \001(\010\022\022\n\nboo_outp"
      "ut\030\014 \001(\010\022 \n\030watchdog_applying_brakes\030\r \001"
      "(\010\022\027\n\017watchdog_source\030\016 \001(\005\022\025\n\rbrake_ena"
      "bled\030\017 \001(\010\022\027\n\017driver_override\030\020 \001(\010\022\027\n\017d"
      "river_activity\030\021 \001(\010\022\026\n\016watchdog_fault\030\022"
      " \001(\010\022\027\n\017channel_1_fault\030\023 \001(\010\022\027\n\017channel"
      "_2_fault\030\024 \001(\010\022\021\n\tboo_fault\030\025 \001(\010\022\027\n\017con"
      "nector_fault\030\026 \001(\010\022\030\n\020brake_torque_req\030\027"
      " \001(\001\0226\n\nhsa_status\030\030 \001(\0162\".apollo.canbus"
      ".Brake.HSAStatusType\022\030\n\020brake_torque_act"
      "\030\031 \001(\001\0222\n\010hsa_mode\030\032 \001(\0162 .apollo.canbus"
      ".Brake.HSAModeType\022\030\n\020wheel_torque_act\030\033"
      " \001(\001\022\025\n\rmajor_version\030\034 \001(\005\022\025\n\rminor_ver"
      "sion\030\035 \001(\005\022\024\n\014build_number\030\036 \001(\005\"\273\001\n\rHSA"
      "StatusType\022\020\n\014HSA_INACTIVE\020\000\022\030\n\024HSA_FIND"
      "ING_GRADIENT\020\001\022\026\n\022HSA_ACTIVE_PRESSED\020\002\022\027"
      "\n\023HSA_ACTIVE_RELEASED\020\003\022\024\n\020HSA_FAST_RELE"
      "ASE\020\004\022\024\n\020HSA_SLOW_RELEASE\020\005\022\016\n\nHSA_FAILE"
      "D\020\006\022\021\n\rHSA_UNDEFINED\020\007\"P\n\013HSAModeType\022\013\n"
      "\007HSA_OFF\020\000\022\014\n\010HSA_AUTO\020\001\022\016\n\nHSA_MANUAL\020\002"
      "\022\026\n\022HSA_MODE_UNDEFINED\020\003\"\333\001\n\003Epb\022\024\n\014is_e"
      "pb_error\030\001 \001(\010\022\027\n\017is_epb_released\030\002 \001(\010\022"
      "\022\n\nepb_status\030\003 \001(\005\022;\n\024parking_brake_sta"
      "tus\030\004 \001(\0162\035.apollo.canbus.Epb.PBrakeType"
      "\"T\n\nPBrakeType\022\016\n\nPBRAKE_OFF\020\000\022\025\n\021PBRAKE"
      "_TRANSITION\020\001\022\r\n\tPBRAKE_ON\020\002\022\020\n\014PBRAKE_F"
      "AULT\020\003\"\216\004\n\003Gas\022\032\n\022is_gas_pedal_error\030\001 \001"
      "(\010\022!\n\031is_gas_pedal_pressed_more\030\002 \001(\010\022\035\n"
      "\022gas_pedal_position\030\003 \001(\001:\0010\022\033\n\014is_gas_v"
      "alid\030\004 \001(\010:\005false\022\026\n\016throttle_input\030\005 \001("
      "\001\022\024\n\014throttle_cmd\030\006 \001(\001\022\027\n\017throttle_outp"
      "ut\030\007 \001(\001\022\027\n\017watchdog_source\030\010 \001(\005\022\030\n\020thr"
      "ottle_enabled\030\t \001(\010\022\027\n\017driver_override\030\n"
      " \001(\010\022\027\n\017driver_activity\030\013 \001(\010\022\026\n\016watchdo"
      "g_fault\030\014 \001(\010\022\027\n\017channel_1_fault\030\r \001(\010\022\027"
      "\n\017channel_2_fault\030\016 \001(\010\022\027\n\017connector_fau"
      "lt\030\017 \001(\010\022\031\n\021accelerator_pedal\030\020 \001(\001\022\036\n\026a"
      "ccelerator_pedal_rate\030\021 \001(\001\022\025\n\rmajor_ver"
      "sion\030\022 \001(\005\022\025\n\rminor_version\030\023 \001(\005\022\024\n\014bui"
      "ld_number\030\024 \001(\005\"\210\002\n\003Esp\022\030\n\020is_esp_acc_er"
      "ror\030\001 \001(\010\022\021\n\tis_esp_on\030\002 \001(\010\022\025\n\ris_esp_a"
      "ctive\030\003 \001(\010\022\024\n\014is_abs_error\030\004 \001(\010\022\025\n\ris_"
      "abs_active\030\005 \001(\010\022\026\n\016is_tcsvdc_fail\030\006 \001(\010"
      "\022\026\n\016is_abs_enabled\030\007 \001(\010\022\026\n\016is_stab_acti"
      "ve\030\010 \001(\010\022\027\n\017is_stab_enabled\030\t \001(\010\022\026\n\016is_"
      "trac_active\030\n \001(\010\022\027\n\017is_trac_enabled\030\013 \001"
      "(\010\"\215\003\n\003Ems\022\037\n\027is_engine_acc_available\030\001 "
      "\001(\010\022\033\n\023is_engine_acc_error\030\002 \001(\010\022-\n\014engi"
      "ne_state\030\003 \001(\0162\027.apollo.canbus.Ems.Type\022"
      "\037\n\027max_engine_torq_percent\030\004 \001(\001\022\037\n\027min_"
      "engine_torq_percent\030\005 \001(\001\022!\n\031base_engine"
      "_torq_constant\030\006 \001(\005\022\035\n\025is_engine_speed_"
      "error\030\007 \001(\010\022\024\n\014engine_speed\030\010 \001(\001\022\025\n\reng"
      "ine_torque\030\t \001(\005\022\035\n\025is_over_engine_torqu"
      "e\030\n \001(\010\022\022\n\nengine_rpm\030\013 \001(\001\"5\n\004Type\022\010\n\004S"
      "TOP\020\000\022\t\n\005CRANK\020\001\022\013\n\007RUNNING\020\002\022\013\n\007INVALID"
      "\020\003\"\306\001\n\004Gear\022\037\n\027is_shift_position_valid\030\001"
      " \001(\010\0227\n\ngear_state\030\002 \001(\0162#.apollo.canbus"
      ".Chassis.GearPosition\022\027\n\017driver_override"
      "\030\003 \001(\010\0225\n\010gear_cmd\030\004 \001(\0162#.apollo.canbus"
      ".Chassis.GearPosition\022\024\n\014canbus_fault\030\005 "
      "\001(\010\"\356\005\n\006Safety\022 \n\030is_driver_car_door_clo"
      "se\030\001 \001(\010\022\031\n\021is_driver_buckled\030\002 \001(\010\022\030\n\020e"
      "mergency_button\030\003 \001(\005\022\030\n\thas_error\030\004 \001(\010"
      ":\005false\022\037\n\027is_motor_invertor_fault\030\005 \001(\010"
      "\022\027\n\017is_system_fault\030\006 \001(\010\022\036\n\026is_power_ba"
      "ttery_fault\030\007 \001(\010\022*\n\"is_motor_invertor_o"
      "ver_temperature\030\010 \001(\010\022/\n\'is_small_batter"
      "y_charge_discharge_fault\030\t \001(\010\022\024\n\014drivin"
      "g_mode\030\n \001(\005\022\036\n\026is_passenger_door_open\030\013"
      " \001(\010\022\035\n\025is_rearleft_door_open\030\014 \001(\010\022\036\n\026i"
      "s_rearright_door_open\030\r \001(\010\022\024\n\014is_hood_o"
      "pen\030\016 \001(\010\022\025\n\ris_trunk_open\030\017 \001(\010\022\035\n\025is_p"
      "assenger_detected\030\020 \001(\010\022#\n\033is_passenger_"
      "airbag_enabled\030\021 \001(\010\022\034\n\024is_passenger_buc"
      "kled\030\022 \001(\010\022\035\n\025front_left_tire_press\030\023 \001("
      "\005\022\036\n\026front_right_tire_press\030\024 \001(\005\022\034\n\024rea"
      "r_left_tire_press\030\025 \001(\005\022\035\n\025rear_right_ti"
      "re_press\030\026 \001(\005\022<\n\020car_driving_mode\030\027 \001(\016"
      "2\".apollo.canbus.Chassis.DrivingMode\"\274\007\n"
      "\tBasicInfo\022\024\n\014is_auto_mode\030\001 \001(\010\0222\n\013powe"
      "r_state\030\002 \001(\0162\035.apollo.canbus.BasicInfo."
      "Type\022\033\n\023is_air_bag_deployed\030\003 \001(\010\022\021\n\todo"
      "_meter\030\004 \001(\001\022\023\n\013drive_range\030\005 \001(\001\022\027\n\017is_"
      "system_error\030\006 \001(\010\022\032\n\022is_human_interrupt"
      "\030\007 \001(\010\022\025\n\racc_on_button\030\010 \001(\010\022\026\n\016acc_off"
      "_button\030\t \001(\010\022\026\n\016acc_res_button\030\n \001(\010\022\031\n"
      "\021acc_cancel_button\030\013 \001(\010\022\031\n\021acc_on_off_b"
      "utton\030\014 \001(\010\022\035\n\025acc_res_cancel_button\030\r \001"
      "(\010\022\032\n\022acc_inc_spd_button\030\016 \001(\010\022\032\n\022acc_de"
      "c_spd_button\030\017 \001(\010\022\032\n\022acc_inc_gap_button"
      "\030\020 \001(\010\022\032\n\022acc_dec_gap_button\030\021 \001(\010\022\022\n\nlk"
      "a_button\030\022 \001(\010\022\024\n\014canbus_fault\030\023 \001(\010\022\020\n\010"
      "latitude\030\024 \001(\001\022\021\n\tlongitude\030\025 \001(\001\022\021\n\tgps"
      "_valid\030\026 \001(\010\022\014\n\004year\030\027 \001(\005\022\r\n\005month\030\030 \001("
      "\005\022\013\n\003day\030\031 \001(\005\022\r\n\005hours\030\032 \001(\005\022\017\n\007minutes"
      "\030\033 \001(\005\022\017\n\007seconds\030\034 \001(\005\022\031\n\021compass_direc"
      "tion\030\035 \001(\001\022\014\n\004pdop\030\036 \001(\001\022\024\n\014is_gps_fault"
      "\030\037 \001(\010\022\023\n\013is_inferred\030  \001(\010\022\020\n\010altitude\030"
      "! \001(\001\022\017\n\007heading\030\" \001(\001\022\014\n\004hdop\030# \001(\001\022\014\n\004"
      "vdop\030$ \001(\001\022*\n\007quality\030% \001(\0162\031.apollo.can"
      "bus.GpsQuality\022\026\n\016num_satellites\030& \001(\005\022\021"
      "\n\tgps_speed\030\' \001(\001\"8\n\004Type\022\007\n\003OFF\020\000\022\007\n\003AC"
      "C\020\001\022\006\n\002ON\020\002\022\t\n\005START\020\003\022\013\n\007INVALID\020\004\"\026\n\007L"
      "icense\022\013\n\003vin\030\001 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8619);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/canbus/proto/chassis_detail.proto", &protobuf_RegisterTypes);
  ::apollo::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto

const ::google::protobuf::EnumDescriptor* ChassisDetail_Type_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[0];
}
bool ChassisDetail_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChassisDetail_Type ChassisDetail::QIRUI_EQ_15;
const ChassisDetail_Type ChassisDetail::CHANGAN_RUICHENG;
const ChassisDetail_Type ChassisDetail::Type_MIN;
const ChassisDetail_Type ChassisDetail::Type_MAX;
const int ChassisDetail::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_TurnLightType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[1];
}
bool Light_TurnLightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_TurnLightType Light::TURN_LIGHT_OFF;
const Light_TurnLightType Light::TURN_LEFT_ON;
const Light_TurnLightType Light::TURN_RIGHT_ON;
const Light_TurnLightType Light::TURN_LIGHT_ON;
const Light_TurnLightType Light::TurnLightType_MIN;
const Light_TurnLightType Light::TurnLightType_MAX;
const int Light::TurnLightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LampType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[2];
}
bool Light_LampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LampType Light::BEAM_OFF;
const Light_LampType Light::HIGH_BEAM_ON;
const Light_LampType Light::LOW_BEAM_ON;
const Light_LampType Light::LampType_MIN;
const Light_LampType Light::LampType_MAX;
const int Light::LampType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LincolnLampType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[3];
}
bool Light_LincolnLampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LincolnLampType Light::BEAM_NULL;
const Light_LincolnLampType Light::BEAM_FLASH_TO_PASS;
const Light_LincolnLampType Light::BEAM_HIGH;
const Light_LincolnLampType Light::BEAM_INVALID;
const Light_LincolnLampType Light::LincolnLampType_MIN;
const Light_LincolnLampType Light::LincolnLampType_MAX;
const int Light::LincolnLampType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LincolnWiperType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[4];
}
bool Light_LincolnWiperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LincolnWiperType Light::WIPER_OFF;
const Light_LincolnWiperType Light::WIPER_AUTO_OFF;
const Light_LincolnWiperType Light::WIPER_OFF_MOVING;
const Light_LincolnWiperType Light::WIPER_MANUAL_OFF;
const Light_LincolnWiperType Light::WIPER_MANUAL_ON;
const Light_LincolnWiperType Light::WIPER_MANUAL_LOW;
const Light_LincolnWiperType Light::WIPER_MANUAL_HIGH;
const Light_LincolnWiperType Light::WIPER_MIST_FLICK;
const Light_LincolnWiperType Light::WIPER_WASH;
const Light_LincolnWiperType Light::WIPER_AUTO_LOW;
const Light_LincolnWiperType Light::WIPER_AUTO_HIGH;
const Light_LincolnWiperType Light::WIPER_COURTESY_WIPE;
const Light_LincolnWiperType Light::WIPER_AUTO_ADJUST;
const Light_LincolnWiperType Light::WIPER_RESERVED;
const Light_LincolnWiperType Light::WIPER_STALLED;
const Light_LincolnWiperType Light::WIPER_NO_DATA;
const Light_LincolnWiperType Light::LincolnWiperType_MIN;
const Light_LincolnWiperType Light::LincolnWiperType_MAX;
const int Light::LincolnWiperType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LincolnAmbientType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[5];
}
bool Light_LincolnAmbientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LincolnAmbientType Light::AMBIENT_DARK;
const Light_LincolnAmbientType Light::AMBIENT_LIGHT;
const Light_LincolnAmbientType Light::AMBIENT_TWILIGHT;
const Light_LincolnAmbientType Light::AMBIENT_TUNNEL_ON;
const Light_LincolnAmbientType Light::AMBIENT_TUNNEL_OFF;
const Light_LincolnAmbientType Light::AMBIENT_INVALID;
const Light_LincolnAmbientType Light::AMBIENT_NO_DATA;
const Light_LincolnAmbientType Light::LincolnAmbientType_MIN;
const Light_LincolnAmbientType Light::LincolnAmbientType_MAX;
const int Light::LincolnAmbientType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_Type_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[6];
}
bool Eps_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_Type Eps::NOT_AVAILABLE;
const Eps_Type Eps::READY;
const Eps_Type Eps::ACTIVE;
const Eps_Type Eps::INVALID;
const Eps_Type Eps::Type_MIN;
const Eps_Type Eps::Type_MAX;
const int Eps::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VehicleSpd_Type_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[7];
}
bool VehicleSpd_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleSpd_Type VehicleSpd::FORWARD;
const VehicleSpd_Type VehicleSpd::BACKWARD;
const VehicleSpd_Type VehicleSpd::STANDSTILL;
const VehicleSpd_Type VehicleSpd::INVALID;
const VehicleSpd_Type VehicleSpd::Type_MIN;
const VehicleSpd_Type VehicleSpd::Type_MAX;
const int VehicleSpd::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_HSAStatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[8];
}
bool Brake_HSAStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_HSAStatusType Brake::HSA_INACTIVE;
const Brake_HSAStatusType Brake::HSA_FINDING_GRADIENT;
const Brake_HSAStatusType Brake::HSA_ACTIVE_PRESSED;
const Brake_HSAStatusType Brake::HSA_ACTIVE_RELEASED;
const Brake_HSAStatusType Brake::HSA_FAST_RELEASE;
const Brake_HSAStatusType Brake::HSA_SLOW_RELEASE;
const Brake_HSAStatusType Brake::HSA_FAILED;
const Brake_HSAStatusType Brake::HSA_UNDEFINED;
const Brake_HSAStatusType Brake::HSAStatusType_MIN;
const Brake_HSAStatusType Brake::HSAStatusType_MAX;
const int Brake::HSAStatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_HSAModeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[9];
}
bool Brake_HSAModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_HSAModeType Brake::HSA_OFF;
const Brake_HSAModeType Brake::HSA_AUTO;
const Brake_HSAModeType Brake::HSA_MANUAL;
const Brake_HSAModeType Brake::HSA_MODE_UNDEFINED;
const Brake_HSAModeType Brake::HSAModeType_MIN;
const Brake_HSAModeType Brake::HSAModeType_MAX;
const int Brake::HSAModeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Epb_PBrakeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[10];
}
bool Epb_PBrakeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Epb_PBrakeType Epb::PBRAKE_OFF;
const Epb_PBrakeType Epb::PBRAKE_TRANSITION;
const Epb_PBrakeType Epb::PBRAKE_ON;
const Epb_PBrakeType Epb::PBRAKE_FAULT;
const Epb_PBrakeType Epb::PBrakeType_MIN;
const Epb_PBrakeType Epb::PBrakeType_MAX;
const int Epb::PBrakeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ems_Type_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[11];
}
bool Ems_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ems_Type Ems::STOP;
const Ems_Type Ems::CRANK;
const Ems_Type Ems::RUNNING;
const Ems_Type Ems::INVALID;
const Ems_Type Ems::Type_MIN;
const Ems_Type Ems::Type_MAX;
const int Ems::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BasicInfo_Type_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[12];
}
bool BasicInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BasicInfo_Type BasicInfo::OFF;
const BasicInfo_Type BasicInfo::ACC;
const BasicInfo_Type BasicInfo::ON;
const BasicInfo_Type BasicInfo::START;
const BasicInfo_Type BasicInfo::INVALID;
const BasicInfo_Type BasicInfo::Type_MIN;
const BasicInfo_Type BasicInfo::Type_MAX;
const int BasicInfo::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisDetail::kCarTypeFieldNumber;
const int ChassisDetail::kBasicFieldNumber;
const int ChassisDetail::kSafetyFieldNumber;
const int ChassisDetail::kGearFieldNumber;
const int ChassisDetail::kEmsFieldNumber;
const int ChassisDetail::kEspFieldNumber;
const int ChassisDetail::kGasFieldNumber;
const int ChassisDetail::kEpbFieldNumber;
const int ChassisDetail::kBrakeFieldNumber;
const int ChassisDetail::kDecelerationFieldNumber;
const int ChassisDetail::kVehicleSpdFieldNumber;
const int ChassisDetail::kEpsFieldNumber;
const int ChassisDetail::kLightFieldNumber;
const int ChassisDetail::kBatteryFieldNumber;
const int ChassisDetail::kCheckResponseFieldNumber;
const int ChassisDetail::kLicenseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisDetail::ChassisDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.ChassisDetail)
}
ChassisDetail::ChassisDetail(const ChassisDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_basic()) {
    basic_ = new ::apollo::canbus::BasicInfo(*from.basic_);
  } else {
    basic_ = NULL;
  }
  if (from.has_safety()) {
    safety_ = new ::apollo::canbus::Safety(*from.safety_);
  } else {
    safety_ = NULL;
  }
  if (from.has_gear()) {
    gear_ = new ::apollo::canbus::Gear(*from.gear_);
  } else {
    gear_ = NULL;
  }
  if (from.has_ems()) {
    ems_ = new ::apollo::canbus::Ems(*from.ems_);
  } else {
    ems_ = NULL;
  }
  if (from.has_esp()) {
    esp_ = new ::apollo::canbus::Esp(*from.esp_);
  } else {
    esp_ = NULL;
  }
  if (from.has_gas()) {
    gas_ = new ::apollo::canbus::Gas(*from.gas_);
  } else {
    gas_ = NULL;
  }
  if (from.has_epb()) {
    epb_ = new ::apollo::canbus::Epb(*from.epb_);
  } else {
    epb_ = NULL;
  }
  if (from.has_brake()) {
    brake_ = new ::apollo::canbus::Brake(*from.brake_);
  } else {
    brake_ = NULL;
  }
  if (from.has_deceleration()) {
    deceleration_ = new ::apollo::canbus::Deceleration(*from.deceleration_);
  } else {
    deceleration_ = NULL;
  }
  if (from.has_vehicle_spd()) {
    vehicle_spd_ = new ::apollo::canbus::VehicleSpd(*from.vehicle_spd_);
  } else {
    vehicle_spd_ = NULL;
  }
  if (from.has_eps()) {
    eps_ = new ::apollo::canbus::Eps(*from.eps_);
  } else {
    eps_ = NULL;
  }
  if (from.has_light()) {
    light_ = new ::apollo::canbus::Light(*from.light_);
  } else {
    light_ = NULL;
  }
  if (from.has_battery()) {
    battery_ = new ::apollo::canbus::Battery(*from.battery_);
  } else {
    battery_ = NULL;
  }
  if (from.has_check_response()) {
    check_response_ = new ::apollo::canbus::CheckResponseSignal(*from.check_response_);
  } else {
    check_response_ = NULL;
  }
  if (from.has_license()) {
    license_ = new ::apollo::canbus::License(*from.license_);
  } else {
    license_ = NULL;
  }
  car_type_ = from.car_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.ChassisDetail)
}

void ChassisDetail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&basic_, 0, reinterpret_cast<char*>(&car_type_) -
    reinterpret_cast<char*>(&basic_) + sizeof(car_type_));
}

ChassisDetail::~ChassisDetail() {
  // @@protoc_insertion_point(destructor:apollo.canbus.ChassisDetail)
  SharedDtor();
}

void ChassisDetail::SharedDtor() {
  if (this != internal_default_instance()) {
    delete basic_;
  }
  if (this != internal_default_instance()) {
    delete safety_;
  }
  if (this != internal_default_instance()) {
    delete gear_;
  }
  if (this != internal_default_instance()) {
    delete ems_;
  }
  if (this != internal_default_instance()) {
    delete esp_;
  }
  if (this != internal_default_instance()) {
    delete gas_;
  }
  if (this != internal_default_instance()) {
    delete epb_;
  }
  if (this != internal_default_instance()) {
    delete brake_;
  }
  if (this != internal_default_instance()) {
    delete deceleration_;
  }
  if (this != internal_default_instance()) {
    delete vehicle_spd_;
  }
  if (this != internal_default_instance()) {
    delete eps_;
  }
  if (this != internal_default_instance()) {
    delete light_;
  }
  if (this != internal_default_instance()) {
    delete battery_;
  }
  if (this != internal_default_instance()) {
    delete check_response_;
  }
  if (this != internal_default_instance()) {
    delete license_;
  }
}

void ChassisDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChassisDetail::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChassisDetail& ChassisDetail::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChassisDetail* ChassisDetail::New(::google::protobuf::Arena* arena) const {
  ChassisDetail* n = new ChassisDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChassisDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.ChassisDetail)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_basic()) {
      GOOGLE_DCHECK(basic_ != NULL);
      basic_->::apollo::canbus::BasicInfo::Clear();
    }
    if (has_safety()) {
      GOOGLE_DCHECK(safety_ != NULL);
      safety_->::apollo::canbus::Safety::Clear();
    }
    if (has_gear()) {
      GOOGLE_DCHECK(gear_ != NULL);
      gear_->::apollo::canbus::Gear::Clear();
    }
    if (has_ems()) {
      GOOGLE_DCHECK(ems_ != NULL);
      ems_->::apollo::canbus::Ems::Clear();
    }
    if (has_esp()) {
      GOOGLE_DCHECK(esp_ != NULL);
      esp_->::apollo::canbus::Esp::Clear();
    }
    if (has_gas()) {
      GOOGLE_DCHECK(gas_ != NULL);
      gas_->::apollo::canbus::Gas::Clear();
    }
    if (has_epb()) {
      GOOGLE_DCHECK(epb_ != NULL);
      epb_->::apollo::canbus::Epb::Clear();
    }
    if (has_brake()) {
      GOOGLE_DCHECK(brake_ != NULL);
      brake_->::apollo::canbus::Brake::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    if (has_deceleration()) {
      GOOGLE_DCHECK(deceleration_ != NULL);
      deceleration_->::apollo::canbus::Deceleration::Clear();
    }
    if (has_vehicle_spd()) {
      GOOGLE_DCHECK(vehicle_spd_ != NULL);
      vehicle_spd_->::apollo::canbus::VehicleSpd::Clear();
    }
    if (has_eps()) {
      GOOGLE_DCHECK(eps_ != NULL);
      eps_->::apollo::canbus::Eps::Clear();
    }
    if (has_light()) {
      GOOGLE_DCHECK(light_ != NULL);
      light_->::apollo::canbus::Light::Clear();
    }
    if (has_battery()) {
      GOOGLE_DCHECK(battery_ != NULL);
      battery_->::apollo::canbus::Battery::Clear();
    }
    if (has_check_response()) {
      GOOGLE_DCHECK(check_response_ != NULL);
      check_response_->::apollo::canbus::CheckResponseSignal::Clear();
    }
    if (has_license()) {
      GOOGLE_DCHECK(license_ != NULL);
      license_->::apollo::canbus::License::Clear();
    }
  }
  car_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChassisDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.ChassisDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::ChassisDetail_Type_IsValid(value)) {
            set_car_type(static_cast< ::apollo::canbus::ChassisDetail_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.BasicInfo basic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Safety safety = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_safety()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Gear gear = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Ems ems = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Esp esp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Gas gas = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Epb epb = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_epb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Brake brake = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Deceleration deceleration = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_spd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Eps eps = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Light light = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Battery battery = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.CheckResponseSignal check_response = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.License license = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_license()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.ChassisDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.ChassisDetail)
  return false;
#undef DO_
}

void ChassisDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.ChassisDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->car_type(), output);
  }

  // optional .apollo.canbus.BasicInfo basic = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->basic_, output);
  }

  // optional .apollo.canbus.Safety safety = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->safety_, output);
  }

  // optional .apollo.canbus.Gear gear = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->gear_, output);
  }

  // optional .apollo.canbus.Ems ems = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ems_, output);
  }

  // optional .apollo.canbus.Esp esp = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->esp_, output);
  }

  // optional .apollo.canbus.Gas gas = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->gas_, output);
  }

  // optional .apollo.canbus.Epb epb = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->epb_, output);
  }

  // optional .apollo.canbus.Brake brake = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->brake_, output);
  }

  // optional .apollo.canbus.Deceleration deceleration = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->deceleration_, output);
  }

  // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->vehicle_spd_, output);
  }

  // optional .apollo.canbus.Eps eps = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->eps_, output);
  }

  // optional .apollo.canbus.Light light = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->light_, output);
  }

  // optional .apollo.canbus.Battery battery = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->battery_, output);
  }

  // optional .apollo.canbus.CheckResponseSignal check_response = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->check_response_, output);
  }

  // optional .apollo.canbus.License license = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->license_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.ChassisDetail)
}

::google::protobuf::uint8* ChassisDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.ChassisDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->car_type(), target);
  }

  // optional .apollo.canbus.BasicInfo basic = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->basic_, deterministic, target);
  }

  // optional .apollo.canbus.Safety safety = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->safety_, deterministic, target);
  }

  // optional .apollo.canbus.Gear gear = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->gear_, deterministic, target);
  }

  // optional .apollo.canbus.Ems ems = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ems_, deterministic, target);
  }

  // optional .apollo.canbus.Esp esp = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->esp_, deterministic, target);
  }

  // optional .apollo.canbus.Gas gas = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->gas_, deterministic, target);
  }

  // optional .apollo.canbus.Epb epb = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->epb_, deterministic, target);
  }

  // optional .apollo.canbus.Brake brake = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->brake_, deterministic, target);
  }

  // optional .apollo.canbus.Deceleration deceleration = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->deceleration_, deterministic, target);
  }

  // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->vehicle_spd_, deterministic, target);
  }

  // optional .apollo.canbus.Eps eps = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->eps_, deterministic, target);
  }

  // optional .apollo.canbus.Light light = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->light_, deterministic, target);
  }

  // optional .apollo.canbus.Battery battery = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->battery_, deterministic, target);
  }

  // optional .apollo.canbus.CheckResponseSignal check_response = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->check_response_, deterministic, target);
  }

  // optional .apollo.canbus.License license = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->license_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.ChassisDetail)
  return target;
}

size_t ChassisDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.ChassisDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.canbus.BasicInfo basic = 2;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->basic_);
    }

    // optional .apollo.canbus.Safety safety = 3;
    if (has_safety()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->safety_);
    }

    // optional .apollo.canbus.Gear gear = 4;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gear_);
    }

    // optional .apollo.canbus.Ems ems = 5;
    if (has_ems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ems_);
    }

    // optional .apollo.canbus.Esp esp = 6;
    if (has_esp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->esp_);
    }

    // optional .apollo.canbus.Gas gas = 7;
    if (has_gas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gas_);
    }

    // optional .apollo.canbus.Epb epb = 8;
    if (has_epb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->epb_);
    }

    // optional .apollo.canbus.Brake brake = 9;
    if (has_brake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->brake_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .apollo.canbus.Deceleration deceleration = 10;
    if (has_deceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deceleration_);
    }

    // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
    if (has_vehicle_spd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_spd_);
    }

    // optional .apollo.canbus.Eps eps = 12;
    if (has_eps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eps_);
    }

    // optional .apollo.canbus.Light light = 13;
    if (has_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->light_);
    }

    // optional .apollo.canbus.Battery battery = 14;
    if (has_battery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->battery_);
    }

    // optional .apollo.canbus.CheckResponseSignal check_response = 15;
    if (has_check_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->check_response_);
    }

    // optional .apollo.canbus.License license = 16;
    if (has_license()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->license_);
    }

    // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
    if (has_car_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->car_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChassisDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.ChassisDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChassisDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.ChassisDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.ChassisDetail)
    MergeFrom(*source);
  }
}

void ChassisDetail::MergeFrom(const ChassisDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.ChassisDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_basic()->::apollo::canbus::BasicInfo::MergeFrom(from.basic());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_safety()->::apollo::canbus::Safety::MergeFrom(from.safety());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_gear()->::apollo::canbus::Gear::MergeFrom(from.gear());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ems()->::apollo::canbus::Ems::MergeFrom(from.ems());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_esp()->::apollo::canbus::Esp::MergeFrom(from.esp());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_gas()->::apollo::canbus::Gas::MergeFrom(from.gas());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_epb()->::apollo::canbus::Epb::MergeFrom(from.epb());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_brake()->::apollo::canbus::Brake::MergeFrom(from.brake());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_deceleration()->::apollo::canbus::Deceleration::MergeFrom(from.deceleration());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_vehicle_spd()->::apollo::canbus::VehicleSpd::MergeFrom(from.vehicle_spd());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_eps()->::apollo::canbus::Eps::MergeFrom(from.eps());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_light()->::apollo::canbus::Light::MergeFrom(from.light());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_battery()->::apollo::canbus::Battery::MergeFrom(from.battery());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_check_response()->::apollo::canbus::CheckResponseSignal::MergeFrom(from.check_response());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_license()->::apollo::canbus::License::MergeFrom(from.license());
    }
    if (cached_has_bits & 0x00008000u) {
      car_type_ = from.car_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChassisDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.ChassisDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisDetail::CopyFrom(const ChassisDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.ChassisDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisDetail::IsInitialized() const {
  return true;
}

void ChassisDetail::Swap(ChassisDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisDetail::InternalSwap(ChassisDetail* other) {
  std::swap(basic_, other->basic_);
  std::swap(safety_, other->safety_);
  std::swap(gear_, other->gear_);
  std::swap(ems_, other->ems_);
  std::swap(esp_, other->esp_);
  std::swap(gas_, other->gas_);
  std::swap(epb_, other->epb_);
  std::swap(brake_, other->brake_);
  std::swap(deceleration_, other->deceleration_);
  std::swap(vehicle_spd_, other->vehicle_spd_);
  std::swap(eps_, other->eps_);
  std::swap(light_, other->light_);
  std::swap(battery_, other->battery_);
  std::swap(check_response_, other->check_response_);
  std::swap(license_, other->license_);
  std::swap(car_type_, other->car_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChassisDetail::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChassisDetail

// optional .apollo.canbus.ChassisDetail.Type car_type = 1;
bool ChassisDetail::has_car_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ChassisDetail::set_has_car_type() {
  _has_bits_[0] |= 0x00008000u;
}
void ChassisDetail::clear_has_car_type() {
  _has_bits_[0] &= ~0x00008000u;
}
void ChassisDetail::clear_car_type() {
  car_type_ = 0;
  clear_has_car_type();
}
::apollo::canbus::ChassisDetail_Type ChassisDetail::car_type() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.car_type)
  return static_cast< ::apollo::canbus::ChassisDetail_Type >(car_type_);
}
void ChassisDetail::set_car_type(::apollo::canbus::ChassisDetail_Type value) {
  assert(::apollo::canbus::ChassisDetail_Type_IsValid(value));
  set_has_car_type();
  car_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisDetail.car_type)
}

// optional .apollo.canbus.BasicInfo basic = 2;
bool ChassisDetail::has_basic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChassisDetail::set_has_basic() {
  _has_bits_[0] |= 0x00000001u;
}
void ChassisDetail::clear_has_basic() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChassisDetail::clear_basic() {
  if (basic_ != NULL) basic_->::apollo::canbus::BasicInfo::Clear();
  clear_has_basic();
}
const ::apollo::canbus::BasicInfo& ChassisDetail::basic() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.basic)
  return basic_ != NULL ? *basic_
                         : *::apollo::canbus::BasicInfo::internal_default_instance();
}
::apollo::canbus::BasicInfo* ChassisDetail::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) {
    basic_ = new ::apollo::canbus::BasicInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.basic)
  return basic_;
}
::apollo::canbus::BasicInfo* ChassisDetail::release_basic() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.basic)
  clear_has_basic();
  ::apollo::canbus::BasicInfo* temp = basic_;
  basic_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_basic(::apollo::canbus::BasicInfo* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    set_has_basic();
  } else {
    clear_has_basic();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.basic)
}

// optional .apollo.canbus.Safety safety = 3;
bool ChassisDetail::has_safety() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChassisDetail::set_has_safety() {
  _has_bits_[0] |= 0x00000002u;
}
void ChassisDetail::clear_has_safety() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChassisDetail::clear_safety() {
  if (safety_ != NULL) safety_->::apollo::canbus::Safety::Clear();
  clear_has_safety();
}
const ::apollo::canbus::Safety& ChassisDetail::safety() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.safety)
  return safety_ != NULL ? *safety_
                         : *::apollo::canbus::Safety::internal_default_instance();
}
::apollo::canbus::Safety* ChassisDetail::mutable_safety() {
  set_has_safety();
  if (safety_ == NULL) {
    safety_ = new ::apollo::canbus::Safety;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.safety)
  return safety_;
}
::apollo::canbus::Safety* ChassisDetail::release_safety() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.safety)
  clear_has_safety();
  ::apollo::canbus::Safety* temp = safety_;
  safety_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_safety(::apollo::canbus::Safety* safety) {
  delete safety_;
  safety_ = safety;
  if (safety) {
    set_has_safety();
  } else {
    clear_has_safety();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.safety)
}

// optional .apollo.canbus.Gear gear = 4;
bool ChassisDetail::has_gear() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChassisDetail::set_has_gear() {
  _has_bits_[0] |= 0x00000004u;
}
void ChassisDetail::clear_has_gear() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChassisDetail::clear_gear() {
  if (gear_ != NULL) gear_->::apollo::canbus::Gear::Clear();
  clear_has_gear();
}
const ::apollo::canbus::Gear& ChassisDetail::gear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.gear)
  return gear_ != NULL ? *gear_
                         : *::apollo::canbus::Gear::internal_default_instance();
}
::apollo::canbus::Gear* ChassisDetail::mutable_gear() {
  set_has_gear();
  if (gear_ == NULL) {
    gear_ = new ::apollo::canbus::Gear;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.gear)
  return gear_;
}
::apollo::canbus::Gear* ChassisDetail::release_gear() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.gear)
  clear_has_gear();
  ::apollo::canbus::Gear* temp = gear_;
  gear_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_gear(::apollo::canbus::Gear* gear) {
  delete gear_;
  gear_ = gear;
  if (gear) {
    set_has_gear();
  } else {
    clear_has_gear();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.gear)
}

// optional .apollo.canbus.Ems ems = 5;
bool ChassisDetail::has_ems() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChassisDetail::set_has_ems() {
  _has_bits_[0] |= 0x00000008u;
}
void ChassisDetail::clear_has_ems() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChassisDetail::clear_ems() {
  if (ems_ != NULL) ems_->::apollo::canbus::Ems::Clear();
  clear_has_ems();
}
const ::apollo::canbus::Ems& ChassisDetail::ems() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.ems)
  return ems_ != NULL ? *ems_
                         : *::apollo::canbus::Ems::internal_default_instance();
}
::apollo::canbus::Ems* ChassisDetail::mutable_ems() {
  set_has_ems();
  if (ems_ == NULL) {
    ems_ = new ::apollo::canbus::Ems;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.ems)
  return ems_;
}
::apollo::canbus::Ems* ChassisDetail::release_ems() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.ems)
  clear_has_ems();
  ::apollo::canbus::Ems* temp = ems_;
  ems_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_ems(::apollo::canbus::Ems* ems) {
  delete ems_;
  ems_ = ems;
  if (ems) {
    set_has_ems();
  } else {
    clear_has_ems();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.ems)
}

// optional .apollo.canbus.Esp esp = 6;
bool ChassisDetail::has_esp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChassisDetail::set_has_esp() {
  _has_bits_[0] |= 0x00000010u;
}
void ChassisDetail::clear_has_esp() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChassisDetail::clear_esp() {
  if (esp_ != NULL) esp_->::apollo::canbus::Esp::Clear();
  clear_has_esp();
}
const ::apollo::canbus::Esp& ChassisDetail::esp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.esp)
  return esp_ != NULL ? *esp_
                         : *::apollo::canbus::Esp::internal_default_instance();
}
::apollo::canbus::Esp* ChassisDetail::mutable_esp() {
  set_has_esp();
  if (esp_ == NULL) {
    esp_ = new ::apollo::canbus::Esp;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.esp)
  return esp_;
}
::apollo::canbus::Esp* ChassisDetail::release_esp() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.esp)
  clear_has_esp();
  ::apollo::canbus::Esp* temp = esp_;
  esp_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_esp(::apollo::canbus::Esp* esp) {
  delete esp_;
  esp_ = esp;
  if (esp) {
    set_has_esp();
  } else {
    clear_has_esp();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.esp)
}

// optional .apollo.canbus.Gas gas = 7;
bool ChassisDetail::has_gas() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChassisDetail::set_has_gas() {
  _has_bits_[0] |= 0x00000020u;
}
void ChassisDetail::clear_has_gas() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChassisDetail::clear_gas() {
  if (gas_ != NULL) gas_->::apollo::canbus::Gas::Clear();
  clear_has_gas();
}
const ::apollo::canbus::Gas& ChassisDetail::gas() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.gas)
  return gas_ != NULL ? *gas_
                         : *::apollo::canbus::Gas::internal_default_instance();
}
::apollo::canbus::Gas* ChassisDetail::mutable_gas() {
  set_has_gas();
  if (gas_ == NULL) {
    gas_ = new ::apollo::canbus::Gas;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.gas)
  return gas_;
}
::apollo::canbus::Gas* ChassisDetail::release_gas() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.gas)
  clear_has_gas();
  ::apollo::canbus::Gas* temp = gas_;
  gas_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_gas(::apollo::canbus::Gas* gas) {
  delete gas_;
  gas_ = gas;
  if (gas) {
    set_has_gas();
  } else {
    clear_has_gas();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.gas)
}

// optional .apollo.canbus.Epb epb = 8;
bool ChassisDetail::has_epb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChassisDetail::set_has_epb() {
  _has_bits_[0] |= 0x00000040u;
}
void ChassisDetail::clear_has_epb() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChassisDetail::clear_epb() {
  if (epb_ != NULL) epb_->::apollo::canbus::Epb::Clear();
  clear_has_epb();
}
const ::apollo::canbus::Epb& ChassisDetail::epb() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.epb)
  return epb_ != NULL ? *epb_
                         : *::apollo::canbus::Epb::internal_default_instance();
}
::apollo::canbus::Epb* ChassisDetail::mutable_epb() {
  set_has_epb();
  if (epb_ == NULL) {
    epb_ = new ::apollo::canbus::Epb;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.epb)
  return epb_;
}
::apollo::canbus::Epb* ChassisDetail::release_epb() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.epb)
  clear_has_epb();
  ::apollo::canbus::Epb* temp = epb_;
  epb_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_epb(::apollo::canbus::Epb* epb) {
  delete epb_;
  epb_ = epb;
  if (epb) {
    set_has_epb();
  } else {
    clear_has_epb();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.epb)
}

// optional .apollo.canbus.Brake brake = 9;
bool ChassisDetail::has_brake() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChassisDetail::set_has_brake() {
  _has_bits_[0] |= 0x00000080u;
}
void ChassisDetail::clear_has_brake() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChassisDetail::clear_brake() {
  if (brake_ != NULL) brake_->::apollo::canbus::Brake::Clear();
  clear_has_brake();
}
const ::apollo::canbus::Brake& ChassisDetail::brake() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.brake)
  return brake_ != NULL ? *brake_
                         : *::apollo::canbus::Brake::internal_default_instance();
}
::apollo::canbus::Brake* ChassisDetail::mutable_brake() {
  set_has_brake();
  if (brake_ == NULL) {
    brake_ = new ::apollo::canbus::Brake;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.brake)
  return brake_;
}
::apollo::canbus::Brake* ChassisDetail::release_brake() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.brake)
  clear_has_brake();
  ::apollo::canbus::Brake* temp = brake_;
  brake_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_brake(::apollo::canbus::Brake* brake) {
  delete brake_;
  brake_ = brake;
  if (brake) {
    set_has_brake();
  } else {
    clear_has_brake();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.brake)
}

// optional .apollo.canbus.Deceleration deceleration = 10;
bool ChassisDetail::has_deceleration() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChassisDetail::set_has_deceleration() {
  _has_bits_[0] |= 0x00000100u;
}
void ChassisDetail::clear_has_deceleration() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChassisDetail::clear_deceleration() {
  if (deceleration_ != NULL) deceleration_->::apollo::canbus::Deceleration::Clear();
  clear_has_deceleration();
}
const ::apollo::canbus::Deceleration& ChassisDetail::deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.deceleration)
  return deceleration_ != NULL ? *deceleration_
                         : *::apollo::canbus::Deceleration::internal_default_instance();
}
::apollo::canbus::Deceleration* ChassisDetail::mutable_deceleration() {
  set_has_deceleration();
  if (deceleration_ == NULL) {
    deceleration_ = new ::apollo::canbus::Deceleration;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.deceleration)
  return deceleration_;
}
::apollo::canbus::Deceleration* ChassisDetail::release_deceleration() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.deceleration)
  clear_has_deceleration();
  ::apollo::canbus::Deceleration* temp = deceleration_;
  deceleration_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_deceleration(::apollo::canbus::Deceleration* deceleration) {
  delete deceleration_;
  deceleration_ = deceleration;
  if (deceleration) {
    set_has_deceleration();
  } else {
    clear_has_deceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.deceleration)
}

// optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
bool ChassisDetail::has_vehicle_spd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ChassisDetail::set_has_vehicle_spd() {
  _has_bits_[0] |= 0x00000200u;
}
void ChassisDetail::clear_has_vehicle_spd() {
  _has_bits_[0] &= ~0x00000200u;
}
void ChassisDetail::clear_vehicle_spd() {
  if (vehicle_spd_ != NULL) vehicle_spd_->::apollo::canbus::VehicleSpd::Clear();
  clear_has_vehicle_spd();
}
const ::apollo::canbus::VehicleSpd& ChassisDetail::vehicle_spd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.vehicle_spd)
  return vehicle_spd_ != NULL ? *vehicle_spd_
                         : *::apollo::canbus::VehicleSpd::internal_default_instance();
}
::apollo::canbus::VehicleSpd* ChassisDetail::mutable_vehicle_spd() {
  set_has_vehicle_spd();
  if (vehicle_spd_ == NULL) {
    vehicle_spd_ = new ::apollo::canbus::VehicleSpd;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.vehicle_spd)
  return vehicle_spd_;
}
::apollo::canbus::VehicleSpd* ChassisDetail::release_vehicle_spd() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.vehicle_spd)
  clear_has_vehicle_spd();
  ::apollo::canbus::VehicleSpd* temp = vehicle_spd_;
  vehicle_spd_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_vehicle_spd(::apollo::canbus::VehicleSpd* vehicle_spd) {
  delete vehicle_spd_;
  vehicle_spd_ = vehicle_spd;
  if (vehicle_spd) {
    set_has_vehicle_spd();
  } else {
    clear_has_vehicle_spd();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.vehicle_spd)
}

// optional .apollo.canbus.Eps eps = 12;
bool ChassisDetail::has_eps() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ChassisDetail::set_has_eps() {
  _has_bits_[0] |= 0x00000400u;
}
void ChassisDetail::clear_has_eps() {
  _has_bits_[0] &= ~0x00000400u;
}
void ChassisDetail::clear_eps() {
  if (eps_ != NULL) eps_->::apollo::canbus::Eps::Clear();
  clear_has_eps();
}
const ::apollo::canbus::Eps& ChassisDetail::eps() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.eps)
  return eps_ != NULL ? *eps_
                         : *::apollo::canbus::Eps::internal_default_instance();
}
::apollo::canbus::Eps* ChassisDetail::mutable_eps() {
  set_has_eps();
  if (eps_ == NULL) {
    eps_ = new ::apollo::canbus::Eps;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.eps)
  return eps_;
}
::apollo::canbus::Eps* ChassisDetail::release_eps() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.eps)
  clear_has_eps();
  ::apollo::canbus::Eps* temp = eps_;
  eps_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_eps(::apollo::canbus::Eps* eps) {
  delete eps_;
  eps_ = eps;
  if (eps) {
    set_has_eps();
  } else {
    clear_has_eps();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.eps)
}

// optional .apollo.canbus.Light light = 13;
bool ChassisDetail::has_light() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ChassisDetail::set_has_light() {
  _has_bits_[0] |= 0x00000800u;
}
void ChassisDetail::clear_has_light() {
  _has_bits_[0] &= ~0x00000800u;
}
void ChassisDetail::clear_light() {
  if (light_ != NULL) light_->::apollo::canbus::Light::Clear();
  clear_has_light();
}
const ::apollo::canbus::Light& ChassisDetail::light() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.light)
  return light_ != NULL ? *light_
                         : *::apollo::canbus::Light::internal_default_instance();
}
::apollo::canbus::Light* ChassisDetail::mutable_light() {
  set_has_light();
  if (light_ == NULL) {
    light_ = new ::apollo::canbus::Light;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.light)
  return light_;
}
::apollo::canbus::Light* ChassisDetail::release_light() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.light)
  clear_has_light();
  ::apollo::canbus::Light* temp = light_;
  light_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_light(::apollo::canbus::Light* light) {
  delete light_;
  light_ = light;
  if (light) {
    set_has_light();
  } else {
    clear_has_light();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.light)
}

// optional .apollo.canbus.Battery battery = 14;
bool ChassisDetail::has_battery() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ChassisDetail::set_has_battery() {
  _has_bits_[0] |= 0x00001000u;
}
void ChassisDetail::clear_has_battery() {
  _has_bits_[0] &= ~0x00001000u;
}
void ChassisDetail::clear_battery() {
  if (battery_ != NULL) battery_->::apollo::canbus::Battery::Clear();
  clear_has_battery();
}
const ::apollo::canbus::Battery& ChassisDetail::battery() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.battery)
  return battery_ != NULL ? *battery_
                         : *::apollo::canbus::Battery::internal_default_instance();
}
::apollo::canbus::Battery* ChassisDetail::mutable_battery() {
  set_has_battery();
  if (battery_ == NULL) {
    battery_ = new ::apollo::canbus::Battery;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.battery)
  return battery_;
}
::apollo::canbus::Battery* ChassisDetail::release_battery() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.battery)
  clear_has_battery();
  ::apollo::canbus::Battery* temp = battery_;
  battery_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_battery(::apollo::canbus::Battery* battery) {
  delete battery_;
  battery_ = battery;
  if (battery) {
    set_has_battery();
  } else {
    clear_has_battery();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.battery)
}

// optional .apollo.canbus.CheckResponseSignal check_response = 15;
bool ChassisDetail::has_check_response() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ChassisDetail::set_has_check_response() {
  _has_bits_[0] |= 0x00002000u;
}
void ChassisDetail::clear_has_check_response() {
  _has_bits_[0] &= ~0x00002000u;
}
void ChassisDetail::clear_check_response() {
  if (check_response_ != NULL) check_response_->::apollo::canbus::CheckResponseSignal::Clear();
  clear_has_check_response();
}
const ::apollo::canbus::CheckResponseSignal& ChassisDetail::check_response() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.check_response)
  return check_response_ != NULL ? *check_response_
                         : *::apollo::canbus::CheckResponseSignal::internal_default_instance();
}
::apollo::canbus::CheckResponseSignal* ChassisDetail::mutable_check_response() {
  set_has_check_response();
  if (check_response_ == NULL) {
    check_response_ = new ::apollo::canbus::CheckResponseSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.check_response)
  return check_response_;
}
::apollo::canbus::CheckResponseSignal* ChassisDetail::release_check_response() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.check_response)
  clear_has_check_response();
  ::apollo::canbus::CheckResponseSignal* temp = check_response_;
  check_response_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_check_response(::apollo::canbus::CheckResponseSignal* check_response) {
  delete check_response_;
  check_response_ = check_response;
  if (check_response) {
    set_has_check_response();
  } else {
    clear_has_check_response();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.check_response)
}

// optional .apollo.canbus.License license = 16;
bool ChassisDetail::has_license() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ChassisDetail::set_has_license() {
  _has_bits_[0] |= 0x00004000u;
}
void ChassisDetail::clear_has_license() {
  _has_bits_[0] &= ~0x00004000u;
}
void ChassisDetail::clear_license() {
  if (license_ != NULL) license_->::apollo::canbus::License::Clear();
  clear_has_license();
}
const ::apollo::canbus::License& ChassisDetail::license() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisDetail.license)
  return license_ != NULL ? *license_
                         : *::apollo::canbus::License::internal_default_instance();
}
::apollo::canbus::License* ChassisDetail::mutable_license() {
  set_has_license();
  if (license_ == NULL) {
    license_ = new ::apollo::canbus::License;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.ChassisDetail.license)
  return license_;
}
::apollo::canbus::License* ChassisDetail::release_license() {
  // @@protoc_insertion_point(field_release:apollo.canbus.ChassisDetail.license)
  clear_has_license();
  ::apollo::canbus::License* temp = license_;
  license_ = NULL;
  return temp;
}
void ChassisDetail::set_allocated_license(::apollo::canbus::License* license) {
  delete license_;
  license_ = license;
  if (license) {
    set_has_license();
  } else {
    clear_has_license();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.ChassisDetail.license)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckResponseSignal::kIsEpsOnlineFieldNumber;
const int CheckResponseSignal::kIsEpbOnlineFieldNumber;
const int CheckResponseSignal::kIsEspOnlineFieldNumber;
const int CheckResponseSignal::kIsVtogOnlineFieldNumber;
const int CheckResponseSignal::kIsScuOnlineFieldNumber;
const int CheckResponseSignal::kIsSwitchOnlineFieldNumber;
const int CheckResponseSignal::kIsVcuOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckResponseSignal::CheckResponseSignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.CheckResponseSignal)
}
CheckResponseSignal::CheckResponseSignal(const CheckResponseSignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_eps_online_, &from.is_eps_online_,
    reinterpret_cast<char*>(&is_vcu_online_) -
    reinterpret_cast<char*>(&is_eps_online_) + sizeof(is_vcu_online_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.CheckResponseSignal)
}

void CheckResponseSignal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&is_eps_online_, 0, reinterpret_cast<char*>(&is_vcu_online_) -
    reinterpret_cast<char*>(&is_eps_online_) + sizeof(is_vcu_online_));
}

CheckResponseSignal::~CheckResponseSignal() {
  // @@protoc_insertion_point(destructor:apollo.canbus.CheckResponseSignal)
  SharedDtor();
}

void CheckResponseSignal::SharedDtor() {
}

void CheckResponseSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckResponseSignal::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckResponseSignal& CheckResponseSignal::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckResponseSignal* CheckResponseSignal::New(::google::protobuf::Arena* arena) const {
  CheckResponseSignal* n = new CheckResponseSignal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckResponseSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.CheckResponseSignal)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&is_eps_online_, 0, reinterpret_cast<char*>(&is_vcu_online_) -
      reinterpret_cast<char*>(&is_eps_online_) + sizeof(is_vcu_online_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckResponseSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.CheckResponseSignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_eps_online = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_eps_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_eps_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_epb_online = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_epb_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_epb_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_esp_online = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_esp_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_vtog_online = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_vtog_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vtog_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_scu_online = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_scu_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_scu_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_switch_online = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_is_switch_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_switch_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_vcu_online = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_vcu_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vcu_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.CheckResponseSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.CheckResponseSignal)
  return false;
#undef DO_
}

void CheckResponseSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.CheckResponseSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_eps_online = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_eps_online(), output);
  }

  // optional bool is_epb_online = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_epb_online(), output);
  }

  // optional bool is_esp_online = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_esp_online(), output);
  }

  // optional bool is_vtog_online = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_vtog_online(), output);
  }

  // optional bool is_scu_online = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_scu_online(), output);
  }

  // optional bool is_switch_online = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_switch_online(), output);
  }

  // optional bool is_vcu_online = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_vcu_online(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.CheckResponseSignal)
}

::google::protobuf::uint8* CheckResponseSignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.CheckResponseSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_eps_online = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_eps_online(), target);
  }

  // optional bool is_epb_online = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_epb_online(), target);
  }

  // optional bool is_esp_online = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_esp_online(), target);
  }

  // optional bool is_vtog_online = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_vtog_online(), target);
  }

  // optional bool is_scu_online = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_scu_online(), target);
  }

  // optional bool is_switch_online = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_switch_online(), target);
  }

  // optional bool is_vcu_online = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_vcu_online(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.CheckResponseSignal)
  return target;
}

size_t CheckResponseSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.CheckResponseSignal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bool is_eps_online = 1 [default = false];
    if (has_is_eps_online()) {
      total_size += 1 + 1;
    }

    // optional bool is_epb_online = 2 [default = false];
    if (has_is_epb_online()) {
      total_size += 1 + 1;
    }

    // optional bool is_esp_online = 3 [default = false];
    if (has_is_esp_online()) {
      total_size += 1 + 1;
    }

    // optional bool is_vtog_online = 4 [default = false];
    if (has_is_vtog_online()) {
      total_size += 1 + 1;
    }

    // optional bool is_scu_online = 5 [default = false];
    if (has_is_scu_online()) {
      total_size += 1 + 1;
    }

    // optional bool is_switch_online = 6 [default = false];
    if (has_is_switch_online()) {
      total_size += 1 + 1;
    }

    // optional bool is_vcu_online = 7 [default = false];
    if (has_is_vcu_online()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckResponseSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.CheckResponseSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckResponseSignal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckResponseSignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.CheckResponseSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.CheckResponseSignal)
    MergeFrom(*source);
  }
}

void CheckResponseSignal::MergeFrom(const CheckResponseSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.CheckResponseSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      is_eps_online_ = from.is_eps_online_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_epb_online_ = from.is_epb_online_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_esp_online_ = from.is_esp_online_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_vtog_online_ = from.is_vtog_online_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_scu_online_ = from.is_scu_online_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_switch_online_ = from.is_switch_online_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_vcu_online_ = from.is_vcu_online_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckResponseSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.CheckResponseSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckResponseSignal::CopyFrom(const CheckResponseSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.CheckResponseSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponseSignal::IsInitialized() const {
  return true;
}

void CheckResponseSignal::Swap(CheckResponseSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckResponseSignal::InternalSwap(CheckResponseSignal* other) {
  std::swap(is_eps_online_, other->is_eps_online_);
  std::swap(is_epb_online_, other->is_epb_online_);
  std::swap(is_esp_online_, other->is_esp_online_);
  std::swap(is_vtog_online_, other->is_vtog_online_);
  std::swap(is_scu_online_, other->is_scu_online_);
  std::swap(is_switch_online_, other->is_switch_online_);
  std::swap(is_vcu_online_, other->is_vcu_online_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckResponseSignal::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckResponseSignal

// optional bool is_eps_online = 1 [default = false];
bool CheckResponseSignal::has_is_eps_online() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckResponseSignal::set_has_is_eps_online() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckResponseSignal::clear_has_is_eps_online() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckResponseSignal::clear_is_eps_online() {
  is_eps_online_ = false;
  clear_has_is_eps_online();
}
bool CheckResponseSignal::is_eps_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_eps_online)
  return is_eps_online_;
}
void CheckResponseSignal::set_is_eps_online(bool value) {
  set_has_is_eps_online();
  is_eps_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_eps_online)
}

// optional bool is_epb_online = 2 [default = false];
bool CheckResponseSignal::has_is_epb_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckResponseSignal::set_has_is_epb_online() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckResponseSignal::clear_has_is_epb_online() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckResponseSignal::clear_is_epb_online() {
  is_epb_online_ = false;
  clear_has_is_epb_online();
}
bool CheckResponseSignal::is_epb_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_epb_online)
  return is_epb_online_;
}
void CheckResponseSignal::set_is_epb_online(bool value) {
  set_has_is_epb_online();
  is_epb_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_epb_online)
}

// optional bool is_esp_online = 3 [default = false];
bool CheckResponseSignal::has_is_esp_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CheckResponseSignal::set_has_is_esp_online() {
  _has_bits_[0] |= 0x00000004u;
}
void CheckResponseSignal::clear_has_is_esp_online() {
  _has_bits_[0] &= ~0x00000004u;
}
void CheckResponseSignal::clear_is_esp_online() {
  is_esp_online_ = false;
  clear_has_is_esp_online();
}
bool CheckResponseSignal::is_esp_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_esp_online)
  return is_esp_online_;
}
void CheckResponseSignal::set_is_esp_online(bool value) {
  set_has_is_esp_online();
  is_esp_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_esp_online)
}

// optional bool is_vtog_online = 4 [default = false];
bool CheckResponseSignal::has_is_vtog_online() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CheckResponseSignal::set_has_is_vtog_online() {
  _has_bits_[0] |= 0x00000008u;
}
void CheckResponseSignal::clear_has_is_vtog_online() {
  _has_bits_[0] &= ~0x00000008u;
}
void CheckResponseSignal::clear_is_vtog_online() {
  is_vtog_online_ = false;
  clear_has_is_vtog_online();
}
bool CheckResponseSignal::is_vtog_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_vtog_online)
  return is_vtog_online_;
}
void CheckResponseSignal::set_is_vtog_online(bool value) {
  set_has_is_vtog_online();
  is_vtog_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_vtog_online)
}

// optional bool is_scu_online = 5 [default = false];
bool CheckResponseSignal::has_is_scu_online() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CheckResponseSignal::set_has_is_scu_online() {
  _has_bits_[0] |= 0x00000010u;
}
void CheckResponseSignal::clear_has_is_scu_online() {
  _has_bits_[0] &= ~0x00000010u;
}
void CheckResponseSignal::clear_is_scu_online() {
  is_scu_online_ = false;
  clear_has_is_scu_online();
}
bool CheckResponseSignal::is_scu_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_scu_online)
  return is_scu_online_;
}
void CheckResponseSignal::set_is_scu_online(bool value) {
  set_has_is_scu_online();
  is_scu_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_scu_online)
}

// optional bool is_switch_online = 6 [default = false];
bool CheckResponseSignal::has_is_switch_online() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CheckResponseSignal::set_has_is_switch_online() {
  _has_bits_[0] |= 0x00000020u;
}
void CheckResponseSignal::clear_has_is_switch_online() {
  _has_bits_[0] &= ~0x00000020u;
}
void CheckResponseSignal::clear_is_switch_online() {
  is_switch_online_ = false;
  clear_has_is_switch_online();
}
bool CheckResponseSignal::is_switch_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_switch_online)
  return is_switch_online_;
}
void CheckResponseSignal::set_is_switch_online(bool value) {
  set_has_is_switch_online();
  is_switch_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_switch_online)
}

// optional bool is_vcu_online = 7 [default = false];
bool CheckResponseSignal::has_is_vcu_online() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CheckResponseSignal::set_has_is_vcu_online() {
  _has_bits_[0] |= 0x00000040u;
}
void CheckResponseSignal::clear_has_is_vcu_online() {
  _has_bits_[0] &= ~0x00000040u;
}
void CheckResponseSignal::clear_is_vcu_online() {
  is_vcu_online_ = false;
  clear_has_is_vcu_online();
}
bool CheckResponseSignal::is_vcu_online() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.CheckResponseSignal.is_vcu_online)
  return is_vcu_online_;
}
void CheckResponseSignal::set_is_vcu_online(bool value) {
  set_has_is_vcu_online();
  is_vcu_online_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.CheckResponseSignal.is_vcu_online)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Battery::kBatteryPercentFieldNumber;
const int Battery::kFuelLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Battery::Battery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Battery)
}
Battery::Battery(const Battery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&battery_percent_, &from.battery_percent_,
    reinterpret_cast<char*>(&fuel_level_) -
    reinterpret_cast<char*>(&battery_percent_) + sizeof(fuel_level_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Battery)
}

void Battery::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&battery_percent_, 0, reinterpret_cast<char*>(&fuel_level_) -
    reinterpret_cast<char*>(&battery_percent_) + sizeof(fuel_level_));
}

Battery::~Battery() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Battery)
  SharedDtor();
}

void Battery::SharedDtor() {
}

void Battery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battery::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Battery& Battery::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

Battery* Battery::New(::google::protobuf::Arena* arena) const {
  Battery* n = new Battery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Battery)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&battery_percent_, 0, reinterpret_cast<char*>(&fuel_level_) -
      reinterpret_cast<char*>(&battery_percent_) + sizeof(fuel_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Battery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Battery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double battery_percent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_battery_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &battery_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fuel_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_fuel_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fuel_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Battery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Battery)
  return false;
#undef DO_
}

void Battery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Battery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double battery_percent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->battery_percent(), output);
  }

  // optional double fuel_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fuel_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Battery)
}

::google::protobuf::uint8* Battery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Battery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double battery_percent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->battery_percent(), target);
  }

  // optional double fuel_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fuel_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Battery)
  return target;
}

size_t Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Battery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double battery_percent = 1;
    if (has_battery_percent()) {
      total_size += 1 + 8;
    }

    // optional double fuel_level = 2;
    if (has_fuel_level()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  const Battery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Battery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Battery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Battery)
    MergeFrom(*source);
  }
}

void Battery::MergeFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      battery_percent_ = from.battery_percent_;
    }
    if (cached_has_bits & 0x00000002u) {
      fuel_level_ = from.fuel_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Battery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battery::IsInitialized() const {
  return true;
}

void Battery::Swap(Battery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Battery::InternalSwap(Battery* other) {
  std::swap(battery_percent_, other->battery_percent_);
  std::swap(fuel_level_, other->fuel_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Battery::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Battery

// optional double battery_percent = 1;
bool Battery::has_battery_percent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Battery::set_has_battery_percent() {
  _has_bits_[0] |= 0x00000001u;
}
void Battery::clear_has_battery_percent() {
  _has_bits_[0] &= ~0x00000001u;
}
void Battery::clear_battery_percent() {
  battery_percent_ = 0;
  clear_has_battery_percent();
}
double Battery::battery_percent() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Battery.battery_percent)
  return battery_percent_;
}
void Battery::set_battery_percent(double value) {
  set_has_battery_percent();
  battery_percent_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Battery.battery_percent)
}

// optional double fuel_level = 2;
bool Battery::has_fuel_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Battery::set_has_fuel_level() {
  _has_bits_[0] |= 0x00000002u;
}
void Battery::clear_has_fuel_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void Battery::clear_fuel_level() {
  fuel_level_ = 0;
  clear_has_fuel_level();
}
double Battery::fuel_level() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Battery.fuel_level)
  return fuel_level_;
}
void Battery::set_fuel_level(double value) {
  set_has_fuel_level();
  fuel_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Battery.fuel_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Light::kTurnLightTypeFieldNumber;
const int Light::kLampTypeFieldNumber;
const int Light::kIsBrakeLampOnFieldNumber;
const int Light::kIsAutoLightFieldNumber;
const int Light::kWiperGearFieldNumber;
const int Light::kLotionGearFieldNumber;
const int Light::kIsHornOnFieldNumber;
const int Light::kLincolnLampTypeFieldNumber;
const int Light::kLincolnWiperFieldNumber;
const int Light::kLincolnAmbientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Light::Light()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Light)
}
Light::Light(const Light& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&turn_light_type_, &from.turn_light_type_,
    reinterpret_cast<char*>(&lincoln_ambient_) -
    reinterpret_cast<char*>(&turn_light_type_) + sizeof(lincoln_ambient_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Light)
}

void Light::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&turn_light_type_, 0, reinterpret_cast<char*>(&lincoln_ambient_) -
    reinterpret_cast<char*>(&turn_light_type_) + sizeof(lincoln_ambient_));
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Light)
  SharedDtor();
}

void Light::SharedDtor() {
}

void Light::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Light::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Light& Light::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

Light* Light::New(::google::protobuf::Arena* arena) const {
  Light* n = new Light;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Light::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Light)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&turn_light_type_, 0, reinterpret_cast<char*>(&lincoln_lamp_type_) -
      reinterpret_cast<char*>(&turn_light_type_) + sizeof(lincoln_lamp_type_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&lincoln_wiper_, 0, reinterpret_cast<char*>(&lincoln_ambient_) -
      reinterpret_cast<char*>(&lincoln_wiper_) + sizeof(lincoln_ambient_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Light::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Light)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Light_TurnLightType_IsValid(value)) {
            set_turn_light_type(static_cast< ::apollo::canbus::Light_TurnLightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Light.LampType lamp_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Light_LampType_IsValid(value)) {
            set_lamp_type(static_cast< ::apollo::canbus::Light_LampType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_brake_lamp_on = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_brake_lamp_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_lamp_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_auto_light = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_auto_light();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wiper_gear = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_wiper_gear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiper_gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lotion_gear = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_lotion_gear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lotion_gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_horn_on = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_horn_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_horn_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Light_LincolnLampType_IsValid(value)) {
            set_lincoln_lamp_type(static_cast< ::apollo::canbus::Light_LincolnLampType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Light_LincolnWiperType_IsValid(value)) {
            set_lincoln_wiper(static_cast< ::apollo::canbus::Light_LincolnWiperType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Light_LincolnAmbientType_IsValid(value)) {
            set_lincoln_ambient(static_cast< ::apollo::canbus::Light_LincolnAmbientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Light)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Light)
  return false;
#undef DO_
}

void Light::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->turn_light_type(), output);
  }

  // optional .apollo.canbus.Light.LampType lamp_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->lamp_type(), output);
  }

  // optional bool is_brake_lamp_on = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_brake_lamp_on(), output);
  }

  // optional bool is_auto_light = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_auto_light(), output);
  }

  // optional int32 wiper_gear = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wiper_gear(), output);
  }

  // optional int32 lotion_gear = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lotion_gear(), output);
  }

  // optional bool is_horn_on = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_horn_on(), output);
  }

  // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->lincoln_lamp_type(), output);
  }

  // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->lincoln_wiper(), output);
  }

  // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->lincoln_ambient(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Light)
}

::google::protobuf::uint8* Light::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->turn_light_type(), target);
  }

  // optional .apollo.canbus.Light.LampType lamp_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->lamp_type(), target);
  }

  // optional bool is_brake_lamp_on = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_brake_lamp_on(), target);
  }

  // optional bool is_auto_light = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_auto_light(), target);
  }

  // optional int32 wiper_gear = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wiper_gear(), target);
  }

  // optional int32 lotion_gear = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lotion_gear(), target);
  }

  // optional bool is_horn_on = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_horn_on(), target);
  }

  // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->lincoln_lamp_type(), target);
  }

  // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->lincoln_wiper(), target);
  }

  // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->lincoln_ambient(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Light)
  return target;
}

size_t Light::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Light)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
    if (has_turn_light_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_light_type());
    }

    // optional .apollo.canbus.Light.LampType lamp_type = 2;
    if (has_lamp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lamp_type());
    }

    // optional bool is_brake_lamp_on = 3;
    if (has_is_brake_lamp_on()) {
      total_size += 1 + 1;
    }

    // optional bool is_auto_light = 4;
    if (has_is_auto_light()) {
      total_size += 1 + 1;
    }

    // optional bool is_horn_on = 7;
    if (has_is_horn_on()) {
      total_size += 1 + 1;
    }

    // optional int32 wiper_gear = 5;
    if (has_wiper_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wiper_gear());
    }

    // optional int32 lotion_gear = 6;
    if (has_lotion_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lotion_gear());
    }

    // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
    if (has_lincoln_lamp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lincoln_lamp_type());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
    if (has_lincoln_wiper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lincoln_wiper());
    }

    // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
    if (has_lincoln_ambient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lincoln_ambient());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Light::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Light)
  GOOGLE_DCHECK_NE(&from, this);
  const Light* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Light>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Light)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Light)
    MergeFrom(*source);
  }
}

void Light::MergeFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Light)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      turn_light_type_ = from.turn_light_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      lamp_type_ = from.lamp_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_brake_lamp_on_ = from.is_brake_lamp_on_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_auto_light_ = from.is_auto_light_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_horn_on_ = from.is_horn_on_;
    }
    if (cached_has_bits & 0x00000020u) {
      wiper_gear_ = from.wiper_gear_;
    }
    if (cached_has_bits & 0x00000040u) {
      lotion_gear_ = from.lotion_gear_;
    }
    if (cached_has_bits & 0x00000080u) {
      lincoln_lamp_type_ = from.lincoln_lamp_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      lincoln_wiper_ = from.lincoln_wiper_;
    }
    if (cached_has_bits & 0x00000200u) {
      lincoln_ambient_ = from.lincoln_ambient_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Light::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light::CopyFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {
  return true;
}

void Light::Swap(Light* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Light::InternalSwap(Light* other) {
  std::swap(turn_light_type_, other->turn_light_type_);
  std::swap(lamp_type_, other->lamp_type_);
  std::swap(is_brake_lamp_on_, other->is_brake_lamp_on_);
  std::swap(is_auto_light_, other->is_auto_light_);
  std::swap(is_horn_on_, other->is_horn_on_);
  std::swap(wiper_gear_, other->wiper_gear_);
  std::swap(lotion_gear_, other->lotion_gear_);
  std::swap(lincoln_lamp_type_, other->lincoln_lamp_type_);
  std::swap(lincoln_wiper_, other->lincoln_wiper_);
  std::swap(lincoln_ambient_, other->lincoln_ambient_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Light::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Light

// optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
bool Light::has_turn_light_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Light::set_has_turn_light_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Light::clear_has_turn_light_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Light::clear_turn_light_type() {
  turn_light_type_ = 0;
  clear_has_turn_light_type();
}
::apollo::canbus::Light_TurnLightType Light::turn_light_type() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.turn_light_type)
  return static_cast< ::apollo::canbus::Light_TurnLightType >(turn_light_type_);
}
void Light::set_turn_light_type(::apollo::canbus::Light_TurnLightType value) {
  assert(::apollo::canbus::Light_TurnLightType_IsValid(value));
  set_has_turn_light_type();
  turn_light_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.turn_light_type)
}

// optional .apollo.canbus.Light.LampType lamp_type = 2;
bool Light::has_lamp_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Light::set_has_lamp_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Light::clear_has_lamp_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Light::clear_lamp_type() {
  lamp_type_ = 0;
  clear_has_lamp_type();
}
::apollo::canbus::Light_LampType Light::lamp_type() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.lamp_type)
  return static_cast< ::apollo::canbus::Light_LampType >(lamp_type_);
}
void Light::set_lamp_type(::apollo::canbus::Light_LampType value) {
  assert(::apollo::canbus::Light_LampType_IsValid(value));
  set_has_lamp_type();
  lamp_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.lamp_type)
}

// optional bool is_brake_lamp_on = 3;
bool Light::has_is_brake_lamp_on() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Light::set_has_is_brake_lamp_on() {
  _has_bits_[0] |= 0x00000004u;
}
void Light::clear_has_is_brake_lamp_on() {
  _has_bits_[0] &= ~0x00000004u;
}
void Light::clear_is_brake_lamp_on() {
  is_brake_lamp_on_ = false;
  clear_has_is_brake_lamp_on();
}
bool Light::is_brake_lamp_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.is_brake_lamp_on)
  return is_brake_lamp_on_;
}
void Light::set_is_brake_lamp_on(bool value) {
  set_has_is_brake_lamp_on();
  is_brake_lamp_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.is_brake_lamp_on)
}

// optional bool is_auto_light = 4;
bool Light::has_is_auto_light() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Light::set_has_is_auto_light() {
  _has_bits_[0] |= 0x00000008u;
}
void Light::clear_has_is_auto_light() {
  _has_bits_[0] &= ~0x00000008u;
}
void Light::clear_is_auto_light() {
  is_auto_light_ = false;
  clear_has_is_auto_light();
}
bool Light::is_auto_light() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.is_auto_light)
  return is_auto_light_;
}
void Light::set_is_auto_light(bool value) {
  set_has_is_auto_light();
  is_auto_light_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.is_auto_light)
}

// optional int32 wiper_gear = 5;
bool Light::has_wiper_gear() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Light::set_has_wiper_gear() {
  _has_bits_[0] |= 0x00000020u;
}
void Light::clear_has_wiper_gear() {
  _has_bits_[0] &= ~0x00000020u;
}
void Light::clear_wiper_gear() {
  wiper_gear_ = 0;
  clear_has_wiper_gear();
}
::google::protobuf::int32 Light::wiper_gear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.wiper_gear)
  return wiper_gear_;
}
void Light::set_wiper_gear(::google::protobuf::int32 value) {
  set_has_wiper_gear();
  wiper_gear_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.wiper_gear)
}

// optional int32 lotion_gear = 6;
bool Light::has_lotion_gear() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Light::set_has_lotion_gear() {
  _has_bits_[0] |= 0x00000040u;
}
void Light::clear_has_lotion_gear() {
  _has_bits_[0] &= ~0x00000040u;
}
void Light::clear_lotion_gear() {
  lotion_gear_ = 0;
  clear_has_lotion_gear();
}
::google::protobuf::int32 Light::lotion_gear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.lotion_gear)
  return lotion_gear_;
}
void Light::set_lotion_gear(::google::protobuf::int32 value) {
  set_has_lotion_gear();
  lotion_gear_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.lotion_gear)
}

// optional bool is_horn_on = 7;
bool Light::has_is_horn_on() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Light::set_has_is_horn_on() {
  _has_bits_[0] |= 0x00000010u;
}
void Light::clear_has_is_horn_on() {
  _has_bits_[0] &= ~0x00000010u;
}
void Light::clear_is_horn_on() {
  is_horn_on_ = false;
  clear_has_is_horn_on();
}
bool Light::is_horn_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.is_horn_on)
  return is_horn_on_;
}
void Light::set_is_horn_on(bool value) {
  set_has_is_horn_on();
  is_horn_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.is_horn_on)
}

// optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
bool Light::has_lincoln_lamp_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Light::set_has_lincoln_lamp_type() {
  _has_bits_[0] |= 0x00000080u;
}
void Light::clear_has_lincoln_lamp_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void Light::clear_lincoln_lamp_type() {
  lincoln_lamp_type_ = 0;
  clear_has_lincoln_lamp_type();
}
::apollo::canbus::Light_LincolnLampType Light::lincoln_lamp_type() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.lincoln_lamp_type)
  return static_cast< ::apollo::canbus::Light_LincolnLampType >(lincoln_lamp_type_);
}
void Light::set_lincoln_lamp_type(::apollo::canbus::Light_LincolnLampType value) {
  assert(::apollo::canbus::Light_LincolnLampType_IsValid(value));
  set_has_lincoln_lamp_type();
  lincoln_lamp_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.lincoln_lamp_type)
}

// optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
bool Light::has_lincoln_wiper() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Light::set_has_lincoln_wiper() {
  _has_bits_[0] |= 0x00000100u;
}
void Light::clear_has_lincoln_wiper() {
  _has_bits_[0] &= ~0x00000100u;
}
void Light::clear_lincoln_wiper() {
  lincoln_wiper_ = 0;
  clear_has_lincoln_wiper();
}
::apollo::canbus::Light_LincolnWiperType Light::lincoln_wiper() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.lincoln_wiper)
  return static_cast< ::apollo::canbus::Light_LincolnWiperType >(lincoln_wiper_);
}
void Light::set_lincoln_wiper(::apollo::canbus::Light_LincolnWiperType value) {
  assert(::apollo::canbus::Light_LincolnWiperType_IsValid(value));
  set_has_lincoln_wiper();
  lincoln_wiper_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.lincoln_wiper)
}

// optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
bool Light::has_lincoln_ambient() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Light::set_has_lincoln_ambient() {
  _has_bits_[0] |= 0x00000200u;
}
void Light::clear_has_lincoln_ambient() {
  _has_bits_[0] &= ~0x00000200u;
}
void Light::clear_lincoln_ambient() {
  lincoln_ambient_ = 0;
  clear_has_lincoln_ambient();
}
::apollo::canbus::Light_LincolnAmbientType Light::lincoln_ambient() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Light.lincoln_ambient)
  return static_cast< ::apollo::canbus::Light_LincolnAmbientType >(lincoln_ambient_);
}
void Light::set_lincoln_ambient(::apollo::canbus::Light_LincolnAmbientType value) {
  assert(::apollo::canbus::Light_LincolnAmbientType_IsValid(value));
  set_has_lincoln_ambient();
  lincoln_ambient_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Light.lincoln_ambient)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Eps::kIsEpsFailFieldNumber;
const int Eps::kEpsControlStateFieldNumber;
const int Eps::kEpsDriverHandTorqFieldNumber;
const int Eps::kIsSteeringAngleValidFieldNumber;
const int Eps::kSteeringAngleFieldNumber;
const int Eps::kSteeringAngleSpdFieldNumber;
const int Eps::kIsTrimmingStatusFieldNumber;
const int Eps::kIsCalibrationStatusFieldNumber;
const int Eps::kIsFailureStatusFieldNumber;
const int Eps::kAllowEnterAutonomousModeFieldNumber;
const int Eps::kCurrentDrivingModeFieldNumber;
const int Eps::kSteeringAngleCmdFieldNumber;
const int Eps::kVehicleSpeedFieldNumber;
const int Eps::kEpasTorqueFieldNumber;
const int Eps::kSteeringEnabledFieldNumber;
const int Eps::kDriverOverrideFieldNumber;
const int Eps::kDriverActivityFieldNumber;
const int Eps::kWatchdogFaultFieldNumber;
const int Eps::kChannel1FaultFieldNumber;
const int Eps::kChannel2FaultFieldNumber;
const int Eps::kCalibrationFaultFieldNumber;
const int Eps::kConnectorFaultFieldNumber;
const int Eps::kTimestamp65FieldNumber;
const int Eps::kMajorVersionFieldNumber;
const int Eps::kMinorVersionFieldNumber;
const int Eps::kBuildNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Eps::Eps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Eps)
}
Eps::Eps(const Eps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eps_driver_hand_torq_, &from.eps_driver_hand_torq_,
    reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&eps_driver_hand_torq_) + sizeof(build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Eps)
}

void Eps::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&eps_driver_hand_torq_, 0, reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&eps_driver_hand_torq_) + sizeof(build_number_));
}

Eps::~Eps() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Eps)
  SharedDtor();
}

void Eps::SharedDtor() {
}

void Eps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Eps::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Eps& Eps::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

Eps* Eps::New(::google::protobuf::Arena* arena) const {
  Eps* n = new Eps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Eps::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Eps)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&eps_driver_hand_torq_, 0, reinterpret_cast<char*>(&steering_angle_spd_) -
      reinterpret_cast<char*>(&eps_driver_hand_torq_) + sizeof(steering_angle_spd_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&allow_enter_autonomous_mode_, 0, reinterpret_cast<char*>(&driver_override_) -
      reinterpret_cast<char*>(&allow_enter_autonomous_mode_) + sizeof(driver_override_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&driver_activity_, 0, reinterpret_cast<char*>(&major_version_) -
      reinterpret_cast<char*>(&driver_activity_) + sizeof(major_version_));
  }
  if (_has_bits_[24 / 32] & 50331648u) {
    ::memset(&minor_version_, 0, reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&minor_version_) + sizeof(build_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Eps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Eps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_eps_fail = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_eps_fail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_eps_fail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Eps.Type eps_control_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Eps_Type_IsValid(value)) {
            set_eps_control_state(static_cast< ::apollo::canbus::Eps_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double eps_driver_hand_torq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_eps_driver_hand_torq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_driver_hand_torq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_steering_angle_valid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_steering_angle_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_steering_angle_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_steering_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_angle_spd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_steering_angle_spd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_spd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_trimming_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_trimming_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trimming_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_calibration_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_is_calibration_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_calibration_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_failure_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_is_failure_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_failure_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 allow_enter_autonomous_mode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_allow_enter_autonomous_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_enter_autonomous_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_driving_mode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_current_driving_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_driving_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_angle_cmd = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_steering_angle_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vehicle_speed = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_vehicle_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double epas_torque = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_epas_torque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epas_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steering_enabled = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_steering_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steering_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_override = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_driver_override();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_activity = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_driver_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool watchdog_fault = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_watchdog_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_1_fault = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_channel_1_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_1_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_2_fault = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_channel_2_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_2_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool calibration_fault = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_calibration_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calibration_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool connector_fault = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_connector_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connector_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp_65 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u)) {
          set_has_timestamp_65();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_65_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 major_version = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_major_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minor_version = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_minor_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 build_number = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_build_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Eps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Eps)
  return false;
#undef DO_
}

void Eps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Eps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_eps_fail = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_eps_fail(), output);
  }

  // optional .apollo.canbus.Eps.Type eps_control_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eps_control_state(), output);
  }

  // optional double eps_driver_hand_torq = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->eps_driver_hand_torq(), output);
  }

  // optional bool is_steering_angle_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_steering_angle_valid(), output);
  }

  // optional double steering_angle = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->steering_angle(), output);
  }

  // optional double steering_angle_spd = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->steering_angle_spd(), output);
  }

  // optional bool is_trimming_status = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_trimming_status(), output);
  }

  // optional bool is_calibration_status = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_calibration_status(), output);
  }

  // optional bool is_failure_status = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_failure_status(), output);
  }

  // optional int32 allow_enter_autonomous_mode = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->allow_enter_autonomous_mode(), output);
  }

  // optional int32 current_driving_mode = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->current_driving_mode(), output);
  }

  // optional double steering_angle_cmd = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->steering_angle_cmd(), output);
  }

  // optional double vehicle_speed = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->vehicle_speed(), output);
  }

  // optional double epas_torque = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->epas_torque(), output);
  }

  // optional bool steering_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->steering_enabled(), output);
  }

  // optional bool driver_override = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->driver_override(), output);
  }

  // optional bool driver_activity = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->driver_activity(), output);
  }

  // optional bool watchdog_fault = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->watchdog_fault(), output);
  }

  // optional bool channel_1_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->channel_1_fault(), output);
  }

  // optional bool channel_2_fault = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->channel_2_fault(), output);
  }

  // optional bool calibration_fault = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->calibration_fault(), output);
  }

  // optional bool connector_fault = 22;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->connector_fault(), output);
  }

  // optional double timestamp_65 = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->timestamp_65(), output);
  }

  // optional int32 major_version = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->major_version(), output);
  }

  // optional int32 minor_version = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->minor_version(), output);
  }

  // optional int32 build_number = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->build_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Eps)
}

::google::protobuf::uint8* Eps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Eps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_eps_fail = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_eps_fail(), target);
  }

  // optional .apollo.canbus.Eps.Type eps_control_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eps_control_state(), target);
  }

  // optional double eps_driver_hand_torq = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->eps_driver_hand_torq(), target);
  }

  // optional bool is_steering_angle_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_steering_angle_valid(), target);
  }

  // optional double steering_angle = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->steering_angle(), target);
  }

  // optional double steering_angle_spd = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->steering_angle_spd(), target);
  }

  // optional bool is_trimming_status = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_trimming_status(), target);
  }

  // optional bool is_calibration_status = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_calibration_status(), target);
  }

  // optional bool is_failure_status = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_failure_status(), target);
  }

  // optional int32 allow_enter_autonomous_mode = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->allow_enter_autonomous_mode(), target);
  }

  // optional int32 current_driving_mode = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->current_driving_mode(), target);
  }

  // optional double steering_angle_cmd = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->steering_angle_cmd(), target);
  }

  // optional double vehicle_speed = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->vehicle_speed(), target);
  }

  // optional double epas_torque = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->epas_torque(), target);
  }

  // optional bool steering_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->steering_enabled(), target);
  }

  // optional bool driver_override = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->driver_override(), target);
  }

  // optional bool driver_activity = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->driver_activity(), target);
  }

  // optional bool watchdog_fault = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->channel_2_fault(), target);
  }

  // optional bool calibration_fault = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->calibration_fault(), target);
  }

  // optional bool connector_fault = 22;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->connector_fault(), target);
  }

  // optional double timestamp_65 = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->timestamp_65(), target);
  }

  // optional int32 major_version = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->major_version(), target);
  }

  // optional int32 minor_version = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->minor_version(), target);
  }

  // optional int32 build_number = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->build_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Eps)
  return target;
}

size_t Eps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Eps)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double eps_driver_hand_torq = 3;
    if (has_eps_driver_hand_torq()) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Eps.Type eps_control_state = 2;
    if (has_eps_control_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_control_state());
    }

    // optional bool is_eps_fail = 1;
    if (has_is_eps_fail()) {
      total_size += 1 + 1;
    }

    // optional bool is_steering_angle_valid = 4;
    if (has_is_steering_angle_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_trimming_status = 7;
    if (has_is_trimming_status()) {
      total_size += 1 + 1;
    }

    // optional bool is_calibration_status = 8;
    if (has_is_calibration_status()) {
      total_size += 1 + 1;
    }

    // optional double steering_angle = 5;
    if (has_steering_angle()) {
      total_size += 1 + 8;
    }

    // optional double steering_angle_spd = 6;
    if (has_steering_angle_spd()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 allow_enter_autonomous_mode = 10;
    if (has_allow_enter_autonomous_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allow_enter_autonomous_mode());
    }

    // optional int32 current_driving_mode = 11;
    if (has_current_driving_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_driving_mode());
    }

    // optional double steering_angle_cmd = 12;
    if (has_steering_angle_cmd()) {
      total_size += 1 + 8;
    }

    // optional double vehicle_speed = 13;
    if (has_vehicle_speed()) {
      total_size += 1 + 8;
    }

    // optional double epas_torque = 14;
    if (has_epas_torque()) {
      total_size += 1 + 8;
    }

    // optional bool is_failure_status = 9;
    if (has_is_failure_status()) {
      total_size += 1 + 1;
    }

    // optional bool steering_enabled = 15;
    if (has_steering_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool driver_override = 16;
    if (has_driver_override()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool driver_activity = 17;
    if (has_driver_activity()) {
      total_size += 2 + 1;
    }

    // optional bool watchdog_fault = 18;
    if (has_watchdog_fault()) {
      total_size += 2 + 1;
    }

    // optional bool channel_1_fault = 19;
    if (has_channel_1_fault()) {
      total_size += 2 + 1;
    }

    // optional bool channel_2_fault = 20;
    if (has_channel_2_fault()) {
      total_size += 2 + 1;
    }

    // optional bool calibration_fault = 21;
    if (has_calibration_fault()) {
      total_size += 2 + 1;
    }

    // optional double timestamp_65 = 23;
    if (has_timestamp_65()) {
      total_size += 2 + 8;
    }

    // optional bool connector_fault = 22;
    if (has_connector_fault()) {
      total_size += 2 + 1;
    }

    // optional int32 major_version = 24;
    if (has_major_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_version());
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional int32 minor_version = 25;
    if (has_minor_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_version());
    }

    // optional int32 build_number = 26;
    if (has_build_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->build_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Eps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Eps)
  GOOGLE_DCHECK_NE(&from, this);
  const Eps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Eps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Eps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Eps)
    MergeFrom(*source);
  }
}

void Eps::MergeFrom(const Eps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Eps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      eps_driver_hand_torq_ = from.eps_driver_hand_torq_;
    }
    if (cached_has_bits & 0x00000002u) {
      eps_control_state_ = from.eps_control_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_eps_fail_ = from.is_eps_fail_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_steering_angle_valid_ = from.is_steering_angle_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_trimming_status_ = from.is_trimming_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_calibration_status_ = from.is_calibration_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      steering_angle_ = from.steering_angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      steering_angle_spd_ = from.steering_angle_spd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      allow_enter_autonomous_mode_ = from.allow_enter_autonomous_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      current_driving_mode_ = from.current_driving_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      steering_angle_cmd_ = from.steering_angle_cmd_;
    }
    if (cached_has_bits & 0x00000800u) {
      vehicle_speed_ = from.vehicle_speed_;
    }
    if (cached_has_bits & 0x00001000u) {
      epas_torque_ = from.epas_torque_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_failure_status_ = from.is_failure_status_;
    }
    if (cached_has_bits & 0x00004000u) {
      steering_enabled_ = from.steering_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      driver_override_ = from.driver_override_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      driver_activity_ = from.driver_activity_;
    }
    if (cached_has_bits & 0x00020000u) {
      watchdog_fault_ = from.watchdog_fault_;
    }
    if (cached_has_bits & 0x00040000u) {
      channel_1_fault_ = from.channel_1_fault_;
    }
    if (cached_has_bits & 0x00080000u) {
      channel_2_fault_ = from.channel_2_fault_;
    }
    if (cached_has_bits & 0x00100000u) {
      calibration_fault_ = from.calibration_fault_;
    }
    if (cached_has_bits & 0x00200000u) {
      timestamp_65_ = from.timestamp_65_;
    }
    if (cached_has_bits & 0x00400000u) {
      connector_fault_ = from.connector_fault_;
    }
    if (cached_has_bits & 0x00800000u) {
      major_version_ = from.major_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      minor_version_ = from.minor_version_;
    }
    if (cached_has_bits & 0x02000000u) {
      build_number_ = from.build_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Eps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Eps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eps::CopyFrom(const Eps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Eps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eps::IsInitialized() const {
  return true;
}

void Eps::Swap(Eps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Eps::InternalSwap(Eps* other) {
  std::swap(eps_driver_hand_torq_, other->eps_driver_hand_torq_);
  std::swap(eps_control_state_, other->eps_control_state_);
  std::swap(is_eps_fail_, other->is_eps_fail_);
  std::swap(is_steering_angle_valid_, other->is_steering_angle_valid_);
  std::swap(is_trimming_status_, other->is_trimming_status_);
  std::swap(is_calibration_status_, other->is_calibration_status_);
  std::swap(steering_angle_, other->steering_angle_);
  std::swap(steering_angle_spd_, other->steering_angle_spd_);
  std::swap(allow_enter_autonomous_mode_, other->allow_enter_autonomous_mode_);
  std::swap(current_driving_mode_, other->current_driving_mode_);
  std::swap(steering_angle_cmd_, other->steering_angle_cmd_);
  std::swap(vehicle_speed_, other->vehicle_speed_);
  std::swap(epas_torque_, other->epas_torque_);
  std::swap(is_failure_status_, other->is_failure_status_);
  std::swap(steering_enabled_, other->steering_enabled_);
  std::swap(driver_override_, other->driver_override_);
  std::swap(driver_activity_, other->driver_activity_);
  std::swap(watchdog_fault_, other->watchdog_fault_);
  std::swap(channel_1_fault_, other->channel_1_fault_);
  std::swap(channel_2_fault_, other->channel_2_fault_);
  std::swap(calibration_fault_, other->calibration_fault_);
  std::swap(timestamp_65_, other->timestamp_65_);
  std::swap(connector_fault_, other->connector_fault_);
  std::swap(major_version_, other->major_version_);
  std::swap(minor_version_, other->minor_version_);
  std::swap(build_number_, other->build_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Eps::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Eps

// optional bool is_eps_fail = 1;
bool Eps::has_is_eps_fail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Eps::set_has_is_eps_fail() {
  _has_bits_[0] |= 0x00000004u;
}
void Eps::clear_has_is_eps_fail() {
  _has_bits_[0] &= ~0x00000004u;
}
void Eps::clear_is_eps_fail() {
  is_eps_fail_ = false;
  clear_has_is_eps_fail();
}
bool Eps::is_eps_fail() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.is_eps_fail)
  return is_eps_fail_;
}
void Eps::set_is_eps_fail(bool value) {
  set_has_is_eps_fail();
  is_eps_fail_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.is_eps_fail)
}

// optional .apollo.canbus.Eps.Type eps_control_state = 2;
bool Eps::has_eps_control_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Eps::set_has_eps_control_state() {
  _has_bits_[0] |= 0x00000002u;
}
void Eps::clear_has_eps_control_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void Eps::clear_eps_control_state() {
  eps_control_state_ = 0;
  clear_has_eps_control_state();
}
::apollo::canbus::Eps_Type Eps::eps_control_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.eps_control_state)
  return static_cast< ::apollo::canbus::Eps_Type >(eps_control_state_);
}
void Eps::set_eps_control_state(::apollo::canbus::Eps_Type value) {
  assert(::apollo::canbus::Eps_Type_IsValid(value));
  set_has_eps_control_state();
  eps_control_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.eps_control_state)
}

// optional double eps_driver_hand_torq = 3;
bool Eps::has_eps_driver_hand_torq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Eps::set_has_eps_driver_hand_torq() {
  _has_bits_[0] |= 0x00000001u;
}
void Eps::clear_has_eps_driver_hand_torq() {
  _has_bits_[0] &= ~0x00000001u;
}
void Eps::clear_eps_driver_hand_torq() {
  eps_driver_hand_torq_ = 0;
  clear_has_eps_driver_hand_torq();
}
double Eps::eps_driver_hand_torq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.eps_driver_hand_torq)
  return eps_driver_hand_torq_;
}
void Eps::set_eps_driver_hand_torq(double value) {
  set_has_eps_driver_hand_torq();
  eps_driver_hand_torq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.eps_driver_hand_torq)
}

// optional bool is_steering_angle_valid = 4;
bool Eps::has_is_steering_angle_valid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Eps::set_has_is_steering_angle_valid() {
  _has_bits_[0] |= 0x00000008u;
}
void Eps::clear_has_is_steering_angle_valid() {
  _has_bits_[0] &= ~0x00000008u;
}
void Eps::clear_is_steering_angle_valid() {
  is_steering_angle_valid_ = false;
  clear_has_is_steering_angle_valid();
}
bool Eps::is_steering_angle_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.is_steering_angle_valid)
  return is_steering_angle_valid_;
}
void Eps::set_is_steering_angle_valid(bool value) {
  set_has_is_steering_angle_valid();
  is_steering_angle_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.is_steering_angle_valid)
}

// optional double steering_angle = 5;
bool Eps::has_steering_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Eps::set_has_steering_angle() {
  _has_bits_[0] |= 0x00000040u;
}
void Eps::clear_has_steering_angle() {
  _has_bits_[0] &= ~0x00000040u;
}
void Eps::clear_steering_angle() {
  steering_angle_ = 0;
  clear_has_steering_angle();
}
double Eps::steering_angle() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.steering_angle)
  return steering_angle_;
}
void Eps::set_steering_angle(double value) {
  set_has_steering_angle();
  steering_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.steering_angle)
}

// optional double steering_angle_spd = 6;
bool Eps::has_steering_angle_spd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Eps::set_has_steering_angle_spd() {
  _has_bits_[0] |= 0x00000080u;
}
void Eps::clear_has_steering_angle_spd() {
  _has_bits_[0] &= ~0x00000080u;
}
void Eps::clear_steering_angle_spd() {
  steering_angle_spd_ = 0;
  clear_has_steering_angle_spd();
}
double Eps::steering_angle_spd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.steering_angle_spd)
  return steering_angle_spd_;
}
void Eps::set_steering_angle_spd(double value) {
  set_has_steering_angle_spd();
  steering_angle_spd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.steering_angle_spd)
}

// optional bool is_trimming_status = 7;
bool Eps::has_is_trimming_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Eps::set_has_is_trimming_status() {
  _has_bits_[0] |= 0x00000010u;
}
void Eps::clear_has_is_trimming_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void Eps::clear_is_trimming_status() {
  is_trimming_status_ = false;
  clear_has_is_trimming_status();
}
bool Eps::is_trimming_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.is_trimming_status)
  return is_trimming_status_;
}
void Eps::set_is_trimming_status(bool value) {
  set_has_is_trimming_status();
  is_trimming_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.is_trimming_status)
}

// optional bool is_calibration_status = 8;
bool Eps::has_is_calibration_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Eps::set_has_is_calibration_status() {
  _has_bits_[0] |= 0x00000020u;
}
void Eps::clear_has_is_calibration_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void Eps::clear_is_calibration_status() {
  is_calibration_status_ = false;
  clear_has_is_calibration_status();
}
bool Eps::is_calibration_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.is_calibration_status)
  return is_calibration_status_;
}
void Eps::set_is_calibration_status(bool value) {
  set_has_is_calibration_status();
  is_calibration_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.is_calibration_status)
}

// optional bool is_failure_status = 9;
bool Eps::has_is_failure_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Eps::set_has_is_failure_status() {
  _has_bits_[0] |= 0x00002000u;
}
void Eps::clear_has_is_failure_status() {
  _has_bits_[0] &= ~0x00002000u;
}
void Eps::clear_is_failure_status() {
  is_failure_status_ = false;
  clear_has_is_failure_status();
}
bool Eps::is_failure_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.is_failure_status)
  return is_failure_status_;
}
void Eps::set_is_failure_status(bool value) {
  set_has_is_failure_status();
  is_failure_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.is_failure_status)
}

// optional int32 allow_enter_autonomous_mode = 10;
bool Eps::has_allow_enter_autonomous_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Eps::set_has_allow_enter_autonomous_mode() {
  _has_bits_[0] |= 0x00000100u;
}
void Eps::clear_has_allow_enter_autonomous_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
void Eps::clear_allow_enter_autonomous_mode() {
  allow_enter_autonomous_mode_ = 0;
  clear_has_allow_enter_autonomous_mode();
}
::google::protobuf::int32 Eps::allow_enter_autonomous_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.allow_enter_autonomous_mode)
  return allow_enter_autonomous_mode_;
}
void Eps::set_allow_enter_autonomous_mode(::google::protobuf::int32 value) {
  set_has_allow_enter_autonomous_mode();
  allow_enter_autonomous_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.allow_enter_autonomous_mode)
}

// optional int32 current_driving_mode = 11;
bool Eps::has_current_driving_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Eps::set_has_current_driving_mode() {
  _has_bits_[0] |= 0x00000200u;
}
void Eps::clear_has_current_driving_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
void Eps::clear_current_driving_mode() {
  current_driving_mode_ = 0;
  clear_has_current_driving_mode();
}
::google::protobuf::int32 Eps::current_driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.current_driving_mode)
  return current_driving_mode_;
}
void Eps::set_current_driving_mode(::google::protobuf::int32 value) {
  set_has_current_driving_mode();
  current_driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.current_driving_mode)
}

// optional double steering_angle_cmd = 12;
bool Eps::has_steering_angle_cmd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Eps::set_has_steering_angle_cmd() {
  _has_bits_[0] |= 0x00000400u;
}
void Eps::clear_has_steering_angle_cmd() {
  _has_bits_[0] &= ~0x00000400u;
}
void Eps::clear_steering_angle_cmd() {
  steering_angle_cmd_ = 0;
  clear_has_steering_angle_cmd();
}
double Eps::steering_angle_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.steering_angle_cmd)
  return steering_angle_cmd_;
}
void Eps::set_steering_angle_cmd(double value) {
  set_has_steering_angle_cmd();
  steering_angle_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.steering_angle_cmd)
}

// optional double vehicle_speed = 13;
bool Eps::has_vehicle_speed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Eps::set_has_vehicle_speed() {
  _has_bits_[0] |= 0x00000800u;
}
void Eps::clear_has_vehicle_speed() {
  _has_bits_[0] &= ~0x00000800u;
}
void Eps::clear_vehicle_speed() {
  vehicle_speed_ = 0;
  clear_has_vehicle_speed();
}
double Eps::vehicle_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.vehicle_speed)
  return vehicle_speed_;
}
void Eps::set_vehicle_speed(double value) {
  set_has_vehicle_speed();
  vehicle_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.vehicle_speed)
}

// optional double epas_torque = 14;
bool Eps::has_epas_torque() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Eps::set_has_epas_torque() {
  _has_bits_[0] |= 0x00001000u;
}
void Eps::clear_has_epas_torque() {
  _has_bits_[0] &= ~0x00001000u;
}
void Eps::clear_epas_torque() {
  epas_torque_ = 0;
  clear_has_epas_torque();
}
double Eps::epas_torque() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.epas_torque)
  return epas_torque_;
}
void Eps::set_epas_torque(double value) {
  set_has_epas_torque();
  epas_torque_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.epas_torque)
}

// optional bool steering_enabled = 15;
bool Eps::has_steering_enabled() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Eps::set_has_steering_enabled() {
  _has_bits_[0] |= 0x00004000u;
}
void Eps::clear_has_steering_enabled() {
  _has_bits_[0] &= ~0x00004000u;
}
void Eps::clear_steering_enabled() {
  steering_enabled_ = false;
  clear_has_steering_enabled();
}
bool Eps::steering_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.steering_enabled)
  return steering_enabled_;
}
void Eps::set_steering_enabled(bool value) {
  set_has_steering_enabled();
  steering_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.steering_enabled)
}

// optional bool driver_override = 16;
bool Eps::has_driver_override() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Eps::set_has_driver_override() {
  _has_bits_[0] |= 0x00008000u;
}
void Eps::clear_has_driver_override() {
  _has_bits_[0] &= ~0x00008000u;
}
void Eps::clear_driver_override() {
  driver_override_ = false;
  clear_has_driver_override();
}
bool Eps::driver_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.driver_override)
  return driver_override_;
}
void Eps::set_driver_override(bool value) {
  set_has_driver_override();
  driver_override_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.driver_override)
}

// optional bool driver_activity = 17;
bool Eps::has_driver_activity() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Eps::set_has_driver_activity() {
  _has_bits_[0] |= 0x00010000u;
}
void Eps::clear_has_driver_activity() {
  _has_bits_[0] &= ~0x00010000u;
}
void Eps::clear_driver_activity() {
  driver_activity_ = false;
  clear_has_driver_activity();
}
bool Eps::driver_activity() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.driver_activity)
  return driver_activity_;
}
void Eps::set_driver_activity(bool value) {
  set_has_driver_activity();
  driver_activity_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.driver_activity)
}

// optional bool watchdog_fault = 18;
bool Eps::has_watchdog_fault() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Eps::set_has_watchdog_fault() {
  _has_bits_[0] |= 0x00020000u;
}
void Eps::clear_has_watchdog_fault() {
  _has_bits_[0] &= ~0x00020000u;
}
void Eps::clear_watchdog_fault() {
  watchdog_fault_ = false;
  clear_has_watchdog_fault();
}
bool Eps::watchdog_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.watchdog_fault)
  return watchdog_fault_;
}
void Eps::set_watchdog_fault(bool value) {
  set_has_watchdog_fault();
  watchdog_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.watchdog_fault)
}

// optional bool channel_1_fault = 19;
bool Eps::has_channel_1_fault() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Eps::set_has_channel_1_fault() {
  _has_bits_[0] |= 0x00040000u;
}
void Eps::clear_has_channel_1_fault() {
  _has_bits_[0] &= ~0x00040000u;
}
void Eps::clear_channel_1_fault() {
  channel_1_fault_ = false;
  clear_has_channel_1_fault();
}
bool Eps::channel_1_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.channel_1_fault)
  return channel_1_fault_;
}
void Eps::set_channel_1_fault(bool value) {
  set_has_channel_1_fault();
  channel_1_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.channel_1_fault)
}

// optional bool channel_2_fault = 20;
bool Eps::has_channel_2_fault() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Eps::set_has_channel_2_fault() {
  _has_bits_[0] |= 0x00080000u;
}
void Eps::clear_has_channel_2_fault() {
  _has_bits_[0] &= ~0x00080000u;
}
void Eps::clear_channel_2_fault() {
  channel_2_fault_ = false;
  clear_has_channel_2_fault();
}
bool Eps::channel_2_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.channel_2_fault)
  return channel_2_fault_;
}
void Eps::set_channel_2_fault(bool value) {
  set_has_channel_2_fault();
  channel_2_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.channel_2_fault)
}

// optional bool calibration_fault = 21;
bool Eps::has_calibration_fault() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Eps::set_has_calibration_fault() {
  _has_bits_[0] |= 0x00100000u;
}
void Eps::clear_has_calibration_fault() {
  _has_bits_[0] &= ~0x00100000u;
}
void Eps::clear_calibration_fault() {
  calibration_fault_ = false;
  clear_has_calibration_fault();
}
bool Eps::calibration_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.calibration_fault)
  return calibration_fault_;
}
void Eps::set_calibration_fault(bool value) {
  set_has_calibration_fault();
  calibration_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.calibration_fault)
}

// optional bool connector_fault = 22;
bool Eps::has_connector_fault() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Eps::set_has_connector_fault() {
  _has_bits_[0] |= 0x00400000u;
}
void Eps::clear_has_connector_fault() {
  _has_bits_[0] &= ~0x00400000u;
}
void Eps::clear_connector_fault() {
  connector_fault_ = false;
  clear_has_connector_fault();
}
bool Eps::connector_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.connector_fault)
  return connector_fault_;
}
void Eps::set_connector_fault(bool value) {
  set_has_connector_fault();
  connector_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.connector_fault)
}

// optional double timestamp_65 = 23;
bool Eps::has_timestamp_65() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Eps::set_has_timestamp_65() {
  _has_bits_[0] |= 0x00200000u;
}
void Eps::clear_has_timestamp_65() {
  _has_bits_[0] &= ~0x00200000u;
}
void Eps::clear_timestamp_65() {
  timestamp_65_ = 0;
  clear_has_timestamp_65();
}
double Eps::timestamp_65() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.timestamp_65)
  return timestamp_65_;
}
void Eps::set_timestamp_65(double value) {
  set_has_timestamp_65();
  timestamp_65_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.timestamp_65)
}

// optional int32 major_version = 24;
bool Eps::has_major_version() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Eps::set_has_major_version() {
  _has_bits_[0] |= 0x00800000u;
}
void Eps::clear_has_major_version() {
  _has_bits_[0] &= ~0x00800000u;
}
void Eps::clear_major_version() {
  major_version_ = 0;
  clear_has_major_version();
}
::google::protobuf::int32 Eps::major_version() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.major_version)
  return major_version_;
}
void Eps::set_major_version(::google::protobuf::int32 value) {
  set_has_major_version();
  major_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.major_version)
}

// optional int32 minor_version = 25;
bool Eps::has_minor_version() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Eps::set_has_minor_version() {
  _has_bits_[0] |= 0x01000000u;
}
void Eps::clear_has_minor_version() {
  _has_bits_[0] &= ~0x01000000u;
}
void Eps::clear_minor_version() {
  minor_version_ = 0;
  clear_has_minor_version();
}
::google::protobuf::int32 Eps::minor_version() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.minor_version)
  return minor_version_;
}
void Eps::set_minor_version(::google::protobuf::int32 value) {
  set_has_minor_version();
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.minor_version)
}

// optional int32 build_number = 26;
bool Eps::has_build_number() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Eps::set_has_build_number() {
  _has_bits_[0] |= 0x02000000u;
}
void Eps::clear_has_build_number() {
  _has_bits_[0] &= ~0x02000000u;
}
void Eps::clear_build_number() {
  build_number_ = 0;
  clear_has_build_number();
}
::google::protobuf::int32 Eps::build_number() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Eps.build_number)
  return build_number_;
}
void Eps::set_build_number(::google::protobuf::int32 value) {
  set_has_build_number();
  build_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Eps.build_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleSpd::kIsVehicleStandstillFieldNumber;
const int VehicleSpd::kIsVehicleSpdValidFieldNumber;
const int VehicleSpd::kVehicleSpdFieldNumber;
const int VehicleSpd::kIsWheelSpdRrValidFieldNumber;
const int VehicleSpd::kWheelDirectionRrFieldNumber;
const int VehicleSpd::kWheelSpdRrFieldNumber;
const int VehicleSpd::kIsWheelSpdRlValidFieldNumber;
const int VehicleSpd::kWheelDirectionRlFieldNumber;
const int VehicleSpd::kWheelSpdRlFieldNumber;
const int VehicleSpd::kIsWheelSpdFrValidFieldNumber;
const int VehicleSpd::kWheelDirectionFrFieldNumber;
const int VehicleSpd::kWheelSpdFrFieldNumber;
const int VehicleSpd::kIsWheelSpdFlValidFieldNumber;
const int VehicleSpd::kWheelDirectionFlFieldNumber;
const int VehicleSpd::kWheelSpdFlFieldNumber;
const int VehicleSpd::kIsYawRateValidFieldNumber;
const int VehicleSpd::kYawRateFieldNumber;
const int VehicleSpd::kYawRateOffsetFieldNumber;
const int VehicleSpd::kIsAxValidFieldNumber;
const int VehicleSpd::kAxFieldNumber;
const int VehicleSpd::kAxOffsetFieldNumber;
const int VehicleSpd::kIsAyValidFieldNumber;
const int VehicleSpd::kAyFieldNumber;
const int VehicleSpd::kAyOffsetFieldNumber;
const int VehicleSpd::kLatAccFieldNumber;
const int VehicleSpd::kLongAccFieldNumber;
const int VehicleSpd::kVertAccFieldNumber;
const int VehicleSpd::kRollRateFieldNumber;
const int VehicleSpd::kAccEstFieldNumber;
const int VehicleSpd::kTimestampSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleSpd::VehicleSpd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.VehicleSpd)
}
VehicleSpd::VehicleSpd(const VehicleSpd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_spd_, &from.vehicle_spd_,
    reinterpret_cast<char*>(&is_ay_valid_) -
    reinterpret_cast<char*>(&vehicle_spd_) + sizeof(is_ay_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.VehicleSpd)
}

void VehicleSpd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&vehicle_spd_, 0, reinterpret_cast<char*>(&is_ay_valid_) -
    reinterpret_cast<char*>(&vehicle_spd_) + sizeof(is_ay_valid_));
}

VehicleSpd::~VehicleSpd() {
  // @@protoc_insertion_point(destructor:apollo.canbus.VehicleSpd)
  SharedDtor();
}

void VehicleSpd::SharedDtor() {
}

void VehicleSpd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleSpd::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleSpd& VehicleSpd::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleSpd* VehicleSpd::New(::google::protobuf::Arena* arena) const {
  VehicleSpd* n = new VehicleSpd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleSpd::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.VehicleSpd)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&vehicle_spd_, 0, reinterpret_cast<char*>(&wheel_spd_rl_) -
      reinterpret_cast<char*>(&vehicle_spd_) + sizeof(wheel_spd_rl_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&wheel_direction_rl_, 0, reinterpret_cast<char*>(&is_ax_valid_) -
      reinterpret_cast<char*>(&wheel_direction_rl_) + sizeof(is_ax_valid_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&wheel_spd_fl_, 0, reinterpret_cast<char*>(&lat_acc_) -
      reinterpret_cast<char*>(&wheel_spd_fl_) + sizeof(lat_acc_));
  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    ::memset(&long_acc_, 0, reinterpret_cast<char*>(&is_ay_valid_) -
      reinterpret_cast<char*>(&long_acc_) + sizeof(is_ay_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleSpd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.VehicleSpd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_vehicle_standstill = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_vehicle_standstill();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vehicle_standstill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_vehicle_spd_valid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_vehicle_spd_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vehicle_spd_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vehicle_spd = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_vehicle_spd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_spd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_rr_valid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_wheel_spd_rr_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::VehicleSpd_Type_IsValid(value)) {
            set_wheel_direction_rr(static_cast< ::apollo::canbus::VehicleSpd_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_rr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_wheel_spd_rr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_rl_valid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_wheel_spd_rl_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::VehicleSpd_Type_IsValid(value)) {
            set_wheel_direction_rl(static_cast< ::apollo::canbus::VehicleSpd_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_rl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_wheel_spd_rl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_fr_valid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_wheel_spd_fr_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::VehicleSpd_Type_IsValid(value)) {
            set_wheel_direction_fr(static_cast< ::apollo::canbus::VehicleSpd_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_fr = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_wheel_spd_fr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_fl_valid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_is_wheel_spd_fl_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::VehicleSpd_Type_IsValid(value)) {
            set_wheel_direction_fl(static_cast< ::apollo::canbus::VehicleSpd_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_fl = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_wheel_spd_fl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_yaw_rate_valid = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_is_yaw_rate_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_yaw_rate_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yaw_rate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_yaw_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yaw_rate_offset = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_yaw_rate_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_rate_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ax_valid = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_is_ax_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ax_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ax = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_ax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ax_offset = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u)) {
          set_has_ax_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ax_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ay_valid = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_is_ay_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ay_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ay = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u)) {
          set_has_ay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ay_offset = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u)) {
          set_has_ay_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ay_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lat_acc = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u)) {
          set_has_lat_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double long_acc = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u)) {
          set_has_long_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vert_acc = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u)) {
          set_has_vert_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vert_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roll_rate = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u)) {
          set_has_roll_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_est = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u)) {
          set_has_acc_est();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_est_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp_sec = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.VehicleSpd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.VehicleSpd)
  return false;
#undef DO_
}

void VehicleSpd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.VehicleSpd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_vehicle_standstill = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_vehicle_standstill(), output);
  }

  // optional bool is_vehicle_spd_valid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_vehicle_spd_valid(), output);
  }

  // optional double vehicle_spd = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vehicle_spd(), output);
  }

  // optional bool is_wheel_spd_rr_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_wheel_spd_rr_valid(), output);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->wheel_direction_rr(), output);
  }

  // optional double wheel_spd_rr = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wheel_spd_rr(), output);
  }

  // optional bool is_wheel_spd_rl_valid = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_wheel_spd_rl_valid(), output);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->wheel_direction_rl(), output);
  }

  // optional double wheel_spd_rl = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->wheel_spd_rl(), output);
  }

  // optional bool is_wheel_spd_fr_valid = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_wheel_spd_fr_valid(), output);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->wheel_direction_fr(), output);
  }

  // optional double wheel_spd_fr = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->wheel_spd_fr(), output);
  }

  // optional bool is_wheel_spd_fl_valid = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_wheel_spd_fl_valid(), output);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->wheel_direction_fl(), output);
  }

  // optional double wheel_spd_fl = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->wheel_spd_fl(), output);
  }

  // optional bool is_yaw_rate_valid = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_yaw_rate_valid(), output);
  }

  // optional double yaw_rate = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->yaw_rate(), output);
  }

  // optional double yaw_rate_offset = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->yaw_rate_offset(), output);
  }

  // optional bool is_ax_valid = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_ax_valid(), output);
  }

  // optional double ax = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->ax(), output);
  }

  // optional double ax_offset = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->ax_offset(), output);
  }

  // optional bool is_ay_valid = 22;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_ay_valid(), output);
  }

  // optional double ay = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->ay(), output);
  }

  // optional double ay_offset = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->ay_offset(), output);
  }

  // optional double lat_acc = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->lat_acc(), output);
  }

  // optional double long_acc = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->long_acc(), output);
  }

  // optional double vert_acc = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->vert_acc(), output);
  }

  // optional double roll_rate = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->roll_rate(), output);
  }

  // optional double acc_est = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->acc_est(), output);
  }

  // optional double timestamp_sec = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->timestamp_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.VehicleSpd)
}

::google::protobuf::uint8* VehicleSpd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.VehicleSpd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_vehicle_standstill = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_vehicle_standstill(), target);
  }

  // optional bool is_vehicle_spd_valid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_vehicle_spd_valid(), target);
  }

  // optional double vehicle_spd = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vehicle_spd(), target);
  }

  // optional bool is_wheel_spd_rr_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_wheel_spd_rr_valid(), target);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->wheel_direction_rr(), target);
  }

  // optional double wheel_spd_rr = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wheel_spd_rr(), target);
  }

  // optional bool is_wheel_spd_rl_valid = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_wheel_spd_rl_valid(), target);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->wheel_direction_rl(), target);
  }

  // optional double wheel_spd_rl = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->wheel_spd_rl(), target);
  }

  // optional bool is_wheel_spd_fr_valid = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_wheel_spd_fr_valid(), target);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->wheel_direction_fr(), target);
  }

  // optional double wheel_spd_fr = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->wheel_spd_fr(), target);
  }

  // optional bool is_wheel_spd_fl_valid = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_wheel_spd_fl_valid(), target);
  }

  // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->wheel_direction_fl(), target);
  }

  // optional double wheel_spd_fl = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->wheel_spd_fl(), target);
  }

  // optional bool is_yaw_rate_valid = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_yaw_rate_valid(), target);
  }

  // optional double yaw_rate = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->yaw_rate(), target);
  }

  // optional double yaw_rate_offset = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->yaw_rate_offset(), target);
  }

  // optional bool is_ax_valid = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_ax_valid(), target);
  }

  // optional double ax = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->ax(), target);
  }

  // optional double ax_offset = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->ax_offset(), target);
  }

  // optional bool is_ay_valid = 22;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->is_ay_valid(), target);
  }

  // optional double ay = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->ay(), target);
  }

  // optional double ay_offset = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->ay_offset(), target);
  }

  // optional double lat_acc = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->lat_acc(), target);
  }

  // optional double long_acc = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->long_acc(), target);
  }

  // optional double vert_acc = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->vert_acc(), target);
  }

  // optional double roll_rate = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->roll_rate(), target);
  }

  // optional double acc_est = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->acc_est(), target);
  }

  // optional double timestamp_sec = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->timestamp_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.VehicleSpd)
  return target;
}

size_t VehicleSpd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.VehicleSpd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double vehicle_spd = 3 [default = 0];
    if (has_vehicle_spd()) {
      total_size += 1 + 8;
    }

    // optional bool is_vehicle_standstill = 1;
    if (has_is_vehicle_standstill()) {
      total_size += 1 + 1;
    }

    // optional bool is_vehicle_spd_valid = 2;
    if (has_is_vehicle_spd_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_rr_valid = 4;
    if (has_is_wheel_spd_rr_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_rl_valid = 7;
    if (has_is_wheel_spd_rl_valid()) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
    if (has_wheel_direction_rr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rr());
    }

    // optional double wheel_spd_rr = 6;
    if (has_wheel_spd_rr()) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_rl = 9;
    if (has_wheel_spd_rl()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
    if (has_wheel_direction_rl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rl());
    }

    // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
    if (has_wheel_direction_fr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fr());
    }

    // optional double wheel_spd_fr = 12;
    if (has_wheel_spd_fr()) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
    if (has_wheel_direction_fl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fl());
    }

    // optional bool is_wheel_spd_fr_valid = 10;
    if (has_is_wheel_spd_fr_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_fl_valid = 13;
    if (has_is_wheel_spd_fl_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_yaw_rate_valid = 16;
    if (has_is_yaw_rate_valid()) {
      total_size += 2 + 1;
    }

    // optional bool is_ax_valid = 19;
    if (has_is_ax_valid()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double wheel_spd_fl = 15;
    if (has_wheel_spd_fl()) {
      total_size += 1 + 8;
    }

    // optional double yaw_rate = 17;
    if (has_yaw_rate()) {
      total_size += 2 + 8;
    }

    // optional double yaw_rate_offset = 18;
    if (has_yaw_rate_offset()) {
      total_size += 2 + 8;
    }

    // optional double ax = 20;
    if (has_ax()) {
      total_size += 2 + 8;
    }

    // optional double ax_offset = 21;
    if (has_ax_offset()) {
      total_size += 2 + 8;
    }

    // optional double ay = 23;
    if (has_ay()) {
      total_size += 2 + 8;
    }

    // optional double ay_offset = 24;
    if (has_ay_offset()) {
      total_size += 2 + 8;
    }

    // optional double lat_acc = 25;
    if (has_lat_acc()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional double long_acc = 26;
    if (has_long_acc()) {
      total_size += 2 + 8;
    }

    // optional double vert_acc = 27;
    if (has_vert_acc()) {
      total_size += 2 + 8;
    }

    // optional double roll_rate = 28;
    if (has_roll_rate()) {
      total_size += 2 + 8;
    }

    // optional double acc_est = 29;
    if (has_acc_est()) {
      total_size += 2 + 8;
    }

    // optional double timestamp_sec = 30;
    if (has_timestamp_sec()) {
      total_size += 2 + 8;
    }

    // optional bool is_ay_valid = 22;
    if (has_is_ay_valid()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleSpd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.VehicleSpd)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleSpd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleSpd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.VehicleSpd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.VehicleSpd)
    MergeFrom(*source);
  }
}

void VehicleSpd::MergeFrom(const VehicleSpd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.VehicleSpd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_spd_ = from.vehicle_spd_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_vehicle_standstill_ = from.is_vehicle_standstill_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_vehicle_spd_valid_ = from.is_vehicle_spd_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_wheel_spd_rr_valid_ = from.is_wheel_spd_rr_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_wheel_spd_rl_valid_ = from.is_wheel_spd_rl_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      wheel_direction_rr_ = from.wheel_direction_rr_;
    }
    if (cached_has_bits & 0x00000040u) {
      wheel_spd_rr_ = from.wheel_spd_rr_;
    }
    if (cached_has_bits & 0x00000080u) {
      wheel_spd_rl_ = from.wheel_spd_rl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      wheel_direction_rl_ = from.wheel_direction_rl_;
    }
    if (cached_has_bits & 0x00000200u) {
      wheel_direction_fr_ = from.wheel_direction_fr_;
    }
    if (cached_has_bits & 0x00000400u) {
      wheel_spd_fr_ = from.wheel_spd_fr_;
    }
    if (cached_has_bits & 0x00000800u) {
      wheel_direction_fl_ = from.wheel_direction_fl_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_wheel_spd_fr_valid_ = from.is_wheel_spd_fr_valid_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_wheel_spd_fl_valid_ = from.is_wheel_spd_fl_valid_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_yaw_rate_valid_ = from.is_yaw_rate_valid_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_ax_valid_ = from.is_ax_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      wheel_spd_fl_ = from.wheel_spd_fl_;
    }
    if (cached_has_bits & 0x00020000u) {
      yaw_rate_ = from.yaw_rate_;
    }
    if (cached_has_bits & 0x00040000u) {
      yaw_rate_offset_ = from.yaw_rate_offset_;
    }
    if (cached_has_bits & 0x00080000u) {
      ax_ = from.ax_;
    }
    if (cached_has_bits & 0x00100000u) {
      ax_offset_ = from.ax_offset_;
    }
    if (cached_has_bits & 0x00200000u) {
      ay_ = from.ay_;
    }
    if (cached_has_bits & 0x00400000u) {
      ay_offset_ = from.ay_offset_;
    }
    if (cached_has_bits & 0x00800000u) {
      lat_acc_ = from.lat_acc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      long_acc_ = from.long_acc_;
    }
    if (cached_has_bits & 0x02000000u) {
      vert_acc_ = from.vert_acc_;
    }
    if (cached_has_bits & 0x04000000u) {
      roll_rate_ = from.roll_rate_;
    }
    if (cached_has_bits & 0x08000000u) {
      acc_est_ = from.acc_est_;
    }
    if (cached_has_bits & 0x10000000u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x20000000u) {
      is_ay_valid_ = from.is_ay_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleSpd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.VehicleSpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSpd::CopyFrom(const VehicleSpd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.VehicleSpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSpd::IsInitialized() const {
  return true;
}

void VehicleSpd::Swap(VehicleSpd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleSpd::InternalSwap(VehicleSpd* other) {
  std::swap(vehicle_spd_, other->vehicle_spd_);
  std::swap(is_vehicle_standstill_, other->is_vehicle_standstill_);
  std::swap(is_vehicle_spd_valid_, other->is_vehicle_spd_valid_);
  std::swap(is_wheel_spd_rr_valid_, other->is_wheel_spd_rr_valid_);
  std::swap(is_wheel_spd_rl_valid_, other->is_wheel_spd_rl_valid_);
  std::swap(wheel_direction_rr_, other->wheel_direction_rr_);
  std::swap(wheel_spd_rr_, other->wheel_spd_rr_);
  std::swap(wheel_spd_rl_, other->wheel_spd_rl_);
  std::swap(wheel_direction_rl_, other->wheel_direction_rl_);
  std::swap(wheel_direction_fr_, other->wheel_direction_fr_);
  std::swap(wheel_spd_fr_, other->wheel_spd_fr_);
  std::swap(wheel_direction_fl_, other->wheel_direction_fl_);
  std::swap(is_wheel_spd_fr_valid_, other->is_wheel_spd_fr_valid_);
  std::swap(is_wheel_spd_fl_valid_, other->is_wheel_spd_fl_valid_);
  std::swap(is_yaw_rate_valid_, other->is_yaw_rate_valid_);
  std::swap(is_ax_valid_, other->is_ax_valid_);
  std::swap(wheel_spd_fl_, other->wheel_spd_fl_);
  std::swap(yaw_rate_, other->yaw_rate_);
  std::swap(yaw_rate_offset_, other->yaw_rate_offset_);
  std::swap(ax_, other->ax_);
  std::swap(ax_offset_, other->ax_offset_);
  std::swap(ay_, other->ay_);
  std::swap(ay_offset_, other->ay_offset_);
  std::swap(lat_acc_, other->lat_acc_);
  std::swap(long_acc_, other->long_acc_);
  std::swap(vert_acc_, other->vert_acc_);
  std::swap(roll_rate_, other->roll_rate_);
  std::swap(acc_est_, other->acc_est_);
  std::swap(timestamp_sec_, other->timestamp_sec_);
  std::swap(is_ay_valid_, other->is_ay_valid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleSpd::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleSpd

// optional bool is_vehicle_standstill = 1;
bool VehicleSpd::has_is_vehicle_standstill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleSpd::set_has_is_vehicle_standstill() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleSpd::clear_has_is_vehicle_standstill() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleSpd::clear_is_vehicle_standstill() {
  is_vehicle_standstill_ = false;
  clear_has_is_vehicle_standstill();
}
bool VehicleSpd::is_vehicle_standstill() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_vehicle_standstill)
  return is_vehicle_standstill_;
}
void VehicleSpd::set_is_vehicle_standstill(bool value) {
  set_has_is_vehicle_standstill();
  is_vehicle_standstill_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_vehicle_standstill)
}

// optional bool is_vehicle_spd_valid = 2;
bool VehicleSpd::has_is_vehicle_spd_valid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleSpd::set_has_is_vehicle_spd_valid() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleSpd::clear_has_is_vehicle_spd_valid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleSpd::clear_is_vehicle_spd_valid() {
  is_vehicle_spd_valid_ = false;
  clear_has_is_vehicle_spd_valid();
}
bool VehicleSpd::is_vehicle_spd_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_vehicle_spd_valid)
  return is_vehicle_spd_valid_;
}
void VehicleSpd::set_is_vehicle_spd_valid(bool value) {
  set_has_is_vehicle_spd_valid();
  is_vehicle_spd_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_vehicle_spd_valid)
}

// optional double vehicle_spd = 3 [default = 0];
bool VehicleSpd::has_vehicle_spd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleSpd::set_has_vehicle_spd() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleSpd::clear_has_vehicle_spd() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleSpd::clear_vehicle_spd() {
  vehicle_spd_ = 0;
  clear_has_vehicle_spd();
}
double VehicleSpd::vehicle_spd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.vehicle_spd)
  return vehicle_spd_;
}
void VehicleSpd::set_vehicle_spd(double value) {
  set_has_vehicle_spd();
  vehicle_spd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.vehicle_spd)
}

// optional bool is_wheel_spd_rr_valid = 4;
bool VehicleSpd::has_is_wheel_spd_rr_valid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleSpd::set_has_is_wheel_spd_rr_valid() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleSpd::clear_has_is_wheel_spd_rr_valid() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleSpd::clear_is_wheel_spd_rr_valid() {
  is_wheel_spd_rr_valid_ = false;
  clear_has_is_wheel_spd_rr_valid();
}
bool VehicleSpd::is_wheel_spd_rr_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_wheel_spd_rr_valid)
  return is_wheel_spd_rr_valid_;
}
void VehicleSpd::set_is_wheel_spd_rr_valid(bool value) {
  set_has_is_wheel_spd_rr_valid();
  is_wheel_spd_rr_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_wheel_spd_rr_valid)
}

// optional .apollo.canbus.VehicleSpd.Type wheel_direction_rr = 5;
bool VehicleSpd::has_wheel_direction_rr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleSpd::set_has_wheel_direction_rr() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleSpd::clear_has_wheel_direction_rr() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleSpd::clear_wheel_direction_rr() {
  wheel_direction_rr_ = 0;
  clear_has_wheel_direction_rr();
}
::apollo::canbus::VehicleSpd_Type VehicleSpd::wheel_direction_rr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_direction_rr)
  return static_cast< ::apollo::canbus::VehicleSpd_Type >(wheel_direction_rr_);
}
void VehicleSpd::set_wheel_direction_rr(::apollo::canbus::VehicleSpd_Type value) {
  assert(::apollo::canbus::VehicleSpd_Type_IsValid(value));
  set_has_wheel_direction_rr();
  wheel_direction_rr_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_direction_rr)
}

// optional double wheel_spd_rr = 6;
bool VehicleSpd::has_wheel_spd_rr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VehicleSpd::set_has_wheel_spd_rr() {
  _has_bits_[0] |= 0x00000040u;
}
void VehicleSpd::clear_has_wheel_spd_rr() {
  _has_bits_[0] &= ~0x00000040u;
}
void VehicleSpd::clear_wheel_spd_rr() {
  wheel_spd_rr_ = 0;
  clear_has_wheel_spd_rr();
}
double VehicleSpd::wheel_spd_rr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_spd_rr)
  return wheel_spd_rr_;
}
void VehicleSpd::set_wheel_spd_rr(double value) {
  set_has_wheel_spd_rr();
  wheel_spd_rr_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_spd_rr)
}

// optional bool is_wheel_spd_rl_valid = 7;
bool VehicleSpd::has_is_wheel_spd_rl_valid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleSpd::set_has_is_wheel_spd_rl_valid() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleSpd::clear_has_is_wheel_spd_rl_valid() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleSpd::clear_is_wheel_spd_rl_valid() {
  is_wheel_spd_rl_valid_ = false;
  clear_has_is_wheel_spd_rl_valid();
}
bool VehicleSpd::is_wheel_spd_rl_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_wheel_spd_rl_valid)
  return is_wheel_spd_rl_valid_;
}
void VehicleSpd::set_is_wheel_spd_rl_valid(bool value) {
  set_has_is_wheel_spd_rl_valid();
  is_wheel_spd_rl_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_wheel_spd_rl_valid)
}

// optional .apollo.canbus.VehicleSpd.Type wheel_direction_rl = 8;
bool VehicleSpd::has_wheel_direction_rl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleSpd::set_has_wheel_direction_rl() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleSpd::clear_has_wheel_direction_rl() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleSpd::clear_wheel_direction_rl() {
  wheel_direction_rl_ = 0;
  clear_has_wheel_direction_rl();
}
::apollo::canbus::VehicleSpd_Type VehicleSpd::wheel_direction_rl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_direction_rl)
  return static_cast< ::apollo::canbus::VehicleSpd_Type >(wheel_direction_rl_);
}
void VehicleSpd::set_wheel_direction_rl(::apollo::canbus::VehicleSpd_Type value) {
  assert(::apollo::canbus::VehicleSpd_Type_IsValid(value));
  set_has_wheel_direction_rl();
  wheel_direction_rl_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_direction_rl)
}

// optional double wheel_spd_rl = 9;
bool VehicleSpd::has_wheel_spd_rl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VehicleSpd::set_has_wheel_spd_rl() {
  _has_bits_[0] |= 0x00000080u;
}
void VehicleSpd::clear_has_wheel_spd_rl() {
  _has_bits_[0] &= ~0x00000080u;
}
void VehicleSpd::clear_wheel_spd_rl() {
  wheel_spd_rl_ = 0;
  clear_has_wheel_spd_rl();
}
double VehicleSpd::wheel_spd_rl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_spd_rl)
  return wheel_spd_rl_;
}
void VehicleSpd::set_wheel_spd_rl(double value) {
  set_has_wheel_spd_rl();
  wheel_spd_rl_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_spd_rl)
}

// optional bool is_wheel_spd_fr_valid = 10;
bool VehicleSpd::has_is_wheel_spd_fr_valid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VehicleSpd::set_has_is_wheel_spd_fr_valid() {
  _has_bits_[0] |= 0x00001000u;
}
void VehicleSpd::clear_has_is_wheel_spd_fr_valid() {
  _has_bits_[0] &= ~0x00001000u;
}
void VehicleSpd::clear_is_wheel_spd_fr_valid() {
  is_wheel_spd_fr_valid_ = false;
  clear_has_is_wheel_spd_fr_valid();
}
bool VehicleSpd::is_wheel_spd_fr_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_wheel_spd_fr_valid)
  return is_wheel_spd_fr_valid_;
}
void VehicleSpd::set_is_wheel_spd_fr_valid(bool value) {
  set_has_is_wheel_spd_fr_valid();
  is_wheel_spd_fr_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_wheel_spd_fr_valid)
}

// optional .apollo.canbus.VehicleSpd.Type wheel_direction_fr = 11;
bool VehicleSpd::has_wheel_direction_fr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VehicleSpd::set_has_wheel_direction_fr() {
  _has_bits_[0] |= 0x00000200u;
}
void VehicleSpd::clear_has_wheel_direction_fr() {
  _has_bits_[0] &= ~0x00000200u;
}
void VehicleSpd::clear_wheel_direction_fr() {
  wheel_direction_fr_ = 0;
  clear_has_wheel_direction_fr();
}
::apollo::canbus::VehicleSpd_Type VehicleSpd::wheel_direction_fr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_direction_fr)
  return static_cast< ::apollo::canbus::VehicleSpd_Type >(wheel_direction_fr_);
}
void VehicleSpd::set_wheel_direction_fr(::apollo::canbus::VehicleSpd_Type value) {
  assert(::apollo::canbus::VehicleSpd_Type_IsValid(value));
  set_has_wheel_direction_fr();
  wheel_direction_fr_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_direction_fr)
}

// optional double wheel_spd_fr = 12;
bool VehicleSpd::has_wheel_spd_fr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VehicleSpd::set_has_wheel_spd_fr() {
  _has_bits_[0] |= 0x00000400u;
}
void VehicleSpd::clear_has_wheel_spd_fr() {
  _has_bits_[0] &= ~0x00000400u;
}
void VehicleSpd::clear_wheel_spd_fr() {
  wheel_spd_fr_ = 0;
  clear_has_wheel_spd_fr();
}
double VehicleSpd::wheel_spd_fr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_spd_fr)
  return wheel_spd_fr_;
}
void VehicleSpd::set_wheel_spd_fr(double value) {
  set_has_wheel_spd_fr();
  wheel_spd_fr_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_spd_fr)
}

// optional bool is_wheel_spd_fl_valid = 13;
bool VehicleSpd::has_is_wheel_spd_fl_valid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VehicleSpd::set_has_is_wheel_spd_fl_valid() {
  _has_bits_[0] |= 0x00002000u;
}
void VehicleSpd::clear_has_is_wheel_spd_fl_valid() {
  _has_bits_[0] &= ~0x00002000u;
}
void VehicleSpd::clear_is_wheel_spd_fl_valid() {
  is_wheel_spd_fl_valid_ = false;
  clear_has_is_wheel_spd_fl_valid();
}
bool VehicleSpd::is_wheel_spd_fl_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_wheel_spd_fl_valid)
  return is_wheel_spd_fl_valid_;
}
void VehicleSpd::set_is_wheel_spd_fl_valid(bool value) {
  set_has_is_wheel_spd_fl_valid();
  is_wheel_spd_fl_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_wheel_spd_fl_valid)
}

// optional .apollo.canbus.VehicleSpd.Type wheel_direction_fl = 14;
bool VehicleSpd::has_wheel_direction_fl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VehicleSpd::set_has_wheel_direction_fl() {
  _has_bits_[0] |= 0x00000800u;
}
void VehicleSpd::clear_has_wheel_direction_fl() {
  _has_bits_[0] &= ~0x00000800u;
}
void VehicleSpd::clear_wheel_direction_fl() {
  wheel_direction_fl_ = 0;
  clear_has_wheel_direction_fl();
}
::apollo::canbus::VehicleSpd_Type VehicleSpd::wheel_direction_fl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_direction_fl)
  return static_cast< ::apollo::canbus::VehicleSpd_Type >(wheel_direction_fl_);
}
void VehicleSpd::set_wheel_direction_fl(::apollo::canbus::VehicleSpd_Type value) {
  assert(::apollo::canbus::VehicleSpd_Type_IsValid(value));
  set_has_wheel_direction_fl();
  wheel_direction_fl_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_direction_fl)
}

// optional double wheel_spd_fl = 15;
bool VehicleSpd::has_wheel_spd_fl() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VehicleSpd::set_has_wheel_spd_fl() {
  _has_bits_[0] |= 0x00010000u;
}
void VehicleSpd::clear_has_wheel_spd_fl() {
  _has_bits_[0] &= ~0x00010000u;
}
void VehicleSpd::clear_wheel_spd_fl() {
  wheel_spd_fl_ = 0;
  clear_has_wheel_spd_fl();
}
double VehicleSpd::wheel_spd_fl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.wheel_spd_fl)
  return wheel_spd_fl_;
}
void VehicleSpd::set_wheel_spd_fl(double value) {
  set_has_wheel_spd_fl();
  wheel_spd_fl_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.wheel_spd_fl)
}

// optional bool is_yaw_rate_valid = 16;
bool VehicleSpd::has_is_yaw_rate_valid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VehicleSpd::set_has_is_yaw_rate_valid() {
  _has_bits_[0] |= 0x00004000u;
}
void VehicleSpd::clear_has_is_yaw_rate_valid() {
  _has_bits_[0] &= ~0x00004000u;
}
void VehicleSpd::clear_is_yaw_rate_valid() {
  is_yaw_rate_valid_ = false;
  clear_has_is_yaw_rate_valid();
}
bool VehicleSpd::is_yaw_rate_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_yaw_rate_valid)
  return is_yaw_rate_valid_;
}
void VehicleSpd::set_is_yaw_rate_valid(bool value) {
  set_has_is_yaw_rate_valid();
  is_yaw_rate_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_yaw_rate_valid)
}

// optional double yaw_rate = 17;
bool VehicleSpd::has_yaw_rate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VehicleSpd::set_has_yaw_rate() {
  _has_bits_[0] |= 0x00020000u;
}
void VehicleSpd::clear_has_yaw_rate() {
  _has_bits_[0] &= ~0x00020000u;
}
void VehicleSpd::clear_yaw_rate() {
  yaw_rate_ = 0;
  clear_has_yaw_rate();
}
double VehicleSpd::yaw_rate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.yaw_rate)
  return yaw_rate_;
}
void VehicleSpd::set_yaw_rate(double value) {
  set_has_yaw_rate();
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.yaw_rate)
}

// optional double yaw_rate_offset = 18;
bool VehicleSpd::has_yaw_rate_offset() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void VehicleSpd::set_has_yaw_rate_offset() {
  _has_bits_[0] |= 0x00040000u;
}
void VehicleSpd::clear_has_yaw_rate_offset() {
  _has_bits_[0] &= ~0x00040000u;
}
void VehicleSpd::clear_yaw_rate_offset() {
  yaw_rate_offset_ = 0;
  clear_has_yaw_rate_offset();
}
double VehicleSpd::yaw_rate_offset() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.yaw_rate_offset)
  return yaw_rate_offset_;
}
void VehicleSpd::set_yaw_rate_offset(double value) {
  set_has_yaw_rate_offset();
  yaw_rate_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.yaw_rate_offset)
}

// optional bool is_ax_valid = 19;
bool VehicleSpd::has_is_ax_valid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VehicleSpd::set_has_is_ax_valid() {
  _has_bits_[0] |= 0x00008000u;
}
void VehicleSpd::clear_has_is_ax_valid() {
  _has_bits_[0] &= ~0x00008000u;
}
void VehicleSpd::clear_is_ax_valid() {
  is_ax_valid_ = false;
  clear_has_is_ax_valid();
}
bool VehicleSpd::is_ax_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_ax_valid)
  return is_ax_valid_;
}
void VehicleSpd::set_is_ax_valid(bool value) {
  set_has_is_ax_valid();
  is_ax_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_ax_valid)
}

// optional double ax = 20;
bool VehicleSpd::has_ax() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void VehicleSpd::set_has_ax() {
  _has_bits_[0] |= 0x00080000u;
}
void VehicleSpd::clear_has_ax() {
  _has_bits_[0] &= ~0x00080000u;
}
void VehicleSpd::clear_ax() {
  ax_ = 0;
  clear_has_ax();
}
double VehicleSpd::ax() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.ax)
  return ax_;
}
void VehicleSpd::set_ax(double value) {
  set_has_ax();
  ax_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.ax)
}

// optional double ax_offset = 21;
bool VehicleSpd::has_ax_offset() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void VehicleSpd::set_has_ax_offset() {
  _has_bits_[0] |= 0x00100000u;
}
void VehicleSpd::clear_has_ax_offset() {
  _has_bits_[0] &= ~0x00100000u;
}
void VehicleSpd::clear_ax_offset() {
  ax_offset_ = 0;
  clear_has_ax_offset();
}
double VehicleSpd::ax_offset() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.ax_offset)
  return ax_offset_;
}
void VehicleSpd::set_ax_offset(double value) {
  set_has_ax_offset();
  ax_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.ax_offset)
}

// optional bool is_ay_valid = 22;
bool VehicleSpd::has_is_ay_valid() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void VehicleSpd::set_has_is_ay_valid() {
  _has_bits_[0] |= 0x20000000u;
}
void VehicleSpd::clear_has_is_ay_valid() {
  _has_bits_[0] &= ~0x20000000u;
}
void VehicleSpd::clear_is_ay_valid() {
  is_ay_valid_ = false;
  clear_has_is_ay_valid();
}
bool VehicleSpd::is_ay_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.is_ay_valid)
  return is_ay_valid_;
}
void VehicleSpd::set_is_ay_valid(bool value) {
  set_has_is_ay_valid();
  is_ay_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.is_ay_valid)
}

// optional double ay = 23;
bool VehicleSpd::has_ay() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void VehicleSpd::set_has_ay() {
  _has_bits_[0] |= 0x00200000u;
}
void VehicleSpd::clear_has_ay() {
  _has_bits_[0] &= ~0x00200000u;
}
void VehicleSpd::clear_ay() {
  ay_ = 0;
  clear_has_ay();
}
double VehicleSpd::ay() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.ay)
  return ay_;
}
void VehicleSpd::set_ay(double value) {
  set_has_ay();
  ay_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.ay)
}

// optional double ay_offset = 24;
bool VehicleSpd::has_ay_offset() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void VehicleSpd::set_has_ay_offset() {
  _has_bits_[0] |= 0x00400000u;
}
void VehicleSpd::clear_has_ay_offset() {
  _has_bits_[0] &= ~0x00400000u;
}
void VehicleSpd::clear_ay_offset() {
  ay_offset_ = 0;
  clear_has_ay_offset();
}
double VehicleSpd::ay_offset() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.ay_offset)
  return ay_offset_;
}
void VehicleSpd::set_ay_offset(double value) {
  set_has_ay_offset();
  ay_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.ay_offset)
}

// optional double lat_acc = 25;
bool VehicleSpd::has_lat_acc() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void VehicleSpd::set_has_lat_acc() {
  _has_bits_[0] |= 0x00800000u;
}
void VehicleSpd::clear_has_lat_acc() {
  _has_bits_[0] &= ~0x00800000u;
}
void VehicleSpd::clear_lat_acc() {
  lat_acc_ = 0;
  clear_has_lat_acc();
}
double VehicleSpd::lat_acc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.lat_acc)
  return lat_acc_;
}
void VehicleSpd::set_lat_acc(double value) {
  set_has_lat_acc();
  lat_acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.lat_acc)
}

// optional double long_acc = 26;
bool VehicleSpd::has_long_acc() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void VehicleSpd::set_has_long_acc() {
  _has_bits_[0] |= 0x01000000u;
}
void VehicleSpd::clear_has_long_acc() {
  _has_bits_[0] &= ~0x01000000u;
}
void VehicleSpd::clear_long_acc() {
  long_acc_ = 0;
  clear_has_long_acc();
}
double VehicleSpd::long_acc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.long_acc)
  return long_acc_;
}
void VehicleSpd::set_long_acc(double value) {
  set_has_long_acc();
  long_acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.long_acc)
}

// optional double vert_acc = 27;
bool VehicleSpd::has_vert_acc() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void VehicleSpd::set_has_vert_acc() {
  _has_bits_[0] |= 0x02000000u;
}
void VehicleSpd::clear_has_vert_acc() {
  _has_bits_[0] &= ~0x02000000u;
}
void VehicleSpd::clear_vert_acc() {
  vert_acc_ = 0;
  clear_has_vert_acc();
}
double VehicleSpd::vert_acc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.vert_acc)
  return vert_acc_;
}
void VehicleSpd::set_vert_acc(double value) {
  set_has_vert_acc();
  vert_acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.vert_acc)
}

// optional double roll_rate = 28;
bool VehicleSpd::has_roll_rate() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void VehicleSpd::set_has_roll_rate() {
  _has_bits_[0] |= 0x04000000u;
}
void VehicleSpd::clear_has_roll_rate() {
  _has_bits_[0] &= ~0x04000000u;
}
void VehicleSpd::clear_roll_rate() {
  roll_rate_ = 0;
  clear_has_roll_rate();
}
double VehicleSpd::roll_rate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.roll_rate)
  return roll_rate_;
}
void VehicleSpd::set_roll_rate(double value) {
  set_has_roll_rate();
  roll_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.roll_rate)
}

// optional double acc_est = 29;
bool VehicleSpd::has_acc_est() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void VehicleSpd::set_has_acc_est() {
  _has_bits_[0] |= 0x08000000u;
}
void VehicleSpd::clear_has_acc_est() {
  _has_bits_[0] &= ~0x08000000u;
}
void VehicleSpd::clear_acc_est() {
  acc_est_ = 0;
  clear_has_acc_est();
}
double VehicleSpd::acc_est() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.acc_est)
  return acc_est_;
}
void VehicleSpd::set_acc_est(double value) {
  set_has_acc_est();
  acc_est_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.acc_est)
}

// optional double timestamp_sec = 30;
bool VehicleSpd::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void VehicleSpd::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x10000000u;
}
void VehicleSpd::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x10000000u;
}
void VehicleSpd::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
double VehicleSpd::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleSpd.timestamp_sec)
  return timestamp_sec_;
}
void VehicleSpd::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleSpd.timestamp_sec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Deceleration::kIsDecelerationAvailableFieldNumber;
const int Deceleration::kIsDecelerationActiveFieldNumber;
const int Deceleration::kDecelerationFieldNumber;
const int Deceleration::kIsEvbFailFieldNumber;
const int Deceleration::kEvbPressureFieldNumber;
const int Deceleration::kBrakePressureFieldNumber;
const int Deceleration::kBrakePressureSpdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Deceleration::Deceleration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Deceleration)
}
Deceleration::Deceleration(const Deceleration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&deceleration_, &from.deceleration_,
    reinterpret_cast<char*>(&is_deceleration_active_) -
    reinterpret_cast<char*>(&deceleration_) + sizeof(is_deceleration_active_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Deceleration)
}

void Deceleration::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&deceleration_, 0, reinterpret_cast<char*>(&is_deceleration_active_) -
    reinterpret_cast<char*>(&deceleration_) + sizeof(is_deceleration_active_));
}

Deceleration::~Deceleration() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Deceleration)
  SharedDtor();
}

void Deceleration::SharedDtor() {
}

void Deceleration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Deceleration::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Deceleration& Deceleration::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

Deceleration* Deceleration::New(::google::protobuf::Arena* arena) const {
  Deceleration* n = new Deceleration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Deceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Deceleration)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&deceleration_, 0, reinterpret_cast<char*>(&is_deceleration_active_) -
      reinterpret_cast<char*>(&deceleration_) + sizeof(is_deceleration_active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Deceleration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Deceleration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_deceleration_available = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_deceleration_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deceleration_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_deceleration_active = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_deceleration_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deceleration_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double deceleration = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_evb_fail = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_is_evb_fail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_evb_fail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double evb_pressure = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_evb_pressure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &evb_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_pressure = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_brake_pressure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_pressure_spd = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_brake_pressure_spd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pressure_spd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Deceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Deceleration)
  return false;
#undef DO_
}

void Deceleration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Deceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_deceleration_available = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_deceleration_available(), output);
  }

  // optional bool is_deceleration_active = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_deceleration_active(), output);
  }

  // optional double deceleration = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->deceleration(), output);
  }

  // optional double is_evb_fail = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->is_evb_fail(), output);
  }

  // optional double evb_pressure = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->evb_pressure(), output);
  }

  // optional double brake_pressure = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->brake_pressure(), output);
  }

  // optional double brake_pressure_spd = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->brake_pressure_spd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Deceleration)
}

::google::protobuf::uint8* Deceleration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Deceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_deceleration_available = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_deceleration_available(), target);
  }

  // optional bool is_deceleration_active = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_deceleration_active(), target);
  }

  // optional double deceleration = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->deceleration(), target);
  }

  // optional double is_evb_fail = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->is_evb_fail(), target);
  }

  // optional double evb_pressure = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->evb_pressure(), target);
  }

  // optional double brake_pressure = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->brake_pressure(), target);
  }

  // optional double brake_pressure_spd = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->brake_pressure_spd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Deceleration)
  return target;
}

size_t Deceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Deceleration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double deceleration = 3 [default = 0];
    if (has_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double is_evb_fail = 4;
    if (has_is_evb_fail()) {
      total_size += 1 + 8;
    }

    // optional double evb_pressure = 5 [default = 0];
    if (has_evb_pressure()) {
      total_size += 1 + 8;
    }

    // optional double brake_pressure = 6 [default = 0];
    if (has_brake_pressure()) {
      total_size += 1 + 8;
    }

    // optional double brake_pressure_spd = 7 [default = 0];
    if (has_brake_pressure_spd()) {
      total_size += 1 + 8;
    }

    // optional bool is_deceleration_available = 1;
    if (has_is_deceleration_available()) {
      total_size += 1 + 1;
    }

    // optional bool is_deceleration_active = 2;
    if (has_is_deceleration_active()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Deceleration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Deceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const Deceleration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Deceleration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Deceleration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Deceleration)
    MergeFrom(*source);
  }
}

void Deceleration::MergeFrom(const Deceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Deceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      deceleration_ = from.deceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_evb_fail_ = from.is_evb_fail_;
    }
    if (cached_has_bits & 0x00000004u) {
      evb_pressure_ = from.evb_pressure_;
    }
    if (cached_has_bits & 0x00000008u) {
      brake_pressure_ = from.brake_pressure_;
    }
    if (cached_has_bits & 0x00000010u) {
      brake_pressure_spd_ = from.brake_pressure_spd_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_deceleration_available_ = from.is_deceleration_available_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_deceleration_active_ = from.is_deceleration_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Deceleration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Deceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deceleration::CopyFrom(const Deceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Deceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deceleration::IsInitialized() const {
  return true;
}

void Deceleration::Swap(Deceleration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Deceleration::InternalSwap(Deceleration* other) {
  std::swap(deceleration_, other->deceleration_);
  std::swap(is_evb_fail_, other->is_evb_fail_);
  std::swap(evb_pressure_, other->evb_pressure_);
  std::swap(brake_pressure_, other->brake_pressure_);
  std::swap(brake_pressure_spd_, other->brake_pressure_spd_);
  std::swap(is_deceleration_available_, other->is_deceleration_available_);
  std::swap(is_deceleration_active_, other->is_deceleration_active_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Deceleration::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Deceleration

// optional bool is_deceleration_available = 1;
bool Deceleration::has_is_deceleration_available() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Deceleration::set_has_is_deceleration_available() {
  _has_bits_[0] |= 0x00000020u;
}
void Deceleration::clear_has_is_deceleration_available() {
  _has_bits_[0] &= ~0x00000020u;
}
void Deceleration::clear_is_deceleration_available() {
  is_deceleration_available_ = false;
  clear_has_is_deceleration_available();
}
bool Deceleration::is_deceleration_available() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.is_deceleration_available)
  return is_deceleration_available_;
}
void Deceleration::set_is_deceleration_available(bool value) {
  set_has_is_deceleration_available();
  is_deceleration_available_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.is_deceleration_available)
}

// optional bool is_deceleration_active = 2;
bool Deceleration::has_is_deceleration_active() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Deceleration::set_has_is_deceleration_active() {
  _has_bits_[0] |= 0x00000040u;
}
void Deceleration::clear_has_is_deceleration_active() {
  _has_bits_[0] &= ~0x00000040u;
}
void Deceleration::clear_is_deceleration_active() {
  is_deceleration_active_ = false;
  clear_has_is_deceleration_active();
}
bool Deceleration::is_deceleration_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.is_deceleration_active)
  return is_deceleration_active_;
}
void Deceleration::set_is_deceleration_active(bool value) {
  set_has_is_deceleration_active();
  is_deceleration_active_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.is_deceleration_active)
}

// optional double deceleration = 3 [default = 0];
bool Deceleration::has_deceleration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Deceleration::set_has_deceleration() {
  _has_bits_[0] |= 0x00000001u;
}
void Deceleration::clear_has_deceleration() {
  _has_bits_[0] &= ~0x00000001u;
}
void Deceleration::clear_deceleration() {
  deceleration_ = 0;
  clear_has_deceleration();
}
double Deceleration::deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.deceleration)
  return deceleration_;
}
void Deceleration::set_deceleration(double value) {
  set_has_deceleration();
  deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.deceleration)
}

// optional double is_evb_fail = 4;
bool Deceleration::has_is_evb_fail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Deceleration::set_has_is_evb_fail() {
  _has_bits_[0] |= 0x00000002u;
}
void Deceleration::clear_has_is_evb_fail() {
  _has_bits_[0] &= ~0x00000002u;
}
void Deceleration::clear_is_evb_fail() {
  is_evb_fail_ = 0;
  clear_has_is_evb_fail();
}
double Deceleration::is_evb_fail() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.is_evb_fail)
  return is_evb_fail_;
}
void Deceleration::set_is_evb_fail(double value) {
  set_has_is_evb_fail();
  is_evb_fail_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.is_evb_fail)
}

// optional double evb_pressure = 5 [default = 0];
bool Deceleration::has_evb_pressure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Deceleration::set_has_evb_pressure() {
  _has_bits_[0] |= 0x00000004u;
}
void Deceleration::clear_has_evb_pressure() {
  _has_bits_[0] &= ~0x00000004u;
}
void Deceleration::clear_evb_pressure() {
  evb_pressure_ = 0;
  clear_has_evb_pressure();
}
double Deceleration::evb_pressure() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.evb_pressure)
  return evb_pressure_;
}
void Deceleration::set_evb_pressure(double value) {
  set_has_evb_pressure();
  evb_pressure_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.evb_pressure)
}

// optional double brake_pressure = 6 [default = 0];
bool Deceleration::has_brake_pressure() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Deceleration::set_has_brake_pressure() {
  _has_bits_[0] |= 0x00000008u;
}
void Deceleration::clear_has_brake_pressure() {
  _has_bits_[0] &= ~0x00000008u;
}
void Deceleration::clear_brake_pressure() {
  brake_pressure_ = 0;
  clear_has_brake_pressure();
}
double Deceleration::brake_pressure() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.brake_pressure)
  return brake_pressure_;
}
void Deceleration::set_brake_pressure(double value) {
  set_has_brake_pressure();
  brake_pressure_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.brake_pressure)
}

// optional double brake_pressure_spd = 7 [default = 0];
bool Deceleration::has_brake_pressure_spd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Deceleration::set_has_brake_pressure_spd() {
  _has_bits_[0] |= 0x00000010u;
}
void Deceleration::clear_has_brake_pressure_spd() {
  _has_bits_[0] &= ~0x00000010u;
}
void Deceleration::clear_brake_pressure_spd() {
  brake_pressure_spd_ = 0;
  clear_has_brake_pressure_spd();
}
double Deceleration::brake_pressure_spd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Deceleration.brake_pressure_spd)
  return brake_pressure_spd_;
}
void Deceleration::set_brake_pressure_spd(double value) {
  set_has_brake_pressure_spd();
  brake_pressure_spd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Deceleration.brake_pressure_spd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brake::kIsBrakePedalPressedFieldNumber;
const int Brake::kIsBrakeForceExistFieldNumber;
const int Brake::kIsBrakeOverHeatFieldNumber;
const int Brake::kIsHandBrakeOnFieldNumber;
const int Brake::kBrakePedalPositionFieldNumber;
const int Brake::kIsBrakeValidFieldNumber;
const int Brake::kBrakeInputFieldNumber;
const int Brake::kBrakeCmdFieldNumber;
const int Brake::kBrakeOutputFieldNumber;
const int Brake::kBooInputFieldNumber;
const int Brake::kBooCmdFieldNumber;
const int Brake::kBooOutputFieldNumber;
const int Brake::kWatchdogApplyingBrakesFieldNumber;
const int Brake::kWatchdogSourceFieldNumber;
const int Brake::kBrakeEnabledFieldNumber;
const int Brake::kDriverOverrideFieldNumber;
const int Brake::kDriverActivityFieldNumber;
const int Brake::kWatchdogFaultFieldNumber;
const int Brake::kChannel1FaultFieldNumber;
const int Brake::kChannel2FaultFieldNumber;
const int Brake::kBooFaultFieldNumber;
const int Brake::kConnectorFaultFieldNumber;
const int Brake::kBrakeTorqueReqFieldNumber;
const int Brake::kHsaStatusFieldNumber;
const int Brake::kBrakeTorqueActFieldNumber;
const int Brake::kHsaModeFieldNumber;
const int Brake::kWheelTorqueActFieldNumber;
const int Brake::kMajorVersionFieldNumber;
const int Brake::kMinorVersionFieldNumber;
const int Brake::kBuildNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brake::Brake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake)
}
Brake::Brake(const Brake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_pedal_position_, &from.brake_pedal_position_,
    reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&brake_pedal_position_) + sizeof(build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake)
}

void Brake::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&brake_pedal_position_, 0, reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&brake_pedal_position_) + sizeof(build_number_));
}

Brake::~Brake() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake)
  SharedDtor();
}

void Brake::SharedDtor() {
}

void Brake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Brake::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Brake& Brake::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

Brake* Brake::New(::google::protobuf::Arena* arena) const {
  Brake* n = new Brake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Brake::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&brake_pedal_position_, 0, reinterpret_cast<char*>(&boo_cmd_) -
      reinterpret_cast<char*>(&brake_pedal_position_) + sizeof(boo_cmd_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&boo_output_, 0, reinterpret_cast<char*>(&driver_override_) -
      reinterpret_cast<char*>(&boo_output_) + sizeof(driver_override_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&driver_activity_, 0, reinterpret_cast<char*>(&brake_torque_act_) -
      reinterpret_cast<char*>(&driver_activity_) + sizeof(brake_torque_act_));
  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    ::memset(&hsa_status_, 0, reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&hsa_status_) + sizeof(build_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Brake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Brake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_brake_pedal_pressed = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_brake_pedal_pressed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_pedal_pressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_brake_force_exist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_brake_force_exist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_force_exist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_brake_over_heat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_brake_over_heat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_over_heat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_hand_brake_on = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_hand_brake_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hand_brake_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_pedal_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_brake_pedal_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pedal_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_brake_valid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_is_brake_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_input = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_brake_input();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_cmd = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_brake_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_output = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_brake_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool boo_input = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_boo_input();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool boo_cmd = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_boo_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool boo_output = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_boo_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool watchdog_applying_brakes = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_watchdog_applying_brakes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_applying_brakes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 watchdog_source = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_watchdog_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &watchdog_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool brake_enabled = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_brake_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brake_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_override = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_driver_override();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_activity = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_driver_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool watchdog_fault = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_watchdog_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_1_fault = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_channel_1_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_1_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_2_fault = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_channel_2_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_2_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool boo_fault = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_boo_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool connector_fault = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_connector_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connector_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_torque_req = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u)) {
          set_has_brake_torque_req();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_torque_req_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Brake_HSAStatusType_IsValid(value)) {
            set_hsa_status(static_cast< ::apollo::canbus::Brake_HSAStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_torque_act = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u)) {
          set_has_brake_torque_act();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_torque_act_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Brake_HSAModeType_IsValid(value)) {
            set_hsa_mode(static_cast< ::apollo::canbus::Brake_HSAModeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(26, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_torque_act = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u)) {
          set_has_wheel_torque_act();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_torque_act_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 major_version = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_major_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minor_version = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_minor_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 build_number = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_build_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Brake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Brake)
  return false;
#undef DO_
}

void Brake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Brake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_brake_pedal_pressed = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_brake_pedal_pressed(), output);
  }

  // optional bool is_brake_force_exist = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_brake_force_exist(), output);
  }

  // optional bool is_brake_over_heat = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_brake_over_heat(), output);
  }

  // optional bool is_hand_brake_on = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_hand_brake_on(), output);
  }

  // optional double brake_pedal_position = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->brake_pedal_position(), output);
  }

  // optional bool is_brake_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_brake_valid(), output);
  }

  // optional double brake_input = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->brake_input(), output);
  }

  // optional double brake_cmd = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->brake_cmd(), output);
  }

  // optional double brake_output = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->brake_output(), output);
  }

  // optional bool boo_input = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->boo_input(), output);
  }

  // optional bool boo_cmd = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->boo_cmd(), output);
  }

  // optional bool boo_output = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->boo_output(), output);
  }

  // optional bool watchdog_applying_brakes = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->watchdog_applying_brakes(), output);
  }

  // optional int32 watchdog_source = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->watchdog_source(), output);
  }

  // optional bool brake_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->brake_enabled(), output);
  }

  // optional bool driver_override = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->driver_override(), output);
  }

  // optional bool driver_activity = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->driver_activity(), output);
  }

  // optional bool watchdog_fault = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->watchdog_fault(), output);
  }

  // optional bool channel_1_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->channel_1_fault(), output);
  }

  // optional bool channel_2_fault = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->channel_2_fault(), output);
  }

  // optional bool boo_fault = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->boo_fault(), output);
  }

  // optional bool connector_fault = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->connector_fault(), output);
  }

  // optional double brake_torque_req = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->brake_torque_req(), output);
  }

  // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->hsa_status(), output);
  }

  // optional double brake_torque_act = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->brake_torque_act(), output);
  }

  // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->hsa_mode(), output);
  }

  // optional double wheel_torque_act = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->wheel_torque_act(), output);
  }

  // optional int32 major_version = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->major_version(), output);
  }

  // optional int32 minor_version = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->minor_version(), output);
  }

  // optional int32 build_number = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->build_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Brake)
}

::google::protobuf::uint8* Brake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_brake_pedal_pressed = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_brake_pedal_pressed(), target);
  }

  // optional bool is_brake_force_exist = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_brake_force_exist(), target);
  }

  // optional bool is_brake_over_heat = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_brake_over_heat(), target);
  }

  // optional bool is_hand_brake_on = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_hand_brake_on(), target);
  }

  // optional double brake_pedal_position = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->brake_pedal_position(), target);
  }

  // optional bool is_brake_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_brake_valid(), target);
  }

  // optional double brake_input = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->brake_input(), target);
  }

  // optional double brake_cmd = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->brake_cmd(), target);
  }

  // optional double brake_output = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->brake_output(), target);
  }

  // optional bool boo_input = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->boo_input(), target);
  }

  // optional bool boo_cmd = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->boo_cmd(), target);
  }

  // optional bool boo_output = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->boo_output(), target);
  }

  // optional bool watchdog_applying_brakes = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->watchdog_applying_brakes(), target);
  }

  // optional int32 watchdog_source = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->watchdog_source(), target);
  }

  // optional bool brake_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->brake_enabled(), target);
  }

  // optional bool driver_override = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->driver_override(), target);
  }

  // optional bool driver_activity = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->driver_activity(), target);
  }

  // optional bool watchdog_fault = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->channel_2_fault(), target);
  }

  // optional bool boo_fault = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->boo_fault(), target);
  }

  // optional bool connector_fault = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->connector_fault(), target);
  }

  // optional double brake_torque_req = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->brake_torque_req(), target);
  }

  // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->hsa_status(), target);
  }

  // optional double brake_torque_act = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->brake_torque_act(), target);
  }

  // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->hsa_mode(), target);
  }

  // optional double wheel_torque_act = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->wheel_torque_act(), target);
  }

  // optional int32 major_version = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->major_version(), target);
  }

  // optional int32 minor_version = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->minor_version(), target);
  }

  // optional int32 build_number = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->build_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake)
  return target;
}

size_t Brake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double brake_pedal_position = 5;
    if (has_brake_pedal_position()) {
      total_size += 1 + 8;
    }

    // optional bool is_brake_pedal_pressed = 1 [default = false];
    if (has_is_brake_pedal_pressed()) {
      total_size += 1 + 1;
    }

    // optional bool is_brake_force_exist = 2;
    if (has_is_brake_force_exist()) {
      total_size += 1 + 1;
    }

    // optional bool is_brake_over_heat = 3;
    if (has_is_brake_over_heat()) {
      total_size += 1 + 1;
    }

    // optional bool is_hand_brake_on = 4;
    if (has_is_hand_brake_on()) {
      total_size += 1 + 1;
    }

    // optional bool is_brake_valid = 6;
    if (has_is_brake_valid()) {
      total_size += 1 + 1;
    }

    // optional bool boo_input = 10;
    if (has_boo_input()) {
      total_size += 1 + 1;
    }

    // optional bool boo_cmd = 11;
    if (has_boo_cmd()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool boo_output = 12;
    if (has_boo_output()) {
      total_size += 1 + 1;
    }

    // optional double brake_input = 7;
    if (has_brake_input()) {
      total_size += 1 + 8;
    }

    // optional double brake_cmd = 8;
    if (has_brake_cmd()) {
      total_size += 1 + 8;
    }

    // optional double brake_output = 9;
    if (has_brake_output()) {
      total_size += 1 + 8;
    }

    // optional int32 watchdog_source = 14;
    if (has_watchdog_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->watchdog_source());
    }

    // optional bool watchdog_applying_brakes = 13;
    if (has_watchdog_applying_brakes()) {
      total_size += 1 + 1;
    }

    // optional bool brake_enabled = 15;
    if (has_brake_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool driver_override = 16;
    if (has_driver_override()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool driver_activity = 17;
    if (has_driver_activity()) {
      total_size += 2 + 1;
    }

    // optional bool watchdog_fault = 18;
    if (has_watchdog_fault()) {
      total_size += 2 + 1;
    }

    // optional bool channel_1_fault = 19;
    if (has_channel_1_fault()) {
      total_size += 2 + 1;
    }

    // optional bool channel_2_fault = 20;
    if (has_channel_2_fault()) {
      total_size += 2 + 1;
    }

    // optional bool boo_fault = 21;
    if (has_boo_fault()) {
      total_size += 2 + 1;
    }

    // optional bool connector_fault = 22;
    if (has_connector_fault()) {
      total_size += 2 + 1;
    }

    // optional double brake_torque_req = 23;
    if (has_brake_torque_req()) {
      total_size += 2 + 8;
    }

    // optional double brake_torque_act = 25;
    if (has_brake_torque_act()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
    if (has_hsa_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hsa_status());
    }

    // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
    if (has_hsa_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hsa_mode());
    }

    // optional double wheel_torque_act = 27;
    if (has_wheel_torque_act()) {
      total_size += 2 + 8;
    }

    // optional int32 major_version = 28;
    if (has_major_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_version());
    }

    // optional int32 minor_version = 29;
    if (has_minor_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_version());
    }

    // optional int32 build_number = 30;
    if (has_build_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->build_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Brake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Brake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake)
    MergeFrom(*source);
  }
}

void Brake::MergeFrom(const Brake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      brake_pedal_position_ = from.brake_pedal_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_brake_pedal_pressed_ = from.is_brake_pedal_pressed_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_brake_force_exist_ = from.is_brake_force_exist_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_brake_over_heat_ = from.is_brake_over_heat_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_hand_brake_on_ = from.is_hand_brake_on_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_brake_valid_ = from.is_brake_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      boo_input_ = from.boo_input_;
    }
    if (cached_has_bits & 0x00000080u) {
      boo_cmd_ = from.boo_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      boo_output_ = from.boo_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      brake_input_ = from.brake_input_;
    }
    if (cached_has_bits & 0x00000400u) {
      brake_cmd_ = from.brake_cmd_;
    }
    if (cached_has_bits & 0x00000800u) {
      brake_output_ = from.brake_output_;
    }
    if (cached_has_bits & 0x00001000u) {
      watchdog_source_ = from.watchdog_source_;
    }
    if (cached_has_bits & 0x00002000u) {
      watchdog_applying_brakes_ = from.watchdog_applying_brakes_;
    }
    if (cached_has_bits & 0x00004000u) {
      brake_enabled_ = from.brake_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      driver_override_ = from.driver_override_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      driver_activity_ = from.driver_activity_;
    }
    if (cached_has_bits & 0x00020000u) {
      watchdog_fault_ = from.watchdog_fault_;
    }
    if (cached_has_bits & 0x00040000u) {
      channel_1_fault_ = from.channel_1_fault_;
    }
    if (cached_has_bits & 0x00080000u) {
      channel_2_fault_ = from.channel_2_fault_;
    }
    if (cached_has_bits & 0x00100000u) {
      boo_fault_ = from.boo_fault_;
    }
    if (cached_has_bits & 0x00200000u) {
      connector_fault_ = from.connector_fault_;
    }
    if (cached_has_bits & 0x00400000u) {
      brake_torque_req_ = from.brake_torque_req_;
    }
    if (cached_has_bits & 0x00800000u) {
      brake_torque_act_ = from.brake_torque_act_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      hsa_status_ = from.hsa_status_;
    }
    if (cached_has_bits & 0x02000000u) {
      hsa_mode_ = from.hsa_mode_;
    }
    if (cached_has_bits & 0x04000000u) {
      wheel_torque_act_ = from.wheel_torque_act_;
    }
    if (cached_has_bits & 0x08000000u) {
      major_version_ = from.major_version_;
    }
    if (cached_has_bits & 0x10000000u) {
      minor_version_ = from.minor_version_;
    }
    if (cached_has_bits & 0x20000000u) {
      build_number_ = from.build_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake::CopyFrom(const Brake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake::IsInitialized() const {
  return true;
}

void Brake::Swap(Brake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brake::InternalSwap(Brake* other) {
  std::swap(brake_pedal_position_, other->brake_pedal_position_);
  std::swap(is_brake_pedal_pressed_, other->is_brake_pedal_pressed_);
  std::swap(is_brake_force_exist_, other->is_brake_force_exist_);
  std::swap(is_brake_over_heat_, other->is_brake_over_heat_);
  std::swap(is_hand_brake_on_, other->is_hand_brake_on_);
  std::swap(is_brake_valid_, other->is_brake_valid_);
  std::swap(boo_input_, other->boo_input_);
  std::swap(boo_cmd_, other->boo_cmd_);
  std::swap(boo_output_, other->boo_output_);
  std::swap(brake_input_, other->brake_input_);
  std::swap(brake_cmd_, other->brake_cmd_);
  std::swap(brake_output_, other->brake_output_);
  std::swap(watchdog_source_, other->watchdog_source_);
  std::swap(watchdog_applying_brakes_, other->watchdog_applying_brakes_);
  std::swap(brake_enabled_, other->brake_enabled_);
  std::swap(driver_override_, other->driver_override_);
  std::swap(driver_activity_, other->driver_activity_);
  std::swap(watchdog_fault_, other->watchdog_fault_);
  std::swap(channel_1_fault_, other->channel_1_fault_);
  std::swap(channel_2_fault_, other->channel_2_fault_);
  std::swap(boo_fault_, other->boo_fault_);
  std::swap(connector_fault_, other->connector_fault_);
  std::swap(brake_torque_req_, other->brake_torque_req_);
  std::swap(brake_torque_act_, other->brake_torque_act_);
  std::swap(hsa_status_, other->hsa_status_);
  std::swap(hsa_mode_, other->hsa_mode_);
  std::swap(wheel_torque_act_, other->wheel_torque_act_);
  std::swap(major_version_, other->major_version_);
  std::swap(minor_version_, other->minor_version_);
  std::swap(build_number_, other->build_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Brake::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Brake

// optional bool is_brake_pedal_pressed = 1 [default = false];
bool Brake::has_is_brake_pedal_pressed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Brake::set_has_is_brake_pedal_pressed() {
  _has_bits_[0] |= 0x00000002u;
}
void Brake::clear_has_is_brake_pedal_pressed() {
  _has_bits_[0] &= ~0x00000002u;
}
void Brake::clear_is_brake_pedal_pressed() {
  is_brake_pedal_pressed_ = false;
  clear_has_is_brake_pedal_pressed();
}
bool Brake::is_brake_pedal_pressed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.is_brake_pedal_pressed)
  return is_brake_pedal_pressed_;
}
void Brake::set_is_brake_pedal_pressed(bool value) {
  set_has_is_brake_pedal_pressed();
  is_brake_pedal_pressed_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.is_brake_pedal_pressed)
}

// optional bool is_brake_force_exist = 2;
bool Brake::has_is_brake_force_exist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Brake::set_has_is_brake_force_exist() {
  _has_bits_[0] |= 0x00000004u;
}
void Brake::clear_has_is_brake_force_exist() {
  _has_bits_[0] &= ~0x00000004u;
}
void Brake::clear_is_brake_force_exist() {
  is_brake_force_exist_ = false;
  clear_has_is_brake_force_exist();
}
bool Brake::is_brake_force_exist() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.is_brake_force_exist)
  return is_brake_force_exist_;
}
void Brake::set_is_brake_force_exist(bool value) {
  set_has_is_brake_force_exist();
  is_brake_force_exist_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.is_brake_force_exist)
}

// optional bool is_brake_over_heat = 3;
bool Brake::has_is_brake_over_heat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Brake::set_has_is_brake_over_heat() {
  _has_bits_[0] |= 0x00000008u;
}
void Brake::clear_has_is_brake_over_heat() {
  _has_bits_[0] &= ~0x00000008u;
}
void Brake::clear_is_brake_over_heat() {
  is_brake_over_heat_ = false;
  clear_has_is_brake_over_heat();
}
bool Brake::is_brake_over_heat() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.is_brake_over_heat)
  return is_brake_over_heat_;
}
void Brake::set_is_brake_over_heat(bool value) {
  set_has_is_brake_over_heat();
  is_brake_over_heat_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.is_brake_over_heat)
}

// optional bool is_hand_brake_on = 4;
bool Brake::has_is_hand_brake_on() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Brake::set_has_is_hand_brake_on() {
  _has_bits_[0] |= 0x00000010u;
}
void Brake::clear_has_is_hand_brake_on() {
  _has_bits_[0] &= ~0x00000010u;
}
void Brake::clear_is_hand_brake_on() {
  is_hand_brake_on_ = false;
  clear_has_is_hand_brake_on();
}
bool Brake::is_hand_brake_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.is_hand_brake_on)
  return is_hand_brake_on_;
}
void Brake::set_is_hand_brake_on(bool value) {
  set_has_is_hand_brake_on();
  is_hand_brake_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.is_hand_brake_on)
}

// optional double brake_pedal_position = 5;
bool Brake::has_brake_pedal_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Brake::set_has_brake_pedal_position() {
  _has_bits_[0] |= 0x00000001u;
}
void Brake::clear_has_brake_pedal_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void Brake::clear_brake_pedal_position() {
  brake_pedal_position_ = 0;
  clear_has_brake_pedal_position();
}
double Brake::brake_pedal_position() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_pedal_position)
  return brake_pedal_position_;
}
void Brake::set_brake_pedal_position(double value) {
  set_has_brake_pedal_position();
  brake_pedal_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_pedal_position)
}

// optional bool is_brake_valid = 6;
bool Brake::has_is_brake_valid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Brake::set_has_is_brake_valid() {
  _has_bits_[0] |= 0x00000020u;
}
void Brake::clear_has_is_brake_valid() {
  _has_bits_[0] &= ~0x00000020u;
}
void Brake::clear_is_brake_valid() {
  is_brake_valid_ = false;
  clear_has_is_brake_valid();
}
bool Brake::is_brake_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.is_brake_valid)
  return is_brake_valid_;
}
void Brake::set_is_brake_valid(bool value) {
  set_has_is_brake_valid();
  is_brake_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.is_brake_valid)
}

// optional double brake_input = 7;
bool Brake::has_brake_input() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Brake::set_has_brake_input() {
  _has_bits_[0] |= 0x00000200u;
}
void Brake::clear_has_brake_input() {
  _has_bits_[0] &= ~0x00000200u;
}
void Brake::clear_brake_input() {
  brake_input_ = 0;
  clear_has_brake_input();
}
double Brake::brake_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_input)
  return brake_input_;
}
void Brake::set_brake_input(double value) {
  set_has_brake_input();
  brake_input_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_input)
}

// optional double brake_cmd = 8;
bool Brake::has_brake_cmd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Brake::set_has_brake_cmd() {
  _has_bits_[0] |= 0x00000400u;
}
void Brake::clear_has_brake_cmd() {
  _has_bits_[0] &= ~0x00000400u;
}
void Brake::clear_brake_cmd() {
  brake_cmd_ = 0;
  clear_has_brake_cmd();
}
double Brake::brake_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_cmd)
  return brake_cmd_;
}
void Brake::set_brake_cmd(double value) {
  set_has_brake_cmd();
  brake_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_cmd)
}

// optional double brake_output = 9;
bool Brake::has_brake_output() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Brake::set_has_brake_output() {
  _has_bits_[0] |= 0x00000800u;
}
void Brake::clear_has_brake_output() {
  _has_bits_[0] &= ~0x00000800u;
}
void Brake::clear_brake_output() {
  brake_output_ = 0;
  clear_has_brake_output();
}
double Brake::brake_output() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_output)
  return brake_output_;
}
void Brake::set_brake_output(double value) {
  set_has_brake_output();
  brake_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_output)
}

// optional bool boo_input = 10;
bool Brake::has_boo_input() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Brake::set_has_boo_input() {
  _has_bits_[0] |= 0x00000040u;
}
void Brake::clear_has_boo_input() {
  _has_bits_[0] &= ~0x00000040u;
}
void Brake::clear_boo_input() {
  boo_input_ = false;
  clear_has_boo_input();
}
bool Brake::boo_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.boo_input)
  return boo_input_;
}
void Brake::set_boo_input(bool value) {
  set_has_boo_input();
  boo_input_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.boo_input)
}

// optional bool boo_cmd = 11;
bool Brake::has_boo_cmd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Brake::set_has_boo_cmd() {
  _has_bits_[0] |= 0x00000080u;
}
void Brake::clear_has_boo_cmd() {
  _has_bits_[0] &= ~0x00000080u;
}
void Brake::clear_boo_cmd() {
  boo_cmd_ = false;
  clear_has_boo_cmd();
}
bool Brake::boo_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.boo_cmd)
  return boo_cmd_;
}
void Brake::set_boo_cmd(bool value) {
  set_has_boo_cmd();
  boo_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.boo_cmd)
}

// optional bool boo_output = 12;
bool Brake::has_boo_output() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Brake::set_has_boo_output() {
  _has_bits_[0] |= 0x00000100u;
}
void Brake::clear_has_boo_output() {
  _has_bits_[0] &= ~0x00000100u;
}
void Brake::clear_boo_output() {
  boo_output_ = false;
  clear_has_boo_output();
}
bool Brake::boo_output() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.boo_output)
  return boo_output_;
}
void Brake::set_boo_output(bool value) {
  set_has_boo_output();
  boo_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.boo_output)
}

// optional bool watchdog_applying_brakes = 13;
bool Brake::has_watchdog_applying_brakes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Brake::set_has_watchdog_applying_brakes() {
  _has_bits_[0] |= 0x00002000u;
}
void Brake::clear_has_watchdog_applying_brakes() {
  _has_bits_[0] &= ~0x00002000u;
}
void Brake::clear_watchdog_applying_brakes() {
  watchdog_applying_brakes_ = false;
  clear_has_watchdog_applying_brakes();
}
bool Brake::watchdog_applying_brakes() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.watchdog_applying_brakes)
  return watchdog_applying_brakes_;
}
void Brake::set_watchdog_applying_brakes(bool value) {
  set_has_watchdog_applying_brakes();
  watchdog_applying_brakes_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.watchdog_applying_brakes)
}

// optional int32 watchdog_source = 14;
bool Brake::has_watchdog_source() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Brake::set_has_watchdog_source() {
  _has_bits_[0] |= 0x00001000u;
}
void Brake::clear_has_watchdog_source() {
  _has_bits_[0] &= ~0x00001000u;
}
void Brake::clear_watchdog_source() {
  watchdog_source_ = 0;
  clear_has_watchdog_source();
}
::google::protobuf::int32 Brake::watchdog_source() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.watchdog_source)
  return watchdog_source_;
}
void Brake::set_watchdog_source(::google::protobuf::int32 value) {
  set_has_watchdog_source();
  watchdog_source_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.watchdog_source)
}

// optional bool brake_enabled = 15;
bool Brake::has_brake_enabled() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Brake::set_has_brake_enabled() {
  _has_bits_[0] |= 0x00004000u;
}
void Brake::clear_has_brake_enabled() {
  _has_bits_[0] &= ~0x00004000u;
}
void Brake::clear_brake_enabled() {
  brake_enabled_ = false;
  clear_has_brake_enabled();
}
bool Brake::brake_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_enabled)
  return brake_enabled_;
}
void Brake::set_brake_enabled(bool value) {
  set_has_brake_enabled();
  brake_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_enabled)
}

// optional bool driver_override = 16;
bool Brake::has_driver_override() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Brake::set_has_driver_override() {
  _has_bits_[0] |= 0x00008000u;
}
void Brake::clear_has_driver_override() {
  _has_bits_[0] &= ~0x00008000u;
}
void Brake::clear_driver_override() {
  driver_override_ = false;
  clear_has_driver_override();
}
bool Brake::driver_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.driver_override)
  return driver_override_;
}
void Brake::set_driver_override(bool value) {
  set_has_driver_override();
  driver_override_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.driver_override)
}

// optional bool driver_activity = 17;
bool Brake::has_driver_activity() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Brake::set_has_driver_activity() {
  _has_bits_[0] |= 0x00010000u;
}
void Brake::clear_has_driver_activity() {
  _has_bits_[0] &= ~0x00010000u;
}
void Brake::clear_driver_activity() {
  driver_activity_ = false;
  clear_has_driver_activity();
}
bool Brake::driver_activity() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.driver_activity)
  return driver_activity_;
}
void Brake::set_driver_activity(bool value) {
  set_has_driver_activity();
  driver_activity_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.driver_activity)
}

// optional bool watchdog_fault = 18;
bool Brake::has_watchdog_fault() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Brake::set_has_watchdog_fault() {
  _has_bits_[0] |= 0x00020000u;
}
void Brake::clear_has_watchdog_fault() {
  _has_bits_[0] &= ~0x00020000u;
}
void Brake::clear_watchdog_fault() {
  watchdog_fault_ = false;
  clear_has_watchdog_fault();
}
bool Brake::watchdog_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.watchdog_fault)
  return watchdog_fault_;
}
void Brake::set_watchdog_fault(bool value) {
  set_has_watchdog_fault();
  watchdog_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.watchdog_fault)
}

// optional bool channel_1_fault = 19;
bool Brake::has_channel_1_fault() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Brake::set_has_channel_1_fault() {
  _has_bits_[0] |= 0x00040000u;
}
void Brake::clear_has_channel_1_fault() {
  _has_bits_[0] &= ~0x00040000u;
}
void Brake::clear_channel_1_fault() {
  channel_1_fault_ = false;
  clear_has_channel_1_fault();
}
bool Brake::channel_1_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.channel_1_fault)
  return channel_1_fault_;
}
void Brake::set_channel_1_fault(bool value) {
  set_has_channel_1_fault();
  channel_1_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.channel_1_fault)
}

// optional bool channel_2_fault = 20;
bool Brake::has_channel_2_fault() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Brake::set_has_channel_2_fault() {
  _has_bits_[0] |= 0x00080000u;
}
void Brake::clear_has_channel_2_fault() {
  _has_bits_[0] &= ~0x00080000u;
}
void Brake::clear_channel_2_fault() {
  channel_2_fault_ = false;
  clear_has_channel_2_fault();
}
bool Brake::channel_2_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.channel_2_fault)
  return channel_2_fault_;
}
void Brake::set_channel_2_fault(bool value) {
  set_has_channel_2_fault();
  channel_2_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.channel_2_fault)
}

// optional bool boo_fault = 21;
bool Brake::has_boo_fault() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Brake::set_has_boo_fault() {
  _has_bits_[0] |= 0x00100000u;
}
void Brake::clear_has_boo_fault() {
  _has_bits_[0] &= ~0x00100000u;
}
void Brake::clear_boo_fault() {
  boo_fault_ = false;
  clear_has_boo_fault();
}
bool Brake::boo_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.boo_fault)
  return boo_fault_;
}
void Brake::set_boo_fault(bool value) {
  set_has_boo_fault();
  boo_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.boo_fault)
}

// optional bool connector_fault = 22;
bool Brake::has_connector_fault() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Brake::set_has_connector_fault() {
  _has_bits_[0] |= 0x00200000u;
}
void Brake::clear_has_connector_fault() {
  _has_bits_[0] &= ~0x00200000u;
}
void Brake::clear_connector_fault() {
  connector_fault_ = false;
  clear_has_connector_fault();
}
bool Brake::connector_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.connector_fault)
  return connector_fault_;
}
void Brake::set_connector_fault(bool value) {
  set_has_connector_fault();
  connector_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.connector_fault)
}

// optional double brake_torque_req = 23;
bool Brake::has_brake_torque_req() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Brake::set_has_brake_torque_req() {
  _has_bits_[0] |= 0x00400000u;
}
void Brake::clear_has_brake_torque_req() {
  _has_bits_[0] &= ~0x00400000u;
}
void Brake::clear_brake_torque_req() {
  brake_torque_req_ = 0;
  clear_has_brake_torque_req();
}
double Brake::brake_torque_req() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_torque_req)
  return brake_torque_req_;
}
void Brake::set_brake_torque_req(double value) {
  set_has_brake_torque_req();
  brake_torque_req_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_torque_req)
}

// optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
bool Brake::has_hsa_status() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Brake::set_has_hsa_status() {
  _has_bits_[0] |= 0x01000000u;
}
void Brake::clear_has_hsa_status() {
  _has_bits_[0] &= ~0x01000000u;
}
void Brake::clear_hsa_status() {
  hsa_status_ = 0;
  clear_has_hsa_status();
}
::apollo::canbus::Brake_HSAStatusType Brake::hsa_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.hsa_status)
  return static_cast< ::apollo::canbus::Brake_HSAStatusType >(hsa_status_);
}
void Brake::set_hsa_status(::apollo::canbus::Brake_HSAStatusType value) {
  assert(::apollo::canbus::Brake_HSAStatusType_IsValid(value));
  set_has_hsa_status();
  hsa_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.hsa_status)
}

// optional double brake_torque_act = 25;
bool Brake::has_brake_torque_act() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Brake::set_has_brake_torque_act() {
  _has_bits_[0] |= 0x00800000u;
}
void Brake::clear_has_brake_torque_act() {
  _has_bits_[0] &= ~0x00800000u;
}
void Brake::clear_brake_torque_act() {
  brake_torque_act_ = 0;
  clear_has_brake_torque_act();
}
double Brake::brake_torque_act() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.brake_torque_act)
  return brake_torque_act_;
}
void Brake::set_brake_torque_act(double value) {
  set_has_brake_torque_act();
  brake_torque_act_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.brake_torque_act)
}

// optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
bool Brake::has_hsa_mode() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Brake::set_has_hsa_mode() {
  _has_bits_[0] |= 0x02000000u;
}
void Brake::clear_has_hsa_mode() {
  _has_bits_[0] &= ~0x02000000u;
}
void Brake::clear_hsa_mode() {
  hsa_mode_ = 0;
  clear_has_hsa_mode();
}
::apollo::canbus::Brake_HSAModeType Brake::hsa_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.hsa_mode)
  return static_cast< ::apollo::canbus::Brake_HSAModeType >(hsa_mode_);
}
void Brake::set_hsa_mode(::apollo::canbus::Brake_HSAModeType value) {
  assert(::apollo::canbus::Brake_HSAModeType_IsValid(value));
  set_has_hsa_mode();
  hsa_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.hsa_mode)
}

// optional double wheel_torque_act = 27;
bool Brake::has_wheel_torque_act() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Brake::set_has_wheel_torque_act() {
  _has_bits_[0] |= 0x04000000u;
}
void Brake::clear_has_wheel_torque_act() {
  _has_bits_[0] &= ~0x04000000u;
}
void Brake::clear_wheel_torque_act() {
  wheel_torque_act_ = 0;
  clear_has_wheel_torque_act();
}
double Brake::wheel_torque_act() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.wheel_torque_act)
  return wheel_torque_act_;
}
void Brake::set_wheel_torque_act(double value) {
  set_has_wheel_torque_act();
  wheel_torque_act_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.wheel_torque_act)
}

// optional int32 major_version = 28;
bool Brake::has_major_version() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Brake::set_has_major_version() {
  _has_bits_[0] |= 0x08000000u;
}
void Brake::clear_has_major_version() {
  _has_bits_[0] &= ~0x08000000u;
}
void Brake::clear_major_version() {
  major_version_ = 0;
  clear_has_major_version();
}
::google::protobuf::int32 Brake::major_version() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.major_version)
  return major_version_;
}
void Brake::set_major_version(::google::protobuf::int32 value) {
  set_has_major_version();
  major_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.major_version)
}

// optional int32 minor_version = 29;
bool Brake::has_minor_version() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void Brake::set_has_minor_version() {
  _has_bits_[0] |= 0x10000000u;
}
void Brake::clear_has_minor_version() {
  _has_bits_[0] &= ~0x10000000u;
}
void Brake::clear_minor_version() {
  minor_version_ = 0;
  clear_has_minor_version();
}
::google::protobuf::int32 Brake::minor_version() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.minor_version)
  return minor_version_;
}
void Brake::set_minor_version(::google::protobuf::int32 value) {
  set_has_minor_version();
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.minor_version)
}

// optional int32 build_number = 30;
bool Brake::has_build_number() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void Brake::set_has_build_number() {
  _has_bits_[0] |= 0x20000000u;
}
void Brake::clear_has_build_number() {
  _has_bits_[0] &= ~0x20000000u;
}
void Brake::clear_build_number() {
  build_number_ = 0;
  clear_has_build_number();
}
::google::protobuf::int32 Brake::build_number() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake.build_number)
  return build_number_;
}
void Brake::set_build_number(::google::protobuf::int32 value) {
  set_has_build_number();
  build_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake.build_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Epb::kIsEpbErrorFieldNumber;
const int Epb::kIsEpbReleasedFieldNumber;
const int Epb::kEpbStatusFieldNumber;
const int Epb::kParkingBrakeStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Epb::Epb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Epb)
}
Epb::Epb(const Epb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_epb_error_, &from.is_epb_error_,
    reinterpret_cast<char*>(&parking_brake_status_) -
    reinterpret_cast<char*>(&is_epb_error_) + sizeof(parking_brake_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Epb)
}

void Epb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&is_epb_error_, 0, reinterpret_cast<char*>(&parking_brake_status_) -
    reinterpret_cast<char*>(&is_epb_error_) + sizeof(parking_brake_status_));
}

Epb::~Epb() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Epb)
  SharedDtor();
}

void Epb::SharedDtor() {
}

void Epb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Epb::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Epb& Epb::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

Epb* Epb::New(::google::protobuf::Arena* arena) const {
  Epb* n = new Epb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Epb::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Epb)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&is_epb_error_, 0, reinterpret_cast<char*>(&parking_brake_status_) -
      reinterpret_cast<char*>(&is_epb_error_) + sizeof(parking_brake_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Epb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Epb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_epb_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_epb_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_epb_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_epb_released = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_epb_released();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_epb_released_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 epb_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_epb_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epb_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Epb_PBrakeType_IsValid(value)) {
            set_parking_brake_status(static_cast< ::apollo::canbus::Epb_PBrakeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Epb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Epb)
  return false;
#undef DO_
}

void Epb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Epb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_epb_error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_epb_error(), output);
  }

  // optional bool is_epb_released = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_epb_released(), output);
  }

  // optional int32 epb_status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->epb_status(), output);
  }

  // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->parking_brake_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Epb)
}

::google::protobuf::uint8* Epb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Epb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_epb_error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_epb_error(), target);
  }

  // optional bool is_epb_released = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_epb_released(), target);
  }

  // optional int32 epb_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->epb_status(), target);
  }

  // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->parking_brake_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Epb)
  return target;
}

size_t Epb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Epb)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool is_epb_error = 1;
    if (has_is_epb_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_epb_released = 2;
    if (has_is_epb_released()) {
      total_size += 1 + 1;
    }

    // optional int32 epb_status = 3;
    if (has_epb_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->epb_status());
    }

    // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
    if (has_parking_brake_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->parking_brake_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Epb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Epb)
  GOOGLE_DCHECK_NE(&from, this);
  const Epb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Epb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Epb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Epb)
    MergeFrom(*source);
  }
}

void Epb::MergeFrom(const Epb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Epb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      is_epb_error_ = from.is_epb_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_epb_released_ = from.is_epb_released_;
    }
    if (cached_has_bits & 0x00000004u) {
      epb_status_ = from.epb_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      parking_brake_status_ = from.parking_brake_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Epb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Epb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Epb::CopyFrom(const Epb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Epb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Epb::IsInitialized() const {
  return true;
}

void Epb::Swap(Epb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Epb::InternalSwap(Epb* other) {
  std::swap(is_epb_error_, other->is_epb_error_);
  std::swap(is_epb_released_, other->is_epb_released_);
  std::swap(epb_status_, other->epb_status_);
  std::swap(parking_brake_status_, other->parking_brake_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Epb::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Epb

// optional bool is_epb_error = 1;
bool Epb::has_is_epb_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Epb::set_has_is_epb_error() {
  _has_bits_[0] |= 0x00000001u;
}
void Epb::clear_has_is_epb_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void Epb::clear_is_epb_error() {
  is_epb_error_ = false;
  clear_has_is_epb_error();
}
bool Epb::is_epb_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epb.is_epb_error)
  return is_epb_error_;
}
void Epb::set_is_epb_error(bool value) {
  set_has_is_epb_error();
  is_epb_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Epb.is_epb_error)
}

// optional bool is_epb_released = 2;
bool Epb::has_is_epb_released() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Epb::set_has_is_epb_released() {
  _has_bits_[0] |= 0x00000002u;
}
void Epb::clear_has_is_epb_released() {
  _has_bits_[0] &= ~0x00000002u;
}
void Epb::clear_is_epb_released() {
  is_epb_released_ = false;
  clear_has_is_epb_released();
}
bool Epb::is_epb_released() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epb.is_epb_released)
  return is_epb_released_;
}
void Epb::set_is_epb_released(bool value) {
  set_has_is_epb_released();
  is_epb_released_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Epb.is_epb_released)
}

// optional int32 epb_status = 3;
bool Epb::has_epb_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Epb::set_has_epb_status() {
  _has_bits_[0] |= 0x00000004u;
}
void Epb::clear_has_epb_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void Epb::clear_epb_status() {
  epb_status_ = 0;
  clear_has_epb_status();
}
::google::protobuf::int32 Epb::epb_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epb.epb_status)
  return epb_status_;
}
void Epb::set_epb_status(::google::protobuf::int32 value) {
  set_has_epb_status();
  epb_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Epb.epb_status)
}

// optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
bool Epb::has_parking_brake_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Epb::set_has_parking_brake_status() {
  _has_bits_[0] |= 0x00000008u;
}
void Epb::clear_has_parking_brake_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void Epb::clear_parking_brake_status() {
  parking_brake_status_ = 0;
  clear_has_parking_brake_status();
}
::apollo::canbus::Epb_PBrakeType Epb::parking_brake_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epb.parking_brake_status)
  return static_cast< ::apollo::canbus::Epb_PBrakeType >(parking_brake_status_);
}
void Epb::set_parking_brake_status(::apollo::canbus::Epb_PBrakeType value) {
  assert(::apollo::canbus::Epb_PBrakeType_IsValid(value));
  set_has_parking_brake_status();
  parking_brake_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Epb.parking_brake_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gas::kIsGasPedalErrorFieldNumber;
const int Gas::kIsGasPedalPressedMoreFieldNumber;
const int Gas::kGasPedalPositionFieldNumber;
const int Gas::kIsGasValidFieldNumber;
const int Gas::kThrottleInputFieldNumber;
const int Gas::kThrottleCmdFieldNumber;
const int Gas::kThrottleOutputFieldNumber;
const int Gas::kWatchdogSourceFieldNumber;
const int Gas::kThrottleEnabledFieldNumber;
const int Gas::kDriverOverrideFieldNumber;
const int Gas::kDriverActivityFieldNumber;
const int Gas::kWatchdogFaultFieldNumber;
const int Gas::kChannel1FaultFieldNumber;
const int Gas::kChannel2FaultFieldNumber;
const int Gas::kConnectorFaultFieldNumber;
const int Gas::kAcceleratorPedalFieldNumber;
const int Gas::kAcceleratorPedalRateFieldNumber;
const int Gas::kMajorVersionFieldNumber;
const int Gas::kMinorVersionFieldNumber;
const int Gas::kBuildNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gas::Gas()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gas)
}
Gas::Gas(const Gas& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gas_pedal_position_, &from.gas_pedal_position_,
    reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&gas_pedal_position_) + sizeof(build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gas)
}

void Gas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gas_pedal_position_, 0, reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&gas_pedal_position_) + sizeof(build_number_));
}

Gas::~Gas() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gas)
  SharedDtor();
}

void Gas::SharedDtor() {
}

void Gas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gas::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gas& Gas::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gas* Gas::New(::google::protobuf::Arena* arena) const {
  Gas* n = new Gas;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gas::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gas)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&gas_pedal_position_, 0, reinterpret_cast<char*>(&throttle_cmd_) -
      reinterpret_cast<char*>(&gas_pedal_position_) + sizeof(throttle_cmd_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&throttle_output_, 0, reinterpret_cast<char*>(&accelerator_pedal_) -
      reinterpret_cast<char*>(&throttle_output_) + sizeof(accelerator_pedal_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&accelerator_pedal_rate_, 0, reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&accelerator_pedal_rate_) + sizeof(build_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Gas)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_gas_pedal_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_gas_pedal_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gas_pedal_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_gas_pedal_pressed_more = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_gas_pedal_pressed_more();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gas_pedal_pressed_more_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gas_pedal_position = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_gas_pedal_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gas_pedal_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_gas_valid = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_gas_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gas_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_input = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_throttle_input();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_cmd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_throttle_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_output = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_throttle_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 watchdog_source = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_watchdog_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &watchdog_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool throttle_enabled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_throttle_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &throttle_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_override = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_driver_override();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_activity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_driver_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool watchdog_fault = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_watchdog_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_1_fault = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_channel_1_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_1_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_2_fault = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_channel_2_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_2_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool connector_fault = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_connector_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connector_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accelerator_pedal = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_accelerator_pedal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerator_pedal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accelerator_pedal_rate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_accelerator_pedal_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerator_pedal_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 major_version = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_major_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minor_version = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_minor_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 build_number = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_build_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Gas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Gas)
  return false;
#undef DO_
}

void Gas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Gas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_gas_pedal_error = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_gas_pedal_error(), output);
  }

  // optional bool is_gas_pedal_pressed_more = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_gas_pedal_pressed_more(), output);
  }

  // optional double gas_pedal_position = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gas_pedal_position(), output);
  }

  // optional bool is_gas_valid = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_gas_valid(), output);
  }

  // optional double throttle_input = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->throttle_input(), output);
  }

  // optional double throttle_cmd = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->throttle_cmd(), output);
  }

  // optional double throttle_output = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->throttle_output(), output);
  }

  // optional int32 watchdog_source = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->watchdog_source(), output);
  }

  // optional bool throttle_enabled = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->throttle_enabled(), output);
  }

  // optional bool driver_override = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->driver_override(), output);
  }

  // optional bool driver_activity = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->driver_activity(), output);
  }

  // optional bool watchdog_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->watchdog_fault(), output);
  }

  // optional bool channel_1_fault = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->channel_1_fault(), output);
  }

  // optional bool channel_2_fault = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->channel_2_fault(), output);
  }

  // optional bool connector_fault = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->connector_fault(), output);
  }

  // optional double accelerator_pedal = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->accelerator_pedal(), output);
  }

  // optional double accelerator_pedal_rate = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->accelerator_pedal_rate(), output);
  }

  // optional int32 major_version = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->major_version(), output);
  }

  // optional int32 minor_version = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->minor_version(), output);
  }

  // optional int32 build_number = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->build_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Gas)
}

::google::protobuf::uint8* Gas::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_gas_pedal_error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_gas_pedal_error(), target);
  }

  // optional bool is_gas_pedal_pressed_more = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_gas_pedal_pressed_more(), target);
  }

  // optional double gas_pedal_position = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gas_pedal_position(), target);
  }

  // optional bool is_gas_valid = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_gas_valid(), target);
  }

  // optional double throttle_input = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->throttle_input(), target);
  }

  // optional double throttle_cmd = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->throttle_cmd(), target);
  }

  // optional double throttle_output = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->throttle_output(), target);
  }

  // optional int32 watchdog_source = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->watchdog_source(), target);
  }

  // optional bool throttle_enabled = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->throttle_enabled(), target);
  }

  // optional bool driver_override = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->driver_override(), target);
  }

  // optional bool driver_activity = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->driver_activity(), target);
  }

  // optional bool watchdog_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->channel_2_fault(), target);
  }

  // optional bool connector_fault = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->connector_fault(), target);
  }

  // optional double accelerator_pedal = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->accelerator_pedal(), target);
  }

  // optional double accelerator_pedal_rate = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->accelerator_pedal_rate(), target);
  }

  // optional int32 major_version = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->major_version(), target);
  }

  // optional int32 minor_version = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->minor_version(), target);
  }

  // optional int32 build_number = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->build_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gas)
  return target;
}

size_t Gas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gas)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double gas_pedal_position = 3 [default = 0];
    if (has_gas_pedal_position()) {
      total_size += 1 + 8;
    }

    // optional bool is_gas_pedal_error = 1;
    if (has_is_gas_pedal_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_gas_pedal_pressed_more = 2;
    if (has_is_gas_pedal_pressed_more()) {
      total_size += 1 + 1;
    }

    // optional bool is_gas_valid = 4 [default = false];
    if (has_is_gas_valid()) {
      total_size += 1 + 1;
    }

    // optional bool throttle_enabled = 9;
    if (has_throttle_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 watchdog_source = 8;
    if (has_watchdog_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->watchdog_source());
    }

    // optional double throttle_input = 5;
    if (has_throttle_input()) {
      total_size += 1 + 8;
    }

    // optional double throttle_cmd = 6;
    if (has_throttle_cmd()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double throttle_output = 7;
    if (has_throttle_output()) {
      total_size += 1 + 8;
    }

    // optional bool driver_override = 10;
    if (has_driver_override()) {
      total_size += 1 + 1;
    }

    // optional bool driver_activity = 11;
    if (has_driver_activity()) {
      total_size += 1 + 1;
    }

    // optional bool watchdog_fault = 12;
    if (has_watchdog_fault()) {
      total_size += 1 + 1;
    }

    // optional bool channel_1_fault = 13;
    if (has_channel_1_fault()) {
      total_size += 1 + 1;
    }

    // optional bool channel_2_fault = 14;
    if (has_channel_2_fault()) {
      total_size += 1 + 1;
    }

    // optional bool connector_fault = 15;
    if (has_connector_fault()) {
      total_size += 1 + 1;
    }

    // optional double accelerator_pedal = 16;
    if (has_accelerator_pedal()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional double accelerator_pedal_rate = 17;
    if (has_accelerator_pedal_rate()) {
      total_size += 2 + 8;
    }

    // optional int32 major_version = 18;
    if (has_major_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_version());
    }

    // optional int32 minor_version = 19;
    if (has_minor_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_version());
    }

    // optional int32 build_number = 20;
    if (has_build_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->build_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gas::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gas)
  GOOGLE_DCHECK_NE(&from, this);
  const Gas* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gas>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gas)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gas)
    MergeFrom(*source);
  }
}

void Gas::MergeFrom(const Gas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      gas_pedal_position_ = from.gas_pedal_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_gas_pedal_error_ = from.is_gas_pedal_error_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_gas_pedal_pressed_more_ = from.is_gas_pedal_pressed_more_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_gas_valid_ = from.is_gas_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      throttle_enabled_ = from.throttle_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      watchdog_source_ = from.watchdog_source_;
    }
    if (cached_has_bits & 0x00000040u) {
      throttle_input_ = from.throttle_input_;
    }
    if (cached_has_bits & 0x00000080u) {
      throttle_cmd_ = from.throttle_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      throttle_output_ = from.throttle_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      driver_override_ = from.driver_override_;
    }
    if (cached_has_bits & 0x00000400u) {
      driver_activity_ = from.driver_activity_;
    }
    if (cached_has_bits & 0x00000800u) {
      watchdog_fault_ = from.watchdog_fault_;
    }
    if (cached_has_bits & 0x00001000u) {
      channel_1_fault_ = from.channel_1_fault_;
    }
    if (cached_has_bits & 0x00002000u) {
      channel_2_fault_ = from.channel_2_fault_;
    }
    if (cached_has_bits & 0x00004000u) {
      connector_fault_ = from.connector_fault_;
    }
    if (cached_has_bits & 0x00008000u) {
      accelerator_pedal_ = from.accelerator_pedal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      accelerator_pedal_rate_ = from.accelerator_pedal_rate_;
    }
    if (cached_has_bits & 0x00020000u) {
      major_version_ = from.major_version_;
    }
    if (cached_has_bits & 0x00040000u) {
      minor_version_ = from.minor_version_;
    }
    if (cached_has_bits & 0x00080000u) {
      build_number_ = from.build_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gas::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gas::CopyFrom(const Gas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gas::IsInitialized() const {
  return true;
}

void Gas::Swap(Gas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gas::InternalSwap(Gas* other) {
  std::swap(gas_pedal_position_, other->gas_pedal_position_);
  std::swap(is_gas_pedal_error_, other->is_gas_pedal_error_);
  std::swap(is_gas_pedal_pressed_more_, other->is_gas_pedal_pressed_more_);
  std::swap(is_gas_valid_, other->is_gas_valid_);
  std::swap(throttle_enabled_, other->throttle_enabled_);
  std::swap(watchdog_source_, other->watchdog_source_);
  std::swap(throttle_input_, other->throttle_input_);
  std::swap(throttle_cmd_, other->throttle_cmd_);
  std::swap(throttle_output_, other->throttle_output_);
  std::swap(driver_override_, other->driver_override_);
  std::swap(driver_activity_, other->driver_activity_);
  std::swap(watchdog_fault_, other->watchdog_fault_);
  std::swap(channel_1_fault_, other->channel_1_fault_);
  std::swap(channel_2_fault_, other->channel_2_fault_);
  std::swap(connector_fault_, other->connector_fault_);
  std::swap(accelerator_pedal_, other->accelerator_pedal_);
  std::swap(accelerator_pedal_rate_, other->accelerator_pedal_rate_);
  std::swap(major_version_, other->major_version_);
  std::swap(minor_version_, other->minor_version_);
  std::swap(build_number_, other->build_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gas::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gas

// optional bool is_gas_pedal_error = 1;
bool Gas::has_is_gas_pedal_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gas::set_has_is_gas_pedal_error() {
  _has_bits_[0] |= 0x00000002u;
}
void Gas::clear_has_is_gas_pedal_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gas::clear_is_gas_pedal_error() {
  is_gas_pedal_error_ = false;
  clear_has_is_gas_pedal_error();
}
bool Gas::is_gas_pedal_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.is_gas_pedal_error)
  return is_gas_pedal_error_;
}
void Gas::set_is_gas_pedal_error(bool value) {
  set_has_is_gas_pedal_error();
  is_gas_pedal_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.is_gas_pedal_error)
}

// optional bool is_gas_pedal_pressed_more = 2;
bool Gas::has_is_gas_pedal_pressed_more() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gas::set_has_is_gas_pedal_pressed_more() {
  _has_bits_[0] |= 0x00000004u;
}
void Gas::clear_has_is_gas_pedal_pressed_more() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gas::clear_is_gas_pedal_pressed_more() {
  is_gas_pedal_pressed_more_ = false;
  clear_has_is_gas_pedal_pressed_more();
}
bool Gas::is_gas_pedal_pressed_more() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.is_gas_pedal_pressed_more)
  return is_gas_pedal_pressed_more_;
}
void Gas::set_is_gas_pedal_pressed_more(bool value) {
  set_has_is_gas_pedal_pressed_more();
  is_gas_pedal_pressed_more_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.is_gas_pedal_pressed_more)
}

// optional double gas_pedal_position = 3 [default = 0];
bool Gas::has_gas_pedal_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gas::set_has_gas_pedal_position() {
  _has_bits_[0] |= 0x00000001u;
}
void Gas::clear_has_gas_pedal_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gas::clear_gas_pedal_position() {
  gas_pedal_position_ = 0;
  clear_has_gas_pedal_position();
}
double Gas::gas_pedal_position() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.gas_pedal_position)
  return gas_pedal_position_;
}
void Gas::set_gas_pedal_position(double value) {
  set_has_gas_pedal_position();
  gas_pedal_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.gas_pedal_position)
}

// optional bool is_gas_valid = 4 [default = false];
bool Gas::has_is_gas_valid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gas::set_has_is_gas_valid() {
  _has_bits_[0] |= 0x00000008u;
}
void Gas::clear_has_is_gas_valid() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gas::clear_is_gas_valid() {
  is_gas_valid_ = false;
  clear_has_is_gas_valid();
}
bool Gas::is_gas_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.is_gas_valid)
  return is_gas_valid_;
}
void Gas::set_is_gas_valid(bool value) {
  set_has_is_gas_valid();
  is_gas_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.is_gas_valid)
}

// optional double throttle_input = 5;
bool Gas::has_throttle_input() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gas::set_has_throttle_input() {
  _has_bits_[0] |= 0x00000040u;
}
void Gas::clear_has_throttle_input() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gas::clear_throttle_input() {
  throttle_input_ = 0;
  clear_has_throttle_input();
}
double Gas::throttle_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.throttle_input)
  return throttle_input_;
}
void Gas::set_throttle_input(double value) {
  set_has_throttle_input();
  throttle_input_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.throttle_input)
}

// optional double throttle_cmd = 6;
bool Gas::has_throttle_cmd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gas::set_has_throttle_cmd() {
  _has_bits_[0] |= 0x00000080u;
}
void Gas::clear_has_throttle_cmd() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gas::clear_throttle_cmd() {
  throttle_cmd_ = 0;
  clear_has_throttle_cmd();
}
double Gas::throttle_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.throttle_cmd)
  return throttle_cmd_;
}
void Gas::set_throttle_cmd(double value) {
  set_has_throttle_cmd();
  throttle_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.throttle_cmd)
}

// optional double throttle_output = 7;
bool Gas::has_throttle_output() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Gas::set_has_throttle_output() {
  _has_bits_[0] |= 0x00000100u;
}
void Gas::clear_has_throttle_output() {
  _has_bits_[0] &= ~0x00000100u;
}
void Gas::clear_throttle_output() {
  throttle_output_ = 0;
  clear_has_throttle_output();
}
double Gas::throttle_output() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.throttle_output)
  return throttle_output_;
}
void Gas::set_throttle_output(double value) {
  set_has_throttle_output();
  throttle_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.throttle_output)
}

// optional int32 watchdog_source = 8;
bool Gas::has_watchdog_source() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gas::set_has_watchdog_source() {
  _has_bits_[0] |= 0x00000020u;
}
void Gas::clear_has_watchdog_source() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gas::clear_watchdog_source() {
  watchdog_source_ = 0;
  clear_has_watchdog_source();
}
::google::protobuf::int32 Gas::watchdog_source() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.watchdog_source)
  return watchdog_source_;
}
void Gas::set_watchdog_source(::google::protobuf::int32 value) {
  set_has_watchdog_source();
  watchdog_source_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.watchdog_source)
}

// optional bool throttle_enabled = 9;
bool Gas::has_throttle_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gas::set_has_throttle_enabled() {
  _has_bits_[0] |= 0x00000010u;
}
void Gas::clear_has_throttle_enabled() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gas::clear_throttle_enabled() {
  throttle_enabled_ = false;
  clear_has_throttle_enabled();
}
bool Gas::throttle_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.throttle_enabled)
  return throttle_enabled_;
}
void Gas::set_throttle_enabled(bool value) {
  set_has_throttle_enabled();
  throttle_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.throttle_enabled)
}

// optional bool driver_override = 10;
bool Gas::has_driver_override() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Gas::set_has_driver_override() {
  _has_bits_[0] |= 0x00000200u;
}
void Gas::clear_has_driver_override() {
  _has_bits_[0] &= ~0x00000200u;
}
void Gas::clear_driver_override() {
  driver_override_ = false;
  clear_has_driver_override();
}
bool Gas::driver_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.driver_override)
  return driver_override_;
}
void Gas::set_driver_override(bool value) {
  set_has_driver_override();
  driver_override_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.driver_override)
}

// optional bool driver_activity = 11;
bool Gas::has_driver_activity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Gas::set_has_driver_activity() {
  _has_bits_[0] |= 0x00000400u;
}
void Gas::clear_has_driver_activity() {
  _has_bits_[0] &= ~0x00000400u;
}
void Gas::clear_driver_activity() {
  driver_activity_ = false;
  clear_has_driver_activity();
}
bool Gas::driver_activity() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.driver_activity)
  return driver_activity_;
}
void Gas::set_driver_activity(bool value) {
  set_has_driver_activity();
  driver_activity_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.driver_activity)
}

// optional bool watchdog_fault = 12;
bool Gas::has_watchdog_fault() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Gas::set_has_watchdog_fault() {
  _has_bits_[0] |= 0x00000800u;
}
void Gas::clear_has_watchdog_fault() {
  _has_bits_[0] &= ~0x00000800u;
}
void Gas::clear_watchdog_fault() {
  watchdog_fault_ = false;
  clear_has_watchdog_fault();
}
bool Gas::watchdog_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.watchdog_fault)
  return watchdog_fault_;
}
void Gas::set_watchdog_fault(bool value) {
  set_has_watchdog_fault();
  watchdog_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.watchdog_fault)
}

// optional bool channel_1_fault = 13;
bool Gas::has_channel_1_fault() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Gas::set_has_channel_1_fault() {
  _has_bits_[0] |= 0x00001000u;
}
void Gas::clear_has_channel_1_fault() {
  _has_bits_[0] &= ~0x00001000u;
}
void Gas::clear_channel_1_fault() {
  channel_1_fault_ = false;
  clear_has_channel_1_fault();
}
bool Gas::channel_1_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.channel_1_fault)
  return channel_1_fault_;
}
void Gas::set_channel_1_fault(bool value) {
  set_has_channel_1_fault();
  channel_1_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.channel_1_fault)
}

// optional bool channel_2_fault = 14;
bool Gas::has_channel_2_fault() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Gas::set_has_channel_2_fault() {
  _has_bits_[0] |= 0x00002000u;
}
void Gas::clear_has_channel_2_fault() {
  _has_bits_[0] &= ~0x00002000u;
}
void Gas::clear_channel_2_fault() {
  channel_2_fault_ = false;
  clear_has_channel_2_fault();
}
bool Gas::channel_2_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.channel_2_fault)
  return channel_2_fault_;
}
void Gas::set_channel_2_fault(bool value) {
  set_has_channel_2_fault();
  channel_2_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.channel_2_fault)
}

// optional bool connector_fault = 15;
bool Gas::has_connector_fault() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Gas::set_has_connector_fault() {
  _has_bits_[0] |= 0x00004000u;
}
void Gas::clear_has_connector_fault() {
  _has_bits_[0] &= ~0x00004000u;
}
void Gas::clear_connector_fault() {
  connector_fault_ = false;
  clear_has_connector_fault();
}
bool Gas::connector_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.connector_fault)
  return connector_fault_;
}
void Gas::set_connector_fault(bool value) {
  set_has_connector_fault();
  connector_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.connector_fault)
}

// optional double accelerator_pedal = 16;
bool Gas::has_accelerator_pedal() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Gas::set_has_accelerator_pedal() {
  _has_bits_[0] |= 0x00008000u;
}
void Gas::clear_has_accelerator_pedal() {
  _has_bits_[0] &= ~0x00008000u;
}
void Gas::clear_accelerator_pedal() {
  accelerator_pedal_ = 0;
  clear_has_accelerator_pedal();
}
double Gas::accelerator_pedal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.accelerator_pedal)
  return accelerator_pedal_;
}
void Gas::set_accelerator_pedal(double value) {
  set_has_accelerator_pedal();
  accelerator_pedal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.accelerator_pedal)
}

// optional double accelerator_pedal_rate = 17;
bool Gas::has_accelerator_pedal_rate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Gas::set_has_accelerator_pedal_rate() {
  _has_bits_[0] |= 0x00010000u;
}
void Gas::clear_has_accelerator_pedal_rate() {
  _has_bits_[0] &= ~0x00010000u;
}
void Gas::clear_accelerator_pedal_rate() {
  accelerator_pedal_rate_ = 0;
  clear_has_accelerator_pedal_rate();
}
double Gas::accelerator_pedal_rate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.accelerator_pedal_rate)
  return accelerator_pedal_rate_;
}
void Gas::set_accelerator_pedal_rate(double value) {
  set_has_accelerator_pedal_rate();
  accelerator_pedal_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.accelerator_pedal_rate)
}

// optional int32 major_version = 18;
bool Gas::has_major_version() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Gas::set_has_major_version() {
  _has_bits_[0] |= 0x00020000u;
}
void Gas::clear_has_major_version() {
  _has_bits_[0] &= ~0x00020000u;
}
void Gas::clear_major_version() {
  major_version_ = 0;
  clear_has_major_version();
}
::google::protobuf::int32 Gas::major_version() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.major_version)
  return major_version_;
}
void Gas::set_major_version(::google::protobuf::int32 value) {
  set_has_major_version();
  major_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.major_version)
}

// optional int32 minor_version = 19;
bool Gas::has_minor_version() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Gas::set_has_minor_version() {
  _has_bits_[0] |= 0x00040000u;
}
void Gas::clear_has_minor_version() {
  _has_bits_[0] &= ~0x00040000u;
}
void Gas::clear_minor_version() {
  minor_version_ = 0;
  clear_has_minor_version();
}
::google::protobuf::int32 Gas::minor_version() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.minor_version)
  return minor_version_;
}
void Gas::set_minor_version(::google::protobuf::int32 value) {
  set_has_minor_version();
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.minor_version)
}

// optional int32 build_number = 20;
bool Gas::has_build_number() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Gas::set_has_build_number() {
  _has_bits_[0] |= 0x00080000u;
}
void Gas::clear_has_build_number() {
  _has_bits_[0] &= ~0x00080000u;
}
void Gas::clear_build_number() {
  build_number_ = 0;
  clear_has_build_number();
}
::google::protobuf::int32 Gas::build_number() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gas.build_number)
  return build_number_;
}
void Gas::set_build_number(::google::protobuf::int32 value) {
  set_has_build_number();
  build_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gas.build_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp::kIsEspAccErrorFieldNumber;
const int Esp::kIsEspOnFieldNumber;
const int Esp::kIsEspActiveFieldNumber;
const int Esp::kIsAbsErrorFieldNumber;
const int Esp::kIsAbsActiveFieldNumber;
const int Esp::kIsTcsvdcFailFieldNumber;
const int Esp::kIsAbsEnabledFieldNumber;
const int Esp::kIsStabActiveFieldNumber;
const int Esp::kIsStabEnabledFieldNumber;
const int Esp::kIsTracActiveFieldNumber;
const int Esp::kIsTracEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp::Esp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Esp)
}
Esp::Esp(const Esp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_esp_acc_error_, &from.is_esp_acc_error_,
    reinterpret_cast<char*>(&is_trac_enabled_) -
    reinterpret_cast<char*>(&is_esp_acc_error_) + sizeof(is_trac_enabled_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Esp)
}

void Esp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&is_esp_acc_error_, 0, reinterpret_cast<char*>(&is_trac_enabled_) -
    reinterpret_cast<char*>(&is_esp_acc_error_) + sizeof(is_trac_enabled_));
}

Esp::~Esp() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Esp)
  SharedDtor();
}

void Esp::SharedDtor() {
}

void Esp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esp::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esp& Esp::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esp* Esp::New(::google::protobuf::Arena* arena) const {
  Esp* n = new Esp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esp::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Esp)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&is_esp_acc_error_, 0, reinterpret_cast<char*>(&is_stab_active_) -
      reinterpret_cast<char*>(&is_esp_acc_error_) + sizeof(is_stab_active_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&is_stab_enabled_, 0, reinterpret_cast<char*>(&is_trac_enabled_) -
      reinterpret_cast<char*>(&is_stab_enabled_) + sizeof(is_trac_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Esp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_esp_acc_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_esp_acc_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_acc_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_esp_on = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_esp_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_esp_active = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_esp_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_abs_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_abs_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_abs_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_abs_active = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_abs_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_abs_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_tcsvdc_fail = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_is_tcsvdc_fail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tcsvdc_fail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_abs_enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_abs_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_abs_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_stab_active = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_is_stab_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stab_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_stab_enabled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_is_stab_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stab_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_trac_active = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_trac_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trac_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_trac_enabled = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_is_trac_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trac_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Esp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Esp)
  return false;
#undef DO_
}

void Esp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Esp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_esp_acc_error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_esp_acc_error(), output);
  }

  // optional bool is_esp_on = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_esp_on(), output);
  }

  // optional bool is_esp_active = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_esp_active(), output);
  }

  // optional bool is_abs_error = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_abs_error(), output);
  }

  // optional bool is_abs_active = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_abs_active(), output);
  }

  // optional bool is_tcsvdc_fail = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_tcsvdc_fail(), output);
  }

  // optional bool is_abs_enabled = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_abs_enabled(), output);
  }

  // optional bool is_stab_active = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_stab_active(), output);
  }

  // optional bool is_stab_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_stab_enabled(), output);
  }

  // optional bool is_trac_active = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_trac_active(), output);
  }

  // optional bool is_trac_enabled = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_trac_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Esp)
}

::google::protobuf::uint8* Esp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Esp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_esp_acc_error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_esp_acc_error(), target);
  }

  // optional bool is_esp_on = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_esp_on(), target);
  }

  // optional bool is_esp_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_esp_active(), target);
  }

  // optional bool is_abs_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_abs_error(), target);
  }

  // optional bool is_abs_active = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_abs_active(), target);
  }

  // optional bool is_tcsvdc_fail = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_tcsvdc_fail(), target);
  }

  // optional bool is_abs_enabled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_abs_enabled(), target);
  }

  // optional bool is_stab_active = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_stab_active(), target);
  }

  // optional bool is_stab_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_stab_enabled(), target);
  }

  // optional bool is_trac_active = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_trac_active(), target);
  }

  // optional bool is_trac_enabled = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_trac_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Esp)
  return target;
}

size_t Esp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Esp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool is_esp_acc_error = 1;
    if (has_is_esp_acc_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_esp_on = 2;
    if (has_is_esp_on()) {
      total_size += 1 + 1;
    }

    // optional bool is_esp_active = 3;
    if (has_is_esp_active()) {
      total_size += 1 + 1;
    }

    // optional bool is_abs_error = 4;
    if (has_is_abs_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_abs_active = 5;
    if (has_is_abs_active()) {
      total_size += 1 + 1;
    }

    // optional bool is_tcsvdc_fail = 6;
    if (has_is_tcsvdc_fail()) {
      total_size += 1 + 1;
    }

    // optional bool is_abs_enabled = 7;
    if (has_is_abs_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool is_stab_active = 8;
    if (has_is_stab_active()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool is_stab_enabled = 9;
    if (has_is_stab_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool is_trac_active = 10;
    if (has_is_trac_active()) {
      total_size += 1 + 1;
    }

    // optional bool is_trac_enabled = 11;
    if (has_is_trac_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Esp)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Esp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Esp)
    MergeFrom(*source);
  }
}

void Esp::MergeFrom(const Esp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Esp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      is_esp_acc_error_ = from.is_esp_acc_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_esp_on_ = from.is_esp_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_esp_active_ = from.is_esp_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_abs_error_ = from.is_abs_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_abs_active_ = from.is_abs_active_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_tcsvdc_fail_ = from.is_tcsvdc_fail_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_abs_enabled_ = from.is_abs_enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_stab_active_ = from.is_stab_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      is_stab_enabled_ = from.is_stab_enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_trac_active_ = from.is_trac_active_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_trac_enabled_ = from.is_trac_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Esp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp::CopyFrom(const Esp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Esp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp::IsInitialized() const {
  return true;
}

void Esp::Swap(Esp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp::InternalSwap(Esp* other) {
  std::swap(is_esp_acc_error_, other->is_esp_acc_error_);
  std::swap(is_esp_on_, other->is_esp_on_);
  std::swap(is_esp_active_, other->is_esp_active_);
  std::swap(is_abs_error_, other->is_abs_error_);
  std::swap(is_abs_active_, other->is_abs_active_);
  std::swap(is_tcsvdc_fail_, other->is_tcsvdc_fail_);
  std::swap(is_abs_enabled_, other->is_abs_enabled_);
  std::swap(is_stab_active_, other->is_stab_active_);
  std::swap(is_stab_enabled_, other->is_stab_enabled_);
  std::swap(is_trac_active_, other->is_trac_active_);
  std::swap(is_trac_enabled_, other->is_trac_enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esp::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esp

// optional bool is_esp_acc_error = 1;
bool Esp::has_is_esp_acc_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esp::set_has_is_esp_acc_error() {
  _has_bits_[0] |= 0x00000001u;
}
void Esp::clear_has_is_esp_acc_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esp::clear_is_esp_acc_error() {
  is_esp_acc_error_ = false;
  clear_has_is_esp_acc_error();
}
bool Esp::is_esp_acc_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_esp_acc_error)
  return is_esp_acc_error_;
}
void Esp::set_is_esp_acc_error(bool value) {
  set_has_is_esp_acc_error();
  is_esp_acc_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_esp_acc_error)
}

// optional bool is_esp_on = 2;
bool Esp::has_is_esp_on() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esp::set_has_is_esp_on() {
  _has_bits_[0] |= 0x00000002u;
}
void Esp::clear_has_is_esp_on() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esp::clear_is_esp_on() {
  is_esp_on_ = false;
  clear_has_is_esp_on();
}
bool Esp::is_esp_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_esp_on)
  return is_esp_on_;
}
void Esp::set_is_esp_on(bool value) {
  set_has_is_esp_on();
  is_esp_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_esp_on)
}

// optional bool is_esp_active = 3;
bool Esp::has_is_esp_active() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esp::set_has_is_esp_active() {
  _has_bits_[0] |= 0x00000004u;
}
void Esp::clear_has_is_esp_active() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esp::clear_is_esp_active() {
  is_esp_active_ = false;
  clear_has_is_esp_active();
}
bool Esp::is_esp_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_esp_active)
  return is_esp_active_;
}
void Esp::set_is_esp_active(bool value) {
  set_has_is_esp_active();
  is_esp_active_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_esp_active)
}

// optional bool is_abs_error = 4;
bool Esp::has_is_abs_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esp::set_has_is_abs_error() {
  _has_bits_[0] |= 0x00000008u;
}
void Esp::clear_has_is_abs_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esp::clear_is_abs_error() {
  is_abs_error_ = false;
  clear_has_is_abs_error();
}
bool Esp::is_abs_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_abs_error)
  return is_abs_error_;
}
void Esp::set_is_abs_error(bool value) {
  set_has_is_abs_error();
  is_abs_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_abs_error)
}

// optional bool is_abs_active = 5;
bool Esp::has_is_abs_active() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esp::set_has_is_abs_active() {
  _has_bits_[0] |= 0x00000010u;
}
void Esp::clear_has_is_abs_active() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esp::clear_is_abs_active() {
  is_abs_active_ = false;
  clear_has_is_abs_active();
}
bool Esp::is_abs_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_abs_active)
  return is_abs_active_;
}
void Esp::set_is_abs_active(bool value) {
  set_has_is_abs_active();
  is_abs_active_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_abs_active)
}

// optional bool is_tcsvdc_fail = 6;
bool Esp::has_is_tcsvdc_fail() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esp::set_has_is_tcsvdc_fail() {
  _has_bits_[0] |= 0x00000020u;
}
void Esp::clear_has_is_tcsvdc_fail() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esp::clear_is_tcsvdc_fail() {
  is_tcsvdc_fail_ = false;
  clear_has_is_tcsvdc_fail();
}
bool Esp::is_tcsvdc_fail() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_tcsvdc_fail)
  return is_tcsvdc_fail_;
}
void Esp::set_is_tcsvdc_fail(bool value) {
  set_has_is_tcsvdc_fail();
  is_tcsvdc_fail_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_tcsvdc_fail)
}

// optional bool is_abs_enabled = 7;
bool Esp::has_is_abs_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esp::set_has_is_abs_enabled() {
  _has_bits_[0] |= 0x00000040u;
}
void Esp::clear_has_is_abs_enabled() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esp::clear_is_abs_enabled() {
  is_abs_enabled_ = false;
  clear_has_is_abs_enabled();
}
bool Esp::is_abs_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_abs_enabled)
  return is_abs_enabled_;
}
void Esp::set_is_abs_enabled(bool value) {
  set_has_is_abs_enabled();
  is_abs_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_abs_enabled)
}

// optional bool is_stab_active = 8;
bool Esp::has_is_stab_active() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esp::set_has_is_stab_active() {
  _has_bits_[0] |= 0x00000080u;
}
void Esp::clear_has_is_stab_active() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esp::clear_is_stab_active() {
  is_stab_active_ = false;
  clear_has_is_stab_active();
}
bool Esp::is_stab_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_stab_active)
  return is_stab_active_;
}
void Esp::set_is_stab_active(bool value) {
  set_has_is_stab_active();
  is_stab_active_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_stab_active)
}

// optional bool is_stab_enabled = 9;
bool Esp::has_is_stab_enabled() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Esp::set_has_is_stab_enabled() {
  _has_bits_[0] |= 0x00000100u;
}
void Esp::clear_has_is_stab_enabled() {
  _has_bits_[0] &= ~0x00000100u;
}
void Esp::clear_is_stab_enabled() {
  is_stab_enabled_ = false;
  clear_has_is_stab_enabled();
}
bool Esp::is_stab_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_stab_enabled)
  return is_stab_enabled_;
}
void Esp::set_is_stab_enabled(bool value) {
  set_has_is_stab_enabled();
  is_stab_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_stab_enabled)
}

// optional bool is_trac_active = 10;
bool Esp::has_is_trac_active() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Esp::set_has_is_trac_active() {
  _has_bits_[0] |= 0x00000200u;
}
void Esp::clear_has_is_trac_active() {
  _has_bits_[0] &= ~0x00000200u;
}
void Esp::clear_is_trac_active() {
  is_trac_active_ = false;
  clear_has_is_trac_active();
}
bool Esp::is_trac_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_trac_active)
  return is_trac_active_;
}
void Esp::set_is_trac_active(bool value) {
  set_has_is_trac_active();
  is_trac_active_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_trac_active)
}

// optional bool is_trac_enabled = 11;
bool Esp::has_is_trac_enabled() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Esp::set_has_is_trac_enabled() {
  _has_bits_[0] |= 0x00000400u;
}
void Esp::clear_has_is_trac_enabled() {
  _has_bits_[0] &= ~0x00000400u;
}
void Esp::clear_is_trac_enabled() {
  is_trac_enabled_ = false;
  clear_has_is_trac_enabled();
}
bool Esp::is_trac_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Esp.is_trac_enabled)
  return is_trac_enabled_;
}
void Esp::set_is_trac_enabled(bool value) {
  set_has_is_trac_enabled();
  is_trac_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Esp.is_trac_enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ems::kIsEngineAccAvailableFieldNumber;
const int Ems::kIsEngineAccErrorFieldNumber;
const int Ems::kEngineStateFieldNumber;
const int Ems::kMaxEngineTorqPercentFieldNumber;
const int Ems::kMinEngineTorqPercentFieldNumber;
const int Ems::kBaseEngineTorqConstantFieldNumber;
const int Ems::kIsEngineSpeedErrorFieldNumber;
const int Ems::kEngineSpeedFieldNumber;
const int Ems::kEngineTorqueFieldNumber;
const int Ems::kIsOverEngineTorqueFieldNumber;
const int Ems::kEngineRpmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ems::Ems()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Ems)
}
Ems::Ems(const Ems& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_engine_torq_percent_, &from.max_engine_torq_percent_,
    reinterpret_cast<char*>(&engine_rpm_) -
    reinterpret_cast<char*>(&max_engine_torq_percent_) + sizeof(engine_rpm_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ems)
}

void Ems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&max_engine_torq_percent_, 0, reinterpret_cast<char*>(&engine_rpm_) -
    reinterpret_cast<char*>(&max_engine_torq_percent_) + sizeof(engine_rpm_));
}

Ems::~Ems() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ems)
  SharedDtor();
}

void Ems::SharedDtor() {
}

void Ems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ems::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ems& Ems::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ems* Ems::New(::google::protobuf::Arena* arena) const {
  Ems* n = new Ems;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ems::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ems)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&max_engine_torq_percent_, 0, reinterpret_cast<char*>(&base_engine_torq_constant_) -
      reinterpret_cast<char*>(&max_engine_torq_percent_) + sizeof(base_engine_torq_constant_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&engine_torque_, 0, reinterpret_cast<char*>(&engine_rpm_) -
      reinterpret_cast<char*>(&engine_torque_) + sizeof(engine_rpm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Ems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_engine_acc_available = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_engine_acc_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_engine_acc_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_engine_acc_error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_engine_acc_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_engine_acc_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Ems.Type engine_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Ems_Type_IsValid(value)) {
            set_engine_state(static_cast< ::apollo::canbus::Ems_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_engine_torq_percent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_max_engine_torq_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_engine_torq_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_engine_torq_percent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_min_engine_torq_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_engine_torq_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 base_engine_torq_constant = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_base_engine_torq_constant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_engine_torq_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_engine_speed_error = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_engine_speed_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_engine_speed_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double engine_speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_engine_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &engine_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 engine_torque = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_engine_torque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &engine_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_over_engine_torque = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_over_engine_torque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_over_engine_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double engine_rpm = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_engine_rpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &engine_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Ems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Ems)
  return false;
#undef DO_
}

void Ems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Ems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_engine_acc_available = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_engine_acc_available(), output);
  }

  // optional bool is_engine_acc_error = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_engine_acc_error(), output);
  }

  // optional .apollo.canbus.Ems.Type engine_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->engine_state(), output);
  }

  // optional double max_engine_torq_percent = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_engine_torq_percent(), output);
  }

  // optional double min_engine_torq_percent = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_engine_torq_percent(), output);
  }

  // optional int32 base_engine_torq_constant = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->base_engine_torq_constant(), output);
  }

  // optional bool is_engine_speed_error = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_engine_speed_error(), output);
  }

  // optional double engine_speed = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->engine_speed(), output);
  }

  // optional int32 engine_torque = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->engine_torque(), output);
  }

  // optional bool is_over_engine_torque = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_over_engine_torque(), output);
  }

  // optional double engine_rpm = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->engine_rpm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Ems)
}

::google::protobuf::uint8* Ems::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_engine_acc_available = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_engine_acc_available(), target);
  }

  // optional bool is_engine_acc_error = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_engine_acc_error(), target);
  }

  // optional .apollo.canbus.Ems.Type engine_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->engine_state(), target);
  }

  // optional double max_engine_torq_percent = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_engine_torq_percent(), target);
  }

  // optional double min_engine_torq_percent = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_engine_torq_percent(), target);
  }

  // optional int32 base_engine_torq_constant = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->base_engine_torq_constant(), target);
  }

  // optional bool is_engine_speed_error = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_engine_speed_error(), target);
  }

  // optional double engine_speed = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->engine_speed(), target);
  }

  // optional int32 engine_torque = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->engine_torque(), target);
  }

  // optional bool is_over_engine_torque = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_over_engine_torque(), target);
  }

  // optional double engine_rpm = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->engine_rpm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ems)
  return target;
}

size_t Ems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ems)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double max_engine_torq_percent = 4;
    if (has_max_engine_torq_percent()) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Ems.Type engine_state = 3;
    if (has_engine_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine_state());
    }

    // optional bool is_engine_acc_available = 1;
    if (has_is_engine_acc_available()) {
      total_size += 1 + 1;
    }

    // optional bool is_engine_acc_error = 2;
    if (has_is_engine_acc_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_engine_speed_error = 7;
    if (has_is_engine_speed_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_over_engine_torque = 10;
    if (has_is_over_engine_torque()) {
      total_size += 1 + 1;
    }

    // optional double min_engine_torq_percent = 5;
    if (has_min_engine_torq_percent()) {
      total_size += 1 + 8;
    }

    // optional int32 base_engine_torq_constant = 6;
    if (has_base_engine_torq_constant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_engine_torq_constant());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 engine_torque = 9;
    if (has_engine_torque()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->engine_torque());
    }

    // optional double engine_speed = 8;
    if (has_engine_speed()) {
      total_size += 1 + 8;
    }

    // optional double engine_rpm = 11;
    if (has_engine_rpm()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ems::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Ems)
  GOOGLE_DCHECK_NE(&from, this);
  const Ems* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ems>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Ems)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Ems)
    MergeFrom(*source);
  }
}

void Ems::MergeFrom(const Ems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      max_engine_torq_percent_ = from.max_engine_torq_percent_;
    }
    if (cached_has_bits & 0x00000002u) {
      engine_state_ = from.engine_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_engine_acc_available_ = from.is_engine_acc_available_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_engine_acc_error_ = from.is_engine_acc_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_engine_speed_error_ = from.is_engine_speed_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_over_engine_torque_ = from.is_over_engine_torque_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_engine_torq_percent_ = from.min_engine_torq_percent_;
    }
    if (cached_has_bits & 0x00000080u) {
      base_engine_torq_constant_ = from.base_engine_torq_constant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      engine_torque_ = from.engine_torque_;
    }
    if (cached_has_bits & 0x00000200u) {
      engine_speed_ = from.engine_speed_;
    }
    if (cached_has_bits & 0x00000400u) {
      engine_rpm_ = from.engine_rpm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ems::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Ems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ems::CopyFrom(const Ems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ems::IsInitialized() const {
  return true;
}

void Ems::Swap(Ems* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ems::InternalSwap(Ems* other) {
  std::swap(max_engine_torq_percent_, other->max_engine_torq_percent_);
  std::swap(engine_state_, other->engine_state_);
  std::swap(is_engine_acc_available_, other->is_engine_acc_available_);
  std::swap(is_engine_acc_error_, other->is_engine_acc_error_);
  std::swap(is_engine_speed_error_, other->is_engine_speed_error_);
  std::swap(is_over_engine_torque_, other->is_over_engine_torque_);
  std::swap(min_engine_torq_percent_, other->min_engine_torq_percent_);
  std::swap(base_engine_torq_constant_, other->base_engine_torq_constant_);
  std::swap(engine_torque_, other->engine_torque_);
  std::swap(engine_speed_, other->engine_speed_);
  std::swap(engine_rpm_, other->engine_rpm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ems::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ems

// optional bool is_engine_acc_available = 1;
bool Ems::has_is_engine_acc_available() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ems::set_has_is_engine_acc_available() {
  _has_bits_[0] |= 0x00000004u;
}
void Ems::clear_has_is_engine_acc_available() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ems::clear_is_engine_acc_available() {
  is_engine_acc_available_ = false;
  clear_has_is_engine_acc_available();
}
bool Ems::is_engine_acc_available() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.is_engine_acc_available)
  return is_engine_acc_available_;
}
void Ems::set_is_engine_acc_available(bool value) {
  set_has_is_engine_acc_available();
  is_engine_acc_available_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.is_engine_acc_available)
}

// optional bool is_engine_acc_error = 2;
bool Ems::has_is_engine_acc_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ems::set_has_is_engine_acc_error() {
  _has_bits_[0] |= 0x00000008u;
}
void Ems::clear_has_is_engine_acc_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ems::clear_is_engine_acc_error() {
  is_engine_acc_error_ = false;
  clear_has_is_engine_acc_error();
}
bool Ems::is_engine_acc_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.is_engine_acc_error)
  return is_engine_acc_error_;
}
void Ems::set_is_engine_acc_error(bool value) {
  set_has_is_engine_acc_error();
  is_engine_acc_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.is_engine_acc_error)
}

// optional .apollo.canbus.Ems.Type engine_state = 3;
bool Ems::has_engine_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ems::set_has_engine_state() {
  _has_bits_[0] |= 0x00000002u;
}
void Ems::clear_has_engine_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ems::clear_engine_state() {
  engine_state_ = 0;
  clear_has_engine_state();
}
::apollo::canbus::Ems_Type Ems::engine_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.engine_state)
  return static_cast< ::apollo::canbus::Ems_Type >(engine_state_);
}
void Ems::set_engine_state(::apollo::canbus::Ems_Type value) {
  assert(::apollo::canbus::Ems_Type_IsValid(value));
  set_has_engine_state();
  engine_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.engine_state)
}

// optional double max_engine_torq_percent = 4;
bool Ems::has_max_engine_torq_percent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ems::set_has_max_engine_torq_percent() {
  _has_bits_[0] |= 0x00000001u;
}
void Ems::clear_has_max_engine_torq_percent() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ems::clear_max_engine_torq_percent() {
  max_engine_torq_percent_ = 0;
  clear_has_max_engine_torq_percent();
}
double Ems::max_engine_torq_percent() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.max_engine_torq_percent)
  return max_engine_torq_percent_;
}
void Ems::set_max_engine_torq_percent(double value) {
  set_has_max_engine_torq_percent();
  max_engine_torq_percent_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.max_engine_torq_percent)
}

// optional double min_engine_torq_percent = 5;
bool Ems::has_min_engine_torq_percent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Ems::set_has_min_engine_torq_percent() {
  _has_bits_[0] |= 0x00000040u;
}
void Ems::clear_has_min_engine_torq_percent() {
  _has_bits_[0] &= ~0x00000040u;
}
void Ems::clear_min_engine_torq_percent() {
  min_engine_torq_percent_ = 0;
  clear_has_min_engine_torq_percent();
}
double Ems::min_engine_torq_percent() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.min_engine_torq_percent)
  return min_engine_torq_percent_;
}
void Ems::set_min_engine_torq_percent(double value) {
  set_has_min_engine_torq_percent();
  min_engine_torq_percent_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.min_engine_torq_percent)
}

// optional int32 base_engine_torq_constant = 6;
bool Ems::has_base_engine_torq_constant() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Ems::set_has_base_engine_torq_constant() {
  _has_bits_[0] |= 0x00000080u;
}
void Ems::clear_has_base_engine_torq_constant() {
  _has_bits_[0] &= ~0x00000080u;
}
void Ems::clear_base_engine_torq_constant() {
  base_engine_torq_constant_ = 0;
  clear_has_base_engine_torq_constant();
}
::google::protobuf::int32 Ems::base_engine_torq_constant() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.base_engine_torq_constant)
  return base_engine_torq_constant_;
}
void Ems::set_base_engine_torq_constant(::google::protobuf::int32 value) {
  set_has_base_engine_torq_constant();
  base_engine_torq_constant_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.base_engine_torq_constant)
}

// optional bool is_engine_speed_error = 7;
bool Ems::has_is_engine_speed_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ems::set_has_is_engine_speed_error() {
  _has_bits_[0] |= 0x00000010u;
}
void Ems::clear_has_is_engine_speed_error() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ems::clear_is_engine_speed_error() {
  is_engine_speed_error_ = false;
  clear_has_is_engine_speed_error();
}
bool Ems::is_engine_speed_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.is_engine_speed_error)
  return is_engine_speed_error_;
}
void Ems::set_is_engine_speed_error(bool value) {
  set_has_is_engine_speed_error();
  is_engine_speed_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.is_engine_speed_error)
}

// optional double engine_speed = 8;
bool Ems::has_engine_speed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Ems::set_has_engine_speed() {
  _has_bits_[0] |= 0x00000200u;
}
void Ems::clear_has_engine_speed() {
  _has_bits_[0] &= ~0x00000200u;
}
void Ems::clear_engine_speed() {
  engine_speed_ = 0;
  clear_has_engine_speed();
}
double Ems::engine_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.engine_speed)
  return engine_speed_;
}
void Ems::set_engine_speed(double value) {
  set_has_engine_speed();
  engine_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.engine_speed)
}

// optional int32 engine_torque = 9;
bool Ems::has_engine_torque() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Ems::set_has_engine_torque() {
  _has_bits_[0] |= 0x00000100u;
}
void Ems::clear_has_engine_torque() {
  _has_bits_[0] &= ~0x00000100u;
}
void Ems::clear_engine_torque() {
  engine_torque_ = 0;
  clear_has_engine_torque();
}
::google::protobuf::int32 Ems::engine_torque() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.engine_torque)
  return engine_torque_;
}
void Ems::set_engine_torque(::google::protobuf::int32 value) {
  set_has_engine_torque();
  engine_torque_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.engine_torque)
}

// optional bool is_over_engine_torque = 10;
bool Ems::has_is_over_engine_torque() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Ems::set_has_is_over_engine_torque() {
  _has_bits_[0] |= 0x00000020u;
}
void Ems::clear_has_is_over_engine_torque() {
  _has_bits_[0] &= ~0x00000020u;
}
void Ems::clear_is_over_engine_torque() {
  is_over_engine_torque_ = false;
  clear_has_is_over_engine_torque();
}
bool Ems::is_over_engine_torque() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.is_over_engine_torque)
  return is_over_engine_torque_;
}
void Ems::set_is_over_engine_torque(bool value) {
  set_has_is_over_engine_torque();
  is_over_engine_torque_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.is_over_engine_torque)
}

// optional double engine_rpm = 11;
bool Ems::has_engine_rpm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Ems::set_has_engine_rpm() {
  _has_bits_[0] |= 0x00000400u;
}
void Ems::clear_has_engine_rpm() {
  _has_bits_[0] &= ~0x00000400u;
}
void Ems::clear_engine_rpm() {
  engine_rpm_ = 0;
  clear_has_engine_rpm();
}
double Ems::engine_rpm() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ems.engine_rpm)
  return engine_rpm_;
}
void Ems::set_engine_rpm(double value) {
  set_has_engine_rpm();
  engine_rpm_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Ems.engine_rpm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gear::kIsShiftPositionValidFieldNumber;
const int Gear::kGearStateFieldNumber;
const int Gear::kDriverOverrideFieldNumber;
const int Gear::kGearCmdFieldNumber;
const int Gear::kCanbusFaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gear::Gear()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gear)
}
Gear::Gear(const Gear& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gear_state_, &from.gear_state_,
    reinterpret_cast<char*>(&gear_cmd_) -
    reinterpret_cast<char*>(&gear_state_) + sizeof(gear_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gear)
}

void Gear::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gear_state_, 0, reinterpret_cast<char*>(&gear_cmd_) -
    reinterpret_cast<char*>(&gear_state_) + sizeof(gear_cmd_));
}

Gear::~Gear() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gear)
  SharedDtor();
}

void Gear::SharedDtor() {
}

void Gear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gear::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gear& Gear::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gear* Gear::New(::google::protobuf::Arena* arena) const {
  Gear* n = new Gear;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gear::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gear)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&gear_state_, 0, reinterpret_cast<char*>(&gear_cmd_) -
      reinterpret_cast<char*>(&gear_state_) + sizeof(gear_cmd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Gear)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_shift_position_valid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_shift_position_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_shift_position_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_state(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_override = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_driver_override();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_cmd(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool canbus_fault = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_canbus_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbus_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Gear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Gear)
  return false;
#undef DO_
}

void Gear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Gear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_shift_position_valid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_shift_position_valid(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gear_state(), output);
  }

  // optional bool driver_override = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->driver_override(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gear_cmd(), output);
  }

  // optional bool canbus_fault = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->canbus_fault(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Gear)
}

::google::protobuf::uint8* Gear::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_shift_position_valid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_shift_position_valid(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gear_state(), target);
  }

  // optional bool driver_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->driver_override(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gear_cmd(), target);
  }

  // optional bool canbus_fault = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->canbus_fault(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gear)
  return target;
}

size_t Gear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gear)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
    if (has_gear_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_state());
    }

    // optional bool is_shift_position_valid = 1;
    if (has_is_shift_position_valid()) {
      total_size += 1 + 1;
    }

    // optional bool driver_override = 3;
    if (has_driver_override()) {
      total_size += 1 + 1;
    }

    // optional bool canbus_fault = 5;
    if (has_canbus_fault()) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
    if (has_gear_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_cmd());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gear::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gear)
  GOOGLE_DCHECK_NE(&from, this);
  const Gear* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gear>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gear)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gear)
    MergeFrom(*source);
  }
}

void Gear::MergeFrom(const Gear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      gear_state_ = from.gear_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_shift_position_valid_ = from.is_shift_position_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      driver_override_ = from.driver_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      canbus_fault_ = from.canbus_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      gear_cmd_ = from.gear_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gear::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gear::CopyFrom(const Gear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear::IsInitialized() const {
  return true;
}

void Gear::Swap(Gear* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gear::InternalSwap(Gear* other) {
  std::swap(gear_state_, other->gear_state_);
  std::swap(is_shift_position_valid_, other->is_shift_position_valid_);
  std::swap(driver_override_, other->driver_override_);
  std::swap(canbus_fault_, other->canbus_fault_);
  std::swap(gear_cmd_, other->gear_cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gear::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gear

// optional bool is_shift_position_valid = 1;
bool Gear::has_is_shift_position_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gear::set_has_is_shift_position_valid() {
  _has_bits_[0] |= 0x00000002u;
}
void Gear::clear_has_is_shift_position_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gear::clear_is_shift_position_valid() {
  is_shift_position_valid_ = false;
  clear_has_is_shift_position_valid();
}
bool Gear::is_shift_position_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear.is_shift_position_valid)
  return is_shift_position_valid_;
}
void Gear::set_is_shift_position_valid(bool value) {
  set_has_is_shift_position_valid();
  is_shift_position_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear.is_shift_position_valid)
}

// optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
bool Gear::has_gear_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gear::set_has_gear_state() {
  _has_bits_[0] |= 0x00000001u;
}
void Gear::clear_has_gear_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gear::clear_gear_state() {
  gear_state_ = 0;
  clear_has_gear_state();
}
::apollo::canbus::Chassis_GearPosition Gear::gear_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear.gear_state)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_state_);
}
void Gear::set_gear_state(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_state();
  gear_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear.gear_state)
}

// optional bool driver_override = 3;
bool Gear::has_driver_override() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gear::set_has_driver_override() {
  _has_bits_[0] |= 0x00000004u;
}
void Gear::clear_has_driver_override() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gear::clear_driver_override() {
  driver_override_ = false;
  clear_has_driver_override();
}
bool Gear::driver_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear.driver_override)
  return driver_override_;
}
void Gear::set_driver_override(bool value) {
  set_has_driver_override();
  driver_override_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear.driver_override)
}

// optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
bool Gear::has_gear_cmd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gear::set_has_gear_cmd() {
  _has_bits_[0] |= 0x00000010u;
}
void Gear::clear_has_gear_cmd() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gear::clear_gear_cmd() {
  gear_cmd_ = 0;
  clear_has_gear_cmd();
}
::apollo::canbus::Chassis_GearPosition Gear::gear_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear.gear_cmd)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_cmd_);
}
void Gear::set_gear_cmd(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_cmd();
  gear_cmd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear.gear_cmd)
}

// optional bool canbus_fault = 5;
bool Gear::has_canbus_fault() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gear::set_has_canbus_fault() {
  _has_bits_[0] |= 0x00000008u;
}
void Gear::clear_has_canbus_fault() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gear::clear_canbus_fault() {
  canbus_fault_ = false;
  clear_has_canbus_fault();
}
bool Gear::canbus_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear.canbus_fault)
  return canbus_fault_;
}
void Gear::set_canbus_fault(bool value) {
  set_has_canbus_fault();
  canbus_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear.canbus_fault)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Safety::kIsDriverCarDoorCloseFieldNumber;
const int Safety::kIsDriverBuckledFieldNumber;
const int Safety::kEmergencyButtonFieldNumber;
const int Safety::kHasErrorFieldNumber;
const int Safety::kIsMotorInvertorFaultFieldNumber;
const int Safety::kIsSystemFaultFieldNumber;
const int Safety::kIsPowerBatteryFaultFieldNumber;
const int Safety::kIsMotorInvertorOverTemperatureFieldNumber;
const int Safety::kIsSmallBatteryChargeDischargeFaultFieldNumber;
const int Safety::kDrivingModeFieldNumber;
const int Safety::kIsPassengerDoorOpenFieldNumber;
const int Safety::kIsRearleftDoorOpenFieldNumber;
const int Safety::kIsRearrightDoorOpenFieldNumber;
const int Safety::kIsHoodOpenFieldNumber;
const int Safety::kIsTrunkOpenFieldNumber;
const int Safety::kIsPassengerDetectedFieldNumber;
const int Safety::kIsPassengerAirbagEnabledFieldNumber;
const int Safety::kIsPassengerBuckledFieldNumber;
const int Safety::kFrontLeftTirePressFieldNumber;
const int Safety::kFrontRightTirePressFieldNumber;
const int Safety::kRearLeftTirePressFieldNumber;
const int Safety::kRearRightTirePressFieldNumber;
const int Safety::kCarDrivingModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Safety::Safety()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Safety)
}
Safety::Safety(const Safety& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&emergency_button_, &from.emergency_button_,
    reinterpret_cast<char*>(&car_driving_mode_) -
    reinterpret_cast<char*>(&emergency_button_) + sizeof(car_driving_mode_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Safety)
}

void Safety::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&emergency_button_, 0, reinterpret_cast<char*>(&car_driving_mode_) -
    reinterpret_cast<char*>(&emergency_button_) + sizeof(car_driving_mode_));
}

Safety::~Safety() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Safety)
  SharedDtor();
}

void Safety::SharedDtor() {
}

void Safety::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Safety::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Safety& Safety::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

Safety* Safety::New(::google::protobuf::Arena* arena) const {
  Safety* n = new Safety;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Safety::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Safety)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&emergency_button_, 0, reinterpret_cast<char*>(&is_motor_invertor_over_temperature_) -
      reinterpret_cast<char*>(&emergency_button_) + sizeof(is_motor_invertor_over_temperature_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&is_small_battery_charge_discharge_fault_, 0, reinterpret_cast<char*>(&is_passenger_detected_) -
      reinterpret_cast<char*>(&is_small_battery_charge_discharge_fault_) + sizeof(is_passenger_detected_));
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    ::memset(&is_passenger_airbag_enabled_, 0, reinterpret_cast<char*>(&car_driving_mode_) -
      reinterpret_cast<char*>(&is_passenger_airbag_enabled_) + sizeof(car_driving_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Safety::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Safety)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_driver_car_door_close = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_driver_car_door_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_driver_car_door_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_driver_buckled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_driver_buckled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_driver_buckled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 emergency_button = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_emergency_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emergency_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_error = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_has_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_motor_invertor_fault = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_motor_invertor_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_motor_invertor_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_system_fault = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_is_system_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_system_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_power_battery_fault = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_power_battery_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_power_battery_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_motor_invertor_over_temperature = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_is_motor_invertor_over_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_motor_invertor_over_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_small_battery_charge_discharge_fault = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_is_small_battery_charge_discharge_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_small_battery_charge_discharge_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 driving_mode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_driving_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &driving_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_passenger_door_open = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_is_passenger_door_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_door_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rearleft_door_open = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_is_rearleft_door_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rearleft_door_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rearright_door_open = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_is_rearright_door_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rearright_door_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_hood_open = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_is_hood_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hood_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_trunk_open = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_is_trunk_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trunk_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_passenger_detected = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_is_passenger_detected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_passenger_airbag_enabled = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_is_passenger_airbag_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_airbag_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_passenger_buckled = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_is_passenger_buckled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_buckled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 front_left_tire_press = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_front_left_tire_press();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_left_tire_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 front_right_tire_press = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_front_right_tire_press();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_right_tire_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rear_left_tire_press = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_rear_left_tire_press();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rear_left_tire_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rear_right_tire_press = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_rear_right_tire_press();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rear_right_tire_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_car_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Safety)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Safety)
  return false;
#undef DO_
}

void Safety::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Safety)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_driver_car_door_close = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_driver_car_door_close(), output);
  }

  // optional bool is_driver_buckled = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_driver_buckled(), output);
  }

  // optional int32 emergency_button = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->emergency_button(), output);
  }

  // optional bool has_error = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_error(), output);
  }

  // optional bool is_motor_invertor_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_motor_invertor_fault(), output);
  }

  // optional bool is_system_fault = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_system_fault(), output);
  }

  // optional bool is_power_battery_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_power_battery_fault(), output);
  }

  // optional bool is_motor_invertor_over_temperature = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_motor_invertor_over_temperature(), output);
  }

  // optional bool is_small_battery_charge_discharge_fault = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_small_battery_charge_discharge_fault(), output);
  }

  // optional int32 driving_mode = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->driving_mode(), output);
  }

  // optional bool is_passenger_door_open = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_passenger_door_open(), output);
  }

  // optional bool is_rearleft_door_open = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_rearleft_door_open(), output);
  }

  // optional bool is_rearright_door_open = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_rearright_door_open(), output);
  }

  // optional bool is_hood_open = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_hood_open(), output);
  }

  // optional bool is_trunk_open = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_trunk_open(), output);
  }

  // optional bool is_passenger_detected = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_passenger_detected(), output);
  }

  // optional bool is_passenger_airbag_enabled = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_passenger_airbag_enabled(), output);
  }

  // optional bool is_passenger_buckled = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_passenger_buckled(), output);
  }

  // optional int32 front_left_tire_press = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->front_left_tire_press(), output);
  }

  // optional int32 front_right_tire_press = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->front_right_tire_press(), output);
  }

  // optional int32 rear_left_tire_press = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->rear_left_tire_press(), output);
  }

  // optional int32 rear_right_tire_press = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->rear_right_tire_press(), output);
  }

  // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->car_driving_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Safety)
}

::google::protobuf::uint8* Safety::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Safety)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_driver_car_door_close = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_driver_car_door_close(), target);
  }

  // optional bool is_driver_buckled = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_driver_buckled(), target);
  }

  // optional int32 emergency_button = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->emergency_button(), target);
  }

  // optional bool has_error = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_error(), target);
  }

  // optional bool is_motor_invertor_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_motor_invertor_fault(), target);
  }

  // optional bool is_system_fault = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_system_fault(), target);
  }

  // optional bool is_power_battery_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_power_battery_fault(), target);
  }

  // optional bool is_motor_invertor_over_temperature = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_motor_invertor_over_temperature(), target);
  }

  // optional bool is_small_battery_charge_discharge_fault = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_small_battery_charge_discharge_fault(), target);
  }

  // optional int32 driving_mode = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->driving_mode(), target);
  }

  // optional bool is_passenger_door_open = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_passenger_door_open(), target);
  }

  // optional bool is_rearleft_door_open = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_rearleft_door_open(), target);
  }

  // optional bool is_rearright_door_open = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_rearright_door_open(), target);
  }

  // optional bool is_hood_open = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_hood_open(), target);
  }

  // optional bool is_trunk_open = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_trunk_open(), target);
  }

  // optional bool is_passenger_detected = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_passenger_detected(), target);
  }

  // optional bool is_passenger_airbag_enabled = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_passenger_airbag_enabled(), target);
  }

  // optional bool is_passenger_buckled = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_passenger_buckled(), target);
  }

  // optional int32 front_left_tire_press = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->front_left_tire_press(), target);
  }

  // optional int32 front_right_tire_press = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->front_right_tire_press(), target);
  }

  // optional int32 rear_left_tire_press = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->rear_left_tire_press(), target);
  }

  // optional int32 rear_right_tire_press = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->rear_right_tire_press(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->car_driving_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Safety)
  return target;
}

size_t Safety::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Safety)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 emergency_button = 3;
    if (has_emergency_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emergency_button());
    }

    // optional bool is_driver_car_door_close = 1;
    if (has_is_driver_car_door_close()) {
      total_size += 1 + 1;
    }

    // optional bool is_driver_buckled = 2;
    if (has_is_driver_buckled()) {
      total_size += 1 + 1;
    }

    // optional bool has_error = 4 [default = false];
    if (has_has_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_motor_invertor_fault = 5;
    if (has_is_motor_invertor_fault()) {
      total_size += 1 + 1;
    }

    // optional bool is_system_fault = 6;
    if (has_is_system_fault()) {
      total_size += 1 + 1;
    }

    // optional bool is_power_battery_fault = 7;
    if (has_is_power_battery_fault()) {
      total_size += 1 + 1;
    }

    // optional bool is_motor_invertor_over_temperature = 8;
    if (has_is_motor_invertor_over_temperature()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool is_small_battery_charge_discharge_fault = 9;
    if (has_is_small_battery_charge_discharge_fault()) {
      total_size += 1 + 1;
    }

    // optional int32 driving_mode = 10;
    if (has_driving_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->driving_mode());
    }

    // optional bool is_passenger_door_open = 11;
    if (has_is_passenger_door_open()) {
      total_size += 1 + 1;
    }

    // optional bool is_rearleft_door_open = 12;
    if (has_is_rearleft_door_open()) {
      total_size += 1 + 1;
    }

    // optional bool is_rearright_door_open = 13;
    if (has_is_rearright_door_open()) {
      total_size += 1 + 1;
    }

    // optional bool is_hood_open = 14;
    if (has_is_hood_open()) {
      total_size += 1 + 1;
    }

    // optional bool is_trunk_open = 15;
    if (has_is_trunk_open()) {
      total_size += 1 + 1;
    }

    // optional bool is_passenger_detected = 16;
    if (has_is_passenger_detected()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional bool is_passenger_airbag_enabled = 17;
    if (has_is_passenger_airbag_enabled()) {
      total_size += 2 + 1;
    }

    // optional bool is_passenger_buckled = 18;
    if (has_is_passenger_buckled()) {
      total_size += 2 + 1;
    }

    // optional int32 front_left_tire_press = 19;
    if (has_front_left_tire_press()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front_left_tire_press());
    }

    // optional int32 front_right_tire_press = 20;
    if (has_front_right_tire_press()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front_right_tire_press());
    }

    // optional int32 rear_left_tire_press = 21;
    if (has_rear_left_tire_press()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rear_left_tire_press());
    }

    // optional int32 rear_right_tire_press = 22;
    if (has_rear_right_tire_press()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rear_right_tire_press());
    }

    // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
    if (has_car_driving_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->car_driving_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Safety::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Safety)
  GOOGLE_DCHECK_NE(&from, this);
  const Safety* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Safety>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Safety)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Safety)
    MergeFrom(*source);
  }
}

void Safety::MergeFrom(const Safety& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Safety)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      emergency_button_ = from.emergency_button_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_driver_car_door_close_ = from.is_driver_car_door_close_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_driver_buckled_ = from.is_driver_buckled_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_error_ = from.has_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_motor_invertor_fault_ = from.is_motor_invertor_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_system_fault_ = from.is_system_fault_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_power_battery_fault_ = from.is_power_battery_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_motor_invertor_over_temperature_ = from.is_motor_invertor_over_temperature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      is_small_battery_charge_discharge_fault_ = from.is_small_battery_charge_discharge_fault_;
    }
    if (cached_has_bits & 0x00000200u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_passenger_door_open_ = from.is_passenger_door_open_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_rearleft_door_open_ = from.is_rearleft_door_open_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_rearright_door_open_ = from.is_rearright_door_open_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_hood_open_ = from.is_hood_open_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_trunk_open_ = from.is_trunk_open_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_passenger_detected_ = from.is_passenger_detected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      is_passenger_airbag_enabled_ = from.is_passenger_airbag_enabled_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_passenger_buckled_ = from.is_passenger_buckled_;
    }
    if (cached_has_bits & 0x00040000u) {
      front_left_tire_press_ = from.front_left_tire_press_;
    }
    if (cached_has_bits & 0x00080000u) {
      front_right_tire_press_ = from.front_right_tire_press_;
    }
    if (cached_has_bits & 0x00100000u) {
      rear_left_tire_press_ = from.rear_left_tire_press_;
    }
    if (cached_has_bits & 0x00200000u) {
      rear_right_tire_press_ = from.rear_right_tire_press_;
    }
    if (cached_has_bits & 0x00400000u) {
      car_driving_mode_ = from.car_driving_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Safety::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Safety)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Safety::CopyFrom(const Safety& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Safety)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Safety::IsInitialized() const {
  return true;
}

void Safety::Swap(Safety* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Safety::InternalSwap(Safety* other) {
  std::swap(emergency_button_, other->emergency_button_);
  std::swap(is_driver_car_door_close_, other->is_driver_car_door_close_);
  std::swap(is_driver_buckled_, other->is_driver_buckled_);
  std::swap(has_error_, other->has_error_);
  std::swap(is_motor_invertor_fault_, other->is_motor_invertor_fault_);
  std::swap(is_system_fault_, other->is_system_fault_);
  std::swap(is_power_battery_fault_, other->is_power_battery_fault_);
  std::swap(is_motor_invertor_over_temperature_, other->is_motor_invertor_over_temperature_);
  std::swap(is_small_battery_charge_discharge_fault_, other->is_small_battery_charge_discharge_fault_);
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(is_passenger_door_open_, other->is_passenger_door_open_);
  std::swap(is_rearleft_door_open_, other->is_rearleft_door_open_);
  std::swap(is_rearright_door_open_, other->is_rearright_door_open_);
  std::swap(is_hood_open_, other->is_hood_open_);
  std::swap(is_trunk_open_, other->is_trunk_open_);
  std::swap(is_passenger_detected_, other->is_passenger_detected_);
  std::swap(is_passenger_airbag_enabled_, other->is_passenger_airbag_enabled_);
  std::swap(is_passenger_buckled_, other->is_passenger_buckled_);
  std::swap(front_left_tire_press_, other->front_left_tire_press_);
  std::swap(front_right_tire_press_, other->front_right_tire_press_);
  std::swap(rear_left_tire_press_, other->rear_left_tire_press_);
  std::swap(rear_right_tire_press_, other->rear_right_tire_press_);
  std::swap(car_driving_mode_, other->car_driving_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Safety::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Safety

// optional bool is_driver_car_door_close = 1;
bool Safety::has_is_driver_car_door_close() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Safety::set_has_is_driver_car_door_close() {
  _has_bits_[0] |= 0x00000002u;
}
void Safety::clear_has_is_driver_car_door_close() {
  _has_bits_[0] &= ~0x00000002u;
}
void Safety::clear_is_driver_car_door_close() {
  is_driver_car_door_close_ = false;
  clear_has_is_driver_car_door_close();
}
bool Safety::is_driver_car_door_close() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_driver_car_door_close)
  return is_driver_car_door_close_;
}
void Safety::set_is_driver_car_door_close(bool value) {
  set_has_is_driver_car_door_close();
  is_driver_car_door_close_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_driver_car_door_close)
}

// optional bool is_driver_buckled = 2;
bool Safety::has_is_driver_buckled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Safety::set_has_is_driver_buckled() {
  _has_bits_[0] |= 0x00000004u;
}
void Safety::clear_has_is_driver_buckled() {
  _has_bits_[0] &= ~0x00000004u;
}
void Safety::clear_is_driver_buckled() {
  is_driver_buckled_ = false;
  clear_has_is_driver_buckled();
}
bool Safety::is_driver_buckled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_driver_buckled)
  return is_driver_buckled_;
}
void Safety::set_is_driver_buckled(bool value) {
  set_has_is_driver_buckled();
  is_driver_buckled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_driver_buckled)
}

// optional int32 emergency_button = 3;
bool Safety::has_emergency_button() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Safety::set_has_emergency_button() {
  _has_bits_[0] |= 0x00000001u;
}
void Safety::clear_has_emergency_button() {
  _has_bits_[0] &= ~0x00000001u;
}
void Safety::clear_emergency_button() {
  emergency_button_ = 0;
  clear_has_emergency_button();
}
::google::protobuf::int32 Safety::emergency_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.emergency_button)
  return emergency_button_;
}
void Safety::set_emergency_button(::google::protobuf::int32 value) {
  set_has_emergency_button();
  emergency_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.emergency_button)
}

// optional bool has_error = 4 [default = false];
bool Safety::has_has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Safety::set_has_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
void Safety::clear_has_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void Safety::clear_has_error() {
  has_error_ = false;
  clear_has_has_error();
}
bool Safety::has_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.has_error)
  return has_error_;
}
void Safety::set_has_error(bool value) {
  set_has_has_error();
  has_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.has_error)
}

// optional bool is_motor_invertor_fault = 5;
bool Safety::has_is_motor_invertor_fault() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Safety::set_has_is_motor_invertor_fault() {
  _has_bits_[0] |= 0x00000010u;
}
void Safety::clear_has_is_motor_invertor_fault() {
  _has_bits_[0] &= ~0x00000010u;
}
void Safety::clear_is_motor_invertor_fault() {
  is_motor_invertor_fault_ = false;
  clear_has_is_motor_invertor_fault();
}
bool Safety::is_motor_invertor_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_motor_invertor_fault)
  return is_motor_invertor_fault_;
}
void Safety::set_is_motor_invertor_fault(bool value) {
  set_has_is_motor_invertor_fault();
  is_motor_invertor_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_motor_invertor_fault)
}

// optional bool is_system_fault = 6;
bool Safety::has_is_system_fault() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Safety::set_has_is_system_fault() {
  _has_bits_[0] |= 0x00000020u;
}
void Safety::clear_has_is_system_fault() {
  _has_bits_[0] &= ~0x00000020u;
}
void Safety::clear_is_system_fault() {
  is_system_fault_ = false;
  clear_has_is_system_fault();
}
bool Safety::is_system_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_system_fault)
  return is_system_fault_;
}
void Safety::set_is_system_fault(bool value) {
  set_has_is_system_fault();
  is_system_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_system_fault)
}

// optional bool is_power_battery_fault = 7;
bool Safety::has_is_power_battery_fault() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Safety::set_has_is_power_battery_fault() {
  _has_bits_[0] |= 0x00000040u;
}
void Safety::clear_has_is_power_battery_fault() {
  _has_bits_[0] &= ~0x00000040u;
}
void Safety::clear_is_power_battery_fault() {
  is_power_battery_fault_ = false;
  clear_has_is_power_battery_fault();
}
bool Safety::is_power_battery_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_power_battery_fault)
  return is_power_battery_fault_;
}
void Safety::set_is_power_battery_fault(bool value) {
  set_has_is_power_battery_fault();
  is_power_battery_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_power_battery_fault)
}

// optional bool is_motor_invertor_over_temperature = 8;
bool Safety::has_is_motor_invertor_over_temperature() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Safety::set_has_is_motor_invertor_over_temperature() {
  _has_bits_[0] |= 0x00000080u;
}
void Safety::clear_has_is_motor_invertor_over_temperature() {
  _has_bits_[0] &= ~0x00000080u;
}
void Safety::clear_is_motor_invertor_over_temperature() {
  is_motor_invertor_over_temperature_ = false;
  clear_has_is_motor_invertor_over_temperature();
}
bool Safety::is_motor_invertor_over_temperature() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_motor_invertor_over_temperature)
  return is_motor_invertor_over_temperature_;
}
void Safety::set_is_motor_invertor_over_temperature(bool value) {
  set_has_is_motor_invertor_over_temperature();
  is_motor_invertor_over_temperature_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_motor_invertor_over_temperature)
}

// optional bool is_small_battery_charge_discharge_fault = 9;
bool Safety::has_is_small_battery_charge_discharge_fault() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Safety::set_has_is_small_battery_charge_discharge_fault() {
  _has_bits_[0] |= 0x00000100u;
}
void Safety::clear_has_is_small_battery_charge_discharge_fault() {
  _has_bits_[0] &= ~0x00000100u;
}
void Safety::clear_is_small_battery_charge_discharge_fault() {
  is_small_battery_charge_discharge_fault_ = false;
  clear_has_is_small_battery_charge_discharge_fault();
}
bool Safety::is_small_battery_charge_discharge_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_small_battery_charge_discharge_fault)
  return is_small_battery_charge_discharge_fault_;
}
void Safety::set_is_small_battery_charge_discharge_fault(bool value) {
  set_has_is_small_battery_charge_discharge_fault();
  is_small_battery_charge_discharge_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_small_battery_charge_discharge_fault)
}

// optional int32 driving_mode = 10;
bool Safety::has_driving_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Safety::set_has_driving_mode() {
  _has_bits_[0] |= 0x00000200u;
}
void Safety::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
void Safety::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
::google::protobuf::int32 Safety::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.driving_mode)
  return driving_mode_;
}
void Safety::set_driving_mode(::google::protobuf::int32 value) {
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.driving_mode)
}

// optional bool is_passenger_door_open = 11;
bool Safety::has_is_passenger_door_open() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Safety::set_has_is_passenger_door_open() {
  _has_bits_[0] |= 0x00000400u;
}
void Safety::clear_has_is_passenger_door_open() {
  _has_bits_[0] &= ~0x00000400u;
}
void Safety::clear_is_passenger_door_open() {
  is_passenger_door_open_ = false;
  clear_has_is_passenger_door_open();
}
bool Safety::is_passenger_door_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_passenger_door_open)
  return is_passenger_door_open_;
}
void Safety::set_is_passenger_door_open(bool value) {
  set_has_is_passenger_door_open();
  is_passenger_door_open_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_passenger_door_open)
}

// optional bool is_rearleft_door_open = 12;
bool Safety::has_is_rearleft_door_open() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Safety::set_has_is_rearleft_door_open() {
  _has_bits_[0] |= 0x00000800u;
}
void Safety::clear_has_is_rearleft_door_open() {
  _has_bits_[0] &= ~0x00000800u;
}
void Safety::clear_is_rearleft_door_open() {
  is_rearleft_door_open_ = false;
  clear_has_is_rearleft_door_open();
}
bool Safety::is_rearleft_door_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_rearleft_door_open)
  return is_rearleft_door_open_;
}
void Safety::set_is_rearleft_door_open(bool value) {
  set_has_is_rearleft_door_open();
  is_rearleft_door_open_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_rearleft_door_open)
}

// optional bool is_rearright_door_open = 13;
bool Safety::has_is_rearright_door_open() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Safety::set_has_is_rearright_door_open() {
  _has_bits_[0] |= 0x00001000u;
}
void Safety::clear_has_is_rearright_door_open() {
  _has_bits_[0] &= ~0x00001000u;
}
void Safety::clear_is_rearright_door_open() {
  is_rearright_door_open_ = false;
  clear_has_is_rearright_door_open();
}
bool Safety::is_rearright_door_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_rearright_door_open)
  return is_rearright_door_open_;
}
void Safety::set_is_rearright_door_open(bool value) {
  set_has_is_rearright_door_open();
  is_rearright_door_open_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_rearright_door_open)
}

// optional bool is_hood_open = 14;
bool Safety::has_is_hood_open() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Safety::set_has_is_hood_open() {
  _has_bits_[0] |= 0x00002000u;
}
void Safety::clear_has_is_hood_open() {
  _has_bits_[0] &= ~0x00002000u;
}
void Safety::clear_is_hood_open() {
  is_hood_open_ = false;
  clear_has_is_hood_open();
}
bool Safety::is_hood_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_hood_open)
  return is_hood_open_;
}
void Safety::set_is_hood_open(bool value) {
  set_has_is_hood_open();
  is_hood_open_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_hood_open)
}

// optional bool is_trunk_open = 15;
bool Safety::has_is_trunk_open() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Safety::set_has_is_trunk_open() {
  _has_bits_[0] |= 0x00004000u;
}
void Safety::clear_has_is_trunk_open() {
  _has_bits_[0] &= ~0x00004000u;
}
void Safety::clear_is_trunk_open() {
  is_trunk_open_ = false;
  clear_has_is_trunk_open();
}
bool Safety::is_trunk_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_trunk_open)
  return is_trunk_open_;
}
void Safety::set_is_trunk_open(bool value) {
  set_has_is_trunk_open();
  is_trunk_open_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_trunk_open)
}

// optional bool is_passenger_detected = 16;
bool Safety::has_is_passenger_detected() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Safety::set_has_is_passenger_detected() {
  _has_bits_[0] |= 0x00008000u;
}
void Safety::clear_has_is_passenger_detected() {
  _has_bits_[0] &= ~0x00008000u;
}
void Safety::clear_is_passenger_detected() {
  is_passenger_detected_ = false;
  clear_has_is_passenger_detected();
}
bool Safety::is_passenger_detected() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_passenger_detected)
  return is_passenger_detected_;
}
void Safety::set_is_passenger_detected(bool value) {
  set_has_is_passenger_detected();
  is_passenger_detected_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_passenger_detected)
}

// optional bool is_passenger_airbag_enabled = 17;
bool Safety::has_is_passenger_airbag_enabled() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Safety::set_has_is_passenger_airbag_enabled() {
  _has_bits_[0] |= 0x00010000u;
}
void Safety::clear_has_is_passenger_airbag_enabled() {
  _has_bits_[0] &= ~0x00010000u;
}
void Safety::clear_is_passenger_airbag_enabled() {
  is_passenger_airbag_enabled_ = false;
  clear_has_is_passenger_airbag_enabled();
}
bool Safety::is_passenger_airbag_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_passenger_airbag_enabled)
  return is_passenger_airbag_enabled_;
}
void Safety::set_is_passenger_airbag_enabled(bool value) {
  set_has_is_passenger_airbag_enabled();
  is_passenger_airbag_enabled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_passenger_airbag_enabled)
}

// optional bool is_passenger_buckled = 18;
bool Safety::has_is_passenger_buckled() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Safety::set_has_is_passenger_buckled() {
  _has_bits_[0] |= 0x00020000u;
}
void Safety::clear_has_is_passenger_buckled() {
  _has_bits_[0] &= ~0x00020000u;
}
void Safety::clear_is_passenger_buckled() {
  is_passenger_buckled_ = false;
  clear_has_is_passenger_buckled();
}
bool Safety::is_passenger_buckled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.is_passenger_buckled)
  return is_passenger_buckled_;
}
void Safety::set_is_passenger_buckled(bool value) {
  set_has_is_passenger_buckled();
  is_passenger_buckled_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.is_passenger_buckled)
}

// optional int32 front_left_tire_press = 19;
bool Safety::has_front_left_tire_press() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Safety::set_has_front_left_tire_press() {
  _has_bits_[0] |= 0x00040000u;
}
void Safety::clear_has_front_left_tire_press() {
  _has_bits_[0] &= ~0x00040000u;
}
void Safety::clear_front_left_tire_press() {
  front_left_tire_press_ = 0;
  clear_has_front_left_tire_press();
}
::google::protobuf::int32 Safety::front_left_tire_press() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.front_left_tire_press)
  return front_left_tire_press_;
}
void Safety::set_front_left_tire_press(::google::protobuf::int32 value) {
  set_has_front_left_tire_press();
  front_left_tire_press_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.front_left_tire_press)
}

// optional int32 front_right_tire_press = 20;
bool Safety::has_front_right_tire_press() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Safety::set_has_front_right_tire_press() {
  _has_bits_[0] |= 0x00080000u;
}
void Safety::clear_has_front_right_tire_press() {
  _has_bits_[0] &= ~0x00080000u;
}
void Safety::clear_front_right_tire_press() {
  front_right_tire_press_ = 0;
  clear_has_front_right_tire_press();
}
::google::protobuf::int32 Safety::front_right_tire_press() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.front_right_tire_press)
  return front_right_tire_press_;
}
void Safety::set_front_right_tire_press(::google::protobuf::int32 value) {
  set_has_front_right_tire_press();
  front_right_tire_press_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.front_right_tire_press)
}

// optional int32 rear_left_tire_press = 21;
bool Safety::has_rear_left_tire_press() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Safety::set_has_rear_left_tire_press() {
  _has_bits_[0] |= 0x00100000u;
}
void Safety::clear_has_rear_left_tire_press() {
  _has_bits_[0] &= ~0x00100000u;
}
void Safety::clear_rear_left_tire_press() {
  rear_left_tire_press_ = 0;
  clear_has_rear_left_tire_press();
}
::google::protobuf::int32 Safety::rear_left_tire_press() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.rear_left_tire_press)
  return rear_left_tire_press_;
}
void Safety::set_rear_left_tire_press(::google::protobuf::int32 value) {
  set_has_rear_left_tire_press();
  rear_left_tire_press_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.rear_left_tire_press)
}

// optional int32 rear_right_tire_press = 22;
bool Safety::has_rear_right_tire_press() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Safety::set_has_rear_right_tire_press() {
  _has_bits_[0] |= 0x00200000u;
}
void Safety::clear_has_rear_right_tire_press() {
  _has_bits_[0] &= ~0x00200000u;
}
void Safety::clear_rear_right_tire_press() {
  rear_right_tire_press_ = 0;
  clear_has_rear_right_tire_press();
}
::google::protobuf::int32 Safety::rear_right_tire_press() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.rear_right_tire_press)
  return rear_right_tire_press_;
}
void Safety::set_rear_right_tire_press(::google::protobuf::int32 value) {
  set_has_rear_right_tire_press();
  rear_right_tire_press_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.rear_right_tire_press)
}

// optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
bool Safety::has_car_driving_mode() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Safety::set_has_car_driving_mode() {
  _has_bits_[0] |= 0x00400000u;
}
void Safety::clear_has_car_driving_mode() {
  _has_bits_[0] &= ~0x00400000u;
}
void Safety::clear_car_driving_mode() {
  car_driving_mode_ = 0;
  clear_has_car_driving_mode();
}
::apollo::canbus::Chassis_DrivingMode Safety::car_driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Safety.car_driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(car_driving_mode_);
}
void Safety::set_car_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_car_driving_mode();
  car_driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Safety.car_driving_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicInfo::kIsAutoModeFieldNumber;
const int BasicInfo::kPowerStateFieldNumber;
const int BasicInfo::kIsAirBagDeployedFieldNumber;
const int BasicInfo::kOdoMeterFieldNumber;
const int BasicInfo::kDriveRangeFieldNumber;
const int BasicInfo::kIsSystemErrorFieldNumber;
const int BasicInfo::kIsHumanInterruptFieldNumber;
const int BasicInfo::kAccOnButtonFieldNumber;
const int BasicInfo::kAccOffButtonFieldNumber;
const int BasicInfo::kAccResButtonFieldNumber;
const int BasicInfo::kAccCancelButtonFieldNumber;
const int BasicInfo::kAccOnOffButtonFieldNumber;
const int BasicInfo::kAccResCancelButtonFieldNumber;
const int BasicInfo::kAccIncSpdButtonFieldNumber;
const int BasicInfo::kAccDecSpdButtonFieldNumber;
const int BasicInfo::kAccIncGapButtonFieldNumber;
const int BasicInfo::kAccDecGapButtonFieldNumber;
const int BasicInfo::kLkaButtonFieldNumber;
const int BasicInfo::kCanbusFaultFieldNumber;
const int BasicInfo::kLatitudeFieldNumber;
const int BasicInfo::kLongitudeFieldNumber;
const int BasicInfo::kGpsValidFieldNumber;
const int BasicInfo::kYearFieldNumber;
const int BasicInfo::kMonthFieldNumber;
const int BasicInfo::kDayFieldNumber;
const int BasicInfo::kHoursFieldNumber;
const int BasicInfo::kMinutesFieldNumber;
const int BasicInfo::kSecondsFieldNumber;
const int BasicInfo::kCompassDirectionFieldNumber;
const int BasicInfo::kPdopFieldNumber;
const int BasicInfo::kIsGpsFaultFieldNumber;
const int BasicInfo::kIsInferredFieldNumber;
const int BasicInfo::kAltitudeFieldNumber;
const int BasicInfo::kHeadingFieldNumber;
const int BasicInfo::kHdopFieldNumber;
const int BasicInfo::kVdopFieldNumber;
const int BasicInfo::kQualityFieldNumber;
const int BasicInfo::kNumSatellitesFieldNumber;
const int BasicInfo::kGpsSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicInfo::BasicInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.BasicInfo)
}
BasicInfo::BasicInfo(const BasicInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&power_state_, &from.power_state_,
    reinterpret_cast<char*>(&gps_speed_) -
    reinterpret_cast<char*>(&power_state_) + sizeof(gps_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.BasicInfo)
}

void BasicInfo::SharedCtor() {
  ::memset(&power_state_, 0, reinterpret_cast<char*>(&gps_speed_) -
    reinterpret_cast<char*>(&power_state_) + sizeof(gps_speed_));
  _cached_size_ = 0;
}

BasicInfo::~BasicInfo() {
  // @@protoc_insertion_point(destructor:apollo.canbus.BasicInfo)
  SharedDtor();
}

void BasicInfo::SharedDtor() {
}

void BasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicInfo::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BasicInfo& BasicInfo::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

BasicInfo* BasicInfo::New(::google::protobuf::Arena* arena) const {
  BasicInfo* n = new BasicInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.BasicInfo)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&power_state_, 0, reinterpret_cast<char*>(&acc_on_button_) -
      reinterpret_cast<char*>(&power_state_) + sizeof(acc_on_button_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&acc_off_button_, 0, reinterpret_cast<char*>(&acc_inc_gap_button_) -
      reinterpret_cast<char*>(&acc_off_button_) + sizeof(acc_inc_gap_button_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&acc_dec_gap_button_, 0, reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&acc_dec_gap_button_) + sizeof(day_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&hours_, 0, reinterpret_cast<char*>(&pdop_) -
      reinterpret_cast<char*>(&hours_) + sizeof(pdop_));
  }
  if (_has_bits_[32 / 32] & 127u) {
    ::memset(&altitude_, 0, reinterpret_cast<char*>(&gps_speed_) -
      reinterpret_cast<char*>(&altitude_) + sizeof(gps_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.BasicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_auto_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_auto_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.BasicInfo.Type power_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::BasicInfo_Type_IsValid(value)) {
            set_power_state(static_cast< ::apollo::canbus::BasicInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_air_bag_deployed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_air_bag_deployed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_air_bag_deployed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double odo_meter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_odo_meter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odo_meter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double drive_range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_drive_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &drive_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_system_error = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_is_system_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_system_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_human_interrupt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_human_interrupt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_human_interrupt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_on_button = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_acc_on_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_on_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_off_button = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_acc_off_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_off_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_res_button = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_acc_res_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_res_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_cancel_button = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_acc_cancel_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_cancel_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_on_off_button = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_acc_on_off_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_on_off_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_res_cancel_button = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_acc_res_cancel_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_res_cancel_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_inc_spd_button = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_acc_inc_spd_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_inc_spd_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_dec_spd_button = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_acc_dec_spd_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_dec_spd_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_inc_gap_button = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_acc_inc_gap_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_inc_gap_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_dec_gap_button = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_acc_dec_gap_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_dec_gap_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lka_button = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_lka_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lka_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool canbus_fault = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_canbus_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbus_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gps_valid = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_gps_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gps_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 year = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 month = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 day = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hours = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_hours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minutes = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_minutes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double compass_direction = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u)) {
          set_has_compass_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &compass_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pdop = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u)) {
          set_has_pdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_gps_fault = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_is_gps_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gps_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_inferred = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_is_inferred();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double altitude = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(265u)) {
          set_has_altitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(273u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hdop = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(281u)) {
          set_has_hdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vdop = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(289u)) {
          set_has_vdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.GpsQuality quality = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(296u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::GpsQuality_IsValid(value)) {
            set_quality(static_cast< ::apollo::canbus::GpsQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(37, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_satellites = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_num_satellites();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_satellites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gps_speed = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(313u)) {
          set_has_gps_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.BasicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.BasicInfo)
  return false;
#undef DO_
}

void BasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.BasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_auto_mode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_auto_mode(), output);
  }

  // optional .apollo.canbus.BasicInfo.Type power_state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->power_state(), output);
  }

  // optional bool is_air_bag_deployed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_air_bag_deployed(), output);
  }

  // optional double odo_meter = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->odo_meter(), output);
  }

  // optional double drive_range = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->drive_range(), output);
  }

  // optional bool is_system_error = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_system_error(), output);
  }

  // optional bool is_human_interrupt = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_human_interrupt(), output);
  }

  // optional bool acc_on_button = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->acc_on_button(), output);
  }

  // optional bool acc_off_button = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->acc_off_button(), output);
  }

  // optional bool acc_res_button = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->acc_res_button(), output);
  }

  // optional bool acc_cancel_button = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->acc_cancel_button(), output);
  }

  // optional bool acc_on_off_button = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->acc_on_off_button(), output);
  }

  // optional bool acc_res_cancel_button = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->acc_res_cancel_button(), output);
  }

  // optional bool acc_inc_spd_button = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->acc_inc_spd_button(), output);
  }

  // optional bool acc_dec_spd_button = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->acc_dec_spd_button(), output);
  }

  // optional bool acc_inc_gap_button = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->acc_inc_gap_button(), output);
  }

  // optional bool acc_dec_gap_button = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->acc_dec_gap_button(), output);
  }

  // optional bool lka_button = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->lka_button(), output);
  }

  // optional bool canbus_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->canbus_fault(), output);
  }

  // optional double latitude = 20;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->latitude(), output);
  }

  // optional double longitude = 21;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->longitude(), output);
  }

  // optional bool gps_valid = 22;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->gps_valid(), output);
  }

  // optional int32 year = 23;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->year(), output);
  }

  // optional int32 month = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->month(), output);
  }

  // optional int32 day = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->day(), output);
  }

  // optional int32 hours = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->hours(), output);
  }

  // optional int32 minutes = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->minutes(), output);
  }

  // optional int32 seconds = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->seconds(), output);
  }

  // optional double compass_direction = 29;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->compass_direction(), output);
  }

  // optional double pdop = 30;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->pdop(), output);
  }

  // optional bool is_gps_fault = 31;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->is_gps_fault(), output);
  }

  // optional bool is_inferred = 32;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->is_inferred(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double altitude = 33;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->altitude(), output);
  }

  // optional double heading = 34;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->heading(), output);
  }

  // optional double hdop = 35;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->hdop(), output);
  }

  // optional double vdop = 36;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->vdop(), output);
  }

  // optional .apollo.canbus.GpsQuality quality = 37;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->quality(), output);
  }

  // optional int32 num_satellites = 38;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->num_satellites(), output);
  }

  // optional double gps_speed = 39;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->gps_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.BasicInfo)
}

::google::protobuf::uint8* BasicInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.BasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_auto_mode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_auto_mode(), target);
  }

  // optional .apollo.canbus.BasicInfo.Type power_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->power_state(), target);
  }

  // optional bool is_air_bag_deployed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_air_bag_deployed(), target);
  }

  // optional double odo_meter = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->odo_meter(), target);
  }

  // optional double drive_range = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->drive_range(), target);
  }

  // optional bool is_system_error = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_system_error(), target);
  }

  // optional bool is_human_interrupt = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_human_interrupt(), target);
  }

  // optional bool acc_on_button = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->acc_on_button(), target);
  }

  // optional bool acc_off_button = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->acc_off_button(), target);
  }

  // optional bool acc_res_button = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->acc_res_button(), target);
  }

  // optional bool acc_cancel_button = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->acc_cancel_button(), target);
  }

  // optional bool acc_on_off_button = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->acc_on_off_button(), target);
  }

  // optional bool acc_res_cancel_button = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->acc_res_cancel_button(), target);
  }

  // optional bool acc_inc_spd_button = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->acc_inc_spd_button(), target);
  }

  // optional bool acc_dec_spd_button = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->acc_dec_spd_button(), target);
  }

  // optional bool acc_inc_gap_button = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->acc_inc_gap_button(), target);
  }

  // optional bool acc_dec_gap_button = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->acc_dec_gap_button(), target);
  }

  // optional bool lka_button = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->lka_button(), target);
  }

  // optional bool canbus_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->canbus_fault(), target);
  }

  // optional double latitude = 20;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->latitude(), target);
  }

  // optional double longitude = 21;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->longitude(), target);
  }

  // optional bool gps_valid = 22;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->gps_valid(), target);
  }

  // optional int32 year = 23;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->year(), target);
  }

  // optional int32 month = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->month(), target);
  }

  // optional int32 day = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->day(), target);
  }

  // optional int32 hours = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->hours(), target);
  }

  // optional int32 minutes = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->minutes(), target);
  }

  // optional int32 seconds = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->seconds(), target);
  }

  // optional double compass_direction = 29;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->compass_direction(), target);
  }

  // optional double pdop = 30;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->pdop(), target);
  }

  // optional bool is_gps_fault = 31;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->is_gps_fault(), target);
  }

  // optional bool is_inferred = 32;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->is_inferred(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double altitude = 33;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->altitude(), target);
  }

  // optional double heading = 34;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->heading(), target);
  }

  // optional double hdop = 35;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->hdop(), target);
  }

  // optional double vdop = 36;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->vdop(), target);
  }

  // optional .apollo.canbus.GpsQuality quality = 37;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->quality(), target);
  }

  // optional int32 num_satellites = 38;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->num_satellites(), target);
  }

  // optional double gps_speed = 39;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->gps_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.BasicInfo)
  return target;
}

size_t BasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.BasicInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.canbus.BasicInfo.Type power_state = 2;
    if (has_power_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_state());
    }

    // optional bool is_auto_mode = 1;
    if (has_is_auto_mode()) {
      total_size += 1 + 1;
    }

    // optional bool is_air_bag_deployed = 3;
    if (has_is_air_bag_deployed()) {
      total_size += 1 + 1;
    }

    // optional bool is_system_error = 6;
    if (has_is_system_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_human_interrupt = 7;
    if (has_is_human_interrupt()) {
      total_size += 1 + 1;
    }

    // optional double odo_meter = 4;
    if (has_odo_meter()) {
      total_size += 1 + 8;
    }

    // optional double drive_range = 5;
    if (has_drive_range()) {
      total_size += 1 + 8;
    }

    // optional bool acc_on_button = 8;
    if (has_acc_on_button()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool acc_off_button = 9;
    if (has_acc_off_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_res_button = 10;
    if (has_acc_res_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_cancel_button = 11;
    if (has_acc_cancel_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_on_off_button = 12;
    if (has_acc_on_off_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_res_cancel_button = 13;
    if (has_acc_res_cancel_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_inc_spd_button = 14;
    if (has_acc_inc_spd_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_dec_spd_button = 15;
    if (has_acc_dec_spd_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_inc_gap_button = 16;
    if (has_acc_inc_gap_button()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool acc_dec_gap_button = 17;
    if (has_acc_dec_gap_button()) {
      total_size += 2 + 1;
    }

    // optional bool lka_button = 18;
    if (has_lka_button()) {
      total_size += 2 + 1;
    }

    // optional bool canbus_fault = 19;
    if (has_canbus_fault()) {
      total_size += 2 + 1;
    }

    // optional int32 year = 23;
    if (has_year()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional double latitude = 20;
    if (has_latitude()) {
      total_size += 2 + 8;
    }

    // optional double longitude = 21;
    if (has_longitude()) {
      total_size += 2 + 8;
    }

    // optional int32 month = 24;
    if (has_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 day = 25;
    if (has_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 hours = 26;
    if (has_hours()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hours());
    }

    // optional int32 minutes = 27;
    if (has_minutes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutes());
    }

    // optional int32 seconds = 28;
    if (has_seconds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

    // optional bool gps_valid = 22;
    if (has_gps_valid()) {
      total_size += 2 + 1;
    }

    // optional bool is_gps_fault = 31;
    if (has_is_gps_fault()) {
      total_size += 2 + 1;
    }

    // optional bool is_inferred = 32;
    if (has_is_inferred()) {
      total_size += 2 + 1;
    }

    // optional double compass_direction = 29;
    if (has_compass_direction()) {
      total_size += 2 + 8;
    }

    // optional double pdop = 30;
    if (has_pdop()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & 127u) {
    // optional double altitude = 33;
    if (has_altitude()) {
      total_size += 2 + 8;
    }

    // optional double heading = 34;
    if (has_heading()) {
      total_size += 2 + 8;
    }

    // optional double hdop = 35;
    if (has_hdop()) {
      total_size += 2 + 8;
    }

    // optional double vdop = 36;
    if (has_vdop()) {
      total_size += 2 + 8;
    }

    // optional .apollo.canbus.GpsQuality quality = 37;
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // optional int32 num_satellites = 38;
    if (has_num_satellites()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_satellites());
    }

    // optional double gps_speed = 39;
    if (has_gps_speed()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.BasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasicInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.BasicInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.BasicInfo)
    MergeFrom(*source);
  }
}

void BasicInfo::MergeFrom(const BasicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.BasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      power_state_ = from.power_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_auto_mode_ = from.is_auto_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_air_bag_deployed_ = from.is_air_bag_deployed_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_system_error_ = from.is_system_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_human_interrupt_ = from.is_human_interrupt_;
    }
    if (cached_has_bits & 0x00000020u) {
      odo_meter_ = from.odo_meter_;
    }
    if (cached_has_bits & 0x00000040u) {
      drive_range_ = from.drive_range_;
    }
    if (cached_has_bits & 0x00000080u) {
      acc_on_button_ = from.acc_on_button_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      acc_off_button_ = from.acc_off_button_;
    }
    if (cached_has_bits & 0x00000200u) {
      acc_res_button_ = from.acc_res_button_;
    }
    if (cached_has_bits & 0x00000400u) {
      acc_cancel_button_ = from.acc_cancel_button_;
    }
    if (cached_has_bits & 0x00000800u) {
      acc_on_off_button_ = from.acc_on_off_button_;
    }
    if (cached_has_bits & 0x00001000u) {
      acc_res_cancel_button_ = from.acc_res_cancel_button_;
    }
    if (cached_has_bits & 0x00002000u) {
      acc_inc_spd_button_ = from.acc_inc_spd_button_;
    }
    if (cached_has_bits & 0x00004000u) {
      acc_dec_spd_button_ = from.acc_dec_spd_button_;
    }
    if (cached_has_bits & 0x00008000u) {
      acc_inc_gap_button_ = from.acc_inc_gap_button_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      acc_dec_gap_button_ = from.acc_dec_gap_button_;
    }
    if (cached_has_bits & 0x00020000u) {
      lka_button_ = from.lka_button_;
    }
    if (cached_has_bits & 0x00040000u) {
      canbus_fault_ = from.canbus_fault_;
    }
    if (cached_has_bits & 0x00080000u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00100000u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00200000u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00400000u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00800000u) {
      day_ = from.day_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      hours_ = from.hours_;
    }
    if (cached_has_bits & 0x02000000u) {
      minutes_ = from.minutes_;
    }
    if (cached_has_bits & 0x04000000u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x08000000u) {
      gps_valid_ = from.gps_valid_;
    }
    if (cached_has_bits & 0x10000000u) {
      is_gps_fault_ = from.is_gps_fault_;
    }
    if (cached_has_bits & 0x20000000u) {
      is_inferred_ = from.is_inferred_;
    }
    if (cached_has_bits & 0x40000000u) {
      compass_direction_ = from.compass_direction_;
    }
    if (cached_has_bits & 0x80000000u) {
      pdop_ = from.pdop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      hdop_ = from.hdop_;
    }
    if (cached_has_bits & 0x00000008u) {
      vdop_ = from.vdop_;
    }
    if (cached_has_bits & 0x00000010u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_satellites_ = from.num_satellites_;
    }
    if (cached_has_bits & 0x00000040u) {
      gps_speed_ = from.gps_speed_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void BasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.BasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicInfo::CopyFrom(const BasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.BasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicInfo::IsInitialized() const {
  return true;
}

void BasicInfo::Swap(BasicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicInfo::InternalSwap(BasicInfo* other) {
  std::swap(power_state_, other->power_state_);
  std::swap(is_auto_mode_, other->is_auto_mode_);
  std::swap(is_air_bag_deployed_, other->is_air_bag_deployed_);
  std::swap(is_system_error_, other->is_system_error_);
  std::swap(is_human_interrupt_, other->is_human_interrupt_);
  std::swap(odo_meter_, other->odo_meter_);
  std::swap(drive_range_, other->drive_range_);
  std::swap(acc_on_button_, other->acc_on_button_);
  std::swap(acc_off_button_, other->acc_off_button_);
  std::swap(acc_res_button_, other->acc_res_button_);
  std::swap(acc_cancel_button_, other->acc_cancel_button_);
  std::swap(acc_on_off_button_, other->acc_on_off_button_);
  std::swap(acc_res_cancel_button_, other->acc_res_cancel_button_);
  std::swap(acc_inc_spd_button_, other->acc_inc_spd_button_);
  std::swap(acc_dec_spd_button_, other->acc_dec_spd_button_);
  std::swap(acc_inc_gap_button_, other->acc_inc_gap_button_);
  std::swap(acc_dec_gap_button_, other->acc_dec_gap_button_);
  std::swap(lka_button_, other->lka_button_);
  std::swap(canbus_fault_, other->canbus_fault_);
  std::swap(year_, other->year_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hours_, other->hours_);
  std::swap(minutes_, other->minutes_);
  std::swap(seconds_, other->seconds_);
  std::swap(gps_valid_, other->gps_valid_);
  std::swap(is_gps_fault_, other->is_gps_fault_);
  std::swap(is_inferred_, other->is_inferred_);
  std::swap(compass_direction_, other->compass_direction_);
  std::swap(pdop_, other->pdop_);
  std::swap(altitude_, other->altitude_);
  std::swap(heading_, other->heading_);
  std::swap(hdop_, other->hdop_);
  std::swap(vdop_, other->vdop_);
  std::swap(quality_, other->quality_);
  std::swap(num_satellites_, other->num_satellites_);
  std::swap(gps_speed_, other->gps_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasicInfo::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasicInfo

// optional bool is_auto_mode = 1;
bool BasicInfo::has_is_auto_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BasicInfo::set_has_is_auto_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void BasicInfo::clear_has_is_auto_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void BasicInfo::clear_is_auto_mode() {
  is_auto_mode_ = false;
  clear_has_is_auto_mode();
}
bool BasicInfo::is_auto_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.is_auto_mode)
  return is_auto_mode_;
}
void BasicInfo::set_is_auto_mode(bool value) {
  set_has_is_auto_mode();
  is_auto_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.is_auto_mode)
}

// optional .apollo.canbus.BasicInfo.Type power_state = 2;
bool BasicInfo::has_power_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BasicInfo::set_has_power_state() {
  _has_bits_[0] |= 0x00000001u;
}
void BasicInfo::clear_has_power_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void BasicInfo::clear_power_state() {
  power_state_ = 0;
  clear_has_power_state();
}
::apollo::canbus::BasicInfo_Type BasicInfo::power_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.power_state)
  return static_cast< ::apollo::canbus::BasicInfo_Type >(power_state_);
}
void BasicInfo::set_power_state(::apollo::canbus::BasicInfo_Type value) {
  assert(::apollo::canbus::BasicInfo_Type_IsValid(value));
  set_has_power_state();
  power_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.power_state)
}

// optional bool is_air_bag_deployed = 3;
bool BasicInfo::has_is_air_bag_deployed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BasicInfo::set_has_is_air_bag_deployed() {
  _has_bits_[0] |= 0x00000004u;
}
void BasicInfo::clear_has_is_air_bag_deployed() {
  _has_bits_[0] &= ~0x00000004u;
}
void BasicInfo::clear_is_air_bag_deployed() {
  is_air_bag_deployed_ = false;
  clear_has_is_air_bag_deployed();
}
bool BasicInfo::is_air_bag_deployed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.is_air_bag_deployed)
  return is_air_bag_deployed_;
}
void BasicInfo::set_is_air_bag_deployed(bool value) {
  set_has_is_air_bag_deployed();
  is_air_bag_deployed_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.is_air_bag_deployed)
}

// optional double odo_meter = 4;
bool BasicInfo::has_odo_meter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BasicInfo::set_has_odo_meter() {
  _has_bits_[0] |= 0x00000020u;
}
void BasicInfo::clear_has_odo_meter() {
  _has_bits_[0] &= ~0x00000020u;
}
void BasicInfo::clear_odo_meter() {
  odo_meter_ = 0;
  clear_has_odo_meter();
}
double BasicInfo::odo_meter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.odo_meter)
  return odo_meter_;
}
void BasicInfo::set_odo_meter(double value) {
  set_has_odo_meter();
  odo_meter_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.odo_meter)
}

// optional double drive_range = 5;
bool BasicInfo::has_drive_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BasicInfo::set_has_drive_range() {
  _has_bits_[0] |= 0x00000040u;
}
void BasicInfo::clear_has_drive_range() {
  _has_bits_[0] &= ~0x00000040u;
}
void BasicInfo::clear_drive_range() {
  drive_range_ = 0;
  clear_has_drive_range();
}
double BasicInfo::drive_range() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.drive_range)
  return drive_range_;
}
void BasicInfo::set_drive_range(double value) {
  set_has_drive_range();
  drive_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.drive_range)
}

// optional bool is_system_error = 6;
bool BasicInfo::has_is_system_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BasicInfo::set_has_is_system_error() {
  _has_bits_[0] |= 0x00000008u;
}
void BasicInfo::clear_has_is_system_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void BasicInfo::clear_is_system_error() {
  is_system_error_ = false;
  clear_has_is_system_error();
}
bool BasicInfo::is_system_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.is_system_error)
  return is_system_error_;
}
void BasicInfo::set_is_system_error(bool value) {
  set_has_is_system_error();
  is_system_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.is_system_error)
}

// optional bool is_human_interrupt = 7;
bool BasicInfo::has_is_human_interrupt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BasicInfo::set_has_is_human_interrupt() {
  _has_bits_[0] |= 0x00000010u;
}
void BasicInfo::clear_has_is_human_interrupt() {
  _has_bits_[0] &= ~0x00000010u;
}
void BasicInfo::clear_is_human_interrupt() {
  is_human_interrupt_ = false;
  clear_has_is_human_interrupt();
}
bool BasicInfo::is_human_interrupt() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.is_human_interrupt)
  return is_human_interrupt_;
}
void BasicInfo::set_is_human_interrupt(bool value) {
  set_has_is_human_interrupt();
  is_human_interrupt_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.is_human_interrupt)
}

// optional bool acc_on_button = 8;
bool BasicInfo::has_acc_on_button() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BasicInfo::set_has_acc_on_button() {
  _has_bits_[0] |= 0x00000080u;
}
void BasicInfo::clear_has_acc_on_button() {
  _has_bits_[0] &= ~0x00000080u;
}
void BasicInfo::clear_acc_on_button() {
  acc_on_button_ = false;
  clear_has_acc_on_button();
}
bool BasicInfo::acc_on_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_on_button)
  return acc_on_button_;
}
void BasicInfo::set_acc_on_button(bool value) {
  set_has_acc_on_button();
  acc_on_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_on_button)
}

// optional bool acc_off_button = 9;
bool BasicInfo::has_acc_off_button() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BasicInfo::set_has_acc_off_button() {
  _has_bits_[0] |= 0x00000100u;
}
void BasicInfo::clear_has_acc_off_button() {
  _has_bits_[0] &= ~0x00000100u;
}
void BasicInfo::clear_acc_off_button() {
  acc_off_button_ = false;
  clear_has_acc_off_button();
}
bool BasicInfo::acc_off_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_off_button)
  return acc_off_button_;
}
void BasicInfo::set_acc_off_button(bool value) {
  set_has_acc_off_button();
  acc_off_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_off_button)
}

// optional bool acc_res_button = 10;
bool BasicInfo::has_acc_res_button() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BasicInfo::set_has_acc_res_button() {
  _has_bits_[0] |= 0x00000200u;
}
void BasicInfo::clear_has_acc_res_button() {
  _has_bits_[0] &= ~0x00000200u;
}
void BasicInfo::clear_acc_res_button() {
  acc_res_button_ = false;
  clear_has_acc_res_button();
}
bool BasicInfo::acc_res_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_res_button)
  return acc_res_button_;
}
void BasicInfo::set_acc_res_button(bool value) {
  set_has_acc_res_button();
  acc_res_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_res_button)
}

// optional bool acc_cancel_button = 11;
bool BasicInfo::has_acc_cancel_button() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BasicInfo::set_has_acc_cancel_button() {
  _has_bits_[0] |= 0x00000400u;
}
void BasicInfo::clear_has_acc_cancel_button() {
  _has_bits_[0] &= ~0x00000400u;
}
void BasicInfo::clear_acc_cancel_button() {
  acc_cancel_button_ = false;
  clear_has_acc_cancel_button();
}
bool BasicInfo::acc_cancel_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_cancel_button)
  return acc_cancel_button_;
}
void BasicInfo::set_acc_cancel_button(bool value) {
  set_has_acc_cancel_button();
  acc_cancel_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_cancel_button)
}

// optional bool acc_on_off_button = 12;
bool BasicInfo::has_acc_on_off_button() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BasicInfo::set_has_acc_on_off_button() {
  _has_bits_[0] |= 0x00000800u;
}
void BasicInfo::clear_has_acc_on_off_button() {
  _has_bits_[0] &= ~0x00000800u;
}
void BasicInfo::clear_acc_on_off_button() {
  acc_on_off_button_ = false;
  clear_has_acc_on_off_button();
}
bool BasicInfo::acc_on_off_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_on_off_button)
  return acc_on_off_button_;
}
void BasicInfo::set_acc_on_off_button(bool value) {
  set_has_acc_on_off_button();
  acc_on_off_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_on_off_button)
}

// optional bool acc_res_cancel_button = 13;
bool BasicInfo::has_acc_res_cancel_button() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BasicInfo::set_has_acc_res_cancel_button() {
  _has_bits_[0] |= 0x00001000u;
}
void BasicInfo::clear_has_acc_res_cancel_button() {
  _has_bits_[0] &= ~0x00001000u;
}
void BasicInfo::clear_acc_res_cancel_button() {
  acc_res_cancel_button_ = false;
  clear_has_acc_res_cancel_button();
}
bool BasicInfo::acc_res_cancel_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_res_cancel_button)
  return acc_res_cancel_button_;
}
void BasicInfo::set_acc_res_cancel_button(bool value) {
  set_has_acc_res_cancel_button();
  acc_res_cancel_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_res_cancel_button)
}

// optional bool acc_inc_spd_button = 14;
bool BasicInfo::has_acc_inc_spd_button() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BasicInfo::set_has_acc_inc_spd_button() {
  _has_bits_[0] |= 0x00002000u;
}
void BasicInfo::clear_has_acc_inc_spd_button() {
  _has_bits_[0] &= ~0x00002000u;
}
void BasicInfo::clear_acc_inc_spd_button() {
  acc_inc_spd_button_ = false;
  clear_has_acc_inc_spd_button();
}
bool BasicInfo::acc_inc_spd_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_inc_spd_button)
  return acc_inc_spd_button_;
}
void BasicInfo::set_acc_inc_spd_button(bool value) {
  set_has_acc_inc_spd_button();
  acc_inc_spd_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_inc_spd_button)
}

// optional bool acc_dec_spd_button = 15;
bool BasicInfo::has_acc_dec_spd_button() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BasicInfo::set_has_acc_dec_spd_button() {
  _has_bits_[0] |= 0x00004000u;
}
void BasicInfo::clear_has_acc_dec_spd_button() {
  _has_bits_[0] &= ~0x00004000u;
}
void BasicInfo::clear_acc_dec_spd_button() {
  acc_dec_spd_button_ = false;
  clear_has_acc_dec_spd_button();
}
bool BasicInfo::acc_dec_spd_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_dec_spd_button)
  return acc_dec_spd_button_;
}
void BasicInfo::set_acc_dec_spd_button(bool value) {
  set_has_acc_dec_spd_button();
  acc_dec_spd_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_dec_spd_button)
}

// optional bool acc_inc_gap_button = 16;
bool BasicInfo::has_acc_inc_gap_button() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BasicInfo::set_has_acc_inc_gap_button() {
  _has_bits_[0] |= 0x00008000u;
}
void BasicInfo::clear_has_acc_inc_gap_button() {
  _has_bits_[0] &= ~0x00008000u;
}
void BasicInfo::clear_acc_inc_gap_button() {
  acc_inc_gap_button_ = false;
  clear_has_acc_inc_gap_button();
}
bool BasicInfo::acc_inc_gap_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_inc_gap_button)
  return acc_inc_gap_button_;
}
void BasicInfo::set_acc_inc_gap_button(bool value) {
  set_has_acc_inc_gap_button();
  acc_inc_gap_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_inc_gap_button)
}

// optional bool acc_dec_gap_button = 17;
bool BasicInfo::has_acc_dec_gap_button() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BasicInfo::set_has_acc_dec_gap_button() {
  _has_bits_[0] |= 0x00010000u;
}
void BasicInfo::clear_has_acc_dec_gap_button() {
  _has_bits_[0] &= ~0x00010000u;
}
void BasicInfo::clear_acc_dec_gap_button() {
  acc_dec_gap_button_ = false;
  clear_has_acc_dec_gap_button();
}
bool BasicInfo::acc_dec_gap_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.acc_dec_gap_button)
  return acc_dec_gap_button_;
}
void BasicInfo::set_acc_dec_gap_button(bool value) {
  set_has_acc_dec_gap_button();
  acc_dec_gap_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.acc_dec_gap_button)
}

// optional bool lka_button = 18;
bool BasicInfo::has_lka_button() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void BasicInfo::set_has_lka_button() {
  _has_bits_[0] |= 0x00020000u;
}
void BasicInfo::clear_has_lka_button() {
  _has_bits_[0] &= ~0x00020000u;
}
void BasicInfo::clear_lka_button() {
  lka_button_ = false;
  clear_has_lka_button();
}
bool BasicInfo::lka_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.lka_button)
  return lka_button_;
}
void BasicInfo::set_lka_button(bool value) {
  set_has_lka_button();
  lka_button_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.lka_button)
}

// optional bool canbus_fault = 19;
bool BasicInfo::has_canbus_fault() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void BasicInfo::set_has_canbus_fault() {
  _has_bits_[0] |= 0x00040000u;
}
void BasicInfo::clear_has_canbus_fault() {
  _has_bits_[0] &= ~0x00040000u;
}
void BasicInfo::clear_canbus_fault() {
  canbus_fault_ = false;
  clear_has_canbus_fault();
}
bool BasicInfo::canbus_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.canbus_fault)
  return canbus_fault_;
}
void BasicInfo::set_canbus_fault(bool value) {
  set_has_canbus_fault();
  canbus_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.canbus_fault)
}

// optional double latitude = 20;
bool BasicInfo::has_latitude() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void BasicInfo::set_has_latitude() {
  _has_bits_[0] |= 0x00100000u;
}
void BasicInfo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00100000u;
}
void BasicInfo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double BasicInfo::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.latitude)
  return latitude_;
}
void BasicInfo::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.latitude)
}

// optional double longitude = 21;
bool BasicInfo::has_longitude() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void BasicInfo::set_has_longitude() {
  _has_bits_[0] |= 0x00200000u;
}
void BasicInfo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00200000u;
}
void BasicInfo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double BasicInfo::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.longitude)
  return longitude_;
}
void BasicInfo::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.longitude)
}

// optional bool gps_valid = 22;
bool BasicInfo::has_gps_valid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void BasicInfo::set_has_gps_valid() {
  _has_bits_[0] |= 0x08000000u;
}
void BasicInfo::clear_has_gps_valid() {
  _has_bits_[0] &= ~0x08000000u;
}
void BasicInfo::clear_gps_valid() {
  gps_valid_ = false;
  clear_has_gps_valid();
}
bool BasicInfo::gps_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.gps_valid)
  return gps_valid_;
}
void BasicInfo::set_gps_valid(bool value) {
  set_has_gps_valid();
  gps_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.gps_valid)
}

// optional int32 year = 23;
bool BasicInfo::has_year() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void BasicInfo::set_has_year() {
  _has_bits_[0] |= 0x00080000u;
}
void BasicInfo::clear_has_year() {
  _has_bits_[0] &= ~0x00080000u;
}
void BasicInfo::clear_year() {
  year_ = 0;
  clear_has_year();
}
::google::protobuf::int32 BasicInfo::year() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.year)
  return year_;
}
void BasicInfo::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.year)
}

// optional int32 month = 24;
bool BasicInfo::has_month() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void BasicInfo::set_has_month() {
  _has_bits_[0] |= 0x00400000u;
}
void BasicInfo::clear_has_month() {
  _has_bits_[0] &= ~0x00400000u;
}
void BasicInfo::clear_month() {
  month_ = 0;
  clear_has_month();
}
::google::protobuf::int32 BasicInfo::month() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.month)
  return month_;
}
void BasicInfo::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.month)
}

// optional int32 day = 25;
bool BasicInfo::has_day() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void BasicInfo::set_has_day() {
  _has_bits_[0] |= 0x00800000u;
}
void BasicInfo::clear_has_day() {
  _has_bits_[0] &= ~0x00800000u;
}
void BasicInfo::clear_day() {
  day_ = 0;
  clear_has_day();
}
::google::protobuf::int32 BasicInfo::day() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.day)
  return day_;
}
void BasicInfo::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.day)
}

// optional int32 hours = 26;
bool BasicInfo::has_hours() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void BasicInfo::set_has_hours() {
  _has_bits_[0] |= 0x01000000u;
}
void BasicInfo::clear_has_hours() {
  _has_bits_[0] &= ~0x01000000u;
}
void BasicInfo::clear_hours() {
  hours_ = 0;
  clear_has_hours();
}
::google::protobuf::int32 BasicInfo::hours() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.hours)
  return hours_;
}
void BasicInfo::set_hours(::google::protobuf::int32 value) {
  set_has_hours();
  hours_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.hours)
}

// optional int32 minutes = 27;
bool BasicInfo::has_minutes() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void BasicInfo::set_has_minutes() {
  _has_bits_[0] |= 0x02000000u;
}
void BasicInfo::clear_has_minutes() {
  _has_bits_[0] &= ~0x02000000u;
}
void BasicInfo::clear_minutes() {
  minutes_ = 0;
  clear_has_minutes();
}
::google::protobuf::int32 BasicInfo::minutes() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.minutes)
  return minutes_;
}
void BasicInfo::set_minutes(::google::protobuf::int32 value) {
  set_has_minutes();
  minutes_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.minutes)
}

// optional int32 seconds = 28;
bool BasicInfo::has_seconds() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void BasicInfo::set_has_seconds() {
  _has_bits_[0] |= 0x04000000u;
}
void BasicInfo::clear_has_seconds() {
  _has_bits_[0] &= ~0x04000000u;
}
void BasicInfo::clear_seconds() {
  seconds_ = 0;
  clear_has_seconds();
}
::google::protobuf::int32 BasicInfo::seconds() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.seconds)
  return seconds_;
}
void BasicInfo::set_seconds(::google::protobuf::int32 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.seconds)
}

// optional double compass_direction = 29;
bool BasicInfo::has_compass_direction() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void BasicInfo::set_has_compass_direction() {
  _has_bits_[0] |= 0x40000000u;
}
void BasicInfo::clear_has_compass_direction() {
  _has_bits_[0] &= ~0x40000000u;
}
void BasicInfo::clear_compass_direction() {
  compass_direction_ = 0;
  clear_has_compass_direction();
}
double BasicInfo::compass_direction() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.compass_direction)
  return compass_direction_;
}
void BasicInfo::set_compass_direction(double value) {
  set_has_compass_direction();
  compass_direction_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.compass_direction)
}

// optional double pdop = 30;
bool BasicInfo::has_pdop() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void BasicInfo::set_has_pdop() {
  _has_bits_[0] |= 0x80000000u;
}
void BasicInfo::clear_has_pdop() {
  _has_bits_[0] &= ~0x80000000u;
}
void BasicInfo::clear_pdop() {
  pdop_ = 0;
  clear_has_pdop();
}
double BasicInfo::pdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.pdop)
  return pdop_;
}
void BasicInfo::set_pdop(double value) {
  set_has_pdop();
  pdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.pdop)
}

// optional bool is_gps_fault = 31;
bool BasicInfo::has_is_gps_fault() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void BasicInfo::set_has_is_gps_fault() {
  _has_bits_[0] |= 0x10000000u;
}
void BasicInfo::clear_has_is_gps_fault() {
  _has_bits_[0] &= ~0x10000000u;
}
void BasicInfo::clear_is_gps_fault() {
  is_gps_fault_ = false;
  clear_has_is_gps_fault();
}
bool BasicInfo::is_gps_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.is_gps_fault)
  return is_gps_fault_;
}
void BasicInfo::set_is_gps_fault(bool value) {
  set_has_is_gps_fault();
  is_gps_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.is_gps_fault)
}

// optional bool is_inferred = 32;
bool BasicInfo::has_is_inferred() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void BasicInfo::set_has_is_inferred() {
  _has_bits_[0] |= 0x20000000u;
}
void BasicInfo::clear_has_is_inferred() {
  _has_bits_[0] &= ~0x20000000u;
}
void BasicInfo::clear_is_inferred() {
  is_inferred_ = false;
  clear_has_is_inferred();
}
bool BasicInfo::is_inferred() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.is_inferred)
  return is_inferred_;
}
void BasicInfo::set_is_inferred(bool value) {
  set_has_is_inferred();
  is_inferred_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.is_inferred)
}

// optional double altitude = 33;
bool BasicInfo::has_altitude() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void BasicInfo::set_has_altitude() {
  _has_bits_[1] |= 0x00000001u;
}
void BasicInfo::clear_has_altitude() {
  _has_bits_[1] &= ~0x00000001u;
}
void BasicInfo::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
double BasicInfo::altitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.altitude)
  return altitude_;
}
void BasicInfo::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.altitude)
}

// optional double heading = 34;
bool BasicInfo::has_heading() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void BasicInfo::set_has_heading() {
  _has_bits_[1] |= 0x00000002u;
}
void BasicInfo::clear_has_heading() {
  _has_bits_[1] &= ~0x00000002u;
}
void BasicInfo::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
double BasicInfo::heading() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.heading)
  return heading_;
}
void BasicInfo::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.heading)
}

// optional double hdop = 35;
bool BasicInfo::has_hdop() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void BasicInfo::set_has_hdop() {
  _has_bits_[1] |= 0x00000004u;
}
void BasicInfo::clear_has_hdop() {
  _has_bits_[1] &= ~0x00000004u;
}
void BasicInfo::clear_hdop() {
  hdop_ = 0;
  clear_has_hdop();
}
double BasicInfo::hdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.hdop)
  return hdop_;
}
void BasicInfo::set_hdop(double value) {
  set_has_hdop();
  hdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.hdop)
}

// optional double vdop = 36;
bool BasicInfo::has_vdop() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void BasicInfo::set_has_vdop() {
  _has_bits_[1] |= 0x00000008u;
}
void BasicInfo::clear_has_vdop() {
  _has_bits_[1] &= ~0x00000008u;
}
void BasicInfo::clear_vdop() {
  vdop_ = 0;
  clear_has_vdop();
}
double BasicInfo::vdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.vdop)
  return vdop_;
}
void BasicInfo::set_vdop(double value) {
  set_has_vdop();
  vdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.vdop)
}

// optional .apollo.canbus.GpsQuality quality = 37;
bool BasicInfo::has_quality() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void BasicInfo::set_has_quality() {
  _has_bits_[1] |= 0x00000010u;
}
void BasicInfo::clear_has_quality() {
  _has_bits_[1] &= ~0x00000010u;
}
void BasicInfo::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
::apollo::canbus::GpsQuality BasicInfo::quality() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.quality)
  return static_cast< ::apollo::canbus::GpsQuality >(quality_);
}
void BasicInfo::set_quality(::apollo::canbus::GpsQuality value) {
  assert(::apollo::canbus::GpsQuality_IsValid(value));
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.quality)
}

// optional int32 num_satellites = 38;
bool BasicInfo::has_num_satellites() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void BasicInfo::set_has_num_satellites() {
  _has_bits_[1] |= 0x00000020u;
}
void BasicInfo::clear_has_num_satellites() {
  _has_bits_[1] &= ~0x00000020u;
}
void BasicInfo::clear_num_satellites() {
  num_satellites_ = 0;
  clear_has_num_satellites();
}
::google::protobuf::int32 BasicInfo::num_satellites() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.num_satellites)
  return num_satellites_;
}
void BasicInfo::set_num_satellites(::google::protobuf::int32 value) {
  set_has_num_satellites();
  num_satellites_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.num_satellites)
}

// optional double gps_speed = 39;
bool BasicInfo::has_gps_speed() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void BasicInfo::set_has_gps_speed() {
  _has_bits_[1] |= 0x00000040u;
}
void BasicInfo::clear_has_gps_speed() {
  _has_bits_[1] &= ~0x00000040u;
}
void BasicInfo::clear_gps_speed() {
  gps_speed_ = 0;
  clear_has_gps_speed();
}
double BasicInfo::gps_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.BasicInfo.gps_speed)
  return gps_speed_;
}
void BasicInfo::set_gps_speed(double value) {
  set_has_gps_speed();
  gps_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.BasicInfo.gps_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int License::kVinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

License::License()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.License)
}
License::License(const License& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vin()) {
    vin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vin_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.License)
}

void License::SharedCtor() {
  _cached_size_ = 0;
  vin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

License::~License() {
  // @@protoc_insertion_point(destructor:apollo.canbus.License)
  SharedDtor();
}

void License::SharedDtor() {
  vin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void License::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* License::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const License& License::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::InitDefaults();
  return *internal_default_instance();
}

License* License::New(::google::protobuf::Arena* arena) const {
  License* n = new License;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void License::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.License)
  if (has_vin()) {
    GOOGLE_DCHECK(!vin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*vin_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool License::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.License)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vin().data(), this->vin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.canbus.License.vin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.License)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.License)
  return false;
#undef DO_
}

void License::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.canbus.License.vin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.License)
}

::google::protobuf::uint8* License::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.canbus.License.vin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.License)
  return target;
}

size_t License::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.License)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string vin = 1;
  if (has_vin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void License::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.License)
  GOOGLE_DCHECK_NE(&from, this);
  const License* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const License>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.License)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.License)
    MergeFrom(*source);
  }
}

void License::MergeFrom(const License& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.License)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vin()) {
    set_has_vin();
    vin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vin_);
  }
}

void License::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void License::CopyFrom(const License& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool License::IsInitialized() const {
  return true;
}

void License::Swap(License* other) {
  if (other == this) return;
  InternalSwap(other);
}
void License::InternalSwap(License* other) {
  vin_.Swap(&other->vin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata License::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// License

// optional string vin = 1;
bool License::has_vin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void License::set_has_vin() {
  _has_bits_[0] |= 0x00000001u;
}
void License::clear_has_vin() {
  _has_bits_[0] &= ~0x00000001u;
}
void License::clear_vin() {
  vin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vin();
}
const ::std::string& License::vin() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.License.vin)
  return vin_.GetNoArena();
}
void License::set_vin(const ::std::string& value) {
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.canbus.License.vin)
}
#if LANG_CXX11
void License::set_vin(::std::string&& value) {
  set_has_vin();
  vin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.canbus.License.vin)
}
#endif
void License::set_vin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.canbus.License.vin)
}
void License::set_vin(const char* value, size_t size) {
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.canbus.License.vin)
}
::std::string* License::mutable_vin() {
  set_has_vin();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.License.vin)
  return vin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* License::release_vin() {
  // @@protoc_insertion_point(field_release:apollo.canbus.License.vin)
  clear_has_vin();
  return vin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void License::set_allocated_vin(::std::string* vin) {
  if (vin != NULL) {
    set_has_vin();
  } else {
    clear_has_vin();
  }
  vin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vin);
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.License.vin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
