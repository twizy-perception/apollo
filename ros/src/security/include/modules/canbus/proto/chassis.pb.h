// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/chassis.proto

#ifndef PROTOBUF_modules_2fcanbus_2fproto_2fchassis_2eproto__INCLUDED
#define PROTOBUF_modules_2fcanbus_2fproto_2fchassis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/vehicle_signal.pb.h"
// @@protoc_insertion_point(includes)
namespace apollo {
namespace canbus {
class Chassis;
class ChassisDefaultTypeInternal;
extern ChassisDefaultTypeInternal _Chassis_default_instance_;
class ChassisGPS;
class ChassisGPSDefaultTypeInternal;
extern ChassisGPSDefaultTypeInternal _ChassisGPS_default_instance_;
}  // namespace canbus
namespace common {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class VehicleSignal;
class VehicleSignalDefaultTypeInternal;
extern VehicleSignalDefaultTypeInternal _VehicleSignal_default_instance_;
}  // namespace common
}  // namespace apollo

namespace apollo {
namespace canbus {

namespace protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto

enum Chassis_DrivingMode {
  Chassis_DrivingMode_COMPLETE_MANUAL = 0,
  Chassis_DrivingMode_COMPLETE_AUTO_DRIVE = 1,
  Chassis_DrivingMode_AUTO_STEER_ONLY = 2,
  Chassis_DrivingMode_AUTO_SPEED_ONLY = 3,
  Chassis_DrivingMode_EMERGENCY_MODE = 4
};
bool Chassis_DrivingMode_IsValid(int value);
const Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MIN = Chassis_DrivingMode_COMPLETE_MANUAL;
const Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MAX = Chassis_DrivingMode_EMERGENCY_MODE;
const int Chassis_DrivingMode_DrivingMode_ARRAYSIZE = Chassis_DrivingMode_DrivingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chassis_DrivingMode_descriptor();
inline const ::std::string& Chassis_DrivingMode_Name(Chassis_DrivingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chassis_DrivingMode_descriptor(), value);
}
inline bool Chassis_DrivingMode_Parse(
    const ::std::string& name, Chassis_DrivingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_DrivingMode>(
    Chassis_DrivingMode_descriptor(), name, value);
}
enum Chassis_ErrorCode {
  Chassis_ErrorCode_NO_ERROR = 0,
  Chassis_ErrorCode_CMD_NOT_IN_PERIOD = 1,
  Chassis_ErrorCode_CHASSIS_ERROR = 2,
  Chassis_ErrorCode_MANUAL_INTERVENTION = 3,
  Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD = 4,
  Chassis_ErrorCode_UNKNOWN_ERROR = 5
};
bool Chassis_ErrorCode_IsValid(int value);
const Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MIN = Chassis_ErrorCode_NO_ERROR;
const Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MAX = Chassis_ErrorCode_UNKNOWN_ERROR;
const int Chassis_ErrorCode_ErrorCode_ARRAYSIZE = Chassis_ErrorCode_ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chassis_ErrorCode_descriptor();
inline const ::std::string& Chassis_ErrorCode_Name(Chassis_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chassis_ErrorCode_descriptor(), value);
}
inline bool Chassis_ErrorCode_Parse(
    const ::std::string& name, Chassis_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_ErrorCode>(
    Chassis_ErrorCode_descriptor(), name, value);
}
enum Chassis_GearPosition {
  Chassis_GearPosition_GEAR_NEUTRAL = 0,
  Chassis_GearPosition_GEAR_DRIVE = 1,
  Chassis_GearPosition_GEAR_REVERSE = 2,
  Chassis_GearPosition_GEAR_PARKING = 3,
  Chassis_GearPosition_GEAR_LOW = 4,
  Chassis_GearPosition_GEAR_INVALID = 5,
  Chassis_GearPosition_GEAR_NONE = 6
};
bool Chassis_GearPosition_IsValid(int value);
const Chassis_GearPosition Chassis_GearPosition_GearPosition_MIN = Chassis_GearPosition_GEAR_NEUTRAL;
const Chassis_GearPosition Chassis_GearPosition_GearPosition_MAX = Chassis_GearPosition_GEAR_NONE;
const int Chassis_GearPosition_GearPosition_ARRAYSIZE = Chassis_GearPosition_GearPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chassis_GearPosition_descriptor();
inline const ::std::string& Chassis_GearPosition_Name(Chassis_GearPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chassis_GearPosition_descriptor(), value);
}
inline bool Chassis_GearPosition_Parse(
    const ::std::string& name, Chassis_GearPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_GearPosition>(
    Chassis_GearPosition_descriptor(), name, value);
}
enum GpsQuality {
  FIX_NO = 0,
  FIX_2D = 1,
  FIX_3D = 2,
  FIX_INVALID = 3
};
bool GpsQuality_IsValid(int value);
const GpsQuality GpsQuality_MIN = FIX_NO;
const GpsQuality GpsQuality_MAX = FIX_INVALID;
const int GpsQuality_ARRAYSIZE = GpsQuality_MAX + 1;

const ::google::protobuf::EnumDescriptor* GpsQuality_descriptor();
inline const ::std::string& GpsQuality_Name(GpsQuality value) {
  return ::google::protobuf::internal::NameOfEnum(
    GpsQuality_descriptor(), value);
}
inline bool GpsQuality_Parse(
    const ::std::string& name, GpsQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GpsQuality>(
    GpsQuality_descriptor(), name, value);
}
// ===================================================================

class Chassis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Chassis) */ {
 public:
  Chassis();
  virtual ~Chassis();

  Chassis(const Chassis& from);

  inline Chassis& operator=(const Chassis& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chassis& default_instance();

  static inline const Chassis* internal_default_instance() {
    return reinterpret_cast<const Chassis*>(
               &_Chassis_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Chassis* other);

  // implements Message ----------------------------------------------

  inline Chassis* New() const PROTOBUF_FINAL { return New(NULL); }

  Chassis* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Chassis& from);
  void MergeFrom(const Chassis& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Chassis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Chassis_DrivingMode DrivingMode;
  static const DrivingMode COMPLETE_MANUAL =
    Chassis_DrivingMode_COMPLETE_MANUAL;
  static const DrivingMode COMPLETE_AUTO_DRIVE =
    Chassis_DrivingMode_COMPLETE_AUTO_DRIVE;
  static const DrivingMode AUTO_STEER_ONLY =
    Chassis_DrivingMode_AUTO_STEER_ONLY;
  static const DrivingMode AUTO_SPEED_ONLY =
    Chassis_DrivingMode_AUTO_SPEED_ONLY;
  static const DrivingMode EMERGENCY_MODE =
    Chassis_DrivingMode_EMERGENCY_MODE;
  static inline bool DrivingMode_IsValid(int value) {
    return Chassis_DrivingMode_IsValid(value);
  }
  static const DrivingMode DrivingMode_MIN =
    Chassis_DrivingMode_DrivingMode_MIN;
  static const DrivingMode DrivingMode_MAX =
    Chassis_DrivingMode_DrivingMode_MAX;
  static const int DrivingMode_ARRAYSIZE =
    Chassis_DrivingMode_DrivingMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DrivingMode_descriptor() {
    return Chassis_DrivingMode_descriptor();
  }
  static inline const ::std::string& DrivingMode_Name(DrivingMode value) {
    return Chassis_DrivingMode_Name(value);
  }
  static inline bool DrivingMode_Parse(const ::std::string& name,
      DrivingMode* value) {
    return Chassis_DrivingMode_Parse(name, value);
  }

  typedef Chassis_ErrorCode ErrorCode;
  static const ErrorCode NO_ERROR =
    Chassis_ErrorCode_NO_ERROR;
  static const ErrorCode CMD_NOT_IN_PERIOD =
    Chassis_ErrorCode_CMD_NOT_IN_PERIOD;
  static const ErrorCode CHASSIS_ERROR =
    Chassis_ErrorCode_CHASSIS_ERROR;
  static const ErrorCode MANUAL_INTERVENTION =
    Chassis_ErrorCode_MANUAL_INTERVENTION;
  static const ErrorCode CHASSIS_CAN_NOT_IN_PERIOD =
    Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD;
  static const ErrorCode UNKNOWN_ERROR =
    Chassis_ErrorCode_UNKNOWN_ERROR;
  static inline bool ErrorCode_IsValid(int value) {
    return Chassis_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    Chassis_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    Chassis_ErrorCode_ErrorCode_MAX;
  static const int ErrorCode_ARRAYSIZE =
    Chassis_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return Chassis_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return Chassis_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return Chassis_ErrorCode_Parse(name, value);
  }

  typedef Chassis_GearPosition GearPosition;
  static const GearPosition GEAR_NEUTRAL =
    Chassis_GearPosition_GEAR_NEUTRAL;
  static const GearPosition GEAR_DRIVE =
    Chassis_GearPosition_GEAR_DRIVE;
  static const GearPosition GEAR_REVERSE =
    Chassis_GearPosition_GEAR_REVERSE;
  static const GearPosition GEAR_PARKING =
    Chassis_GearPosition_GEAR_PARKING;
  static const GearPosition GEAR_LOW =
    Chassis_GearPosition_GEAR_LOW;
  static const GearPosition GEAR_INVALID =
    Chassis_GearPosition_GEAR_INVALID;
  static const GearPosition GEAR_NONE =
    Chassis_GearPosition_GEAR_NONE;
  static inline bool GearPosition_IsValid(int value) {
    return Chassis_GearPosition_IsValid(value);
  }
  static const GearPosition GearPosition_MIN =
    Chassis_GearPosition_GearPosition_MIN;
  static const GearPosition GearPosition_MAX =
    Chassis_GearPosition_GearPosition_MAX;
  static const int GearPosition_ARRAYSIZE =
    Chassis_GearPosition_GearPosition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GearPosition_descriptor() {
    return Chassis_GearPosition_descriptor();
  }
  static inline const ::std::string& GearPosition_Name(GearPosition value) {
    return Chassis_GearPosition_Name(value);
  }
  static inline bool GearPosition_Parse(const ::std::string& name,
      GearPosition* value) {
    return Chassis_GearPosition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 25;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 25;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.common.VehicleSignal signal = 27;
  bool has_signal() const;
  void clear_signal();
  static const int kSignalFieldNumber = 27;
  const ::apollo::common::VehicleSignal& signal() const;
  ::apollo::common::VehicleSignal* mutable_signal();
  ::apollo::common::VehicleSignal* release_signal();
  void set_allocated_signal(::apollo::common::VehicleSignal* signal);

  // optional .apollo.canbus.ChassisGPS chassis_gps = 28;
  bool has_chassis_gps() const;
  void clear_chassis_gps();
  static const int kChassisGpsFieldNumber = 28;
  const ::apollo::canbus::ChassisGPS& chassis_gps() const;
  ::apollo::canbus::ChassisGPS* mutable_chassis_gps();
  ::apollo::canbus::ChassisGPS* release_chassis_gps();
  void set_allocated_chassis_gps(::apollo::canbus::ChassisGPS* chassis_gps);

  // optional int32 fuel_range_m = 7;
  bool has_fuel_range_m() const;
  void clear_fuel_range_m();
  static const int kFuelRangeMFieldNumber = 7;
  ::google::protobuf::int32 fuel_range_m() const;
  void set_fuel_range_m(::google::protobuf::int32 value);

  // optional bool engine_started = 3;
  bool has_engine_started() const;
  void clear_engine_started();
  static const int kEngineStartedFieldNumber = 3;
  bool engine_started() const;
  void set_engine_started(bool value);

  // optional bool parking_brake = 13;
  bool has_parking_brake() const;
  void clear_parking_brake();
  static const int kParkingBrakeFieldNumber = 13;
  bool parking_brake() const;
  void set_parking_brake(bool value);

  // optional bool high_beam_signal = 14 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_high_beam_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_high_beam_signal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kHighBeamSignalFieldNumber = 14;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool high_beam_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_high_beam_signal(bool value);

  // optional bool low_beam_signal = 15 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_low_beam_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_low_beam_signal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kLowBeamSignalFieldNumber = 15;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool low_beam_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_low_beam_signal(bool value);

  // optional bool left_turn_signal = 16 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_left_turn_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_left_turn_signal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kLeftTurnSignalFieldNumber = 16;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool left_turn_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_left_turn_signal(bool value);

  // optional bool right_turn_signal = 17 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_right_turn_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_right_turn_signal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kRightTurnSignalFieldNumber = 17;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool right_turn_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_right_turn_signal(bool value);

  // optional bool horn = 18 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_horn() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_horn();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kHornFieldNumber = 18;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool horn() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_horn(bool value);

  // optional bool wiper = 19;
  bool has_wiper() const;
  void clear_wiper();
  static const int kWiperFieldNumber = 19;
  bool wiper() const;
  void set_wiper(bool value);

  // optional bool disengage_status = 20 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_disengage_status() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_disengage_status();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kDisengageStatusFieldNumber = 20;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool disengage_status() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_disengage_status(bool value);

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  bool has_driving_mode() const;
  void clear_driving_mode();
  static const int kDrivingModeFieldNumber = 21;
  ::apollo::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::apollo::canbus::Chassis_DrivingMode value);

  // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 22;
  ::apollo::canbus::Chassis_ErrorCode error_code() const;
  void set_error_code(::apollo::canbus::Chassis_ErrorCode value);

  // optional double steering_timestamp = 24;
  bool has_steering_timestamp() const;
  void clear_steering_timestamp();
  static const int kSteeringTimestampFieldNumber = 24;
  double steering_timestamp() const;
  void set_steering_timestamp(double value);

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
  bool has_gear_location() const;
  void clear_gear_location();
  static const int kGearLocationFieldNumber = 23;
  ::apollo::canbus::Chassis_GearPosition gear_location() const;
  void set_gear_location(::apollo::canbus::Chassis_GearPosition value);

  // optional int32 chassis_error_mask = 26 [default = 0];
  bool has_chassis_error_mask() const;
  void clear_chassis_error_mask();
  static const int kChassisErrorMaskFieldNumber = 26;
  ::google::protobuf::int32 chassis_error_mask() const;
  void set_chassis_error_mask(::google::protobuf::int32 value);

  // optional float steering_torque_nm = 12 [default = nan];
  bool has_steering_torque_nm() const;
  void clear_steering_torque_nm();
  static const int kSteeringTorqueNmFieldNumber = 12;
  float steering_torque_nm() const;
  void set_steering_torque_nm(float value);

  // optional float engine_rpm = 4 [default = nan];
  bool has_engine_rpm() const;
  void clear_engine_rpm();
  static const int kEngineRpmFieldNumber = 4;
  float engine_rpm() const;
  void set_engine_rpm(float value);

  // optional float speed_mps = 5 [default = nan];
  bool has_speed_mps() const;
  void clear_speed_mps();
  static const int kSpeedMpsFieldNumber = 5;
  float speed_mps() const;
  void set_speed_mps(float value);

  // optional float odometer_m = 6 [default = nan];
  bool has_odometer_m() const;
  void clear_odometer_m();
  static const int kOdometerMFieldNumber = 6;
  float odometer_m() const;
  void set_odometer_m(float value);

  // optional float throttle_percentage = 8 [default = nan];
  bool has_throttle_percentage() const;
  void clear_throttle_percentage();
  static const int kThrottlePercentageFieldNumber = 8;
  float throttle_percentage() const;
  void set_throttle_percentage(float value);

  // optional float brake_percentage = 9 [default = nan];
  bool has_brake_percentage() const;
  void clear_brake_percentage();
  static const int kBrakePercentageFieldNumber = 9;
  float brake_percentage() const;
  void set_brake_percentage(float value);

  // optional float steering_percentage = 11 [default = nan];
  bool has_steering_percentage() const;
  void clear_steering_percentage();
  static const int kSteeringPercentageFieldNumber = 11;
  float steering_percentage() const;
  void set_steering_percentage(float value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Chassis)
 private:
  void set_has_engine_started();
  void clear_has_engine_started();
  void set_has_engine_rpm();
  void clear_has_engine_rpm();
  void set_has_speed_mps();
  void clear_has_speed_mps();
  void set_has_odometer_m();
  void clear_has_odometer_m();
  void set_has_fuel_range_m();
  void clear_has_fuel_range_m();
  void set_has_throttle_percentage();
  void clear_has_throttle_percentage();
  void set_has_brake_percentage();
  void clear_has_brake_percentage();
  void set_has_steering_percentage();
  void clear_has_steering_percentage();
  void set_has_steering_torque_nm();
  void clear_has_steering_torque_nm();
  void set_has_parking_brake();
  void clear_has_parking_brake();
  void set_has_high_beam_signal();
  void clear_has_high_beam_signal();
  void set_has_low_beam_signal();
  void clear_has_low_beam_signal();
  void set_has_left_turn_signal();
  void clear_has_left_turn_signal();
  void set_has_right_turn_signal();
  void clear_has_right_turn_signal();
  void set_has_horn();
  void clear_has_horn();
  void set_has_wiper();
  void clear_has_wiper();
  void set_has_disengage_status();
  void clear_has_disengage_status();
  void set_has_driving_mode();
  void clear_has_driving_mode();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_gear_location();
  void clear_has_gear_location();
  void set_has_steering_timestamp();
  void clear_has_steering_timestamp();
  void set_has_header();
  void clear_has_header();
  void set_has_chassis_error_mask();
  void clear_has_chassis_error_mask();
  void set_has_signal();
  void clear_has_signal();
  void set_has_chassis_gps();
  void clear_has_chassis_gps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  ::apollo::common::VehicleSignal* signal_;
  ::apollo::canbus::ChassisGPS* chassis_gps_;
  ::google::protobuf::int32 fuel_range_m_;
  bool engine_started_;
  bool parking_brake_;
  bool high_beam_signal_;
  bool low_beam_signal_;
  bool left_turn_signal_;
  bool right_turn_signal_;
  bool horn_;
  bool wiper_;
  bool disengage_status_;
  int driving_mode_;
  int error_code_;
  double steering_timestamp_;
  int gear_location_;
  ::google::protobuf::int32 chassis_error_mask_;
  float steering_torque_nm_;
  float engine_rpm_;
  float speed_mps_;
  float odometer_m_;
  float throttle_percentage_;
  float brake_percentage_;
  float steering_percentage_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChassisGPS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.ChassisGPS) */ {
 public:
  ChassisGPS();
  virtual ~ChassisGPS();

  ChassisGPS(const ChassisGPS& from);

  inline ChassisGPS& operator=(const ChassisGPS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChassisGPS& default_instance();

  static inline const ChassisGPS* internal_default_instance() {
    return reinterpret_cast<const ChassisGPS*>(
               &_ChassisGPS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ChassisGPS* other);

  // implements Message ----------------------------------------------

  inline ChassisGPS* New() const PROTOBUF_FINAL { return New(NULL); }

  ChassisGPS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChassisGPS& from);
  void MergeFrom(const ChassisGPS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChassisGPS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double latitude = 1;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // optional int32 year = 4;
  bool has_year() const;
  void clear_year();
  static const int kYearFieldNumber = 4;
  ::google::protobuf::int32 year() const;
  void set_year(::google::protobuf::int32 value);

  // optional int32 month = 5;
  bool has_month() const;
  void clear_month();
  static const int kMonthFieldNumber = 5;
  ::google::protobuf::int32 month() const;
  void set_month(::google::protobuf::int32 value);

  // optional int32 day = 6;
  bool has_day() const;
  void clear_day();
  static const int kDayFieldNumber = 6;
  ::google::protobuf::int32 day() const;
  void set_day(::google::protobuf::int32 value);

  // optional int32 hours = 7;
  bool has_hours() const;
  void clear_hours();
  static const int kHoursFieldNumber = 7;
  ::google::protobuf::int32 hours() const;
  void set_hours(::google::protobuf::int32 value);

  // optional int32 minutes = 8;
  bool has_minutes() const;
  void clear_minutes();
  static const int kMinutesFieldNumber = 8;
  ::google::protobuf::int32 minutes() const;
  void set_minutes(::google::protobuf::int32 value);

  // optional int32 seconds = 9;
  bool has_seconds() const;
  void clear_seconds();
  static const int kSecondsFieldNumber = 9;
  ::google::protobuf::int32 seconds() const;
  void set_seconds(::google::protobuf::int32 value);

  // optional double compass_direction = 10;
  bool has_compass_direction() const;
  void clear_compass_direction();
  static const int kCompassDirectionFieldNumber = 10;
  double compass_direction() const;
  void set_compass_direction(double value);

  // optional double pdop = 11;
  bool has_pdop() const;
  void clear_pdop();
  static const int kPdopFieldNumber = 11;
  double pdop() const;
  void set_pdop(double value);

  // optional bool gps_valid = 3;
  bool has_gps_valid() const;
  void clear_gps_valid();
  static const int kGpsValidFieldNumber = 3;
  bool gps_valid() const;
  void set_gps_valid(bool value);

  // optional bool is_gps_fault = 12;
  bool has_is_gps_fault() const;
  void clear_is_gps_fault();
  static const int kIsGpsFaultFieldNumber = 12;
  bool is_gps_fault() const;
  void set_is_gps_fault(bool value);

  // optional bool is_inferred = 13;
  bool has_is_inferred() const;
  void clear_is_inferred();
  static const int kIsInferredFieldNumber = 13;
  bool is_inferred() const;
  void set_is_inferred(bool value);

  // optional .apollo.canbus.GpsQuality quality = 18;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 18;
  ::apollo::canbus::GpsQuality quality() const;
  void set_quality(::apollo::canbus::GpsQuality value);

  // optional double altitude = 14;
  bool has_altitude() const;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 14;
  double altitude() const;
  void set_altitude(double value);

  // optional double heading = 15;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 15;
  double heading() const;
  void set_heading(double value);

  // optional double hdop = 16;
  bool has_hdop() const;
  void clear_hdop();
  static const int kHdopFieldNumber = 16;
  double hdop() const;
  void set_hdop(double value);

  // optional double vdop = 17;
  bool has_vdop() const;
  void clear_vdop();
  static const int kVdopFieldNumber = 17;
  double vdop() const;
  void set_vdop(double value);

  // optional double gps_speed = 20;
  bool has_gps_speed() const;
  void clear_gps_speed();
  static const int kGpsSpeedFieldNumber = 20;
  double gps_speed() const;
  void set_gps_speed(double value);

  // optional int32 num_satellites = 19;
  bool has_num_satellites() const;
  void clear_num_satellites();
  static const int kNumSatellitesFieldNumber = 19;
  ::google::protobuf::int32 num_satellites() const;
  void set_num_satellites(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.ChassisGPS)
 private:
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_gps_valid();
  void clear_has_gps_valid();
  void set_has_year();
  void clear_has_year();
  void set_has_month();
  void clear_has_month();
  void set_has_day();
  void clear_has_day();
  void set_has_hours();
  void clear_has_hours();
  void set_has_minutes();
  void clear_has_minutes();
  void set_has_seconds();
  void clear_has_seconds();
  void set_has_compass_direction();
  void clear_has_compass_direction();
  void set_has_pdop();
  void clear_has_pdop();
  void set_has_is_gps_fault();
  void clear_has_is_gps_fault();
  void set_has_is_inferred();
  void clear_has_is_inferred();
  void set_has_altitude();
  void clear_has_altitude();
  void set_has_heading();
  void clear_has_heading();
  void set_has_hdop();
  void clear_has_hdop();
  void set_has_vdop();
  void clear_has_vdop();
  void set_has_quality();
  void clear_has_quality();
  void set_has_num_satellites();
  void clear_has_num_satellites();
  void set_has_gps_speed();
  void clear_has_gps_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  ::google::protobuf::int32 year_;
  ::google::protobuf::int32 month_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 hours_;
  ::google::protobuf::int32 minutes_;
  ::google::protobuf::int32 seconds_;
  double compass_direction_;
  double pdop_;
  bool gps_valid_;
  bool is_gps_fault_;
  bool is_inferred_;
  int quality_;
  double altitude_;
  double heading_;
  double hdop_;
  double vdop_;
  double gps_speed_;
  ::google::protobuf::int32 num_satellites_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Chassis

// optional bool engine_started = 3;
inline bool Chassis::has_engine_started() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Chassis::set_has_engine_started() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Chassis::clear_has_engine_started() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Chassis::clear_engine_started() {
  engine_started_ = false;
  clear_has_engine_started();
}
inline bool Chassis::engine_started() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.engine_started)
  return engine_started_;
}
inline void Chassis::set_engine_started(bool value) {
  set_has_engine_started();
  engine_started_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.engine_started)
}

// optional float engine_rpm = 4 [default = nan];
inline bool Chassis::has_engine_rpm() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Chassis::set_has_engine_rpm() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Chassis::clear_has_engine_rpm() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Chassis::clear_engine_rpm() {
  engine_rpm_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_engine_rpm();
}
inline float Chassis::engine_rpm() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.engine_rpm)
  return engine_rpm_;
}
inline void Chassis::set_engine_rpm(float value) {
  set_has_engine_rpm();
  engine_rpm_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.engine_rpm)
}

// optional float speed_mps = 5 [default = nan];
inline bool Chassis::has_speed_mps() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Chassis::set_has_speed_mps() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Chassis::clear_has_speed_mps() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Chassis::clear_speed_mps() {
  speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_speed_mps();
}
inline float Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.speed_mps)
  return speed_mps_;
}
inline void Chassis::set_speed_mps(float value) {
  set_has_speed_mps();
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.speed_mps)
}

// optional float odometer_m = 6 [default = nan];
inline bool Chassis::has_odometer_m() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Chassis::set_has_odometer_m() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Chassis::clear_has_odometer_m() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Chassis::clear_odometer_m() {
  odometer_m_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_odometer_m();
}
inline float Chassis::odometer_m() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.odometer_m)
  return odometer_m_;
}
inline void Chassis::set_odometer_m(float value) {
  set_has_odometer_m();
  odometer_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.odometer_m)
}

// optional int32 fuel_range_m = 7;
inline bool Chassis::has_fuel_range_m() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chassis::set_has_fuel_range_m() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chassis::clear_has_fuel_range_m() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chassis::clear_fuel_range_m() {
  fuel_range_m_ = 0;
  clear_has_fuel_range_m();
}
inline ::google::protobuf::int32 Chassis::fuel_range_m() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.fuel_range_m)
  return fuel_range_m_;
}
inline void Chassis::set_fuel_range_m(::google::protobuf::int32 value) {
  set_has_fuel_range_m();
  fuel_range_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.fuel_range_m)
}

// optional float throttle_percentage = 8 [default = nan];
inline bool Chassis::has_throttle_percentage() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Chassis::set_has_throttle_percentage() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Chassis::clear_has_throttle_percentage() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Chassis::clear_throttle_percentage() {
  throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_throttle_percentage();
}
inline float Chassis::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.throttle_percentage)
  return throttle_percentage_;
}
inline void Chassis::set_throttle_percentage(float value) {
  set_has_throttle_percentage();
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.throttle_percentage)
}

// optional float brake_percentage = 9 [default = nan];
inline bool Chassis::has_brake_percentage() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Chassis::set_has_brake_percentage() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Chassis::clear_has_brake_percentage() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Chassis::clear_brake_percentage() {
  brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_brake_percentage();
}
inline float Chassis::brake_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.brake_percentage)
  return brake_percentage_;
}
inline void Chassis::set_brake_percentage(float value) {
  set_has_brake_percentage();
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.brake_percentage)
}

// optional float steering_percentage = 11 [default = nan];
inline bool Chassis::has_steering_percentage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Chassis::set_has_steering_percentage() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Chassis::clear_has_steering_percentage() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Chassis::clear_steering_percentage() {
  steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_steering_percentage();
}
inline float Chassis::steering_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_percentage)
  return steering_percentage_;
}
inline void Chassis::set_steering_percentage(float value) {
  set_has_steering_percentage();
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_percentage)
}

// optional float steering_torque_nm = 12 [default = nan];
inline bool Chassis::has_steering_torque_nm() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Chassis::set_has_steering_torque_nm() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Chassis::clear_has_steering_torque_nm() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Chassis::clear_steering_torque_nm() {
  steering_torque_nm_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_steering_torque_nm();
}
inline float Chassis::steering_torque_nm() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_torque_nm)
  return steering_torque_nm_;
}
inline void Chassis::set_steering_torque_nm(float value) {
  set_has_steering_torque_nm();
  steering_torque_nm_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_torque_nm)
}

// optional bool parking_brake = 13;
inline bool Chassis::has_parking_brake() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Chassis::set_has_parking_brake() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Chassis::clear_has_parking_brake() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Chassis::clear_parking_brake() {
  parking_brake_ = false;
  clear_has_parking_brake();
}
inline bool Chassis::parking_brake() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.parking_brake)
  return parking_brake_;
}
inline void Chassis::set_parking_brake(bool value) {
  set_has_parking_brake();
  parking_brake_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.parking_brake)
}

// optional bool high_beam_signal = 14 [deprecated = true];
inline bool Chassis::has_high_beam_signal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Chassis::set_has_high_beam_signal() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Chassis::clear_has_high_beam_signal() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Chassis::clear_high_beam_signal() {
  high_beam_signal_ = false;
  clear_has_high_beam_signal();
}
inline bool Chassis::high_beam_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.high_beam_signal)
  return high_beam_signal_;
}
inline void Chassis::set_high_beam_signal(bool value) {
  set_has_high_beam_signal();
  high_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.high_beam_signal)
}

// optional bool low_beam_signal = 15 [deprecated = true];
inline bool Chassis::has_low_beam_signal() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Chassis::set_has_low_beam_signal() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Chassis::clear_has_low_beam_signal() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Chassis::clear_low_beam_signal() {
  low_beam_signal_ = false;
  clear_has_low_beam_signal();
}
inline bool Chassis::low_beam_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.low_beam_signal)
  return low_beam_signal_;
}
inline void Chassis::set_low_beam_signal(bool value) {
  set_has_low_beam_signal();
  low_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.low_beam_signal)
}

// optional bool left_turn_signal = 16 [deprecated = true];
inline bool Chassis::has_left_turn_signal() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Chassis::set_has_left_turn_signal() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Chassis::clear_has_left_turn_signal() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Chassis::clear_left_turn_signal() {
  left_turn_signal_ = false;
  clear_has_left_turn_signal();
}
inline bool Chassis::left_turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.left_turn_signal)
  return left_turn_signal_;
}
inline void Chassis::set_left_turn_signal(bool value) {
  set_has_left_turn_signal();
  left_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.left_turn_signal)
}

// optional bool right_turn_signal = 17 [deprecated = true];
inline bool Chassis::has_right_turn_signal() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Chassis::set_has_right_turn_signal() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Chassis::clear_has_right_turn_signal() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Chassis::clear_right_turn_signal() {
  right_turn_signal_ = false;
  clear_has_right_turn_signal();
}
inline bool Chassis::right_turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.right_turn_signal)
  return right_turn_signal_;
}
inline void Chassis::set_right_turn_signal(bool value) {
  set_has_right_turn_signal();
  right_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.right_turn_signal)
}

// optional bool horn = 18 [deprecated = true];
inline bool Chassis::has_horn() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Chassis::set_has_horn() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Chassis::clear_has_horn() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Chassis::clear_horn() {
  horn_ = false;
  clear_has_horn();
}
inline bool Chassis::horn() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.horn)
  return horn_;
}
inline void Chassis::set_horn(bool value) {
  set_has_horn();
  horn_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.horn)
}

// optional bool wiper = 19;
inline bool Chassis::has_wiper() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Chassis::set_has_wiper() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Chassis::clear_has_wiper() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Chassis::clear_wiper() {
  wiper_ = false;
  clear_has_wiper();
}
inline bool Chassis::wiper() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.wiper)
  return wiper_;
}
inline void Chassis::set_wiper(bool value) {
  set_has_wiper();
  wiper_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.wiper)
}

// optional bool disengage_status = 20 [deprecated = true];
inline bool Chassis::has_disengage_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Chassis::set_has_disengage_status() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Chassis::clear_has_disengage_status() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Chassis::clear_disengage_status() {
  disengage_status_ = false;
  clear_has_disengage_status();
}
inline bool Chassis::disengage_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.disengage_status)
  return disengage_status_;
}
inline void Chassis::set_disengage_status(bool value) {
  set_has_disengage_status();
  disengage_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.disengage_status)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
inline bool Chassis::has_driving_mode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Chassis::set_has_driving_mode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Chassis::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Chassis::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
inline ::apollo::canbus::Chassis_DrivingMode Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline void Chassis::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.driving_mode)
}

// optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
inline bool Chassis::has_error_code() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Chassis::set_has_error_code() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Chassis::clear_has_error_code() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Chassis::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::apollo::canbus::Chassis_ErrorCode Chassis::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.error_code)
  return static_cast< ::apollo::canbus::Chassis_ErrorCode >(error_code_);
}
inline void Chassis::set_error_code(::apollo::canbus::Chassis_ErrorCode value) {
  assert(::apollo::canbus::Chassis_ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.error_code)
}

// optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
inline bool Chassis::has_gear_location() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Chassis::set_has_gear_location() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Chassis::clear_has_gear_location() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Chassis::clear_gear_location() {
  gear_location_ = 0;
  clear_has_gear_location();
}
inline ::apollo::canbus::Chassis_GearPosition Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.gear_location)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_location_);
}
inline void Chassis::set_gear_location(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_location();
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.gear_location)
}

// optional double steering_timestamp = 24;
inline bool Chassis::has_steering_timestamp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Chassis::set_has_steering_timestamp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Chassis::clear_has_steering_timestamp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Chassis::clear_steering_timestamp() {
  steering_timestamp_ = 0;
  clear_has_steering_timestamp();
}
inline double Chassis::steering_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_timestamp)
  return steering_timestamp_;
}
inline void Chassis::set_steering_timestamp(double value) {
  set_has_steering_timestamp();
  steering_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_timestamp)
}

// optional .apollo.common.Header header = 25;
inline bool Chassis::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chassis::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chassis::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chassis::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& Chassis::header() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
inline ::apollo::common::Header* Chassis::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.header)
  return header_;
}
inline ::apollo::common::Header* Chassis::release_header() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Chassis::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.header)
}

// optional int32 chassis_error_mask = 26 [default = 0];
inline bool Chassis::has_chassis_error_mask() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Chassis::set_has_chassis_error_mask() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Chassis::clear_has_chassis_error_mask() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Chassis::clear_chassis_error_mask() {
  chassis_error_mask_ = 0;
  clear_has_chassis_error_mask();
}
inline ::google::protobuf::int32 Chassis::chassis_error_mask() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.chassis_error_mask)
  return chassis_error_mask_;
}
inline void Chassis::set_chassis_error_mask(::google::protobuf::int32 value) {
  set_has_chassis_error_mask();
  chassis_error_mask_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.chassis_error_mask)
}

// optional .apollo.common.VehicleSignal signal = 27;
inline bool Chassis::has_signal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chassis::set_has_signal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chassis::clear_has_signal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chassis::clear_signal() {
  if (signal_ != NULL) signal_->::apollo::common::VehicleSignal::Clear();
  clear_has_signal();
}
inline const ::apollo::common::VehicleSignal& Chassis::signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.signal)
  return signal_ != NULL ? *signal_
                         : *::apollo::common::VehicleSignal::internal_default_instance();
}
inline ::apollo::common::VehicleSignal* Chassis::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) {
    signal_ = new ::apollo::common::VehicleSignal;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.signal)
  return signal_;
}
inline ::apollo::common::VehicleSignal* Chassis::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.signal)
  clear_has_signal();
  ::apollo::common::VehicleSignal* temp = signal_;
  signal_ = NULL;
  return temp;
}
inline void Chassis::set_allocated_signal(::apollo::common::VehicleSignal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    set_has_signal();
  } else {
    clear_has_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.signal)
}

// optional .apollo.canbus.ChassisGPS chassis_gps = 28;
inline bool Chassis::has_chassis_gps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chassis::set_has_chassis_gps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chassis::clear_has_chassis_gps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chassis::clear_chassis_gps() {
  if (chassis_gps_ != NULL) chassis_gps_->::apollo::canbus::ChassisGPS::Clear();
  clear_has_chassis_gps();
}
inline const ::apollo::canbus::ChassisGPS& Chassis::chassis_gps() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.chassis_gps)
  return chassis_gps_ != NULL ? *chassis_gps_
                         : *::apollo::canbus::ChassisGPS::internal_default_instance();
}
inline ::apollo::canbus::ChassisGPS* Chassis::mutable_chassis_gps() {
  set_has_chassis_gps();
  if (chassis_gps_ == NULL) {
    chassis_gps_ = new ::apollo::canbus::ChassisGPS;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.chassis_gps)
  return chassis_gps_;
}
inline ::apollo::canbus::ChassisGPS* Chassis::release_chassis_gps() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.chassis_gps)
  clear_has_chassis_gps();
  ::apollo::canbus::ChassisGPS* temp = chassis_gps_;
  chassis_gps_ = NULL;
  return temp;
}
inline void Chassis::set_allocated_chassis_gps(::apollo::canbus::ChassisGPS* chassis_gps) {
  delete chassis_gps_;
  chassis_gps_ = chassis_gps;
  if (chassis_gps) {
    set_has_chassis_gps();
  } else {
    clear_has_chassis_gps();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.chassis_gps)
}

// -------------------------------------------------------------------

// ChassisGPS

// optional double latitude = 1;
inline bool ChassisGPS::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChassisGPS::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChassisGPS::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChassisGPS::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double ChassisGPS::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.latitude)
  return latitude_;
}
inline void ChassisGPS::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.latitude)
}

// optional double longitude = 2;
inline bool ChassisGPS::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChassisGPS::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChassisGPS::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChassisGPS::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double ChassisGPS::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.longitude)
  return longitude_;
}
inline void ChassisGPS::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.longitude)
}

// optional bool gps_valid = 3;
inline bool ChassisGPS::has_gps_valid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChassisGPS::set_has_gps_valid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChassisGPS::clear_has_gps_valid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChassisGPS::clear_gps_valid() {
  gps_valid_ = false;
  clear_has_gps_valid();
}
inline bool ChassisGPS::gps_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.gps_valid)
  return gps_valid_;
}
inline void ChassisGPS::set_gps_valid(bool value) {
  set_has_gps_valid();
  gps_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.gps_valid)
}

// optional int32 year = 4;
inline bool ChassisGPS::has_year() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChassisGPS::set_has_year() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChassisGPS::clear_has_year() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChassisGPS::clear_year() {
  year_ = 0;
  clear_has_year();
}
inline ::google::protobuf::int32 ChassisGPS::year() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.year)
  return year_;
}
inline void ChassisGPS::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.year)
}

// optional int32 month = 5;
inline bool ChassisGPS::has_month() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChassisGPS::set_has_month() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChassisGPS::clear_has_month() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChassisGPS::clear_month() {
  month_ = 0;
  clear_has_month();
}
inline ::google::protobuf::int32 ChassisGPS::month() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.month)
  return month_;
}
inline void ChassisGPS::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.month)
}

// optional int32 day = 6;
inline bool ChassisGPS::has_day() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChassisGPS::set_has_day() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChassisGPS::clear_has_day() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChassisGPS::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 ChassisGPS::day() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.day)
  return day_;
}
inline void ChassisGPS::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.day)
}

// optional int32 hours = 7;
inline bool ChassisGPS::has_hours() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChassisGPS::set_has_hours() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChassisGPS::clear_has_hours() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChassisGPS::clear_hours() {
  hours_ = 0;
  clear_has_hours();
}
inline ::google::protobuf::int32 ChassisGPS::hours() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.hours)
  return hours_;
}
inline void ChassisGPS::set_hours(::google::protobuf::int32 value) {
  set_has_hours();
  hours_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.hours)
}

// optional int32 minutes = 8;
inline bool ChassisGPS::has_minutes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChassisGPS::set_has_minutes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChassisGPS::clear_has_minutes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChassisGPS::clear_minutes() {
  minutes_ = 0;
  clear_has_minutes();
}
inline ::google::protobuf::int32 ChassisGPS::minutes() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.minutes)
  return minutes_;
}
inline void ChassisGPS::set_minutes(::google::protobuf::int32 value) {
  set_has_minutes();
  minutes_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.minutes)
}

// optional int32 seconds = 9;
inline bool ChassisGPS::has_seconds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChassisGPS::set_has_seconds() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChassisGPS::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChassisGPS::clear_seconds() {
  seconds_ = 0;
  clear_has_seconds();
}
inline ::google::protobuf::int32 ChassisGPS::seconds() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.seconds)
  return seconds_;
}
inline void ChassisGPS::set_seconds(::google::protobuf::int32 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.seconds)
}

// optional double compass_direction = 10;
inline bool ChassisGPS::has_compass_direction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChassisGPS::set_has_compass_direction() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChassisGPS::clear_has_compass_direction() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChassisGPS::clear_compass_direction() {
  compass_direction_ = 0;
  clear_has_compass_direction();
}
inline double ChassisGPS::compass_direction() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.compass_direction)
  return compass_direction_;
}
inline void ChassisGPS::set_compass_direction(double value) {
  set_has_compass_direction();
  compass_direction_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.compass_direction)
}

// optional double pdop = 11;
inline bool ChassisGPS::has_pdop() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChassisGPS::set_has_pdop() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChassisGPS::clear_has_pdop() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChassisGPS::clear_pdop() {
  pdop_ = 0;
  clear_has_pdop();
}
inline double ChassisGPS::pdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.pdop)
  return pdop_;
}
inline void ChassisGPS::set_pdop(double value) {
  set_has_pdop();
  pdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.pdop)
}

// optional bool is_gps_fault = 12;
inline bool ChassisGPS::has_is_gps_fault() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChassisGPS::set_has_is_gps_fault() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChassisGPS::clear_has_is_gps_fault() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChassisGPS::clear_is_gps_fault() {
  is_gps_fault_ = false;
  clear_has_is_gps_fault();
}
inline bool ChassisGPS::is_gps_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.is_gps_fault)
  return is_gps_fault_;
}
inline void ChassisGPS::set_is_gps_fault(bool value) {
  set_has_is_gps_fault();
  is_gps_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.is_gps_fault)
}

// optional bool is_inferred = 13;
inline bool ChassisGPS::has_is_inferred() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChassisGPS::set_has_is_inferred() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChassisGPS::clear_has_is_inferred() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChassisGPS::clear_is_inferred() {
  is_inferred_ = false;
  clear_has_is_inferred();
}
inline bool ChassisGPS::is_inferred() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.is_inferred)
  return is_inferred_;
}
inline void ChassisGPS::set_is_inferred(bool value) {
  set_has_is_inferred();
  is_inferred_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.is_inferred)
}

// optional double altitude = 14;
inline bool ChassisGPS::has_altitude() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChassisGPS::set_has_altitude() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChassisGPS::clear_has_altitude() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChassisGPS::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double ChassisGPS::altitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.altitude)
  return altitude_;
}
inline void ChassisGPS::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.altitude)
}

// optional double heading = 15;
inline bool ChassisGPS::has_heading() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChassisGPS::set_has_heading() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChassisGPS::clear_has_heading() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChassisGPS::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double ChassisGPS::heading() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.heading)
  return heading_;
}
inline void ChassisGPS::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.heading)
}

// optional double hdop = 16;
inline bool ChassisGPS::has_hdop() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChassisGPS::set_has_hdop() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChassisGPS::clear_has_hdop() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChassisGPS::clear_hdop() {
  hdop_ = 0;
  clear_has_hdop();
}
inline double ChassisGPS::hdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.hdop)
  return hdop_;
}
inline void ChassisGPS::set_hdop(double value) {
  set_has_hdop();
  hdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.hdop)
}

// optional double vdop = 17;
inline bool ChassisGPS::has_vdop() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChassisGPS::set_has_vdop() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChassisGPS::clear_has_vdop() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChassisGPS::clear_vdop() {
  vdop_ = 0;
  clear_has_vdop();
}
inline double ChassisGPS::vdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.vdop)
  return vdop_;
}
inline void ChassisGPS::set_vdop(double value) {
  set_has_vdop();
  vdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.vdop)
}

// optional .apollo.canbus.GpsQuality quality = 18;
inline bool ChassisGPS::has_quality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChassisGPS::set_has_quality() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChassisGPS::clear_has_quality() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChassisGPS::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::apollo::canbus::GpsQuality ChassisGPS::quality() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.quality)
  return static_cast< ::apollo::canbus::GpsQuality >(quality_);
}
inline void ChassisGPS::set_quality(::apollo::canbus::GpsQuality value) {
  assert(::apollo::canbus::GpsQuality_IsValid(value));
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.quality)
}

// optional int32 num_satellites = 19;
inline bool ChassisGPS::has_num_satellites() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChassisGPS::set_has_num_satellites() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChassisGPS::clear_has_num_satellites() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChassisGPS::clear_num_satellites() {
  num_satellites_ = 0;
  clear_has_num_satellites();
}
inline ::google::protobuf::int32 ChassisGPS::num_satellites() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.num_satellites)
  return num_satellites_;
}
inline void ChassisGPS::set_num_satellites(::google::protobuf::int32 value) {
  set_has_num_satellites();
  num_satellites_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.num_satellites)
}

// optional double gps_speed = 20;
inline bool ChassisGPS::has_gps_speed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChassisGPS::set_has_gps_speed() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChassisGPS::clear_has_gps_speed() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChassisGPS::clear_gps_speed() {
  gps_speed_ = 0;
  clear_has_gps_speed();
}
inline double ChassisGPS::gps_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.gps_speed)
  return gps_speed_;
}
inline void ChassisGPS::set_gps_speed(double value) {
  set_has_gps_speed();
  gps_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.gps_speed)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace canbus
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::canbus::Chassis_DrivingMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Chassis_DrivingMode>() {
  return ::apollo::canbus::Chassis_DrivingMode_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Chassis_ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Chassis_ErrorCode>() {
  return ::apollo::canbus::Chassis_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Chassis_GearPosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Chassis_GearPosition>() {
  return ::apollo::canbus::Chassis_GearPosition_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::GpsQuality> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::GpsQuality>() {
  return ::apollo::canbus::GpsQuality_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fcanbus_2fproto_2fchassis_2eproto__INCLUDED
