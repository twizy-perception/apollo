// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/proto/recorder_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/data/proto/recorder_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace data {
namespace recorder {
class RecorderInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RecorderInfo> {
} _RecorderInfo_default_instance_;
class TaskDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Task> {
} _Task_default_instance_;
class DiskDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Disk> {
} _Disk_default_instance_;
class ResourcesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Resources> {
} _Resources_default_instance_;
class DataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Data> {
} _Data_default_instance_;
class BagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Bag> {
} _Bag_default_instance_;

namespace protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecorderInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecorderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecorderInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecorderInfo, task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecorderInfo, writing_disk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecorderInfo, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecorderInfo, resources_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, duration_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, fs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, avail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, use_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, mount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disk, slot_),
  0,
  1,
  4,
  5,
  6,
  7,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resources, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resources, disks_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, bags_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bag, writing_filename_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(RecorderInfo)},
  { 15, 23, sizeof(Task)},
  { 26, 39, sizeof(Disk)},
  { 47, 53, sizeof(Resources)},
  { 54, 60, sizeof(Data)},
  { 61, 67, sizeof(Bag)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecorderInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Task_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Disk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Resources_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Bag_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/data/proto/recorder_info.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _RecorderInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Task_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Disk_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Resources_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Data_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Bag_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RecorderInfo_default_instance_.DefaultConstruct();
  _Task_default_instance_.DefaultConstruct();
  _Disk_default_instance_.DefaultConstruct();
  _Resources_default_instance_.DefaultConstruct();
  _Data_default_instance_.DefaultConstruct();
  _Bag_default_instance_.DefaultConstruct();
  _RecorderInfo_default_instance_.get_mutable()->task_ = const_cast< ::apollo::data::recorder::Task*>(
      ::apollo::data::recorder::Task::internal_default_instance());
  _RecorderInfo_default_instance_.get_mutable()->writing_disk_ = const_cast< ::apollo::data::recorder::Disk*>(
      ::apollo::data::recorder::Disk::internal_default_instance());
  _RecorderInfo_default_instance_.get_mutable()->data_ = const_cast< ::apollo::data::recorder::Data*>(
      ::apollo::data::recorder::Data::internal_default_instance());
  _RecorderInfo_default_instance_.get_mutable()->resources_ = const_cast< ::apollo::data::recorder::Resources*>(
      ::apollo::data::recorder::Resources::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n&modules/data/proto/recorder_info.proto"
      "\022\024apollo.data.recorder\"\330\001\n\014RecorderInfo\022"
      "\016\n\006status\030\001 \001(\r\022(\n\004task\030\002 \001(\0132\032.apollo.d"
      "ata.recorder.Task\0220\n\014writing_disk\030\003 \001(\0132"
      "\032.apollo.data.recorder.Disk\022(\n\004data\030\004 \001("
      "\0132\032.apollo.data.recorder.Data\0222\n\tresourc"
      "es\030\005 \001(\0132\037.apollo.data.recorder.Resource"
      "s\"6\n\004Task\022\n\n\002id\030\001 \001(\t\022\020\n\010sequence\030\002 \001(\r\022"
      "\020\n\010duration\030\003 \001(\001\"{\n\004Disk\022\n\n\002sn\030\001 \001(\t\022\n\n"
      "\002fs\030\002 \001(\t\022\014\n\004size\030\003 \001(\001\022\014\n\004used\030\004 \001(\001\022\r\n"
      "\005avail\030\005 \001(\001\022\023\n\013use_percent\030\006 \001(\001\022\r\n\005mou"
      "nt\030\007 \001(\t\022\014\n\004slot\030\010 \001(\t\"6\n\tResources\022)\n\005d"
      "isks\030\001 \003(\0132\032.apollo.data.recorder.Disk\"/"
      "\n\004Data\022\'\n\004bags\030\001 \003(\0132\031.apollo.data.recor"
      "der.Bag\"\037\n\003Bag\022\030\n\020writing_filename\030\001 \001(\t"
      "*\333\001\n\nStatusType\022\026\n\022DATA_RECORDER_INIT\020\000\022"
      "\031\n\025DATA_RECORDER_RUNNING\020\001\022\026\n\022DATA_RECOR"
      "D_ENABLE\020\002\022\024\n\020DATA_SYNC_ENABLE\020\004\022\027\n\023DISK"
      "_SPACE_WARNNING\020\010\022\024\n\020DISK_SPACE_ALERT\020\020\022"
      "\025\n\021DELETING_OLD_DATA\020 \022\026\n\022DATA_RECORDER_"
      "EXIT\020@\022\016\n\tUNDEFINED\020\200\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 822);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/data/proto/recorder_info.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto

const ::google::protobuf::EnumDescriptor* StatusType_descriptor() {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::file_level_enum_descriptors[0];
}
bool StatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecorderInfo::kStatusFieldNumber;
const int RecorderInfo::kTaskFieldNumber;
const int RecorderInfo::kWritingDiskFieldNumber;
const int RecorderInfo::kDataFieldNumber;
const int RecorderInfo::kResourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecorderInfo::RecorderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.recorder.RecorderInfo)
}
RecorderInfo::RecorderInfo(const RecorderInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task()) {
    task_ = new ::apollo::data::recorder::Task(*from.task_);
  } else {
    task_ = NULL;
  }
  if (from.has_writing_disk()) {
    writing_disk_ = new ::apollo::data::recorder::Disk(*from.writing_disk_);
  } else {
    writing_disk_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::apollo::data::recorder::Data(*from.data_);
  } else {
    data_ = NULL;
  }
  if (from.has_resources()) {
    resources_ = new ::apollo::data::recorder::Resources(*from.resources_);
  } else {
    resources_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:apollo.data.recorder.RecorderInfo)
}

void RecorderInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&task_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&task_) + sizeof(status_));
}

RecorderInfo::~RecorderInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.recorder.RecorderInfo)
  SharedDtor();
}

void RecorderInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete task_;
  }
  if (this != internal_default_instance()) {
    delete writing_disk_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
  if (this != internal_default_instance()) {
    delete resources_;
  }
}

void RecorderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecorderInfo::descriptor() {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecorderInfo& RecorderInfo::default_instance() {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecorderInfo* RecorderInfo::New(::google::protobuf::Arena* arena) const {
  RecorderInfo* n = new RecorderInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecorderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.recorder.RecorderInfo)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_task()) {
      GOOGLE_DCHECK(task_ != NULL);
      task_->::apollo::data::recorder::Task::Clear();
    }
    if (has_writing_disk()) {
      GOOGLE_DCHECK(writing_disk_ != NULL);
      writing_disk_->::apollo::data::recorder::Disk::Clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::apollo::data::recorder::Data::Clear();
    }
    if (has_resources()) {
      GOOGLE_DCHECK(resources_ != NULL);
      resources_->::apollo::data::recorder::Resources::Clear();
    }
  }
  status_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecorderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.recorder.RecorderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.data.recorder.Task task = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.data.recorder.Disk writing_disk = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_writing_disk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.data.recorder.Data data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.data.recorder.Resources resources = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.recorder.RecorderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.recorder.RecorderInfo)
  return false;
#undef DO_
}

void RecorderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.recorder.RecorderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional .apollo.data.recorder.Task task = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->task_, output);
  }

  // optional .apollo.data.recorder.Disk writing_disk = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->writing_disk_, output);
  }

  // optional .apollo.data.recorder.Data data = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->data_, output);
  }

  // optional .apollo.data.recorder.Resources resources = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->resources_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.recorder.RecorderInfo)
}

::google::protobuf::uint8* RecorderInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.recorder.RecorderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional .apollo.data.recorder.Task task = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->task_, deterministic, target);
  }

  // optional .apollo.data.recorder.Disk writing_disk = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->writing_disk_, deterministic, target);
  }

  // optional .apollo.data.recorder.Data data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->data_, deterministic, target);
  }

  // optional .apollo.data.recorder.Resources resources = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->resources_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.recorder.RecorderInfo)
  return target;
}

size_t RecorderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.recorder.RecorderInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.data.recorder.Task task = 2;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->task_);
    }

    // optional .apollo.data.recorder.Disk writing_disk = 3;
    if (has_writing_disk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->writing_disk_);
    }

    // optional .apollo.data.recorder.Data data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_);
    }

    // optional .apollo.data.recorder.Resources resources = 5;
    if (has_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resources_);
    }

    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecorderInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.recorder.RecorderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RecorderInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecorderInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.recorder.RecorderInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.recorder.RecorderInfo)
    MergeFrom(*source);
  }
}

void RecorderInfo::MergeFrom(const RecorderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.recorder.RecorderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_task()->::apollo::data::recorder::Task::MergeFrom(from.task());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_writing_disk()->::apollo::data::recorder::Disk::MergeFrom(from.writing_disk());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_data()->::apollo::data::recorder::Data::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_resources()->::apollo::data::recorder::Resources::MergeFrom(from.resources());
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecorderInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.recorder.RecorderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecorderInfo::CopyFrom(const RecorderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.recorder.RecorderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecorderInfo::IsInitialized() const {
  return true;
}

void RecorderInfo::Swap(RecorderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecorderInfo::InternalSwap(RecorderInfo* other) {
  std::swap(task_, other->task_);
  std::swap(writing_disk_, other->writing_disk_);
  std::swap(data_, other->data_);
  std::swap(resources_, other->resources_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecorderInfo::GetMetadata() const {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecorderInfo

// optional uint32 status = 1;
bool RecorderInfo::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RecorderInfo::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void RecorderInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void RecorderInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 RecorderInfo::status() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.RecorderInfo.status)
  return status_;
}
void RecorderInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.recorder.RecorderInfo.status)
}

// optional .apollo.data.recorder.Task task = 2;
bool RecorderInfo::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecorderInfo::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
void RecorderInfo::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecorderInfo::clear_task() {
  if (task_ != NULL) task_->::apollo::data::recorder::Task::Clear();
  clear_has_task();
}
const ::apollo::data::recorder::Task& RecorderInfo::task() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.RecorderInfo.task)
  return task_ != NULL ? *task_
                         : *::apollo::data::recorder::Task::internal_default_instance();
}
::apollo::data::recorder::Task* RecorderInfo::mutable_task() {
  set_has_task();
  if (task_ == NULL) {
    task_ = new ::apollo::data::recorder::Task;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.RecorderInfo.task)
  return task_;
}
::apollo::data::recorder::Task* RecorderInfo::release_task() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.RecorderInfo.task)
  clear_has_task();
  ::apollo::data::recorder::Task* temp = task_;
  task_ = NULL;
  return temp;
}
void RecorderInfo::set_allocated_task(::apollo::data::recorder::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.RecorderInfo.task)
}

// optional .apollo.data.recorder.Disk writing_disk = 3;
bool RecorderInfo::has_writing_disk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecorderInfo::set_has_writing_disk() {
  _has_bits_[0] |= 0x00000002u;
}
void RecorderInfo::clear_has_writing_disk() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecorderInfo::clear_writing_disk() {
  if (writing_disk_ != NULL) writing_disk_->::apollo::data::recorder::Disk::Clear();
  clear_has_writing_disk();
}
const ::apollo::data::recorder::Disk& RecorderInfo::writing_disk() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.RecorderInfo.writing_disk)
  return writing_disk_ != NULL ? *writing_disk_
                         : *::apollo::data::recorder::Disk::internal_default_instance();
}
::apollo::data::recorder::Disk* RecorderInfo::mutable_writing_disk() {
  set_has_writing_disk();
  if (writing_disk_ == NULL) {
    writing_disk_ = new ::apollo::data::recorder::Disk;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.RecorderInfo.writing_disk)
  return writing_disk_;
}
::apollo::data::recorder::Disk* RecorderInfo::release_writing_disk() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.RecorderInfo.writing_disk)
  clear_has_writing_disk();
  ::apollo::data::recorder::Disk* temp = writing_disk_;
  writing_disk_ = NULL;
  return temp;
}
void RecorderInfo::set_allocated_writing_disk(::apollo::data::recorder::Disk* writing_disk) {
  delete writing_disk_;
  writing_disk_ = writing_disk;
  if (writing_disk) {
    set_has_writing_disk();
  } else {
    clear_has_writing_disk();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.RecorderInfo.writing_disk)
}

// optional .apollo.data.recorder.Data data = 4;
bool RecorderInfo::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecorderInfo::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void RecorderInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecorderInfo::clear_data() {
  if (data_ != NULL) data_->::apollo::data::recorder::Data::Clear();
  clear_has_data();
}
const ::apollo::data::recorder::Data& RecorderInfo::data() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.RecorderInfo.data)
  return data_ != NULL ? *data_
                         : *::apollo::data::recorder::Data::internal_default_instance();
}
::apollo::data::recorder::Data* RecorderInfo::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::apollo::data::recorder::Data;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.RecorderInfo.data)
  return data_;
}
::apollo::data::recorder::Data* RecorderInfo::release_data() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.RecorderInfo.data)
  clear_has_data();
  ::apollo::data::recorder::Data* temp = data_;
  data_ = NULL;
  return temp;
}
void RecorderInfo::set_allocated_data(::apollo::data::recorder::Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.RecorderInfo.data)
}

// optional .apollo.data.recorder.Resources resources = 5;
bool RecorderInfo::has_resources() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RecorderInfo::set_has_resources() {
  _has_bits_[0] |= 0x00000008u;
}
void RecorderInfo::clear_has_resources() {
  _has_bits_[0] &= ~0x00000008u;
}
void RecorderInfo::clear_resources() {
  if (resources_ != NULL) resources_->::apollo::data::recorder::Resources::Clear();
  clear_has_resources();
}
const ::apollo::data::recorder::Resources& RecorderInfo::resources() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.RecorderInfo.resources)
  return resources_ != NULL ? *resources_
                         : *::apollo::data::recorder::Resources::internal_default_instance();
}
::apollo::data::recorder::Resources* RecorderInfo::mutable_resources() {
  set_has_resources();
  if (resources_ == NULL) {
    resources_ = new ::apollo::data::recorder::Resources;
  }
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.RecorderInfo.resources)
  return resources_;
}
::apollo::data::recorder::Resources* RecorderInfo::release_resources() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.RecorderInfo.resources)
  clear_has_resources();
  ::apollo::data::recorder::Resources* temp = resources_;
  resources_ = NULL;
  return temp;
}
void RecorderInfo::set_allocated_resources(::apollo::data::recorder::Resources* resources) {
  delete resources_;
  resources_ = resources;
  if (resources) {
    set_has_resources();
  } else {
    clear_has_resources();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.RecorderInfo.resources)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task::kIdFieldNumber;
const int Task::kSequenceFieldNumber;
const int Task::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task::Task()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.recorder.Task)
}
Task::Task(const Task& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&duration_, &from.duration_,
    reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&duration_) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.recorder.Task)
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&duration_) + sizeof(sequence_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:apollo.data.recorder.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Task& Task::default_instance() {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Task* Task::New(::google::protobuf::Arena* arena) const {
  Task* n = new Task;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.recorder.Task)
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&duration_, 0, reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&duration_) + sizeof(sequence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.recorder.Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.recorder.Task.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.recorder.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.recorder.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.recorder.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Task.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional uint32 sequence = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional double duration = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.recorder.Task)
}

::google::protobuf::uint8* Task::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.recorder.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Task.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional uint32 sequence = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional double duration = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.recorder.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.recorder.Task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double duration = 3;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.recorder.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Task>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.recorder.Task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.recorder.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.recorder.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_ = from.sequence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.recorder.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.recorder.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::Swap(Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Task::InternalSwap(Task* other) {
  id_.Swap(&other->id_);
  std::swap(duration_, other->duration_);
  std::swap(sequence_, other->sequence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Task

// optional string id = 1;
bool Task::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Task::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Task::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Task::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& Task::id() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Task.id)
  return id_.GetNoArena();
}
void Task::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Task.id)
}
#if LANG_CXX11
void Task::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.data.recorder.Task.id)
}
#endif
void Task::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.recorder.Task.id)
}
void Task::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.recorder.Task.id)
}
::std::string* Task::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Task.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Task::release_id() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.Task.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.Task.id)
}

// optional uint32 sequence = 2;
bool Task::has_sequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Task::set_has_sequence() {
  _has_bits_[0] |= 0x00000004u;
}
void Task::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000004u;
}
void Task::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
::google::protobuf::uint32 Task::sequence() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Task.sequence)
  return sequence_;
}
void Task::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Task.sequence)
}

// optional double duration = 3;
bool Task::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Task::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void Task::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void Task::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
double Task::duration() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Task.duration)
  return duration_;
}
void Task::set_duration(double value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Task.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Disk::kSnFieldNumber;
const int Disk::kFsFieldNumber;
const int Disk::kSizeFieldNumber;
const int Disk::kUsedFieldNumber;
const int Disk::kAvailFieldNumber;
const int Disk::kUsePercentFieldNumber;
const int Disk::kMountFieldNumber;
const int Disk::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Disk::Disk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.recorder.Disk)
}
Disk::Disk(const Disk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sn()) {
    sn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sn_);
  }
  fs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fs()) {
    fs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fs_);
  }
  mount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mount()) {
    mount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mount_);
  }
  slot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_slot()) {
    slot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slot_);
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&use_percent_) -
    reinterpret_cast<char*>(&size_) + sizeof(use_percent_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.recorder.Disk)
}

void Disk::SharedCtor() {
  _cached_size_ = 0;
  sn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&use_percent_) -
    reinterpret_cast<char*>(&size_) + sizeof(use_percent_));
}

Disk::~Disk() {
  // @@protoc_insertion_point(destructor:apollo.data.recorder.Disk)
  SharedDtor();
}

void Disk::SharedDtor() {
  sn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slot_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Disk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Disk::descriptor() {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Disk& Disk::default_instance() {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Disk* Disk::New(::google::protobuf::Arena* arena) const {
  Disk* n = new Disk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Disk::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.recorder.Disk)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_sn()) {
      GOOGLE_DCHECK(!sn_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sn_.UnsafeRawStringPointer())->clear();
    }
    if (has_fs()) {
      GOOGLE_DCHECK(!fs_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fs_.UnsafeRawStringPointer())->clear();
    }
    if (has_mount()) {
      GOOGLE_DCHECK(!mount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mount_.UnsafeRawStringPointer())->clear();
    }
    if (has_slot()) {
      GOOGLE_DCHECK(!slot_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*slot_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&size_, 0, reinterpret_cast<char*>(&use_percent_) -
      reinterpret_cast<char*>(&size_) + sizeof(use_percent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Disk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.recorder.Disk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.recorder.Disk.sn");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fs().data(), this->fs().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.recorder.Disk.fs");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double used = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double avail = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_avail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double use_percent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_use_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &use_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mount().data(), this->mount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.recorder.Disk.mount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string slot = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slot().data(), this->slot().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.recorder.Disk.slot");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.recorder.Disk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.recorder.Disk)
  return false;
#undef DO_
}

void Disk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.recorder.Disk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Disk.sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sn(), output);
  }

  // optional string fs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fs().data(), this->fs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Disk.fs");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fs(), output);
  }

  // optional double size = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->size(), output);
  }

  // optional double used = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->used(), output);
  }

  // optional double avail = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->avail(), output);
  }

  // optional double use_percent = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->use_percent(), output);
  }

  // optional string mount = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mount().data(), this->mount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Disk.mount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->mount(), output);
  }

  // optional string slot = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slot().data(), this->slot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Disk.slot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.recorder.Disk)
}

::google::protobuf::uint8* Disk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.recorder.Disk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Disk.sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sn(), target);
  }

  // optional string fs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fs().data(), this->fs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Disk.fs");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fs(), target);
  }

  // optional double size = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->size(), target);
  }

  // optional double used = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->used(), target);
  }

  // optional double avail = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->avail(), target);
  }

  // optional double use_percent = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->use_percent(), target);
  }

  // optional string mount = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mount().data(), this->mount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Disk.mount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->mount(), target);
  }

  // optional string slot = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slot().data(), this->slot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Disk.slot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.recorder.Disk)
  return target;
}

size_t Disk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.recorder.Disk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string sn = 1;
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

    // optional string fs = 2;
    if (has_fs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fs());
    }

    // optional string mount = 7;
    if (has_mount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mount());
    }

    // optional string slot = 8;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slot());
    }

    // optional double size = 3;
    if (has_size()) {
      total_size += 1 + 8;
    }

    // optional double used = 4;
    if (has_used()) {
      total_size += 1 + 8;
    }

    // optional double avail = 5;
    if (has_avail()) {
      total_size += 1 + 8;
    }

    // optional double use_percent = 6;
    if (has_use_percent()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Disk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.recorder.Disk)
  GOOGLE_DCHECK_NE(&from, this);
  const Disk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Disk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.recorder.Disk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.recorder.Disk)
    MergeFrom(*source);
  }
}

void Disk::MergeFrom(const Disk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.recorder.Disk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sn();
      sn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sn_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fs();
      fs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fs_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_mount();
      mount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mount_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_slot();
      slot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slot_);
    }
    if (cached_has_bits & 0x00000010u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000020u) {
      used_ = from.used_;
    }
    if (cached_has_bits & 0x00000040u) {
      avail_ = from.avail_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_percent_ = from.use_percent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Disk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.recorder.Disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Disk::CopyFrom(const Disk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.recorder.Disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disk::IsInitialized() const {
  return true;
}

void Disk::Swap(Disk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Disk::InternalSwap(Disk* other) {
  sn_.Swap(&other->sn_);
  fs_.Swap(&other->fs_);
  mount_.Swap(&other->mount_);
  slot_.Swap(&other->slot_);
  std::swap(size_, other->size_);
  std::swap(used_, other->used_);
  std::swap(avail_, other->avail_);
  std::swap(use_percent_, other->use_percent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Disk::GetMetadata() const {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Disk

// optional string sn = 1;
bool Disk::has_sn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Disk::set_has_sn() {
  _has_bits_[0] |= 0x00000001u;
}
void Disk::clear_has_sn() {
  _has_bits_[0] &= ~0x00000001u;
}
void Disk::clear_sn() {
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sn();
}
const ::std::string& Disk::sn() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.sn)
  return sn_.GetNoArena();
}
void Disk::set_sn(const ::std::string& value) {
  set_has_sn();
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.sn)
}
#if LANG_CXX11
void Disk::set_sn(::std::string&& value) {
  set_has_sn();
  sn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.data.recorder.Disk.sn)
}
#endif
void Disk::set_sn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sn();
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.recorder.Disk.sn)
}
void Disk::set_sn(const char* value, size_t size) {
  set_has_sn();
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.recorder.Disk.sn)
}
::std::string* Disk::mutable_sn() {
  set_has_sn();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Disk.sn)
  return sn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Disk::release_sn() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.Disk.sn)
  clear_has_sn();
  return sn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Disk::set_allocated_sn(::std::string* sn) {
  if (sn != NULL) {
    set_has_sn();
  } else {
    clear_has_sn();
  }
  sn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.Disk.sn)
}

// optional string fs = 2;
bool Disk::has_fs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Disk::set_has_fs() {
  _has_bits_[0] |= 0x00000002u;
}
void Disk::clear_has_fs() {
  _has_bits_[0] &= ~0x00000002u;
}
void Disk::clear_fs() {
  fs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fs();
}
const ::std::string& Disk::fs() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.fs)
  return fs_.GetNoArena();
}
void Disk::set_fs(const ::std::string& value) {
  set_has_fs();
  fs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.fs)
}
#if LANG_CXX11
void Disk::set_fs(::std::string&& value) {
  set_has_fs();
  fs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.data.recorder.Disk.fs)
}
#endif
void Disk::set_fs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fs();
  fs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.recorder.Disk.fs)
}
void Disk::set_fs(const char* value, size_t size) {
  set_has_fs();
  fs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.recorder.Disk.fs)
}
::std::string* Disk::mutable_fs() {
  set_has_fs();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Disk.fs)
  return fs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Disk::release_fs() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.Disk.fs)
  clear_has_fs();
  return fs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Disk::set_allocated_fs(::std::string* fs) {
  if (fs != NULL) {
    set_has_fs();
  } else {
    clear_has_fs();
  }
  fs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fs);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.Disk.fs)
}

// optional double size = 3;
bool Disk::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Disk::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
void Disk::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void Disk::clear_size() {
  size_ = 0;
  clear_has_size();
}
double Disk::size() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.size)
  return size_;
}
void Disk::set_size(double value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.size)
}

// optional double used = 4;
bool Disk::has_used() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Disk::set_has_used() {
  _has_bits_[0] |= 0x00000020u;
}
void Disk::clear_has_used() {
  _has_bits_[0] &= ~0x00000020u;
}
void Disk::clear_used() {
  used_ = 0;
  clear_has_used();
}
double Disk::used() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.used)
  return used_;
}
void Disk::set_used(double value) {
  set_has_used();
  used_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.used)
}

// optional double avail = 5;
bool Disk::has_avail() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Disk::set_has_avail() {
  _has_bits_[0] |= 0x00000040u;
}
void Disk::clear_has_avail() {
  _has_bits_[0] &= ~0x00000040u;
}
void Disk::clear_avail() {
  avail_ = 0;
  clear_has_avail();
}
double Disk::avail() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.avail)
  return avail_;
}
void Disk::set_avail(double value) {
  set_has_avail();
  avail_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.avail)
}

// optional double use_percent = 6;
bool Disk::has_use_percent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Disk::set_has_use_percent() {
  _has_bits_[0] |= 0x00000080u;
}
void Disk::clear_has_use_percent() {
  _has_bits_[0] &= ~0x00000080u;
}
void Disk::clear_use_percent() {
  use_percent_ = 0;
  clear_has_use_percent();
}
double Disk::use_percent() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.use_percent)
  return use_percent_;
}
void Disk::set_use_percent(double value) {
  set_has_use_percent();
  use_percent_ = value;
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.use_percent)
}

// optional string mount = 7;
bool Disk::has_mount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Disk::set_has_mount() {
  _has_bits_[0] |= 0x00000004u;
}
void Disk::clear_has_mount() {
  _has_bits_[0] &= ~0x00000004u;
}
void Disk::clear_mount() {
  mount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mount();
}
const ::std::string& Disk::mount() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.mount)
  return mount_.GetNoArena();
}
void Disk::set_mount(const ::std::string& value) {
  set_has_mount();
  mount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.mount)
}
#if LANG_CXX11
void Disk::set_mount(::std::string&& value) {
  set_has_mount();
  mount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.data.recorder.Disk.mount)
}
#endif
void Disk::set_mount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mount();
  mount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.recorder.Disk.mount)
}
void Disk::set_mount(const char* value, size_t size) {
  set_has_mount();
  mount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.recorder.Disk.mount)
}
::std::string* Disk::mutable_mount() {
  set_has_mount();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Disk.mount)
  return mount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Disk::release_mount() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.Disk.mount)
  clear_has_mount();
  return mount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Disk::set_allocated_mount(::std::string* mount) {
  if (mount != NULL) {
    set_has_mount();
  } else {
    clear_has_mount();
  }
  mount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mount);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.Disk.mount)
}

// optional string slot = 8;
bool Disk::has_slot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Disk::set_has_slot() {
  _has_bits_[0] |= 0x00000008u;
}
void Disk::clear_has_slot() {
  _has_bits_[0] &= ~0x00000008u;
}
void Disk::clear_slot() {
  slot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_slot();
}
const ::std::string& Disk::slot() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.slot)
  return slot_.GetNoArena();
}
void Disk::set_slot(const ::std::string& value) {
  set_has_slot();
  slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.slot)
}
#if LANG_CXX11
void Disk::set_slot(::std::string&& value) {
  set_has_slot();
  slot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.data.recorder.Disk.slot)
}
#endif
void Disk::set_slot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_slot();
  slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.recorder.Disk.slot)
}
void Disk::set_slot(const char* value, size_t size) {
  set_has_slot();
  slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.recorder.Disk.slot)
}
::std::string* Disk::mutable_slot() {
  set_has_slot();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Disk.slot)
  return slot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Disk::release_slot() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.Disk.slot)
  clear_has_slot();
  return slot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Disk::set_allocated_slot(::std::string* slot) {
  if (slot != NULL) {
    set_has_slot();
  } else {
    clear_has_slot();
  }
  slot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slot);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.Disk.slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resources::kDisksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resources::Resources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.recorder.Resources)
}
Resources::Resources(const Resources& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      disks_(from.disks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.data.recorder.Resources)
}

void Resources::SharedCtor() {
  _cached_size_ = 0;
}

Resources::~Resources() {
  // @@protoc_insertion_point(destructor:apollo.data.recorder.Resources)
  SharedDtor();
}

void Resources::SharedDtor() {
}

void Resources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resources::descriptor() {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Resources& Resources::default_instance() {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Resources* Resources::New(::google::protobuf::Arena* arena) const {
  Resources* n = new Resources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Resources::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.recorder.Resources)
  disks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Resources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.recorder.Resources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.data.recorder.Disk disks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.recorder.Resources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.recorder.Resources)
  return false;
#undef DO_
}

void Resources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.recorder.Resources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.data.recorder.Disk disks = 1;
  for (unsigned int i = 0, n = this->disks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->disks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.recorder.Resources)
}

::google::protobuf::uint8* Resources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.recorder.Resources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.data.recorder.Disk disks = 1;
  for (unsigned int i = 0, n = this->disks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->disks(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.recorder.Resources)
  return target;
}

size_t Resources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.recorder.Resources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.data.recorder.Disk disks = 1;
  {
    unsigned int count = this->disks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disks(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.recorder.Resources)
  GOOGLE_DCHECK_NE(&from, this);
  const Resources* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Resources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.recorder.Resources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.recorder.Resources)
    MergeFrom(*source);
  }
}

void Resources::MergeFrom(const Resources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.recorder.Resources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disks_.MergeFrom(from.disks_);
}

void Resources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.recorder.Resources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resources::CopyFrom(const Resources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.recorder.Resources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resources::IsInitialized() const {
  return true;
}

void Resources::Swap(Resources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resources::InternalSwap(Resources* other) {
  disks_.InternalSwap(&other->disks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Resources::GetMetadata() const {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Resources

// repeated .apollo.data.recorder.Disk disks = 1;
int Resources::disks_size() const {
  return disks_.size();
}
void Resources::clear_disks() {
  disks_.Clear();
}
const ::apollo::data::recorder::Disk& Resources::disks(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Resources.disks)
  return disks_.Get(index);
}
::apollo::data::recorder::Disk* Resources::mutable_disks(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Resources.disks)
  return disks_.Mutable(index);
}
::apollo::data::recorder::Disk* Resources::add_disks() {
  // @@protoc_insertion_point(field_add:apollo.data.recorder.Resources.disks)
  return disks_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::data::recorder::Disk >*
Resources::mutable_disks() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.recorder.Resources.disks)
  return &disks_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::data::recorder::Disk >&
Resources::disks() const {
  // @@protoc_insertion_point(field_list:apollo.data.recorder.Resources.disks)
  return disks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kBagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.recorder.Data)
}
Data::Data(const Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bags_(from.bags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.data.recorder.Data)
}

void Data::SharedCtor() {
  _cached_size_ = 0;
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:apollo.data.recorder.Data)
  SharedDtor();
}

void Data::SharedDtor() {
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Data& Data::default_instance() {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.recorder.Data)
  bags_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.recorder.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.data.recorder.Bag bags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.recorder.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.recorder.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.recorder.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.data.recorder.Bag bags = 1;
  for (unsigned int i = 0, n = this->bags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.recorder.Data)
}

::google::protobuf::uint8* Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.recorder.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.data.recorder.Bag bags = 1;
  for (unsigned int i = 0, n = this->bags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->bags(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.recorder.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.recorder.Data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.data.recorder.Bag bags = 1;
  {
    unsigned int count = this->bags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bags(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.recorder.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.recorder.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.recorder.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.recorder.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bags_.MergeFrom(from.bags_);
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.recorder.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.recorder.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  bags_.InternalSwap(&other->bags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// repeated .apollo.data.recorder.Bag bags = 1;
int Data::bags_size() const {
  return bags_.size();
}
void Data::clear_bags() {
  bags_.Clear();
}
const ::apollo::data::recorder::Bag& Data::bags(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Data.bags)
  return bags_.Get(index);
}
::apollo::data::recorder::Bag* Data::mutable_bags(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Data.bags)
  return bags_.Mutable(index);
}
::apollo::data::recorder::Bag* Data::add_bags() {
  // @@protoc_insertion_point(field_add:apollo.data.recorder.Data.bags)
  return bags_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::data::recorder::Bag >*
Data::mutable_bags() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.recorder.Data.bags)
  return &bags_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::data::recorder::Bag >&
Data::bags() const {
  // @@protoc_insertion_point(field_list:apollo.data.recorder.Data.bags)
  return bags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bag::kWritingFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bag::Bag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.recorder.Bag)
}
Bag::Bag(const Bag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  writing_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_writing_filename()) {
    writing_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.writing_filename_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.data.recorder.Bag)
}

void Bag::SharedCtor() {
  _cached_size_ = 0;
  writing_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Bag::~Bag() {
  // @@protoc_insertion_point(destructor:apollo.data.recorder.Bag)
  SharedDtor();
}

void Bag::SharedDtor() {
  writing_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Bag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bag::descriptor() {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bag& Bag::default_instance() {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Bag* Bag::New(::google::protobuf::Arena* arena) const {
  Bag* n = new Bag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bag::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.recorder.Bag)
  if (has_writing_filename()) {
    GOOGLE_DCHECK(!writing_filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*writing_filename_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Bag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.data.recorder.Bag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string writing_filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_writing_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->writing_filename().data(), this->writing_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.data.recorder.Bag.writing_filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.data.recorder.Bag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.data.recorder.Bag)
  return false;
#undef DO_
}

void Bag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.data.recorder.Bag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string writing_filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->writing_filename().data(), this->writing_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Bag.writing_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->writing_filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.data.recorder.Bag)
}

::google::protobuf::uint8* Bag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.recorder.Bag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string writing_filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->writing_filename().data(), this->writing_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Bag.writing_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->writing_filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.recorder.Bag)
  return target;
}

size_t Bag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.recorder.Bag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string writing_filename = 1;
  if (has_writing_filename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->writing_filename());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.recorder.Bag)
  GOOGLE_DCHECK_NE(&from, this);
  const Bag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.recorder.Bag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.recorder.Bag)
    MergeFrom(*source);
  }
}

void Bag::MergeFrom(const Bag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.recorder.Bag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_writing_filename()) {
    set_has_writing_filename();
    writing_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.writing_filename_);
  }
}

void Bag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.recorder.Bag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bag::CopyFrom(const Bag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.recorder.Bag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bag::IsInitialized() const {
  return true;
}

void Bag::Swap(Bag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bag::InternalSwap(Bag* other) {
  writing_filename_.Swap(&other->writing_filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bag::GetMetadata() const {
  protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Bag

// optional string writing_filename = 1;
bool Bag::has_writing_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Bag::set_has_writing_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void Bag::clear_has_writing_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void Bag::clear_writing_filename() {
  writing_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_writing_filename();
}
const ::std::string& Bag::writing_filename() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Bag.writing_filename)
  return writing_filename_.GetNoArena();
}
void Bag::set_writing_filename(const ::std::string& value) {
  set_has_writing_filename();
  writing_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Bag.writing_filename)
}
#if LANG_CXX11
void Bag::set_writing_filename(::std::string&& value) {
  set_has_writing_filename();
  writing_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.data.recorder.Bag.writing_filename)
}
#endif
void Bag::set_writing_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_writing_filename();
  writing_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.recorder.Bag.writing_filename)
}
void Bag::set_writing_filename(const char* value, size_t size) {
  set_has_writing_filename();
  writing_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.recorder.Bag.writing_filename)
}
::std::string* Bag::mutable_writing_filename() {
  set_has_writing_filename();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Bag.writing_filename)
  return writing_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Bag::release_writing_filename() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.Bag.writing_filename)
  clear_has_writing_filename();
  return writing_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Bag::set_allocated_writing_filename(::std::string* writing_filename) {
  if (writing_filename != NULL) {
    set_has_writing_filename();
  } else {
    clear_has_writing_filename();
  }
  writing_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), writing_filename);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.Bag.writing_filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace recorder
}  // namespace data
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
