// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/conti_radar/proto/conti_radar_conf.proto

#ifndef PROTOBUF_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto__INCLUDED
#define PROTOBUF_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/drivers/canbus/proto/can_card_parameter.pb.h"
// @@protoc_insertion_point(includes)
namespace apollo {
namespace drivers {
namespace canbus {
class CANCardParameter;
class CANCardParameterDefaultTypeInternal;
extern CANCardParameterDefaultTypeInternal _CANCardParameter_default_instance_;
}  // namespace canbus
namespace conti_radar {
class CanConf;
class CanConfDefaultTypeInternal;
extern CanConfDefaultTypeInternal _CanConf_default_instance_;
class ContiRadarConf;
class ContiRadarConfDefaultTypeInternal;
extern ContiRadarConfDefaultTypeInternal _ContiRadarConf_default_instance_;
class RadarConf;
class RadarConfDefaultTypeInternal;
extern RadarConfDefaultTypeInternal _RadarConf_default_instance_;
}  // namespace conti_radar
}  // namespace drivers
}  // namespace apollo

namespace apollo {
namespace drivers {
namespace conti_radar {

namespace protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto

enum OutputType {
  OUTPUT_TYPE_NONE = 0,
  OUTPUT_TYPE_OBJECTS = 1,
  OUTPUT_TYPE_CLUSTERS = 2,
  OUTPUT_TYPE_ERROR = 3
};
bool OutputType_IsValid(int value);
const OutputType OutputType_MIN = OUTPUT_TYPE_NONE;
const OutputType OutputType_MAX = OUTPUT_TYPE_ERROR;
const int OutputType_ARRAYSIZE = OutputType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OutputType_descriptor();
inline const ::std::string& OutputType_Name(OutputType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OutputType_descriptor(), value);
}
inline bool OutputType_Parse(
    const ::std::string& name, OutputType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OutputType>(
    OutputType_descriptor(), name, value);
}
enum RcsThreshold {
  RCS_THRESHOLD_STANDARD = 0,
  RCS_THRESHOLD_HIGH_SENSITIVITY = 1,
  RCS_THRESHOLD_ERROR = 2
};
bool RcsThreshold_IsValid(int value);
const RcsThreshold RcsThreshold_MIN = RCS_THRESHOLD_STANDARD;
const RcsThreshold RcsThreshold_MAX = RCS_THRESHOLD_ERROR;
const int RcsThreshold_ARRAYSIZE = RcsThreshold_MAX + 1;

const ::google::protobuf::EnumDescriptor* RcsThreshold_descriptor();
inline const ::std::string& RcsThreshold_Name(RcsThreshold value) {
  return ::google::protobuf::internal::NameOfEnum(
    RcsThreshold_descriptor(), value);
}
inline bool RcsThreshold_Parse(
    const ::std::string& name, RcsThreshold* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RcsThreshold>(
    RcsThreshold_descriptor(), name, value);
}
// ===================================================================

class CanConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.conti_radar.CanConf) */ {
 public:
  CanConf();
  virtual ~CanConf();

  CanConf(const CanConf& from);

  inline CanConf& operator=(const CanConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CanConf& default_instance();

  static inline const CanConf* internal_default_instance() {
    return reinterpret_cast<const CanConf*>(
               &_CanConf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CanConf* other);

  // implements Message ----------------------------------------------

  inline CanConf* New() const PROTOBUF_FINAL { return New(NULL); }

  CanConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CanConf& from);
  void MergeFrom(const CanConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CanConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
  bool has_can_card_parameter() const;
  void clear_can_card_parameter();
  static const int kCanCardParameterFieldNumber = 1;
  const ::apollo::drivers::canbus::CANCardParameter& can_card_parameter() const;
  ::apollo::drivers::canbus::CANCardParameter* mutable_can_card_parameter();
  ::apollo::drivers::canbus::CANCardParameter* release_can_card_parameter();
  void set_allocated_can_card_parameter(::apollo::drivers::canbus::CANCardParameter* can_card_parameter);

  // optional bool enable_debug_mode = 2 [default = false];
  bool has_enable_debug_mode() const;
  void clear_enable_debug_mode();
  static const int kEnableDebugModeFieldNumber = 2;
  bool enable_debug_mode() const;
  void set_enable_debug_mode(bool value);

  // optional bool enable_receiver_log = 3 [default = false];
  bool has_enable_receiver_log() const;
  void clear_enable_receiver_log();
  static const int kEnableReceiverLogFieldNumber = 3;
  bool enable_receiver_log() const;
  void set_enable_receiver_log(bool value);

  // optional bool enable_sender_log = 4 [default = false];
  bool has_enable_sender_log() const;
  void clear_enable_sender_log();
  static const int kEnableSenderLogFieldNumber = 4;
  bool enable_sender_log() const;
  void set_enable_sender_log(bool value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.conti_radar.CanConf)
 private:
  void set_has_can_card_parameter();
  void clear_has_can_card_parameter();
  void set_has_enable_debug_mode();
  void clear_has_enable_debug_mode();
  void set_has_enable_receiver_log();
  void clear_has_enable_receiver_log();
  void set_has_enable_sender_log();
  void clear_has_enable_sender_log();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::apollo::drivers::canbus::CANCardParameter* can_card_parameter_;
  bool enable_debug_mode_;
  bool enable_receiver_log_;
  bool enable_sender_log_;
  friend struct protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RadarConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.conti_radar.RadarConf) */ {
 public:
  RadarConf();
  virtual ~RadarConf();

  RadarConf(const RadarConf& from);

  inline RadarConf& operator=(const RadarConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarConf& default_instance();

  static inline const RadarConf* internal_default_instance() {
    return reinterpret_cast<const RadarConf*>(
               &_RadarConf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RadarConf* other);

  // implements Message ----------------------------------------------

  inline RadarConf* New() const PROTOBUF_FINAL { return New(NULL); }

  RadarConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RadarConf& from);
  void MergeFrom(const RadarConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RadarConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool max_distance_valid = 1 [default = false];
  bool has_max_distance_valid() const;
  void clear_max_distance_valid();
  static const int kMaxDistanceValidFieldNumber = 1;
  bool max_distance_valid() const;
  void set_max_distance_valid(bool value);

  // optional bool sensor_id_valid = 2 [default = false];
  bool has_sensor_id_valid() const;
  void clear_sensor_id_valid();
  static const int kSensorIdValidFieldNumber = 2;
  bool sensor_id_valid() const;
  void set_sensor_id_valid(bool value);

  // optional bool radar_power_valid = 3 [default = false];
  bool has_radar_power_valid() const;
  void clear_radar_power_valid();
  static const int kRadarPowerValidFieldNumber = 3;
  bool radar_power_valid() const;
  void set_radar_power_valid(bool value);

  // optional bool sort_index_valid = 7 [default = false];
  bool has_sort_index_valid() const;
  void clear_sort_index_valid();
  static const int kSortIndexValidFieldNumber = 7;
  bool sort_index_valid() const;
  void set_sort_index_valid(bool value);

  // optional bool ctrl_relay_valid = 9 [default = false];
  bool has_ctrl_relay_valid() const;
  void clear_ctrl_relay_valid();
  static const int kCtrlRelayValidFieldNumber = 9;
  bool ctrl_relay_valid() const;
  void set_ctrl_relay_valid(bool value);

  // optional uint32 sensor_id = 12 [default = 0];
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 12;
  ::google::protobuf::uint32 sensor_id() const;
  void set_sensor_id(::google::protobuf::uint32 value);

  // optional uint32 radar_power = 14 [default = 0];
  bool has_radar_power() const;
  void clear_radar_power();
  static const int kRadarPowerFieldNumber = 14;
  ::google::protobuf::uint32 radar_power() const;
  void set_radar_power(::google::protobuf::uint32 value);

  // optional uint32 ctrl_relay = 15 [default = 0];
  bool has_ctrl_relay() const;
  void clear_ctrl_relay();
  static const int kCtrlRelayFieldNumber = 15;
  ::google::protobuf::uint32 ctrl_relay() const;
  void set_ctrl_relay(::google::protobuf::uint32 value);

  // optional uint32 sort_index = 18 [default = 0];
  bool has_sort_index() const;
  void clear_sort_index();
  static const int kSortIndexFieldNumber = 18;
  ::google::protobuf::uint32 sort_index() const;
  void set_sort_index(::google::protobuf::uint32 value);

  // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
  bool has_rcs_threshold() const;
  void clear_rcs_threshold();
  static const int kRcsThresholdFieldNumber = 20;
  ::apollo::drivers::conti_radar::RcsThreshold rcs_threshold() const;
  void set_rcs_threshold(::apollo::drivers::conti_radar::RcsThreshold value);

  // optional uint32 store_in_nvm = 19 [default = 1];
  bool has_store_in_nvm() const;
  void clear_store_in_nvm();
  static const int kStoreInNvmFieldNumber = 19;
  ::google::protobuf::uint32 store_in_nvm() const;
  void set_store_in_nvm(::google::protobuf::uint32 value);

  // optional bool output_type_valid = 4 [default = true];
  bool has_output_type_valid() const;
  void clear_output_type_valid();
  static const int kOutputTypeValidFieldNumber = 4;
  bool output_type_valid() const;
  void set_output_type_valid(bool value);

  // optional bool send_quality_valid = 5 [default = true];
  bool has_send_quality_valid() const;
  void clear_send_quality_valid();
  static const int kSendQualityValidFieldNumber = 5;
  bool send_quality_valid() const;
  void set_send_quality_valid(bool value);

  // optional bool send_ext_info_valid = 6 [default = true];
  bool has_send_ext_info_valid() const;
  void clear_send_ext_info_valid();
  static const int kSendExtInfoValidFieldNumber = 6;
  bool send_ext_info_valid() const;
  void set_send_ext_info_valid(bool value);

  // optional bool store_in_nvm_valid = 8 [default = true];
  bool has_store_in_nvm_valid() const;
  void clear_store_in_nvm_valid();
  static const int kStoreInNvmValidFieldNumber = 8;
  bool store_in_nvm_valid() const;
  void set_store_in_nvm_valid(bool value);

  // optional uint32 max_distance = 11 [default = 248];
  bool has_max_distance() const;
  void clear_max_distance();
  static const int kMaxDistanceFieldNumber = 11;
  ::google::protobuf::uint32 max_distance() const;
  void set_max_distance(::google::protobuf::uint32 value);

  // optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
  bool has_output_type() const;
  void clear_output_type();
  static const int kOutputTypeFieldNumber = 13;
  ::apollo::drivers::conti_radar::OutputType output_type() const;
  void set_output_type(::apollo::drivers::conti_radar::OutputType value);

  // optional bool rcs_threshold_valid = 10 [default = true];
  bool has_rcs_threshold_valid() const;
  void clear_rcs_threshold_valid();
  static const int kRcsThresholdValidFieldNumber = 10;
  bool rcs_threshold_valid() const;
  void set_rcs_threshold_valid(bool value);

  // optional bool send_ext_info = 16 [default = true];
  bool has_send_ext_info() const;
  void clear_send_ext_info();
  static const int kSendExtInfoFieldNumber = 16;
  bool send_ext_info() const;
  void set_send_ext_info(bool value);

  // optional bool send_quality = 17 [default = true];
  bool has_send_quality() const;
  void clear_send_quality();
  static const int kSendQualityFieldNumber = 17;
  bool send_quality() const;
  void set_send_quality(bool value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.conti_radar.RadarConf)
 private:
  void set_has_max_distance_valid();
  void clear_has_max_distance_valid();
  void set_has_sensor_id_valid();
  void clear_has_sensor_id_valid();
  void set_has_radar_power_valid();
  void clear_has_radar_power_valid();
  void set_has_output_type_valid();
  void clear_has_output_type_valid();
  void set_has_send_quality_valid();
  void clear_has_send_quality_valid();
  void set_has_send_ext_info_valid();
  void clear_has_send_ext_info_valid();
  void set_has_sort_index_valid();
  void clear_has_sort_index_valid();
  void set_has_store_in_nvm_valid();
  void clear_has_store_in_nvm_valid();
  void set_has_ctrl_relay_valid();
  void clear_has_ctrl_relay_valid();
  void set_has_rcs_threshold_valid();
  void clear_has_rcs_threshold_valid();
  void set_has_max_distance();
  void clear_has_max_distance();
  void set_has_sensor_id();
  void clear_has_sensor_id();
  void set_has_output_type();
  void clear_has_output_type();
  void set_has_radar_power();
  void clear_has_radar_power();
  void set_has_ctrl_relay();
  void clear_has_ctrl_relay();
  void set_has_send_ext_info();
  void clear_has_send_ext_info();
  void set_has_send_quality();
  void clear_has_send_quality();
  void set_has_sort_index();
  void clear_has_sort_index();
  void set_has_store_in_nvm();
  void clear_has_store_in_nvm();
  void set_has_rcs_threshold();
  void clear_has_rcs_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool max_distance_valid_;
  bool sensor_id_valid_;
  bool radar_power_valid_;
  bool sort_index_valid_;
  bool ctrl_relay_valid_;
  ::google::protobuf::uint32 sensor_id_;
  ::google::protobuf::uint32 radar_power_;
  ::google::protobuf::uint32 ctrl_relay_;
  ::google::protobuf::uint32 sort_index_;
  int rcs_threshold_;
  ::google::protobuf::uint32 store_in_nvm_;
  bool output_type_valid_;
  bool send_quality_valid_;
  bool send_ext_info_valid_;
  bool store_in_nvm_valid_;
  ::google::protobuf::uint32 max_distance_;
  int output_type_;
  bool rcs_threshold_valid_;
  bool send_ext_info_;
  bool send_quality_;
  friend struct protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContiRadarConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.conti_radar.ContiRadarConf) */ {
 public:
  ContiRadarConf();
  virtual ~ContiRadarConf();

  ContiRadarConf(const ContiRadarConf& from);

  inline ContiRadarConf& operator=(const ContiRadarConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContiRadarConf& default_instance();

  static inline const ContiRadarConf* internal_default_instance() {
    return reinterpret_cast<const ContiRadarConf*>(
               &_ContiRadarConf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ContiRadarConf* other);

  // implements Message ----------------------------------------------

  inline ContiRadarConf* New() const PROTOBUF_FINAL { return New(NULL); }

  ContiRadarConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ContiRadarConf& from);
  void MergeFrom(const ContiRadarConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ContiRadarConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
  bool has_can_conf() const;
  void clear_can_conf();
  static const int kCanConfFieldNumber = 1;
  const ::apollo::drivers::conti_radar::CanConf& can_conf() const;
  ::apollo::drivers::conti_radar::CanConf* mutable_can_conf();
  ::apollo::drivers::conti_radar::CanConf* release_can_conf();
  void set_allocated_can_conf(::apollo::drivers::conti_radar::CanConf* can_conf);

  // optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
  bool has_radar_conf() const;
  void clear_radar_conf();
  static const int kRadarConfFieldNumber = 2;
  const ::apollo::drivers::conti_radar::RadarConf& radar_conf() const;
  ::apollo::drivers::conti_radar::RadarConf* mutable_radar_conf();
  ::apollo::drivers::conti_radar::RadarConf* release_radar_conf();
  void set_allocated_radar_conf(::apollo::drivers::conti_radar::RadarConf* radar_conf);

  // @@protoc_insertion_point(class_scope:apollo.drivers.conti_radar.ContiRadarConf)
 private:
  void set_has_can_conf();
  void clear_has_can_conf();
  void set_has_radar_conf();
  void clear_has_radar_conf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::apollo::drivers::conti_radar::CanConf* can_conf_;
  ::apollo::drivers::conti_radar::RadarConf* radar_conf_;
  friend struct protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CanConf

// optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
inline bool CanConf::has_can_card_parameter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CanConf::set_has_can_card_parameter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CanConf::clear_has_can_card_parameter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CanConf::clear_can_card_parameter() {
  if (can_card_parameter_ != NULL) can_card_parameter_->::apollo::drivers::canbus::CANCardParameter::Clear();
  clear_has_can_card_parameter();
}
inline const ::apollo::drivers::canbus::CANCardParameter& CanConf::can_card_parameter() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.CanConf.can_card_parameter)
  return can_card_parameter_ != NULL ? *can_card_parameter_
                         : *::apollo::drivers::canbus::CANCardParameter::internal_default_instance();
}
inline ::apollo::drivers::canbus::CANCardParameter* CanConf::mutable_can_card_parameter() {
  set_has_can_card_parameter();
  if (can_card_parameter_ == NULL) {
    can_card_parameter_ = new ::apollo::drivers::canbus::CANCardParameter;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.conti_radar.CanConf.can_card_parameter)
  return can_card_parameter_;
}
inline ::apollo::drivers::canbus::CANCardParameter* CanConf::release_can_card_parameter() {
  // @@protoc_insertion_point(field_release:apollo.drivers.conti_radar.CanConf.can_card_parameter)
  clear_has_can_card_parameter();
  ::apollo::drivers::canbus::CANCardParameter* temp = can_card_parameter_;
  can_card_parameter_ = NULL;
  return temp;
}
inline void CanConf::set_allocated_can_card_parameter(::apollo::drivers::canbus::CANCardParameter* can_card_parameter) {
  delete can_card_parameter_;
  can_card_parameter_ = can_card_parameter;
  if (can_card_parameter) {
    set_has_can_card_parameter();
  } else {
    clear_has_can_card_parameter();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.conti_radar.CanConf.can_card_parameter)
}

// optional bool enable_debug_mode = 2 [default = false];
inline bool CanConf::has_enable_debug_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CanConf::set_has_enable_debug_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CanConf::clear_has_enable_debug_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CanConf::clear_enable_debug_mode() {
  enable_debug_mode_ = false;
  clear_has_enable_debug_mode();
}
inline bool CanConf::enable_debug_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.CanConf.enable_debug_mode)
  return enable_debug_mode_;
}
inline void CanConf::set_enable_debug_mode(bool value) {
  set_has_enable_debug_mode();
  enable_debug_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.CanConf.enable_debug_mode)
}

// optional bool enable_receiver_log = 3 [default = false];
inline bool CanConf::has_enable_receiver_log() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CanConf::set_has_enable_receiver_log() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CanConf::clear_has_enable_receiver_log() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CanConf::clear_enable_receiver_log() {
  enable_receiver_log_ = false;
  clear_has_enable_receiver_log();
}
inline bool CanConf::enable_receiver_log() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.CanConf.enable_receiver_log)
  return enable_receiver_log_;
}
inline void CanConf::set_enable_receiver_log(bool value) {
  set_has_enable_receiver_log();
  enable_receiver_log_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.CanConf.enable_receiver_log)
}

// optional bool enable_sender_log = 4 [default = false];
inline bool CanConf::has_enable_sender_log() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CanConf::set_has_enable_sender_log() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CanConf::clear_has_enable_sender_log() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CanConf::clear_enable_sender_log() {
  enable_sender_log_ = false;
  clear_has_enable_sender_log();
}
inline bool CanConf::enable_sender_log() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.CanConf.enable_sender_log)
  return enable_sender_log_;
}
inline void CanConf::set_enable_sender_log(bool value) {
  set_has_enable_sender_log();
  enable_sender_log_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.CanConf.enable_sender_log)
}

// -------------------------------------------------------------------

// RadarConf

// optional bool max_distance_valid = 1 [default = false];
inline bool RadarConf::has_max_distance_valid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarConf::set_has_max_distance_valid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarConf::clear_has_max_distance_valid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarConf::clear_max_distance_valid() {
  max_distance_valid_ = false;
  clear_has_max_distance_valid();
}
inline bool RadarConf::max_distance_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.max_distance_valid)
  return max_distance_valid_;
}
inline void RadarConf::set_max_distance_valid(bool value) {
  set_has_max_distance_valid();
  max_distance_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.max_distance_valid)
}

// optional bool sensor_id_valid = 2 [default = false];
inline bool RadarConf::has_sensor_id_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarConf::set_has_sensor_id_valid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarConf::clear_has_sensor_id_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarConf::clear_sensor_id_valid() {
  sensor_id_valid_ = false;
  clear_has_sensor_id_valid();
}
inline bool RadarConf::sensor_id_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.sensor_id_valid)
  return sensor_id_valid_;
}
inline void RadarConf::set_sensor_id_valid(bool value) {
  set_has_sensor_id_valid();
  sensor_id_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.sensor_id_valid)
}

// optional bool radar_power_valid = 3 [default = false];
inline bool RadarConf::has_radar_power_valid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarConf::set_has_radar_power_valid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarConf::clear_has_radar_power_valid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarConf::clear_radar_power_valid() {
  radar_power_valid_ = false;
  clear_has_radar_power_valid();
}
inline bool RadarConf::radar_power_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.radar_power_valid)
  return radar_power_valid_;
}
inline void RadarConf::set_radar_power_valid(bool value) {
  set_has_radar_power_valid();
  radar_power_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.radar_power_valid)
}

// optional bool output_type_valid = 4 [default = true];
inline bool RadarConf::has_output_type_valid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RadarConf::set_has_output_type_valid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RadarConf::clear_has_output_type_valid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RadarConf::clear_output_type_valid() {
  output_type_valid_ = true;
  clear_has_output_type_valid();
}
inline bool RadarConf::output_type_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.output_type_valid)
  return output_type_valid_;
}
inline void RadarConf::set_output_type_valid(bool value) {
  set_has_output_type_valid();
  output_type_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.output_type_valid)
}

// optional bool send_quality_valid = 5 [default = true];
inline bool RadarConf::has_send_quality_valid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RadarConf::set_has_send_quality_valid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RadarConf::clear_has_send_quality_valid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RadarConf::clear_send_quality_valid() {
  send_quality_valid_ = true;
  clear_has_send_quality_valid();
}
inline bool RadarConf::send_quality_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.send_quality_valid)
  return send_quality_valid_;
}
inline void RadarConf::set_send_quality_valid(bool value) {
  set_has_send_quality_valid();
  send_quality_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.send_quality_valid)
}

// optional bool send_ext_info_valid = 6 [default = true];
inline bool RadarConf::has_send_ext_info_valid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RadarConf::set_has_send_ext_info_valid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RadarConf::clear_has_send_ext_info_valid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RadarConf::clear_send_ext_info_valid() {
  send_ext_info_valid_ = true;
  clear_has_send_ext_info_valid();
}
inline bool RadarConf::send_ext_info_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.send_ext_info_valid)
  return send_ext_info_valid_;
}
inline void RadarConf::set_send_ext_info_valid(bool value) {
  set_has_send_ext_info_valid();
  send_ext_info_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.send_ext_info_valid)
}

// optional bool sort_index_valid = 7 [default = false];
inline bool RadarConf::has_sort_index_valid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarConf::set_has_sort_index_valid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarConf::clear_has_sort_index_valid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarConf::clear_sort_index_valid() {
  sort_index_valid_ = false;
  clear_has_sort_index_valid();
}
inline bool RadarConf::sort_index_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.sort_index_valid)
  return sort_index_valid_;
}
inline void RadarConf::set_sort_index_valid(bool value) {
  set_has_sort_index_valid();
  sort_index_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.sort_index_valid)
}

// optional bool store_in_nvm_valid = 8 [default = true];
inline bool RadarConf::has_store_in_nvm_valid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RadarConf::set_has_store_in_nvm_valid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RadarConf::clear_has_store_in_nvm_valid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RadarConf::clear_store_in_nvm_valid() {
  store_in_nvm_valid_ = true;
  clear_has_store_in_nvm_valid();
}
inline bool RadarConf::store_in_nvm_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.store_in_nvm_valid)
  return store_in_nvm_valid_;
}
inline void RadarConf::set_store_in_nvm_valid(bool value) {
  set_has_store_in_nvm_valid();
  store_in_nvm_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.store_in_nvm_valid)
}

// optional bool ctrl_relay_valid = 9 [default = false];
inline bool RadarConf::has_ctrl_relay_valid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarConf::set_has_ctrl_relay_valid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarConf::clear_has_ctrl_relay_valid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarConf::clear_ctrl_relay_valid() {
  ctrl_relay_valid_ = false;
  clear_has_ctrl_relay_valid();
}
inline bool RadarConf::ctrl_relay_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.ctrl_relay_valid)
  return ctrl_relay_valid_;
}
inline void RadarConf::set_ctrl_relay_valid(bool value) {
  set_has_ctrl_relay_valid();
  ctrl_relay_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.ctrl_relay_valid)
}

// optional bool rcs_threshold_valid = 10 [default = true];
inline bool RadarConf::has_rcs_threshold_valid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RadarConf::set_has_rcs_threshold_valid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RadarConf::clear_has_rcs_threshold_valid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RadarConf::clear_rcs_threshold_valid() {
  rcs_threshold_valid_ = true;
  clear_has_rcs_threshold_valid();
}
inline bool RadarConf::rcs_threshold_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.rcs_threshold_valid)
  return rcs_threshold_valid_;
}
inline void RadarConf::set_rcs_threshold_valid(bool value) {
  set_has_rcs_threshold_valid();
  rcs_threshold_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.rcs_threshold_valid)
}

// optional uint32 max_distance = 11 [default = 248];
inline bool RadarConf::has_max_distance() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RadarConf::set_has_max_distance() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RadarConf::clear_has_max_distance() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RadarConf::clear_max_distance() {
  max_distance_ = 248u;
  clear_has_max_distance();
}
inline ::google::protobuf::uint32 RadarConf::max_distance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.max_distance)
  return max_distance_;
}
inline void RadarConf::set_max_distance(::google::protobuf::uint32 value) {
  set_has_max_distance();
  max_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.max_distance)
}

// optional uint32 sensor_id = 12 [default = 0];
inline bool RadarConf::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarConf::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarConf::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarConf::clear_sensor_id() {
  sensor_id_ = 0u;
  clear_has_sensor_id();
}
inline ::google::protobuf::uint32 RadarConf::sensor_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.sensor_id)
  return sensor_id_;
}
inline void RadarConf::set_sensor_id(::google::protobuf::uint32 value) {
  set_has_sensor_id();
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.sensor_id)
}

// optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
inline bool RadarConf::has_output_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RadarConf::set_has_output_type() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RadarConf::clear_has_output_type() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RadarConf::clear_output_type() {
  output_type_ = 1;
  clear_has_output_type();
}
inline ::apollo::drivers::conti_radar::OutputType RadarConf::output_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.output_type)
  return static_cast< ::apollo::drivers::conti_radar::OutputType >(output_type_);
}
inline void RadarConf::set_output_type(::apollo::drivers::conti_radar::OutputType value) {
  assert(::apollo::drivers::conti_radar::OutputType_IsValid(value));
  set_has_output_type();
  output_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.output_type)
}

// optional uint32 radar_power = 14 [default = 0];
inline bool RadarConf::has_radar_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarConf::set_has_radar_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarConf::clear_has_radar_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarConf::clear_radar_power() {
  radar_power_ = 0u;
  clear_has_radar_power();
}
inline ::google::protobuf::uint32 RadarConf::radar_power() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.radar_power)
  return radar_power_;
}
inline void RadarConf::set_radar_power(::google::protobuf::uint32 value) {
  set_has_radar_power();
  radar_power_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.radar_power)
}

// optional uint32 ctrl_relay = 15 [default = 0];
inline bool RadarConf::has_ctrl_relay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarConf::set_has_ctrl_relay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarConf::clear_has_ctrl_relay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarConf::clear_ctrl_relay() {
  ctrl_relay_ = 0u;
  clear_has_ctrl_relay();
}
inline ::google::protobuf::uint32 RadarConf::ctrl_relay() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.ctrl_relay)
  return ctrl_relay_;
}
inline void RadarConf::set_ctrl_relay(::google::protobuf::uint32 value) {
  set_has_ctrl_relay();
  ctrl_relay_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.ctrl_relay)
}

// optional bool send_ext_info = 16 [default = true];
inline bool RadarConf::has_send_ext_info() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RadarConf::set_has_send_ext_info() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RadarConf::clear_has_send_ext_info() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RadarConf::clear_send_ext_info() {
  send_ext_info_ = true;
  clear_has_send_ext_info();
}
inline bool RadarConf::send_ext_info() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.send_ext_info)
  return send_ext_info_;
}
inline void RadarConf::set_send_ext_info(bool value) {
  set_has_send_ext_info();
  send_ext_info_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.send_ext_info)
}

// optional bool send_quality = 17 [default = true];
inline bool RadarConf::has_send_quality() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RadarConf::set_has_send_quality() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RadarConf::clear_has_send_quality() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RadarConf::clear_send_quality() {
  send_quality_ = true;
  clear_has_send_quality();
}
inline bool RadarConf::send_quality() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.send_quality)
  return send_quality_;
}
inline void RadarConf::set_send_quality(bool value) {
  set_has_send_quality();
  send_quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.send_quality)
}

// optional uint32 sort_index = 18 [default = 0];
inline bool RadarConf::has_sort_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarConf::set_has_sort_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarConf::clear_has_sort_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarConf::clear_sort_index() {
  sort_index_ = 0u;
  clear_has_sort_index();
}
inline ::google::protobuf::uint32 RadarConf::sort_index() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.sort_index)
  return sort_index_;
}
inline void RadarConf::set_sort_index(::google::protobuf::uint32 value) {
  set_has_sort_index();
  sort_index_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.sort_index)
}

// optional uint32 store_in_nvm = 19 [default = 1];
inline bool RadarConf::has_store_in_nvm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarConf::set_has_store_in_nvm() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarConf::clear_has_store_in_nvm() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarConf::clear_store_in_nvm() {
  store_in_nvm_ = 1u;
  clear_has_store_in_nvm();
}
inline ::google::protobuf::uint32 RadarConf::store_in_nvm() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.store_in_nvm)
  return store_in_nvm_;
}
inline void RadarConf::set_store_in_nvm(::google::protobuf::uint32 value) {
  set_has_store_in_nvm();
  store_in_nvm_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.store_in_nvm)
}

// optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
inline bool RadarConf::has_rcs_threshold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarConf::set_has_rcs_threshold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarConf::clear_has_rcs_threshold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarConf::clear_rcs_threshold() {
  rcs_threshold_ = 0;
  clear_has_rcs_threshold();
}
inline ::apollo::drivers::conti_radar::RcsThreshold RadarConf::rcs_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.rcs_threshold)
  return static_cast< ::apollo::drivers::conti_radar::RcsThreshold >(rcs_threshold_);
}
inline void RadarConf::set_rcs_threshold(::apollo::drivers::conti_radar::RcsThreshold value) {
  assert(::apollo::drivers::conti_radar::RcsThreshold_IsValid(value));
  set_has_rcs_threshold();
  rcs_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.rcs_threshold)
}

// -------------------------------------------------------------------

// ContiRadarConf

// optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
inline bool ContiRadarConf::has_can_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContiRadarConf::set_has_can_conf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContiRadarConf::clear_has_can_conf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContiRadarConf::clear_can_conf() {
  if (can_conf_ != NULL) can_conf_->::apollo::drivers::conti_radar::CanConf::Clear();
  clear_has_can_conf();
}
inline const ::apollo::drivers::conti_radar::CanConf& ContiRadarConf::can_conf() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.ContiRadarConf.can_conf)
  return can_conf_ != NULL ? *can_conf_
                         : *::apollo::drivers::conti_radar::CanConf::internal_default_instance();
}
inline ::apollo::drivers::conti_radar::CanConf* ContiRadarConf::mutable_can_conf() {
  set_has_can_conf();
  if (can_conf_ == NULL) {
    can_conf_ = new ::apollo::drivers::conti_radar::CanConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.conti_radar.ContiRadarConf.can_conf)
  return can_conf_;
}
inline ::apollo::drivers::conti_radar::CanConf* ContiRadarConf::release_can_conf() {
  // @@protoc_insertion_point(field_release:apollo.drivers.conti_radar.ContiRadarConf.can_conf)
  clear_has_can_conf();
  ::apollo::drivers::conti_radar::CanConf* temp = can_conf_;
  can_conf_ = NULL;
  return temp;
}
inline void ContiRadarConf::set_allocated_can_conf(::apollo::drivers::conti_radar::CanConf* can_conf) {
  delete can_conf_;
  can_conf_ = can_conf;
  if (can_conf) {
    set_has_can_conf();
  } else {
    clear_has_can_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.conti_radar.ContiRadarConf.can_conf)
}

// optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
inline bool ContiRadarConf::has_radar_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContiRadarConf::set_has_radar_conf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContiRadarConf::clear_has_radar_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContiRadarConf::clear_radar_conf() {
  if (radar_conf_ != NULL) radar_conf_->::apollo::drivers::conti_radar::RadarConf::Clear();
  clear_has_radar_conf();
}
inline const ::apollo::drivers::conti_radar::RadarConf& ContiRadarConf::radar_conf() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.ContiRadarConf.radar_conf)
  return radar_conf_ != NULL ? *radar_conf_
                         : *::apollo::drivers::conti_radar::RadarConf::internal_default_instance();
}
inline ::apollo::drivers::conti_radar::RadarConf* ContiRadarConf::mutable_radar_conf() {
  set_has_radar_conf();
  if (radar_conf_ == NULL) {
    radar_conf_ = new ::apollo::drivers::conti_radar::RadarConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.conti_radar.ContiRadarConf.radar_conf)
  return radar_conf_;
}
inline ::apollo::drivers::conti_radar::RadarConf* ContiRadarConf::release_radar_conf() {
  // @@protoc_insertion_point(field_release:apollo.drivers.conti_radar.ContiRadarConf.radar_conf)
  clear_has_radar_conf();
  ::apollo::drivers::conti_radar::RadarConf* temp = radar_conf_;
  radar_conf_ = NULL;
  return temp;
}
inline void ContiRadarConf::set_allocated_radar_conf(::apollo::drivers::conti_radar::RadarConf* radar_conf) {
  delete radar_conf_;
  radar_conf_ = radar_conf;
  if (radar_conf) {
    set_has_radar_conf();
  } else {
    clear_has_radar_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.conti_radar.ContiRadarConf.radar_conf)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace conti_radar
}  // namespace drivers
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::drivers::conti_radar::OutputType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::conti_radar::OutputType>() {
  return ::apollo::drivers::conti_radar::OutputType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::conti_radar::RcsThreshold> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::conti_radar::RcsThreshold>() {
  return ::apollo::drivers::conti_radar::RcsThreshold_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto__INCLUDED
