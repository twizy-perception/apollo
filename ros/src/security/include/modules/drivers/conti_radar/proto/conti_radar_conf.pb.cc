// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/conti_radar/proto/conti_radar_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/drivers/conti_radar/proto/conti_radar_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
namespace conti_radar {
class CanConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CanConf> {
} _CanConf_default_instance_;
class RadarConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RadarConf> {
} _RadarConf_default_instance_;
class ContiRadarConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContiRadarConf> {
} _ContiRadarConf_default_instance_;

namespace protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanConf, can_card_parameter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanConf, enable_debug_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanConf, enable_receiver_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanConf, enable_sender_log_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, max_distance_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, sensor_id_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, radar_power_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, output_type_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, send_quality_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, send_ext_info_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, sort_index_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, store_in_nvm_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, ctrl_relay_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, rcs_threshold_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, max_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, output_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, radar_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, ctrl_relay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, send_ext_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, send_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, sort_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, store_in_nvm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, rcs_threshold_),
  0,
  1,
  2,
  11,
  12,
  13,
  3,
  14,
  4,
  17,
  15,
  5,
  16,
  6,
  7,
  18,
  19,
  8,
  10,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarConf, can_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarConf, radar_conf_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(CanConf)},
  { 13, 38, sizeof(RadarConf)},
  { 58, 65, sizeof(ContiRadarConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CanConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RadarConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContiRadarConf_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/drivers/conti_radar/proto/conti_radar_conf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _CanConf_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RadarConf_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ContiRadarConf_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::drivers::canbus::protobuf_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto::InitDefaults();
  _CanConf_default_instance_.DefaultConstruct();
  _RadarConf_default_instance_.DefaultConstruct();
  _ContiRadarConf_default_instance_.DefaultConstruct();
  _CanConf_default_instance_.get_mutable()->can_card_parameter_ = const_cast< ::apollo::drivers::canbus::CANCardParameter*>(
      ::apollo::drivers::canbus::CANCardParameter::internal_default_instance());
  _ContiRadarConf_default_instance_.get_mutable()->can_conf_ = const_cast< ::apollo::drivers::conti_radar::CanConf*>(
      ::apollo::drivers::conti_radar::CanConf::internal_default_instance());
  _ContiRadarConf_default_instance_.get_mutable()->radar_conf_ = const_cast< ::apollo::drivers::conti_radar::RadarConf*>(
      ::apollo::drivers::conti_radar::RadarConf::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n8modules/drivers/conti_radar/proto/cont"
      "i_radar_conf.proto\022\032apollo.drivers.conti"
      "_radar\0325modules/drivers/canbus/proto/can"
      "_card_parameter.proto\"\266\001\n\007CanConf\022C\n\022can"
      "_card_parameter\030\001 \001(\0132\'.apollo.drivers.c"
      "anbus.CANCardParameter\022 \n\021enable_debug_m"
      "ode\030\002 \001(\010:\005false\022\"\n\023enable_receiver_log\030"
      "\003 \001(\010:\005false\022 \n\021enable_sender_log\030\004 \001(\010:"
      "\005false\"\321\005\n\tRadarConf\022!\n\022max_distance_val"
      "id\030\001 \001(\010:\005false\022\036\n\017sensor_id_valid\030\002 \001(\010"
      ":\005false\022 \n\021radar_power_valid\030\003 \001(\010:\005fals"
      "e\022\037\n\021output_type_valid\030\004 \001(\010:\004true\022 \n\022se"
      "nd_quality_valid\030\005 \001(\010:\004true\022!\n\023send_ext"
      "_info_valid\030\006 \001(\010:\004true\022\037\n\020sort_index_va"
      "lid\030\007 \001(\010:\005false\022 \n\022store_in_nvm_valid\030\010"
      " \001(\010:\004true\022\037\n\020ctrl_relay_valid\030\t \001(\010:\005fa"
      "lse\022!\n\023rcs_threshold_valid\030\n \001(\010:\004true\022\031"
      "\n\014max_distance\030\013 \001(\r:\003248\022\024\n\tsensor_id\030\014"
      " \001(\r:\0010\022P\n\013output_type\030\r \001(\0162&.apollo.dr"
      "ivers.conti_radar.OutputType:\023OUTPUT_TYP"
      "E_OBJECTS\022\026\n\013radar_power\030\016 \001(\r:\0010\022\025\n\nctr"
      "l_relay\030\017 \001(\r:\0010\022\033\n\rsend_ext_info\030\020 \001(\010:"
      "\004true\022\032\n\014send_quality\030\021 \001(\010:\004true\022\025\n\nsor"
      "t_index\030\022 \001(\r:\0010\022\027\n\014store_in_nvm\030\023 \001(\r:\001"
      "1\022W\n\rrcs_threshold\030\024 \001(\0162(.apollo.driver"
      "s.conti_radar.RcsThreshold:\026RCS_THRESHOL"
      "D_STANDARD\"\202\001\n\016ContiRadarConf\0225\n\010can_con"
      "f\030\001 \001(\0132#.apollo.drivers.conti_radar.Can"
      "Conf\0229\n\nradar_conf\030\002 \001(\0132%.apollo.driver"
      "s.conti_radar.RadarConf*l\n\nOutputType\022\024\n"
      "\020OUTPUT_TYPE_NONE\020\000\022\027\n\023OUTPUT_TYPE_OBJEC"
      "TS\020\001\022\030\n\024OUTPUT_TYPE_CLUSTERS\020\002\022\025\n\021OUTPUT"
      "_TYPE_ERROR\020\003*g\n\014RcsThreshold\022\032\n\026RCS_THR"
      "ESHOLD_STANDARD\020\000\022\"\n\036RCS_THRESHOLD_HIGH_"
      "SENSITIVITY\020\001\022\027\n\023RCS_THRESHOLD_ERROR\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1398);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/conti_radar/proto/conti_radar_conf.proto", &protobuf_RegisterTypes);
  ::apollo::drivers::canbus::protobuf_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto

const ::google::protobuf::EnumDescriptor* OutputType_descriptor() {
  protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::file_level_enum_descriptors[0];
}
bool OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RcsThreshold_descriptor() {
  protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::file_level_enum_descriptors[1];
}
bool RcsThreshold_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CanConf::kCanCardParameterFieldNumber;
const int CanConf::kEnableDebugModeFieldNumber;
const int CanConf::kEnableReceiverLogFieldNumber;
const int CanConf::kEnableSenderLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CanConf::CanConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.conti_radar.CanConf)
}
CanConf::CanConf(const CanConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_can_card_parameter()) {
    can_card_parameter_ = new ::apollo::drivers::canbus::CANCardParameter(*from.can_card_parameter_);
  } else {
    can_card_parameter_ = NULL;
  }
  ::memcpy(&enable_debug_mode_, &from.enable_debug_mode_,
    reinterpret_cast<char*>(&enable_sender_log_) -
    reinterpret_cast<char*>(&enable_debug_mode_) + sizeof(enable_sender_log_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.conti_radar.CanConf)
}

void CanConf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_card_parameter_, 0, reinterpret_cast<char*>(&enable_sender_log_) -
    reinterpret_cast<char*>(&can_card_parameter_) + sizeof(enable_sender_log_));
}

CanConf::~CanConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.conti_radar.CanConf)
  SharedDtor();
}

void CanConf::SharedDtor() {
  if (this != internal_default_instance()) {
    delete can_card_parameter_;
  }
}

void CanConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CanConf::descriptor() {
  protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CanConf& CanConf::default_instance() {
  protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

CanConf* CanConf::New(::google::protobuf::Arena* arena) const {
  CanConf* n = new CanConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CanConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.conti_radar.CanConf)
  if (has_can_card_parameter()) {
    GOOGLE_DCHECK(can_card_parameter_ != NULL);
    can_card_parameter_->::apollo::drivers::canbus::CANCardParameter::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&enable_debug_mode_, 0, reinterpret_cast<char*>(&enable_sender_log_) -
      reinterpret_cast<char*>(&enable_debug_mode_) + sizeof(enable_sender_log_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CanConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.conti_radar.CanConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_can_card_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_debug_mode = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_enable_debug_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_debug_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_receiver_log = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_enable_receiver_log();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_receiver_log_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_sender_log = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_enable_sender_log();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_sender_log_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.conti_radar.CanConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.conti_radar.CanConf)
  return false;
#undef DO_
}

void CanConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.conti_radar.CanConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->can_card_parameter_, output);
  }

  // optional bool enable_debug_mode = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_debug_mode(), output);
  }

  // optional bool enable_receiver_log = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_receiver_log(), output);
  }

  // optional bool enable_sender_log = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable_sender_log(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.conti_radar.CanConf)
}

::google::protobuf::uint8* CanConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.conti_radar.CanConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->can_card_parameter_, deterministic, target);
  }

  // optional bool enable_debug_mode = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_debug_mode(), target);
  }

  // optional bool enable_receiver_log = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_receiver_log(), target);
  }

  // optional bool enable_sender_log = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enable_sender_log(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.conti_radar.CanConf)
  return target;
}

size_t CanConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.conti_radar.CanConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
    if (has_can_card_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->can_card_parameter_);
    }

    // optional bool enable_debug_mode = 2 [default = false];
    if (has_enable_debug_mode()) {
      total_size += 1 + 1;
    }

    // optional bool enable_receiver_log = 3 [default = false];
    if (has_enable_receiver_log()) {
      total_size += 1 + 1;
    }

    // optional bool enable_sender_log = 4 [default = false];
    if (has_enable_sender_log()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.conti_radar.CanConf)
  GOOGLE_DCHECK_NE(&from, this);
  const CanConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CanConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.conti_radar.CanConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.conti_radar.CanConf)
    MergeFrom(*source);
  }
}

void CanConf::MergeFrom(const CanConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.conti_radar.CanConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_can_card_parameter()->::apollo::drivers::canbus::CANCardParameter::MergeFrom(from.can_card_parameter());
    }
    if (cached_has_bits & 0x00000002u) {
      enable_debug_mode_ = from.enable_debug_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_receiver_log_ = from.enable_receiver_log_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_sender_log_ = from.enable_sender_log_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CanConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.conti_radar.CanConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanConf::CopyFrom(const CanConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.conti_radar.CanConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanConf::IsInitialized() const {
  return true;
}

void CanConf::Swap(CanConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CanConf::InternalSwap(CanConf* other) {
  std::swap(can_card_parameter_, other->can_card_parameter_);
  std::swap(enable_debug_mode_, other->enable_debug_mode_);
  std::swap(enable_receiver_log_, other->enable_receiver_log_);
  std::swap(enable_sender_log_, other->enable_sender_log_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CanConf::GetMetadata() const {
  protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CanConf

// optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
bool CanConf::has_can_card_parameter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CanConf::set_has_can_card_parameter() {
  _has_bits_[0] |= 0x00000001u;
}
void CanConf::clear_has_can_card_parameter() {
  _has_bits_[0] &= ~0x00000001u;
}
void CanConf::clear_can_card_parameter() {
  if (can_card_parameter_ != NULL) can_card_parameter_->::apollo::drivers::canbus::CANCardParameter::Clear();
  clear_has_can_card_parameter();
}
const ::apollo::drivers::canbus::CANCardParameter& CanConf::can_card_parameter() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.CanConf.can_card_parameter)
  return can_card_parameter_ != NULL ? *can_card_parameter_
                         : *::apollo::drivers::canbus::CANCardParameter::internal_default_instance();
}
::apollo::drivers::canbus::CANCardParameter* CanConf::mutable_can_card_parameter() {
  set_has_can_card_parameter();
  if (can_card_parameter_ == NULL) {
    can_card_parameter_ = new ::apollo::drivers::canbus::CANCardParameter;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.conti_radar.CanConf.can_card_parameter)
  return can_card_parameter_;
}
::apollo::drivers::canbus::CANCardParameter* CanConf::release_can_card_parameter() {
  // @@protoc_insertion_point(field_release:apollo.drivers.conti_radar.CanConf.can_card_parameter)
  clear_has_can_card_parameter();
  ::apollo::drivers::canbus::CANCardParameter* temp = can_card_parameter_;
  can_card_parameter_ = NULL;
  return temp;
}
void CanConf::set_allocated_can_card_parameter(::apollo::drivers::canbus::CANCardParameter* can_card_parameter) {
  delete can_card_parameter_;
  can_card_parameter_ = can_card_parameter;
  if (can_card_parameter) {
    set_has_can_card_parameter();
  } else {
    clear_has_can_card_parameter();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.conti_radar.CanConf.can_card_parameter)
}

// optional bool enable_debug_mode = 2 [default = false];
bool CanConf::has_enable_debug_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CanConf::set_has_enable_debug_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void CanConf::clear_has_enable_debug_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void CanConf::clear_enable_debug_mode() {
  enable_debug_mode_ = false;
  clear_has_enable_debug_mode();
}
bool CanConf::enable_debug_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.CanConf.enable_debug_mode)
  return enable_debug_mode_;
}
void CanConf::set_enable_debug_mode(bool value) {
  set_has_enable_debug_mode();
  enable_debug_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.CanConf.enable_debug_mode)
}

// optional bool enable_receiver_log = 3 [default = false];
bool CanConf::has_enable_receiver_log() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CanConf::set_has_enable_receiver_log() {
  _has_bits_[0] |= 0x00000004u;
}
void CanConf::clear_has_enable_receiver_log() {
  _has_bits_[0] &= ~0x00000004u;
}
void CanConf::clear_enable_receiver_log() {
  enable_receiver_log_ = false;
  clear_has_enable_receiver_log();
}
bool CanConf::enable_receiver_log() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.CanConf.enable_receiver_log)
  return enable_receiver_log_;
}
void CanConf::set_enable_receiver_log(bool value) {
  set_has_enable_receiver_log();
  enable_receiver_log_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.CanConf.enable_receiver_log)
}

// optional bool enable_sender_log = 4 [default = false];
bool CanConf::has_enable_sender_log() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CanConf::set_has_enable_sender_log() {
  _has_bits_[0] |= 0x00000008u;
}
void CanConf::clear_has_enable_sender_log() {
  _has_bits_[0] &= ~0x00000008u;
}
void CanConf::clear_enable_sender_log() {
  enable_sender_log_ = false;
  clear_has_enable_sender_log();
}
bool CanConf::enable_sender_log() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.CanConf.enable_sender_log)
  return enable_sender_log_;
}
void CanConf::set_enable_sender_log(bool value) {
  set_has_enable_sender_log();
  enable_sender_log_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.CanConf.enable_sender_log)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarConf::kMaxDistanceValidFieldNumber;
const int RadarConf::kSensorIdValidFieldNumber;
const int RadarConf::kRadarPowerValidFieldNumber;
const int RadarConf::kOutputTypeValidFieldNumber;
const int RadarConf::kSendQualityValidFieldNumber;
const int RadarConf::kSendExtInfoValidFieldNumber;
const int RadarConf::kSortIndexValidFieldNumber;
const int RadarConf::kStoreInNvmValidFieldNumber;
const int RadarConf::kCtrlRelayValidFieldNumber;
const int RadarConf::kRcsThresholdValidFieldNumber;
const int RadarConf::kMaxDistanceFieldNumber;
const int RadarConf::kSensorIdFieldNumber;
const int RadarConf::kOutputTypeFieldNumber;
const int RadarConf::kRadarPowerFieldNumber;
const int RadarConf::kCtrlRelayFieldNumber;
const int RadarConf::kSendExtInfoFieldNumber;
const int RadarConf::kSendQualityFieldNumber;
const int RadarConf::kSortIndexFieldNumber;
const int RadarConf::kStoreInNvmFieldNumber;
const int RadarConf::kRcsThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarConf::RadarConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.conti_radar.RadarConf)
}
RadarConf::RadarConf(const RadarConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_distance_valid_, &from.max_distance_valid_,
    reinterpret_cast<char*>(&send_quality_) -
    reinterpret_cast<char*>(&max_distance_valid_) + sizeof(send_quality_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.conti_radar.RadarConf)
}

void RadarConf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&max_distance_valid_, 0, reinterpret_cast<char*>(&rcs_threshold_) -
    reinterpret_cast<char*>(&max_distance_valid_) + sizeof(rcs_threshold_));
  store_in_nvm_ = 1u;
  output_type_valid_ = true;
  send_quality_valid_ = true;
  send_ext_info_valid_ = true;
  store_in_nvm_valid_ = true;
  max_distance_ = 248u;
  output_type_ = 1;
  rcs_threshold_valid_ = true;
  send_ext_info_ = true;
  send_quality_ = true;
}

RadarConf::~RadarConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.conti_radar.RadarConf)
  SharedDtor();
}

void RadarConf::SharedDtor() {
}

void RadarConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarConf::descriptor() {
  protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RadarConf& RadarConf::default_instance() {
  protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

RadarConf* RadarConf::New(::google::protobuf::Arena* arena) const {
  RadarConf* n = new RadarConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.conti_radar.RadarConf)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&max_distance_valid_, 0, reinterpret_cast<char*>(&ctrl_relay_) -
      reinterpret_cast<char*>(&max_distance_valid_) + sizeof(ctrl_relay_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&sort_index_, 0, reinterpret_cast<char*>(&rcs_threshold_) -
      reinterpret_cast<char*>(&sort_index_) + sizeof(rcs_threshold_));
    store_in_nvm_ = 1u;
    output_type_valid_ = true;
    send_quality_valid_ = true;
    send_ext_info_valid_ = true;
    store_in_nvm_valid_ = true;
    max_distance_ = 248u;
  }
  if (_has_bits_[16 / 32] & 983040u) {
    output_type_ = 1;
    rcs_threshold_valid_ = true;
    send_ext_info_ = true;
    send_quality_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RadarConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.conti_radar.RadarConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool max_distance_valid = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_max_distance_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &max_distance_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sensor_id_valid = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sensor_id_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sensor_id_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool radar_power_valid = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_radar_power_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radar_power_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool output_type_valid = 4 [default = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_output_type_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_type_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_quality_valid = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_send_quality_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_quality_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_ext_info_valid = 6 [default = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_send_ext_info_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_ext_info_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sort_index_valid = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_sort_index_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sort_index_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool store_in_nvm_valid = 8 [default = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_store_in_nvm_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &store_in_nvm_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ctrl_relay_valid = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_ctrl_relay_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ctrl_relay_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rcs_threshold_valid = 10 [default = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_rcs_threshold_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rcs_threshold_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_distance = 11 [default = 248];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_max_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sensor_id = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_sensor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::conti_radar::OutputType_IsValid(value)) {
            set_output_type(static_cast< ::apollo::drivers::conti_radar::OutputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radar_power = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_radar_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radar_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ctrl_relay = 15 [default = 0];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_ctrl_relay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctrl_relay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_ext_info = 16 [default = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_send_ext_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_ext_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_quality = 17 [default = true];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_send_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sort_index = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_sort_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 store_in_nvm = 19 [default = 1];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_store_in_nvm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_in_nvm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::conti_radar::RcsThreshold_IsValid(value)) {
            set_rcs_threshold(static_cast< ::apollo::drivers::conti_radar::RcsThreshold >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.conti_radar.RadarConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.conti_radar.RadarConf)
  return false;
#undef DO_
}

void RadarConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.conti_radar.RadarConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool max_distance_valid = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->max_distance_valid(), output);
  }

  // optional bool sensor_id_valid = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sensor_id_valid(), output);
  }

  // optional bool radar_power_valid = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->radar_power_valid(), output);
  }

  // optional bool output_type_valid = 4 [default = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->output_type_valid(), output);
  }

  // optional bool send_quality_valid = 5 [default = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->send_quality_valid(), output);
  }

  // optional bool send_ext_info_valid = 6 [default = true];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->send_ext_info_valid(), output);
  }

  // optional bool sort_index_valid = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sort_index_valid(), output);
  }

  // optional bool store_in_nvm_valid = 8 [default = true];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->store_in_nvm_valid(), output);
  }

  // optional bool ctrl_relay_valid = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ctrl_relay_valid(), output);
  }

  // optional bool rcs_threshold_valid = 10 [default = true];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->rcs_threshold_valid(), output);
  }

  // optional uint32 max_distance = 11 [default = 248];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max_distance(), output);
  }

  // optional uint32 sensor_id = 12 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sensor_id(), output);
  }

  // optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->output_type(), output);
  }

  // optional uint32 radar_power = 14 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->radar_power(), output);
  }

  // optional uint32 ctrl_relay = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ctrl_relay(), output);
  }

  // optional bool send_ext_info = 16 [default = true];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->send_ext_info(), output);
  }

  // optional bool send_quality = 17 [default = true];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->send_quality(), output);
  }

  // optional uint32 sort_index = 18 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->sort_index(), output);
  }

  // optional uint32 store_in_nvm = 19 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->store_in_nvm(), output);
  }

  // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->rcs_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.conti_radar.RadarConf)
}

::google::protobuf::uint8* RadarConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.conti_radar.RadarConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool max_distance_valid = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->max_distance_valid(), target);
  }

  // optional bool sensor_id_valid = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sensor_id_valid(), target);
  }

  // optional bool radar_power_valid = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->radar_power_valid(), target);
  }

  // optional bool output_type_valid = 4 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->output_type_valid(), target);
  }

  // optional bool send_quality_valid = 5 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->send_quality_valid(), target);
  }

  // optional bool send_ext_info_valid = 6 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->send_ext_info_valid(), target);
  }

  // optional bool sort_index_valid = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sort_index_valid(), target);
  }

  // optional bool store_in_nvm_valid = 8 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->store_in_nvm_valid(), target);
  }

  // optional bool ctrl_relay_valid = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ctrl_relay_valid(), target);
  }

  // optional bool rcs_threshold_valid = 10 [default = true];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->rcs_threshold_valid(), target);
  }

  // optional uint32 max_distance = 11 [default = 248];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max_distance(), target);
  }

  // optional uint32 sensor_id = 12 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sensor_id(), target);
  }

  // optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->output_type(), target);
  }

  // optional uint32 radar_power = 14 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->radar_power(), target);
  }

  // optional uint32 ctrl_relay = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ctrl_relay(), target);
  }

  // optional bool send_ext_info = 16 [default = true];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->send_ext_info(), target);
  }

  // optional bool send_quality = 17 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->send_quality(), target);
  }

  // optional uint32 sort_index = 18 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->sort_index(), target);
  }

  // optional uint32 store_in_nvm = 19 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->store_in_nvm(), target);
  }

  // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->rcs_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.conti_radar.RadarConf)
  return target;
}

size_t RadarConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.conti_radar.RadarConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool max_distance_valid = 1 [default = false];
    if (has_max_distance_valid()) {
      total_size += 1 + 1;
    }

    // optional bool sensor_id_valid = 2 [default = false];
    if (has_sensor_id_valid()) {
      total_size += 1 + 1;
    }

    // optional bool radar_power_valid = 3 [default = false];
    if (has_radar_power_valid()) {
      total_size += 1 + 1;
    }

    // optional bool sort_index_valid = 7 [default = false];
    if (has_sort_index_valid()) {
      total_size += 1 + 1;
    }

    // optional bool ctrl_relay_valid = 9 [default = false];
    if (has_ctrl_relay_valid()) {
      total_size += 1 + 1;
    }

    // optional uint32 sensor_id = 12 [default = 0];
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor_id());
    }

    // optional uint32 radar_power = 14 [default = 0];
    if (has_radar_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radar_power());
    }

    // optional uint32 ctrl_relay = 15 [default = 0];
    if (has_ctrl_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ctrl_relay());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 sort_index = 18 [default = 0];
    if (has_sort_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sort_index());
    }

    // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
    if (has_rcs_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rcs_threshold());
    }

    // optional uint32 store_in_nvm = 19 [default = 1];
    if (has_store_in_nvm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_in_nvm());
    }

    // optional bool output_type_valid = 4 [default = true];
    if (has_output_type_valid()) {
      total_size += 1 + 1;
    }

    // optional bool send_quality_valid = 5 [default = true];
    if (has_send_quality_valid()) {
      total_size += 1 + 1;
    }

    // optional bool send_ext_info_valid = 6 [default = true];
    if (has_send_ext_info_valid()) {
      total_size += 1 + 1;
    }

    // optional bool store_in_nvm_valid = 8 [default = true];
    if (has_store_in_nvm_valid()) {
      total_size += 1 + 1;
    }

    // optional uint32 max_distance = 11 [default = 248];
    if (has_max_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_distance());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
    if (has_output_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_type());
    }

    // optional bool rcs_threshold_valid = 10 [default = true];
    if (has_rcs_threshold_valid()) {
      total_size += 1 + 1;
    }

    // optional bool send_ext_info = 16 [default = true];
    if (has_send_ext_info()) {
      total_size += 2 + 1;
    }

    // optional bool send_quality = 17 [default = true];
    if (has_send_quality()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.conti_radar.RadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.conti_radar.RadarConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.conti_radar.RadarConf)
    MergeFrom(*source);
  }
}

void RadarConf::MergeFrom(const RadarConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.conti_radar.RadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      max_distance_valid_ = from.max_distance_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      sensor_id_valid_ = from.sensor_id_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      radar_power_valid_ = from.radar_power_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      sort_index_valid_ = from.sort_index_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      ctrl_relay_valid_ = from.ctrl_relay_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      sensor_id_ = from.sensor_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      radar_power_ = from.radar_power_;
    }
    if (cached_has_bits & 0x00000080u) {
      ctrl_relay_ = from.ctrl_relay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      sort_index_ = from.sort_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      rcs_threshold_ = from.rcs_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      store_in_nvm_ = from.store_in_nvm_;
    }
    if (cached_has_bits & 0x00000800u) {
      output_type_valid_ = from.output_type_valid_;
    }
    if (cached_has_bits & 0x00001000u) {
      send_quality_valid_ = from.send_quality_valid_;
    }
    if (cached_has_bits & 0x00002000u) {
      send_ext_info_valid_ = from.send_ext_info_valid_;
    }
    if (cached_has_bits & 0x00004000u) {
      store_in_nvm_valid_ = from.store_in_nvm_valid_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_distance_ = from.max_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      output_type_ = from.output_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      rcs_threshold_valid_ = from.rcs_threshold_valid_;
    }
    if (cached_has_bits & 0x00040000u) {
      send_ext_info_ = from.send_ext_info_;
    }
    if (cached_has_bits & 0x00080000u) {
      send_quality_ = from.send_quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.conti_radar.RadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarConf::CopyFrom(const RadarConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.conti_radar.RadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarConf::IsInitialized() const {
  return true;
}

void RadarConf::Swap(RadarConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarConf::InternalSwap(RadarConf* other) {
  std::swap(max_distance_valid_, other->max_distance_valid_);
  std::swap(sensor_id_valid_, other->sensor_id_valid_);
  std::swap(radar_power_valid_, other->radar_power_valid_);
  std::swap(sort_index_valid_, other->sort_index_valid_);
  std::swap(ctrl_relay_valid_, other->ctrl_relay_valid_);
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(radar_power_, other->radar_power_);
  std::swap(ctrl_relay_, other->ctrl_relay_);
  std::swap(sort_index_, other->sort_index_);
  std::swap(rcs_threshold_, other->rcs_threshold_);
  std::swap(store_in_nvm_, other->store_in_nvm_);
  std::swap(output_type_valid_, other->output_type_valid_);
  std::swap(send_quality_valid_, other->send_quality_valid_);
  std::swap(send_ext_info_valid_, other->send_ext_info_valid_);
  std::swap(store_in_nvm_valid_, other->store_in_nvm_valid_);
  std::swap(max_distance_, other->max_distance_);
  std::swap(output_type_, other->output_type_);
  std::swap(rcs_threshold_valid_, other->rcs_threshold_valid_);
  std::swap(send_ext_info_, other->send_ext_info_);
  std::swap(send_quality_, other->send_quality_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarConf::GetMetadata() const {
  protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarConf

// optional bool max_distance_valid = 1 [default = false];
bool RadarConf::has_max_distance_valid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarConf::set_has_max_distance_valid() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarConf::clear_has_max_distance_valid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarConf::clear_max_distance_valid() {
  max_distance_valid_ = false;
  clear_has_max_distance_valid();
}
bool RadarConf::max_distance_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.max_distance_valid)
  return max_distance_valid_;
}
void RadarConf::set_max_distance_valid(bool value) {
  set_has_max_distance_valid();
  max_distance_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.max_distance_valid)
}

// optional bool sensor_id_valid = 2 [default = false];
bool RadarConf::has_sensor_id_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarConf::set_has_sensor_id_valid() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarConf::clear_has_sensor_id_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarConf::clear_sensor_id_valid() {
  sensor_id_valid_ = false;
  clear_has_sensor_id_valid();
}
bool RadarConf::sensor_id_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.sensor_id_valid)
  return sensor_id_valid_;
}
void RadarConf::set_sensor_id_valid(bool value) {
  set_has_sensor_id_valid();
  sensor_id_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.sensor_id_valid)
}

// optional bool radar_power_valid = 3 [default = false];
bool RadarConf::has_radar_power_valid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RadarConf::set_has_radar_power_valid() {
  _has_bits_[0] |= 0x00000004u;
}
void RadarConf::clear_has_radar_power_valid() {
  _has_bits_[0] &= ~0x00000004u;
}
void RadarConf::clear_radar_power_valid() {
  radar_power_valid_ = false;
  clear_has_radar_power_valid();
}
bool RadarConf::radar_power_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.radar_power_valid)
  return radar_power_valid_;
}
void RadarConf::set_radar_power_valid(bool value) {
  set_has_radar_power_valid();
  radar_power_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.radar_power_valid)
}

// optional bool output_type_valid = 4 [default = true];
bool RadarConf::has_output_type_valid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RadarConf::set_has_output_type_valid() {
  _has_bits_[0] |= 0x00000800u;
}
void RadarConf::clear_has_output_type_valid() {
  _has_bits_[0] &= ~0x00000800u;
}
void RadarConf::clear_output_type_valid() {
  output_type_valid_ = true;
  clear_has_output_type_valid();
}
bool RadarConf::output_type_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.output_type_valid)
  return output_type_valid_;
}
void RadarConf::set_output_type_valid(bool value) {
  set_has_output_type_valid();
  output_type_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.output_type_valid)
}

// optional bool send_quality_valid = 5 [default = true];
bool RadarConf::has_send_quality_valid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RadarConf::set_has_send_quality_valid() {
  _has_bits_[0] |= 0x00001000u;
}
void RadarConf::clear_has_send_quality_valid() {
  _has_bits_[0] &= ~0x00001000u;
}
void RadarConf::clear_send_quality_valid() {
  send_quality_valid_ = true;
  clear_has_send_quality_valid();
}
bool RadarConf::send_quality_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.send_quality_valid)
  return send_quality_valid_;
}
void RadarConf::set_send_quality_valid(bool value) {
  set_has_send_quality_valid();
  send_quality_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.send_quality_valid)
}

// optional bool send_ext_info_valid = 6 [default = true];
bool RadarConf::has_send_ext_info_valid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void RadarConf::set_has_send_ext_info_valid() {
  _has_bits_[0] |= 0x00002000u;
}
void RadarConf::clear_has_send_ext_info_valid() {
  _has_bits_[0] &= ~0x00002000u;
}
void RadarConf::clear_send_ext_info_valid() {
  send_ext_info_valid_ = true;
  clear_has_send_ext_info_valid();
}
bool RadarConf::send_ext_info_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.send_ext_info_valid)
  return send_ext_info_valid_;
}
void RadarConf::set_send_ext_info_valid(bool value) {
  set_has_send_ext_info_valid();
  send_ext_info_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.send_ext_info_valid)
}

// optional bool sort_index_valid = 7 [default = false];
bool RadarConf::has_sort_index_valid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RadarConf::set_has_sort_index_valid() {
  _has_bits_[0] |= 0x00000008u;
}
void RadarConf::clear_has_sort_index_valid() {
  _has_bits_[0] &= ~0x00000008u;
}
void RadarConf::clear_sort_index_valid() {
  sort_index_valid_ = false;
  clear_has_sort_index_valid();
}
bool RadarConf::sort_index_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.sort_index_valid)
  return sort_index_valid_;
}
void RadarConf::set_sort_index_valid(bool value) {
  set_has_sort_index_valid();
  sort_index_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.sort_index_valid)
}

// optional bool store_in_nvm_valid = 8 [default = true];
bool RadarConf::has_store_in_nvm_valid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void RadarConf::set_has_store_in_nvm_valid() {
  _has_bits_[0] |= 0x00004000u;
}
void RadarConf::clear_has_store_in_nvm_valid() {
  _has_bits_[0] &= ~0x00004000u;
}
void RadarConf::clear_store_in_nvm_valid() {
  store_in_nvm_valid_ = true;
  clear_has_store_in_nvm_valid();
}
bool RadarConf::store_in_nvm_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.store_in_nvm_valid)
  return store_in_nvm_valid_;
}
void RadarConf::set_store_in_nvm_valid(bool value) {
  set_has_store_in_nvm_valid();
  store_in_nvm_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.store_in_nvm_valid)
}

// optional bool ctrl_relay_valid = 9 [default = false];
bool RadarConf::has_ctrl_relay_valid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RadarConf::set_has_ctrl_relay_valid() {
  _has_bits_[0] |= 0x00000010u;
}
void RadarConf::clear_has_ctrl_relay_valid() {
  _has_bits_[0] &= ~0x00000010u;
}
void RadarConf::clear_ctrl_relay_valid() {
  ctrl_relay_valid_ = false;
  clear_has_ctrl_relay_valid();
}
bool RadarConf::ctrl_relay_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.ctrl_relay_valid)
  return ctrl_relay_valid_;
}
void RadarConf::set_ctrl_relay_valid(bool value) {
  set_has_ctrl_relay_valid();
  ctrl_relay_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.ctrl_relay_valid)
}

// optional bool rcs_threshold_valid = 10 [default = true];
bool RadarConf::has_rcs_threshold_valid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void RadarConf::set_has_rcs_threshold_valid() {
  _has_bits_[0] |= 0x00020000u;
}
void RadarConf::clear_has_rcs_threshold_valid() {
  _has_bits_[0] &= ~0x00020000u;
}
void RadarConf::clear_rcs_threshold_valid() {
  rcs_threshold_valid_ = true;
  clear_has_rcs_threshold_valid();
}
bool RadarConf::rcs_threshold_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.rcs_threshold_valid)
  return rcs_threshold_valid_;
}
void RadarConf::set_rcs_threshold_valid(bool value) {
  set_has_rcs_threshold_valid();
  rcs_threshold_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.rcs_threshold_valid)
}

// optional uint32 max_distance = 11 [default = 248];
bool RadarConf::has_max_distance() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void RadarConf::set_has_max_distance() {
  _has_bits_[0] |= 0x00008000u;
}
void RadarConf::clear_has_max_distance() {
  _has_bits_[0] &= ~0x00008000u;
}
void RadarConf::clear_max_distance() {
  max_distance_ = 248u;
  clear_has_max_distance();
}
::google::protobuf::uint32 RadarConf::max_distance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.max_distance)
  return max_distance_;
}
void RadarConf::set_max_distance(::google::protobuf::uint32 value) {
  set_has_max_distance();
  max_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.max_distance)
}

// optional uint32 sensor_id = 12 [default = 0];
bool RadarConf::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RadarConf::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000020u;
}
void RadarConf::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void RadarConf::clear_sensor_id() {
  sensor_id_ = 0u;
  clear_has_sensor_id();
}
::google::protobuf::uint32 RadarConf::sensor_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.sensor_id)
  return sensor_id_;
}
void RadarConf::set_sensor_id(::google::protobuf::uint32 value) {
  set_has_sensor_id();
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.sensor_id)
}

// optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
bool RadarConf::has_output_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void RadarConf::set_has_output_type() {
  _has_bits_[0] |= 0x00010000u;
}
void RadarConf::clear_has_output_type() {
  _has_bits_[0] &= ~0x00010000u;
}
void RadarConf::clear_output_type() {
  output_type_ = 1;
  clear_has_output_type();
}
::apollo::drivers::conti_radar::OutputType RadarConf::output_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.output_type)
  return static_cast< ::apollo::drivers::conti_radar::OutputType >(output_type_);
}
void RadarConf::set_output_type(::apollo::drivers::conti_radar::OutputType value) {
  assert(::apollo::drivers::conti_radar::OutputType_IsValid(value));
  set_has_output_type();
  output_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.output_type)
}

// optional uint32 radar_power = 14 [default = 0];
bool RadarConf::has_radar_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RadarConf::set_has_radar_power() {
  _has_bits_[0] |= 0x00000040u;
}
void RadarConf::clear_has_radar_power() {
  _has_bits_[0] &= ~0x00000040u;
}
void RadarConf::clear_radar_power() {
  radar_power_ = 0u;
  clear_has_radar_power();
}
::google::protobuf::uint32 RadarConf::radar_power() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.radar_power)
  return radar_power_;
}
void RadarConf::set_radar_power(::google::protobuf::uint32 value) {
  set_has_radar_power();
  radar_power_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.radar_power)
}

// optional uint32 ctrl_relay = 15 [default = 0];
bool RadarConf::has_ctrl_relay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RadarConf::set_has_ctrl_relay() {
  _has_bits_[0] |= 0x00000080u;
}
void RadarConf::clear_has_ctrl_relay() {
  _has_bits_[0] &= ~0x00000080u;
}
void RadarConf::clear_ctrl_relay() {
  ctrl_relay_ = 0u;
  clear_has_ctrl_relay();
}
::google::protobuf::uint32 RadarConf::ctrl_relay() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.ctrl_relay)
  return ctrl_relay_;
}
void RadarConf::set_ctrl_relay(::google::protobuf::uint32 value) {
  set_has_ctrl_relay();
  ctrl_relay_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.ctrl_relay)
}

// optional bool send_ext_info = 16 [default = true];
bool RadarConf::has_send_ext_info() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void RadarConf::set_has_send_ext_info() {
  _has_bits_[0] |= 0x00040000u;
}
void RadarConf::clear_has_send_ext_info() {
  _has_bits_[0] &= ~0x00040000u;
}
void RadarConf::clear_send_ext_info() {
  send_ext_info_ = true;
  clear_has_send_ext_info();
}
bool RadarConf::send_ext_info() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.send_ext_info)
  return send_ext_info_;
}
void RadarConf::set_send_ext_info(bool value) {
  set_has_send_ext_info();
  send_ext_info_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.send_ext_info)
}

// optional bool send_quality = 17 [default = true];
bool RadarConf::has_send_quality() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void RadarConf::set_has_send_quality() {
  _has_bits_[0] |= 0x00080000u;
}
void RadarConf::clear_has_send_quality() {
  _has_bits_[0] &= ~0x00080000u;
}
void RadarConf::clear_send_quality() {
  send_quality_ = true;
  clear_has_send_quality();
}
bool RadarConf::send_quality() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.send_quality)
  return send_quality_;
}
void RadarConf::set_send_quality(bool value) {
  set_has_send_quality();
  send_quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.send_quality)
}

// optional uint32 sort_index = 18 [default = 0];
bool RadarConf::has_sort_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RadarConf::set_has_sort_index() {
  _has_bits_[0] |= 0x00000100u;
}
void RadarConf::clear_has_sort_index() {
  _has_bits_[0] &= ~0x00000100u;
}
void RadarConf::clear_sort_index() {
  sort_index_ = 0u;
  clear_has_sort_index();
}
::google::protobuf::uint32 RadarConf::sort_index() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.sort_index)
  return sort_index_;
}
void RadarConf::set_sort_index(::google::protobuf::uint32 value) {
  set_has_sort_index();
  sort_index_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.sort_index)
}

// optional uint32 store_in_nvm = 19 [default = 1];
bool RadarConf::has_store_in_nvm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RadarConf::set_has_store_in_nvm() {
  _has_bits_[0] |= 0x00000400u;
}
void RadarConf::clear_has_store_in_nvm() {
  _has_bits_[0] &= ~0x00000400u;
}
void RadarConf::clear_store_in_nvm() {
  store_in_nvm_ = 1u;
  clear_has_store_in_nvm();
}
::google::protobuf::uint32 RadarConf::store_in_nvm() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.store_in_nvm)
  return store_in_nvm_;
}
void RadarConf::set_store_in_nvm(::google::protobuf::uint32 value) {
  set_has_store_in_nvm();
  store_in_nvm_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.store_in_nvm)
}

// optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
bool RadarConf::has_rcs_threshold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RadarConf::set_has_rcs_threshold() {
  _has_bits_[0] |= 0x00000200u;
}
void RadarConf::clear_has_rcs_threshold() {
  _has_bits_[0] &= ~0x00000200u;
}
void RadarConf::clear_rcs_threshold() {
  rcs_threshold_ = 0;
  clear_has_rcs_threshold();
}
::apollo::drivers::conti_radar::RcsThreshold RadarConf::rcs_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.rcs_threshold)
  return static_cast< ::apollo::drivers::conti_radar::RcsThreshold >(rcs_threshold_);
}
void RadarConf::set_rcs_threshold(::apollo::drivers::conti_radar::RcsThreshold value) {
  assert(::apollo::drivers::conti_radar::RcsThreshold_IsValid(value));
  set_has_rcs_threshold();
  rcs_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.rcs_threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContiRadarConf::kCanConfFieldNumber;
const int ContiRadarConf::kRadarConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContiRadarConf::ContiRadarConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.conti_radar.ContiRadarConf)
}
ContiRadarConf::ContiRadarConf(const ContiRadarConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_can_conf()) {
    can_conf_ = new ::apollo::drivers::conti_radar::CanConf(*from.can_conf_);
  } else {
    can_conf_ = NULL;
  }
  if (from.has_radar_conf()) {
    radar_conf_ = new ::apollo::drivers::conti_radar::RadarConf(*from.radar_conf_);
  } else {
    radar_conf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.conti_radar.ContiRadarConf)
}

void ContiRadarConf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_conf_, 0, reinterpret_cast<char*>(&radar_conf_) -
    reinterpret_cast<char*>(&can_conf_) + sizeof(radar_conf_));
}

ContiRadarConf::~ContiRadarConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.conti_radar.ContiRadarConf)
  SharedDtor();
}

void ContiRadarConf::SharedDtor() {
  if (this != internal_default_instance()) {
    delete can_conf_;
  }
  if (this != internal_default_instance()) {
    delete radar_conf_;
  }
}

void ContiRadarConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContiRadarConf::descriptor() {
  protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContiRadarConf& ContiRadarConf::default_instance() {
  protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContiRadarConf* ContiRadarConf::New(::google::protobuf::Arena* arena) const {
  ContiRadarConf* n = new ContiRadarConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContiRadarConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.conti_radar.ContiRadarConf)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_can_conf()) {
      GOOGLE_DCHECK(can_conf_ != NULL);
      can_conf_->::apollo::drivers::conti_radar::CanConf::Clear();
    }
    if (has_radar_conf()) {
      GOOGLE_DCHECK(radar_conf_ != NULL);
      radar_conf_->::apollo::drivers::conti_radar::RadarConf::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContiRadarConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.conti_radar.ContiRadarConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_can_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radar_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.conti_radar.ContiRadarConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.conti_radar.ContiRadarConf)
  return false;
#undef DO_
}

void ContiRadarConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.conti_radar.ContiRadarConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->can_conf_, output);
  }

  // optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->radar_conf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.conti_radar.ContiRadarConf)
}

::google::protobuf::uint8* ContiRadarConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.conti_radar.ContiRadarConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->can_conf_, deterministic, target);
  }

  // optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->radar_conf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.conti_radar.ContiRadarConf)
  return target;
}

size_t ContiRadarConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.conti_radar.ContiRadarConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
    if (has_can_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->can_conf_);
    }

    // optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
    if (has_radar_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->radar_conf_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContiRadarConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.conti_radar.ContiRadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ContiRadarConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContiRadarConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.conti_radar.ContiRadarConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.conti_radar.ContiRadarConf)
    MergeFrom(*source);
  }
}

void ContiRadarConf::MergeFrom(const ContiRadarConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.conti_radar.ContiRadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_can_conf()->::apollo::drivers::conti_radar::CanConf::MergeFrom(from.can_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_radar_conf()->::apollo::drivers::conti_radar::RadarConf::MergeFrom(from.radar_conf());
    }
  }
}

void ContiRadarConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.conti_radar.ContiRadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContiRadarConf::CopyFrom(const ContiRadarConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.conti_radar.ContiRadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContiRadarConf::IsInitialized() const {
  return true;
}

void ContiRadarConf::Swap(ContiRadarConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContiRadarConf::InternalSwap(ContiRadarConf* other) {
  std::swap(can_conf_, other->can_conf_);
  std::swap(radar_conf_, other->radar_conf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContiRadarConf::GetMetadata() const {
  protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContiRadarConf

// optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
bool ContiRadarConf::has_can_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContiRadarConf::set_has_can_conf() {
  _has_bits_[0] |= 0x00000001u;
}
void ContiRadarConf::clear_has_can_conf() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContiRadarConf::clear_can_conf() {
  if (can_conf_ != NULL) can_conf_->::apollo::drivers::conti_radar::CanConf::Clear();
  clear_has_can_conf();
}
const ::apollo::drivers::conti_radar::CanConf& ContiRadarConf::can_conf() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.ContiRadarConf.can_conf)
  return can_conf_ != NULL ? *can_conf_
                         : *::apollo::drivers::conti_radar::CanConf::internal_default_instance();
}
::apollo::drivers::conti_radar::CanConf* ContiRadarConf::mutable_can_conf() {
  set_has_can_conf();
  if (can_conf_ == NULL) {
    can_conf_ = new ::apollo::drivers::conti_radar::CanConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.conti_radar.ContiRadarConf.can_conf)
  return can_conf_;
}
::apollo::drivers::conti_radar::CanConf* ContiRadarConf::release_can_conf() {
  // @@protoc_insertion_point(field_release:apollo.drivers.conti_radar.ContiRadarConf.can_conf)
  clear_has_can_conf();
  ::apollo::drivers::conti_radar::CanConf* temp = can_conf_;
  can_conf_ = NULL;
  return temp;
}
void ContiRadarConf::set_allocated_can_conf(::apollo::drivers::conti_radar::CanConf* can_conf) {
  delete can_conf_;
  can_conf_ = can_conf;
  if (can_conf) {
    set_has_can_conf();
  } else {
    clear_has_can_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.conti_radar.ContiRadarConf.can_conf)
}

// optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
bool ContiRadarConf::has_radar_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContiRadarConf::set_has_radar_conf() {
  _has_bits_[0] |= 0x00000002u;
}
void ContiRadarConf::clear_has_radar_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContiRadarConf::clear_radar_conf() {
  if (radar_conf_ != NULL) radar_conf_->::apollo::drivers::conti_radar::RadarConf::Clear();
  clear_has_radar_conf();
}
const ::apollo::drivers::conti_radar::RadarConf& ContiRadarConf::radar_conf() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.ContiRadarConf.radar_conf)
  return radar_conf_ != NULL ? *radar_conf_
                         : *::apollo::drivers::conti_radar::RadarConf::internal_default_instance();
}
::apollo::drivers::conti_radar::RadarConf* ContiRadarConf::mutable_radar_conf() {
  set_has_radar_conf();
  if (radar_conf_ == NULL) {
    radar_conf_ = new ::apollo::drivers::conti_radar::RadarConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.conti_radar.ContiRadarConf.radar_conf)
  return radar_conf_;
}
::apollo::drivers::conti_radar::RadarConf* ContiRadarConf::release_radar_conf() {
  // @@protoc_insertion_point(field_release:apollo.drivers.conti_radar.ContiRadarConf.radar_conf)
  clear_has_radar_conf();
  ::apollo::drivers::conti_radar::RadarConf* temp = radar_conf_;
  radar_conf_ = NULL;
  return temp;
}
void ContiRadarConf::set_allocated_radar_conf(::apollo::drivers::conti_radar::RadarConf* radar_conf) {
  delete radar_conf_;
  radar_conf_ = radar_conf;
  if (radar_conf) {
    set_has_radar_conf();
  } else {
    clear_has_radar_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.conti_radar.ContiRadarConf.radar_conf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace conti_radar
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
