// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/mobileye.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/drivers/proto/mobileye.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
class Lka_768DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lka_768> {
} _Lka_768_default_instance_;
class Num_76bDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Num_76b> {
} _Num_76b_default_instance_;
class Aftermarket_669DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Aftermarket_669> {
} _Aftermarket_669_default_instance_;
class Lka_769DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lka_769> {
} _Lka_769_default_instance_;
class Reference_76aDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Reference_76a> {
} _Reference_76a_default_instance_;
class Details_738DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Details_738> {
} _Details_738_default_instance_;
class Next_76cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Next_76c> {
} _Next_76c_default_instance_;
class Details_737DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Details_737> {
} _Details_737_default_instance_;
class Lka_767DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lka_767> {
} _Lka_767_default_instance_;
class Lka_766DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lka_766> {
} _Lka_766_default_instance_;
class Next_76dDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Next_76d> {
} _Next_76d_default_instance_;
class Details_739DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Details_739> {
} _Details_739_default_instance_;
class Details_73aDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Details_73a> {
} _Details_73a_default_instance_;
class Details_73bDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Details_73b> {
} _Details_73b_default_instance_;
class MobileyeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mobileye> {
} _Mobileye_default_instance_;

namespace protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_768, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_768, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_768, lane_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_768, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_768, model_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_768, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_768, curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_768, curvature_derivative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_768, width_right_marking_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Num_76b, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Num_76b, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Num_76b, num_of_next_lane_mark_reported_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aftermarket_669, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aftermarket_669, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aftermarket_669, lane_conf_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aftermarket_669, ldw_availability_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aftermarket_669, lane_type_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aftermarket_669, distance_to_lane_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aftermarket_669, lane_conf_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aftermarket_669, ldw_availability_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aftermarket_669, lane_type_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aftermarket_669, distance_to_lane_r_),
  0,
  3,
  1,
  2,
  5,
  4,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_769, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_769, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_769, heading_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_769, view_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_769, view_range_availability_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference_76a, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference_76a, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference_76a, ref_point_1_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference_76a, ref_point_1_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference_76a, ref_point_1_validity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference_76a, ref_point_2_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference_76a, ref_point_2_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference_76a, ref_point_2_validity_),
  0,
  1,
  4,
  2,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_738, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_738, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_738, num_obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_738, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_738, application_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_738, active_version_number_section_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_738, left_close_rang_cut_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_738, right_close_rang_cut_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_738, go_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_738, protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_738, close_car_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_738, failsafe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_738, reserved_10_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  8,
  6,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76c, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76c, lane_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76c, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76c, model_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76c, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76c, curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76c, curvature_derivative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76c, lane_mark_width_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_737, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_737, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_737, lane_curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_737, lane_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_737, ca_construction_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_737, right_ldw_availability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_737, left_ldw_availability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_737, reserved_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_737, yaw_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_737, pitch_angle_),
  0,
  1,
  4,
  5,
  6,
  7,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_767, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_767, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_767, heading_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_767, view_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_767, view_range_availability_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_766, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_766, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_766, lane_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_766, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_766, model_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_766, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_766, curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_766, curvature_derivative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lka_766, width_left_marking_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76d, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76d, heading_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76d, view_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Next_76d, view_range_availability_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, obstacle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, obstacle_pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, reseved_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, obstacle_pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, blinker_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, cut_in_and_out_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, obstacle_rel_vel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, obstacle_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, reserved_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, obstacle_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, obstacle_brake_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, reserved_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_739, obstacle_valid_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  8,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, obstacle_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, obstacle_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, obstacle_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, obstacle_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, cipv_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, reserved_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, radar_pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, radar_vel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, radar_match_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, reserved_6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, matched_radar_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73a, reserved_7_),
  0,
  1,
  2,
  3,
  6,
  7,
  4,
  5,
  10,
  8,
  11,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73b, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73b, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73b, obstacle_angle_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73b, obstacle_scale_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73b, object_accel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73b, reserved_8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73b, obstacle_replaced_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73b, reserved_9_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Details_73b, obstacle_angle_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, aftermarket_669_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, details_737_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, details_738_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, details_739_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, details_73a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, details_73b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, lka_766_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, lka_767_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, lka_768_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, lka_769_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, reference_76a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, num_76b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, next_76c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mobileye, next_76d_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 12, sizeof(Lka_768)},
  { 19, 25, sizeof(Num_76b)},
  { 26, 39, sizeof(Aftermarket_669)},
  { 47, 55, sizeof(Lka_769)},
  { 58, 69, sizeof(Reference_76a)},
  { 75, 91, sizeof(Details_738)},
  { 102, 114, sizeof(Next_76c)},
  { 121, 134, sizeof(Details_737)},
  { 142, 150, sizeof(Lka_767)},
  { 153, 165, sizeof(Lka_766)},
  { 172, 180, sizeof(Next_76d)},
  { 183, 201, sizeof(Details_739)},
  { 214, 231, sizeof(Details_73a)},
  { 243, 255, sizeof(Details_73b)},
  { 262, 282, sizeof(Mobileye)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Lka_768_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Num_76b_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Aftermarket_669_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Lka_769_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Reference_76a_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Details_738_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Next_76c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Details_737_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Lka_767_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Lka_766_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Next_76d_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Details_739_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Details_73a_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Details_73b_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mobileye_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/drivers/proto/mobileye.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace

void TableStruct::Shutdown() {
  _Lka_768_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Num_76b_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Aftermarket_669_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Lka_769_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Reference_76a_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Details_738_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Next_76c_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Details_737_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Lka_767_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Lka_766_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Next_76d_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Details_739_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _Details_73a_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _Details_73b_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Mobileye_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  _Lka_768_default_instance_.DefaultConstruct();
  _Num_76b_default_instance_.DefaultConstruct();
  _Aftermarket_669_default_instance_.DefaultConstruct();
  _Lka_769_default_instance_.DefaultConstruct();
  _Reference_76a_default_instance_.DefaultConstruct();
  _Details_738_default_instance_.DefaultConstruct();
  _Next_76c_default_instance_.DefaultConstruct();
  _Details_737_default_instance_.DefaultConstruct();
  _Lka_767_default_instance_.DefaultConstruct();
  _Lka_766_default_instance_.DefaultConstruct();
  _Next_76d_default_instance_.DefaultConstruct();
  _Details_739_default_instance_.DefaultConstruct();
  _Details_73a_default_instance_.DefaultConstruct();
  _Details_73b_default_instance_.DefaultConstruct();
  _Mobileye_default_instance_.DefaultConstruct();
  _Mobileye_default_instance_.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _Mobileye_default_instance_.get_mutable()->aftermarket_669_ = const_cast< ::apollo::drivers::Aftermarket_669*>(
      ::apollo::drivers::Aftermarket_669::internal_default_instance());
  _Mobileye_default_instance_.get_mutable()->details_737_ = const_cast< ::apollo::drivers::Details_737*>(
      ::apollo::drivers::Details_737::internal_default_instance());
  _Mobileye_default_instance_.get_mutable()->details_738_ = const_cast< ::apollo::drivers::Details_738*>(
      ::apollo::drivers::Details_738::internal_default_instance());
  _Mobileye_default_instance_.get_mutable()->lka_766_ = const_cast< ::apollo::drivers::Lka_766*>(
      ::apollo::drivers::Lka_766::internal_default_instance());
  _Mobileye_default_instance_.get_mutable()->lka_767_ = const_cast< ::apollo::drivers::Lka_767*>(
      ::apollo::drivers::Lka_767::internal_default_instance());
  _Mobileye_default_instance_.get_mutable()->lka_768_ = const_cast< ::apollo::drivers::Lka_768*>(
      ::apollo::drivers::Lka_768::internal_default_instance());
  _Mobileye_default_instance_.get_mutable()->lka_769_ = const_cast< ::apollo::drivers::Lka_769*>(
      ::apollo::drivers::Lka_769::internal_default_instance());
  _Mobileye_default_instance_.get_mutable()->reference_76a_ = const_cast< ::apollo::drivers::Reference_76a*>(
      ::apollo::drivers::Reference_76a::internal_default_instance());
  _Mobileye_default_instance_.get_mutable()->num_76b_ = const_cast< ::apollo::drivers::Num_76b*>(
      ::apollo::drivers::Num_76b::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n$modules/drivers/proto/mobileye.proto\022\016"
      "apollo.drivers\032!modules/common/proto/hea"
      "der.proto\"\243\001\n\007Lka_768\022\021\n\tlane_type\030\001 \001(\005"
      "\022\017\n\007quality\030\002 \001(\005\022\024\n\014model_degree\030\003 \001(\005\022"
      "\020\n\010position\030\004 \001(\001\022\021\n\tcurvature\030\005 \001(\001\022\034\n\024"
      "curvature_derivative\030\006 \001(\001\022\033\n\023width_righ"
      "t_marking\030\007 \001(\001\"1\n\007Num_76b\022&\n\036num_of_nex"
      "t_lane_mark_reported\030\001 \001(\005\"\352\001\n\017Aftermark"
      "et_669\022\026\n\016lane_conf_left\030\001 \001(\005\022\035\n\025ldw_av"
      "ailability_left\030\002 \001(\010\022\026\n\016lane_type_left\030"
      "\003 \001(\005\022\032\n\022distance_to_lane_l\030\004 \001(\001\022\027\n\017lan"
      "e_conf_right\030\005 \001(\005\022\036\n\026ldw_availability_r"
      "ight\030\006 \001(\010\022\027\n\017lane_type_right\030\007 \001(\005\022\032\n\022d"
      "istance_to_lane_r\030\010 \001(\001\"U\n\007Lka_769\022\025\n\rhe"
      "ading_angle\030\001 \001(\001\022\022\n\nview_range\030\002 \001(\001\022\037\n"
      "\027view_range_availability\030\003 \001(\010\"\303\001\n\rRefer"
      "ence_76a\022\034\n\024ref_point_1_position\030\001 \001(\001\022\034"
      "\n\024ref_point_1_distance\030\002 \001(\001\022\034\n\024ref_poin"
      "t_1_validity\030\003 \001(\010\022\034\n\024ref_point_2_positi"
      "on\030\004 \001(\001\022\034\n\024ref_point_2_distance\030\005 \001(\001\022\034"
      "\n\024ref_point_2_validity\030\006 \001(\010\"\234\002\n\013Details"
      "_738\022\025\n\rnum_obstacles\030\001 \001(\005\022\021\n\ttimestamp"
      "\030\002 \001(\005\022\033\n\023application_version\030\003 \001(\005\022%\n\035a"
      "ctive_version_number_section\030\004 \001(\005\022\036\n\026le"
      "ft_close_rang_cut_in\030\005 \001(\010\022\037\n\027right_clos"
      "e_rang_cut_in\030\006 \001(\010\022\n\n\002go\030\007 \001(\005\022\030\n\020proto"
      "col_version\030\010 \001(\005\022\021\n\tclose_car\030\t \001(\010\022\020\n\010"
      "failsafe\030\n \001(\005\022\023\n\013reserved_10\030\013 \001(\005\"\240\001\n\010"
      "Next_76c\022\021\n\tlane_type\030\001 \001(\005\022\017\n\007quality\030\002"
      " \001(\005\022\024\n\014model_degree\030\003 \001(\005\022\020\n\010position\030\004"
      " \001(\001\022\021\n\tcurvature\030\005 \001(\001\022\034\n\024curvature_der"
      "ivative\030\006 \001(\001\022\027\n\017lane_mark_width\030\007 \001(\001\"\324"
      "\001\n\013Details_737\022\026\n\016lane_curvature\030\001 \001(\001\022\024"
      "\n\014lane_heading\030\002 \001(\001\022\034\n\024ca_construction_"
      "area\030\003 \001(\010\022\036\n\026right_ldw_availability\030\004 \001"
      "(\010\022\035\n\025left_ldw_availability\030\005 \001(\010\022\022\n\nres"
      "erved_1\030\006 \001(\010\022\021\n\tyaw_angle\030\007 \001(\001\022\023\n\013pitc"
      "h_angle\030\010 \001(\001\"U\n\007Lka_767\022\025\n\rheading_angl"
      "e\030\001 \001(\001\022\022\n\nview_range\030\002 \001(\001\022\037\n\027view_rang"
      "e_availability\030\003 \001(\010\"\242\001\n\007Lka_766\022\021\n\tlane"
      "_type\030\001 \001(\005\022\017\n\007quality\030\002 \001(\005\022\024\n\014model_de"
      "gree\030\003 \001(\005\022\020\n\010position\030\004 \001(\001\022\021\n\tcurvatur"
      "e\030\005 \001(\001\022\034\n\024curvature_derivative\030\006 \001(\001\022\032\n"
      "\022width_left_marking\030\007 \001(\001\"V\n\010Next_76d\022\025\n"
      "\rheading_angle\030\001 \001(\001\022\022\n\nview_range\030\002 \001(\001"
      "\022\037\n\027view_range_availability\030\003 \001(\010\"\276\002\n\013De"
      "tails_739\022\023\n\013obstacle_id\030\001 \001(\005\022\026\n\016obstac"
      "le_pos_x\030\002 \001(\001\022\021\n\treseved_2\030\003 \001(\005\022\026\n\016obs"
      "tacle_pos_y\030\004 \001(\001\022\024\n\014blinker_info\030\005 \001(\005\022"
      "\026\n\016cut_in_and_out\030\006 \001(\005\022\032\n\022obstacle_rel_"
      "vel_x\030\007 \001(\001\022\025\n\robstacle_type\030\010 \001(\005\022\022\n\nre"
      "served_3\030\t \001(\010\022\027\n\017obstacle_status\030\n \001(\005\022"
      "\035\n\025obstacle_brake_lights\030\013 \001(\010\022\022\n\nreserv"
      "ed_4\030\014 \001(\005\022\026\n\016obstacle_valid\030\r \001(\005\"\236\002\n\013D"
      "etails_73a\022\027\n\017obstacle_length\030\001 \001(\001\022\026\n\016o"
      "bstacle_width\030\002 \001(\001\022\024\n\014obstacle_age\030\003 \001("
      "\005\022\025\n\robstacle_lane\030\004 \001(\005\022\021\n\tcipv_flag\030\005 "
      "\001(\010\022\022\n\nreserved_5\030\006 \001(\010\022\023\n\013radar_pos_x\030\007"
      " \001(\001\022\023\n\013radar_vel_x\030\010 \001(\001\022\036\n\026radar_match"
      "_confidence\030\t \001(\005\022\022\n\nreserved_6\030\n \001(\010\022\030\n"
      "\020matched_radar_id\030\013 \001(\005\022\022\n\nreserved_7\030\014 "
      "\001(\010\"\274\001\n\013Details_73b\022\033\n\023obstacle_angle_ra"
      "te\030\001 \001(\001\022\035\n\025obstacle_scale_change\030\002 \001(\001\022"
      "\026\n\016object_accel_x\030\003 \001(\001\022\022\n\nreserved_8\030\004 "
      "\001(\005\022\031\n\021obstacle_replaced\030\005 \001(\010\022\022\n\nreserv"
      "ed_9\030\006 \001(\005\022\026\n\016obstacle_angle\030\007 \001(\001\"\305\005\n\010M"
      "obileye\022%\n\006header\030\001 \001(\0132\025.apollo.common."
      "Header\0228\n\017aftermarket_669\030\002 \001(\0132\037.apollo"
      ".drivers.Aftermarket_669\0220\n\013details_737\030"
      "\003 \001(\0132\033.apollo.drivers.Details_737\0220\n\013de"
      "tails_738\030\004 \001(\0132\033.apollo.drivers.Details"
      "_738\0220\n\013details_739\030\005 \003(\0132\033.apollo.drive"
      "rs.Details_739\0220\n\013details_73a\030\006 \003(\0132\033.ap"
      "ollo.drivers.Details_73a\0220\n\013details_73b\030"
      "\007 \003(\0132\033.apollo.drivers.Details_73b\022(\n\007lk"
      "a_766\030\010 \001(\0132\027.apollo.drivers.Lka_766\022(\n\007"
      "lka_767\030\t \001(\0132\027.apollo.drivers.Lka_767\022("
      "\n\007lka_768\030\n \001(\0132\027.apollo.drivers.Lka_768"
      "\022(\n\007lka_769\030\013 \001(\0132\027.apollo.drivers.Lka_7"
      "69\0224\n\rreference_76a\030\014 \001(\0132\035.apollo.drive"
      "rs.Reference_76a\022(\n\007num_76b\030\r \001(\0132\027.apol"
      "lo.drivers.Num_76b\022*\n\010next_76c\030\016 \003(\0132\030.a"
      "pollo.drivers.Next_76c\022*\n\010next_76d\030\017 \003(\013"
      "2\030.apollo.drivers.Next_76d"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3346);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/proto/mobileye.proto", &protobuf_RegisterTypes);
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lka_768::kLaneTypeFieldNumber;
const int Lka_768::kQualityFieldNumber;
const int Lka_768::kModelDegreeFieldNumber;
const int Lka_768::kPositionFieldNumber;
const int Lka_768::kCurvatureFieldNumber;
const int Lka_768::kCurvatureDerivativeFieldNumber;
const int Lka_768::kWidthRightMarkingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lka_768::Lka_768()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Lka_768)
}
Lka_768::Lka_768(const Lka_768& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_type_, &from.lane_type_,
    reinterpret_cast<char*>(&model_degree_) -
    reinterpret_cast<char*>(&lane_type_) + sizeof(model_degree_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Lka_768)
}

void Lka_768::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lane_type_, 0, reinterpret_cast<char*>(&model_degree_) -
    reinterpret_cast<char*>(&lane_type_) + sizeof(model_degree_));
}

Lka_768::~Lka_768() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Lka_768)
  SharedDtor();
}

void Lka_768::SharedDtor() {
}

void Lka_768::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lka_768::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lka_768& Lka_768::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lka_768* Lka_768::New(::google::protobuf::Arena* arena) const {
  Lka_768* n = new Lka_768;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lka_768::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Lka_768)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&lane_type_, 0, reinterpret_cast<char*>(&model_degree_) -
      reinterpret_cast<char*>(&lane_type_) + sizeof(model_degree_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lka_768::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Lka_768)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lane_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lane_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 model_degree = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_model_degree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curvature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_curvature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curvature_derivative = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_curvature_derivative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width_right_marking = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_width_right_marking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_right_marking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Lka_768)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Lka_768)
  return false;
#undef DO_
}

void Lka_768::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Lka_768)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lane_type(), output);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->model_degree(), output);
  }

  // optional double position = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->position(), output);
  }

  // optional double curvature = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->curvature(), output);
  }

  // optional double curvature_derivative = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->curvature_derivative(), output);
  }

  // optional double width_right_marking = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->width_right_marking(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Lka_768)
}

::google::protobuf::uint8* Lka_768::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Lka_768)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lane_type(), target);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->model_degree(), target);
  }

  // optional double position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->position(), target);
  }

  // optional double curvature = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->curvature(), target);
  }

  // optional double curvature_derivative = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->curvature_derivative(), target);
  }

  // optional double width_right_marking = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->width_right_marking(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Lka_768)
  return target;
}

size_t Lka_768::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Lka_768)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 lane_type = 1;
    if (has_lane_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_type());
    }

    // optional int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional double position = 4;
    if (has_position()) {
      total_size += 1 + 8;
    }

    // optional double curvature = 5;
    if (has_curvature()) {
      total_size += 1 + 8;
    }

    // optional double curvature_derivative = 6;
    if (has_curvature_derivative()) {
      total_size += 1 + 8;
    }

    // optional double width_right_marking = 7;
    if (has_width_right_marking()) {
      total_size += 1 + 8;
    }

    // optional int32 model_degree = 3;
    if (has_model_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_degree());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lka_768::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Lka_768)
  GOOGLE_DCHECK_NE(&from, this);
  const Lka_768* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lka_768>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Lka_768)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Lka_768)
    MergeFrom(*source);
  }
}

void Lka_768::MergeFrom(const Lka_768& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Lka_768)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      lane_type_ = from.lane_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000008u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000010u) {
      curvature_derivative_ = from.curvature_derivative_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_right_marking_ = from.width_right_marking_;
    }
    if (cached_has_bits & 0x00000040u) {
      model_degree_ = from.model_degree_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lka_768::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Lka_768)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lka_768::CopyFrom(const Lka_768& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Lka_768)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lka_768::IsInitialized() const {
  return true;
}

void Lka_768::Swap(Lka_768* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lka_768::InternalSwap(Lka_768* other) {
  std::swap(lane_type_, other->lane_type_);
  std::swap(quality_, other->quality_);
  std::swap(position_, other->position_);
  std::swap(curvature_, other->curvature_);
  std::swap(curvature_derivative_, other->curvature_derivative_);
  std::swap(width_right_marking_, other->width_right_marking_);
  std::swap(model_degree_, other->model_degree_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lka_768::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lka_768

// optional int32 lane_type = 1;
bool Lka_768::has_lane_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Lka_768::set_has_lane_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Lka_768::clear_has_lane_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Lka_768::clear_lane_type() {
  lane_type_ = 0;
  clear_has_lane_type();
}
::google::protobuf::int32 Lka_768::lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.lane_type)
  return lane_type_;
}
void Lka_768::set_lane_type(::google::protobuf::int32 value) {
  set_has_lane_type();
  lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.lane_type)
}

// optional int32 quality = 2;
bool Lka_768::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Lka_768::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
void Lka_768::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
void Lka_768::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
::google::protobuf::int32 Lka_768::quality() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.quality)
  return quality_;
}
void Lka_768::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.quality)
}

// optional int32 model_degree = 3;
bool Lka_768::has_model_degree() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Lka_768::set_has_model_degree() {
  _has_bits_[0] |= 0x00000040u;
}
void Lka_768::clear_has_model_degree() {
  _has_bits_[0] &= ~0x00000040u;
}
void Lka_768::clear_model_degree() {
  model_degree_ = 0;
  clear_has_model_degree();
}
::google::protobuf::int32 Lka_768::model_degree() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.model_degree)
  return model_degree_;
}
void Lka_768::set_model_degree(::google::protobuf::int32 value) {
  set_has_model_degree();
  model_degree_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.model_degree)
}

// optional double position = 4;
bool Lka_768::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Lka_768::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void Lka_768::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void Lka_768::clear_position() {
  position_ = 0;
  clear_has_position();
}
double Lka_768::position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.position)
  return position_;
}
void Lka_768::set_position(double value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.position)
}

// optional double curvature = 5;
bool Lka_768::has_curvature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Lka_768::set_has_curvature() {
  _has_bits_[0] |= 0x00000008u;
}
void Lka_768::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000008u;
}
void Lka_768::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
double Lka_768::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.curvature)
  return curvature_;
}
void Lka_768::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.curvature)
}

// optional double curvature_derivative = 6;
bool Lka_768::has_curvature_derivative() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Lka_768::set_has_curvature_derivative() {
  _has_bits_[0] |= 0x00000010u;
}
void Lka_768::clear_has_curvature_derivative() {
  _has_bits_[0] &= ~0x00000010u;
}
void Lka_768::clear_curvature_derivative() {
  curvature_derivative_ = 0;
  clear_has_curvature_derivative();
}
double Lka_768::curvature_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.curvature_derivative)
  return curvature_derivative_;
}
void Lka_768::set_curvature_derivative(double value) {
  set_has_curvature_derivative();
  curvature_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.curvature_derivative)
}

// optional double width_right_marking = 7;
bool Lka_768::has_width_right_marking() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Lka_768::set_has_width_right_marking() {
  _has_bits_[0] |= 0x00000020u;
}
void Lka_768::clear_has_width_right_marking() {
  _has_bits_[0] &= ~0x00000020u;
}
void Lka_768::clear_width_right_marking() {
  width_right_marking_ = 0;
  clear_has_width_right_marking();
}
double Lka_768::width_right_marking() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.width_right_marking)
  return width_right_marking_;
}
void Lka_768::set_width_right_marking(double value) {
  set_has_width_right_marking();
  width_right_marking_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.width_right_marking)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Num_76b::kNumOfNextLaneMarkReportedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Num_76b::Num_76b()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Num_76b)
}
Num_76b::Num_76b(const Num_76b& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_of_next_lane_mark_reported_ = from.num_of_next_lane_mark_reported_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Num_76b)
}

void Num_76b::SharedCtor() {
  _cached_size_ = 0;
  num_of_next_lane_mark_reported_ = 0;
}

Num_76b::~Num_76b() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Num_76b)
  SharedDtor();
}

void Num_76b::SharedDtor() {
}

void Num_76b::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Num_76b::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Num_76b& Num_76b::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Num_76b* Num_76b::New(::google::protobuf::Arena* arena) const {
  Num_76b* n = new Num_76b;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Num_76b::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Num_76b)
  num_of_next_lane_mark_reported_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Num_76b::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Num_76b)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_of_next_lane_mark_reported = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_num_of_next_lane_mark_reported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_of_next_lane_mark_reported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Num_76b)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Num_76b)
  return false;
#undef DO_
}

void Num_76b::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Num_76b)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_of_next_lane_mark_reported = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_of_next_lane_mark_reported(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Num_76b)
}

::google::protobuf::uint8* Num_76b::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Num_76b)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_of_next_lane_mark_reported = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_of_next_lane_mark_reported(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Num_76b)
  return target;
}

size_t Num_76b::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Num_76b)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 num_of_next_lane_mark_reported = 1;
  if (has_num_of_next_lane_mark_reported()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_of_next_lane_mark_reported());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Num_76b::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Num_76b)
  GOOGLE_DCHECK_NE(&from, this);
  const Num_76b* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Num_76b>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Num_76b)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Num_76b)
    MergeFrom(*source);
  }
}

void Num_76b::MergeFrom(const Num_76b& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Num_76b)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_num_of_next_lane_mark_reported()) {
    set_num_of_next_lane_mark_reported(from.num_of_next_lane_mark_reported());
  }
}

void Num_76b::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Num_76b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Num_76b::CopyFrom(const Num_76b& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Num_76b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Num_76b::IsInitialized() const {
  return true;
}

void Num_76b::Swap(Num_76b* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Num_76b::InternalSwap(Num_76b* other) {
  std::swap(num_of_next_lane_mark_reported_, other->num_of_next_lane_mark_reported_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Num_76b::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Num_76b

// optional int32 num_of_next_lane_mark_reported = 1;
bool Num_76b::has_num_of_next_lane_mark_reported() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Num_76b::set_has_num_of_next_lane_mark_reported() {
  _has_bits_[0] |= 0x00000001u;
}
void Num_76b::clear_has_num_of_next_lane_mark_reported() {
  _has_bits_[0] &= ~0x00000001u;
}
void Num_76b::clear_num_of_next_lane_mark_reported() {
  num_of_next_lane_mark_reported_ = 0;
  clear_has_num_of_next_lane_mark_reported();
}
::google::protobuf::int32 Num_76b::num_of_next_lane_mark_reported() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Num_76b.num_of_next_lane_mark_reported)
  return num_of_next_lane_mark_reported_;
}
void Num_76b::set_num_of_next_lane_mark_reported(::google::protobuf::int32 value) {
  set_has_num_of_next_lane_mark_reported();
  num_of_next_lane_mark_reported_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Num_76b.num_of_next_lane_mark_reported)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Aftermarket_669::kLaneConfLeftFieldNumber;
const int Aftermarket_669::kLdwAvailabilityLeftFieldNumber;
const int Aftermarket_669::kLaneTypeLeftFieldNumber;
const int Aftermarket_669::kDistanceToLaneLFieldNumber;
const int Aftermarket_669::kLaneConfRightFieldNumber;
const int Aftermarket_669::kLdwAvailabilityRightFieldNumber;
const int Aftermarket_669::kLaneTypeRightFieldNumber;
const int Aftermarket_669::kDistanceToLaneRFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Aftermarket_669::Aftermarket_669()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Aftermarket_669)
}
Aftermarket_669::Aftermarket_669(const Aftermarket_669& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_conf_left_, &from.lane_conf_left_,
    reinterpret_cast<char*>(&lane_type_right_) -
    reinterpret_cast<char*>(&lane_conf_left_) + sizeof(lane_type_right_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Aftermarket_669)
}

void Aftermarket_669::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lane_conf_left_, 0, reinterpret_cast<char*>(&lane_type_right_) -
    reinterpret_cast<char*>(&lane_conf_left_) + sizeof(lane_type_right_));
}

Aftermarket_669::~Aftermarket_669() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Aftermarket_669)
  SharedDtor();
}

void Aftermarket_669::SharedDtor() {
}

void Aftermarket_669::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Aftermarket_669::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Aftermarket_669& Aftermarket_669::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Aftermarket_669* Aftermarket_669::New(::google::protobuf::Arena* arena) const {
  Aftermarket_669* n = new Aftermarket_669;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Aftermarket_669::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Aftermarket_669)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&lane_conf_left_, 0, reinterpret_cast<char*>(&lane_type_right_) -
      reinterpret_cast<char*>(&lane_conf_left_) + sizeof(lane_type_right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Aftermarket_669::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Aftermarket_669)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lane_conf_left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lane_conf_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_conf_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ldw_availability_left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ldw_availability_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ldw_availability_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lane_type_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_lane_type_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_type_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance_to_lane_l = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_distance_to_lane_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_to_lane_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lane_conf_right = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_lane_conf_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_conf_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ldw_availability_right = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ldw_availability_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ldw_availability_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lane_type_right = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_lane_type_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_type_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance_to_lane_r = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_distance_to_lane_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_to_lane_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Aftermarket_669)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Aftermarket_669)
  return false;
#undef DO_
}

void Aftermarket_669::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Aftermarket_669)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_conf_left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lane_conf_left(), output);
  }

  // optional bool ldw_availability_left = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ldw_availability_left(), output);
  }

  // optional int32 lane_type_left = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lane_type_left(), output);
  }

  // optional double distance_to_lane_l = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->distance_to_lane_l(), output);
  }

  // optional int32 lane_conf_right = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lane_conf_right(), output);
  }

  // optional bool ldw_availability_right = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ldw_availability_right(), output);
  }

  // optional int32 lane_type_right = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lane_type_right(), output);
  }

  // optional double distance_to_lane_r = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->distance_to_lane_r(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Aftermarket_669)
}

::google::protobuf::uint8* Aftermarket_669::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Aftermarket_669)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_conf_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lane_conf_left(), target);
  }

  // optional bool ldw_availability_left = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ldw_availability_left(), target);
  }

  // optional int32 lane_type_left = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lane_type_left(), target);
  }

  // optional double distance_to_lane_l = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->distance_to_lane_l(), target);
  }

  // optional int32 lane_conf_right = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lane_conf_right(), target);
  }

  // optional bool ldw_availability_right = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ldw_availability_right(), target);
  }

  // optional int32 lane_type_right = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lane_type_right(), target);
  }

  // optional double distance_to_lane_r = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->distance_to_lane_r(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Aftermarket_669)
  return target;
}

size_t Aftermarket_669::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Aftermarket_669)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 lane_conf_left = 1;
    if (has_lane_conf_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_conf_left());
    }

    // optional int32 lane_type_left = 3;
    if (has_lane_type_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_type_left());
    }

    // optional double distance_to_lane_l = 4;
    if (has_distance_to_lane_l()) {
      total_size += 1 + 8;
    }

    // optional bool ldw_availability_left = 2;
    if (has_ldw_availability_left()) {
      total_size += 1 + 1;
    }

    // optional bool ldw_availability_right = 6;
    if (has_ldw_availability_right()) {
      total_size += 1 + 1;
    }

    // optional int32 lane_conf_right = 5;
    if (has_lane_conf_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_conf_right());
    }

    // optional double distance_to_lane_r = 8;
    if (has_distance_to_lane_r()) {
      total_size += 1 + 8;
    }

    // optional int32 lane_type_right = 7;
    if (has_lane_type_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_type_right());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Aftermarket_669::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Aftermarket_669)
  GOOGLE_DCHECK_NE(&from, this);
  const Aftermarket_669* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Aftermarket_669>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Aftermarket_669)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Aftermarket_669)
    MergeFrom(*source);
  }
}

void Aftermarket_669::MergeFrom(const Aftermarket_669& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Aftermarket_669)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      lane_conf_left_ = from.lane_conf_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      lane_type_left_ = from.lane_type_left_;
    }
    if (cached_has_bits & 0x00000004u) {
      distance_to_lane_l_ = from.distance_to_lane_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      ldw_availability_left_ = from.ldw_availability_left_;
    }
    if (cached_has_bits & 0x00000010u) {
      ldw_availability_right_ = from.ldw_availability_right_;
    }
    if (cached_has_bits & 0x00000020u) {
      lane_conf_right_ = from.lane_conf_right_;
    }
    if (cached_has_bits & 0x00000040u) {
      distance_to_lane_r_ = from.distance_to_lane_r_;
    }
    if (cached_has_bits & 0x00000080u) {
      lane_type_right_ = from.lane_type_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Aftermarket_669::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Aftermarket_669)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Aftermarket_669::CopyFrom(const Aftermarket_669& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Aftermarket_669)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aftermarket_669::IsInitialized() const {
  return true;
}

void Aftermarket_669::Swap(Aftermarket_669* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Aftermarket_669::InternalSwap(Aftermarket_669* other) {
  std::swap(lane_conf_left_, other->lane_conf_left_);
  std::swap(lane_type_left_, other->lane_type_left_);
  std::swap(distance_to_lane_l_, other->distance_to_lane_l_);
  std::swap(ldw_availability_left_, other->ldw_availability_left_);
  std::swap(ldw_availability_right_, other->ldw_availability_right_);
  std::swap(lane_conf_right_, other->lane_conf_right_);
  std::swap(distance_to_lane_r_, other->distance_to_lane_r_);
  std::swap(lane_type_right_, other->lane_type_right_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Aftermarket_669::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Aftermarket_669

// optional int32 lane_conf_left = 1;
bool Aftermarket_669::has_lane_conf_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Aftermarket_669::set_has_lane_conf_left() {
  _has_bits_[0] |= 0x00000001u;
}
void Aftermarket_669::clear_has_lane_conf_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void Aftermarket_669::clear_lane_conf_left() {
  lane_conf_left_ = 0;
  clear_has_lane_conf_left();
}
::google::protobuf::int32 Aftermarket_669::lane_conf_left() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.lane_conf_left)
  return lane_conf_left_;
}
void Aftermarket_669::set_lane_conf_left(::google::protobuf::int32 value) {
  set_has_lane_conf_left();
  lane_conf_left_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.lane_conf_left)
}

// optional bool ldw_availability_left = 2;
bool Aftermarket_669::has_ldw_availability_left() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Aftermarket_669::set_has_ldw_availability_left() {
  _has_bits_[0] |= 0x00000008u;
}
void Aftermarket_669::clear_has_ldw_availability_left() {
  _has_bits_[0] &= ~0x00000008u;
}
void Aftermarket_669::clear_ldw_availability_left() {
  ldw_availability_left_ = false;
  clear_has_ldw_availability_left();
}
bool Aftermarket_669::ldw_availability_left() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.ldw_availability_left)
  return ldw_availability_left_;
}
void Aftermarket_669::set_ldw_availability_left(bool value) {
  set_has_ldw_availability_left();
  ldw_availability_left_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.ldw_availability_left)
}

// optional int32 lane_type_left = 3;
bool Aftermarket_669::has_lane_type_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Aftermarket_669::set_has_lane_type_left() {
  _has_bits_[0] |= 0x00000002u;
}
void Aftermarket_669::clear_has_lane_type_left() {
  _has_bits_[0] &= ~0x00000002u;
}
void Aftermarket_669::clear_lane_type_left() {
  lane_type_left_ = 0;
  clear_has_lane_type_left();
}
::google::protobuf::int32 Aftermarket_669::lane_type_left() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.lane_type_left)
  return lane_type_left_;
}
void Aftermarket_669::set_lane_type_left(::google::protobuf::int32 value) {
  set_has_lane_type_left();
  lane_type_left_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.lane_type_left)
}

// optional double distance_to_lane_l = 4;
bool Aftermarket_669::has_distance_to_lane_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Aftermarket_669::set_has_distance_to_lane_l() {
  _has_bits_[0] |= 0x00000004u;
}
void Aftermarket_669::clear_has_distance_to_lane_l() {
  _has_bits_[0] &= ~0x00000004u;
}
void Aftermarket_669::clear_distance_to_lane_l() {
  distance_to_lane_l_ = 0;
  clear_has_distance_to_lane_l();
}
double Aftermarket_669::distance_to_lane_l() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.distance_to_lane_l)
  return distance_to_lane_l_;
}
void Aftermarket_669::set_distance_to_lane_l(double value) {
  set_has_distance_to_lane_l();
  distance_to_lane_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.distance_to_lane_l)
}

// optional int32 lane_conf_right = 5;
bool Aftermarket_669::has_lane_conf_right() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Aftermarket_669::set_has_lane_conf_right() {
  _has_bits_[0] |= 0x00000020u;
}
void Aftermarket_669::clear_has_lane_conf_right() {
  _has_bits_[0] &= ~0x00000020u;
}
void Aftermarket_669::clear_lane_conf_right() {
  lane_conf_right_ = 0;
  clear_has_lane_conf_right();
}
::google::protobuf::int32 Aftermarket_669::lane_conf_right() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.lane_conf_right)
  return lane_conf_right_;
}
void Aftermarket_669::set_lane_conf_right(::google::protobuf::int32 value) {
  set_has_lane_conf_right();
  lane_conf_right_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.lane_conf_right)
}

// optional bool ldw_availability_right = 6;
bool Aftermarket_669::has_ldw_availability_right() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Aftermarket_669::set_has_ldw_availability_right() {
  _has_bits_[0] |= 0x00000010u;
}
void Aftermarket_669::clear_has_ldw_availability_right() {
  _has_bits_[0] &= ~0x00000010u;
}
void Aftermarket_669::clear_ldw_availability_right() {
  ldw_availability_right_ = false;
  clear_has_ldw_availability_right();
}
bool Aftermarket_669::ldw_availability_right() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.ldw_availability_right)
  return ldw_availability_right_;
}
void Aftermarket_669::set_ldw_availability_right(bool value) {
  set_has_ldw_availability_right();
  ldw_availability_right_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.ldw_availability_right)
}

// optional int32 lane_type_right = 7;
bool Aftermarket_669::has_lane_type_right() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Aftermarket_669::set_has_lane_type_right() {
  _has_bits_[0] |= 0x00000080u;
}
void Aftermarket_669::clear_has_lane_type_right() {
  _has_bits_[0] &= ~0x00000080u;
}
void Aftermarket_669::clear_lane_type_right() {
  lane_type_right_ = 0;
  clear_has_lane_type_right();
}
::google::protobuf::int32 Aftermarket_669::lane_type_right() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.lane_type_right)
  return lane_type_right_;
}
void Aftermarket_669::set_lane_type_right(::google::protobuf::int32 value) {
  set_has_lane_type_right();
  lane_type_right_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.lane_type_right)
}

// optional double distance_to_lane_r = 8;
bool Aftermarket_669::has_distance_to_lane_r() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Aftermarket_669::set_has_distance_to_lane_r() {
  _has_bits_[0] |= 0x00000040u;
}
void Aftermarket_669::clear_has_distance_to_lane_r() {
  _has_bits_[0] &= ~0x00000040u;
}
void Aftermarket_669::clear_distance_to_lane_r() {
  distance_to_lane_r_ = 0;
  clear_has_distance_to_lane_r();
}
double Aftermarket_669::distance_to_lane_r() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.distance_to_lane_r)
  return distance_to_lane_r_;
}
void Aftermarket_669::set_distance_to_lane_r(double value) {
  set_has_distance_to_lane_r();
  distance_to_lane_r_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.distance_to_lane_r)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lka_769::kHeadingAngleFieldNumber;
const int Lka_769::kViewRangeFieldNumber;
const int Lka_769::kViewRangeAvailabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lka_769::Lka_769()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Lka_769)
}
Lka_769::Lka_769(const Lka_769& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heading_angle_, &from.heading_angle_,
    reinterpret_cast<char*>(&view_range_availability_) -
    reinterpret_cast<char*>(&heading_angle_) + sizeof(view_range_availability_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Lka_769)
}

void Lka_769::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&heading_angle_, 0, reinterpret_cast<char*>(&view_range_availability_) -
    reinterpret_cast<char*>(&heading_angle_) + sizeof(view_range_availability_));
}

Lka_769::~Lka_769() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Lka_769)
  SharedDtor();
}

void Lka_769::SharedDtor() {
}

void Lka_769::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lka_769::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lka_769& Lka_769::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lka_769* Lka_769::New(::google::protobuf::Arena* arena) const {
  Lka_769* n = new Lka_769;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lka_769::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Lka_769)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&heading_angle_, 0, reinterpret_cast<char*>(&view_range_availability_) -
      reinterpret_cast<char*>(&heading_angle_) + sizeof(view_range_availability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lka_769::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Lka_769)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double heading_angle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_heading_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double view_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_view_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool view_range_availability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_view_range_availability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_range_availability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Lka_769)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Lka_769)
  return false;
#undef DO_
}

void Lka_769::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Lka_769)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->heading_angle(), output);
  }

  // optional double view_range = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->view_range(), output);
  }

  // optional bool view_range_availability = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->view_range_availability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Lka_769)
}

::google::protobuf::uint8* Lka_769::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Lka_769)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->heading_angle(), target);
  }

  // optional double view_range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->view_range(), target);
  }

  // optional bool view_range_availability = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->view_range_availability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Lka_769)
  return target;
}

size_t Lka_769::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Lka_769)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double heading_angle = 1;
    if (has_heading_angle()) {
      total_size += 1 + 8;
    }

    // optional double view_range = 2;
    if (has_view_range()) {
      total_size += 1 + 8;
    }

    // optional bool view_range_availability = 3;
    if (has_view_range_availability()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lka_769::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Lka_769)
  GOOGLE_DCHECK_NE(&from, this);
  const Lka_769* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lka_769>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Lka_769)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Lka_769)
    MergeFrom(*source);
  }
}

void Lka_769::MergeFrom(const Lka_769& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Lka_769)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      heading_angle_ = from.heading_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      view_range_ = from.view_range_;
    }
    if (cached_has_bits & 0x00000004u) {
      view_range_availability_ = from.view_range_availability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lka_769::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Lka_769)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lka_769::CopyFrom(const Lka_769& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Lka_769)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lka_769::IsInitialized() const {
  return true;
}

void Lka_769::Swap(Lka_769* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lka_769::InternalSwap(Lka_769* other) {
  std::swap(heading_angle_, other->heading_angle_);
  std::swap(view_range_, other->view_range_);
  std::swap(view_range_availability_, other->view_range_availability_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lka_769::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lka_769

// optional double heading_angle = 1;
bool Lka_769::has_heading_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Lka_769::set_has_heading_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void Lka_769::clear_has_heading_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void Lka_769::clear_heading_angle() {
  heading_angle_ = 0;
  clear_has_heading_angle();
}
double Lka_769::heading_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_769.heading_angle)
  return heading_angle_;
}
void Lka_769::set_heading_angle(double value) {
  set_has_heading_angle();
  heading_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_769.heading_angle)
}

// optional double view_range = 2;
bool Lka_769::has_view_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Lka_769::set_has_view_range() {
  _has_bits_[0] |= 0x00000002u;
}
void Lka_769::clear_has_view_range() {
  _has_bits_[0] &= ~0x00000002u;
}
void Lka_769::clear_view_range() {
  view_range_ = 0;
  clear_has_view_range();
}
double Lka_769::view_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_769.view_range)
  return view_range_;
}
void Lka_769::set_view_range(double value) {
  set_has_view_range();
  view_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_769.view_range)
}

// optional bool view_range_availability = 3;
bool Lka_769::has_view_range_availability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Lka_769::set_has_view_range_availability() {
  _has_bits_[0] |= 0x00000004u;
}
void Lka_769::clear_has_view_range_availability() {
  _has_bits_[0] &= ~0x00000004u;
}
void Lka_769::clear_view_range_availability() {
  view_range_availability_ = false;
  clear_has_view_range_availability();
}
bool Lka_769::view_range_availability() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_769.view_range_availability)
  return view_range_availability_;
}
void Lka_769::set_view_range_availability(bool value) {
  set_has_view_range_availability();
  view_range_availability_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_769.view_range_availability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reference_76a::kRefPoint1PositionFieldNumber;
const int Reference_76a::kRefPoint1DistanceFieldNumber;
const int Reference_76a::kRefPoint1ValidityFieldNumber;
const int Reference_76a::kRefPoint2PositionFieldNumber;
const int Reference_76a::kRefPoint2DistanceFieldNumber;
const int Reference_76a::kRefPoint2ValidityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reference_76a::Reference_76a()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Reference_76a)
}
Reference_76a::Reference_76a(const Reference_76a& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ref_point_1_position_, &from.ref_point_1_position_,
    reinterpret_cast<char*>(&ref_point_2_validity_) -
    reinterpret_cast<char*>(&ref_point_1_position_) + sizeof(ref_point_2_validity_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Reference_76a)
}

void Reference_76a::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ref_point_1_position_, 0, reinterpret_cast<char*>(&ref_point_2_validity_) -
    reinterpret_cast<char*>(&ref_point_1_position_) + sizeof(ref_point_2_validity_));
}

Reference_76a::~Reference_76a() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Reference_76a)
  SharedDtor();
}

void Reference_76a::SharedDtor() {
}

void Reference_76a::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reference_76a::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Reference_76a& Reference_76a::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Reference_76a* Reference_76a::New(::google::protobuf::Arena* arena) const {
  Reference_76a* n = new Reference_76a;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reference_76a::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Reference_76a)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&ref_point_1_position_, 0, reinterpret_cast<char*>(&ref_point_2_validity_) -
      reinterpret_cast<char*>(&ref_point_1_position_) + sizeof(ref_point_2_validity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Reference_76a::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Reference_76a)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ref_point_1_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ref_point_1_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_point_1_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_point_1_distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ref_point_1_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_point_1_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ref_point_1_validity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ref_point_1_validity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ref_point_1_validity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_point_2_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_ref_point_2_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_point_2_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_point_2_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_ref_point_2_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_point_2_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ref_point_2_validity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ref_point_2_validity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ref_point_2_validity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Reference_76a)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Reference_76a)
  return false;
#undef DO_
}

void Reference_76a::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Reference_76a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ref_point_1_position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ref_point_1_position(), output);
  }

  // optional double ref_point_1_distance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ref_point_1_distance(), output);
  }

  // optional bool ref_point_1_validity = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ref_point_1_validity(), output);
  }

  // optional double ref_point_2_position = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ref_point_2_position(), output);
  }

  // optional double ref_point_2_distance = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ref_point_2_distance(), output);
  }

  // optional bool ref_point_2_validity = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ref_point_2_validity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Reference_76a)
}

::google::protobuf::uint8* Reference_76a::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Reference_76a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ref_point_1_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ref_point_1_position(), target);
  }

  // optional double ref_point_1_distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ref_point_1_distance(), target);
  }

  // optional bool ref_point_1_validity = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ref_point_1_validity(), target);
  }

  // optional double ref_point_2_position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ref_point_2_position(), target);
  }

  // optional double ref_point_2_distance = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ref_point_2_distance(), target);
  }

  // optional bool ref_point_2_validity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ref_point_2_validity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Reference_76a)
  return target;
}

size_t Reference_76a::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Reference_76a)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional double ref_point_1_position = 1;
    if (has_ref_point_1_position()) {
      total_size += 1 + 8;
    }

    // optional double ref_point_1_distance = 2;
    if (has_ref_point_1_distance()) {
      total_size += 1 + 8;
    }

    // optional double ref_point_2_position = 4;
    if (has_ref_point_2_position()) {
      total_size += 1 + 8;
    }

    // optional double ref_point_2_distance = 5;
    if (has_ref_point_2_distance()) {
      total_size += 1 + 8;
    }

    // optional bool ref_point_1_validity = 3;
    if (has_ref_point_1_validity()) {
      total_size += 1 + 1;
    }

    // optional bool ref_point_2_validity = 6;
    if (has_ref_point_2_validity()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reference_76a::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Reference_76a)
  GOOGLE_DCHECK_NE(&from, this);
  const Reference_76a* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reference_76a>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Reference_76a)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Reference_76a)
    MergeFrom(*source);
  }
}

void Reference_76a::MergeFrom(const Reference_76a& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Reference_76a)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      ref_point_1_position_ = from.ref_point_1_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      ref_point_1_distance_ = from.ref_point_1_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      ref_point_2_position_ = from.ref_point_2_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      ref_point_2_distance_ = from.ref_point_2_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      ref_point_1_validity_ = from.ref_point_1_validity_;
    }
    if (cached_has_bits & 0x00000020u) {
      ref_point_2_validity_ = from.ref_point_2_validity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Reference_76a::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Reference_76a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reference_76a::CopyFrom(const Reference_76a& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Reference_76a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference_76a::IsInitialized() const {
  return true;
}

void Reference_76a::Swap(Reference_76a* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reference_76a::InternalSwap(Reference_76a* other) {
  std::swap(ref_point_1_position_, other->ref_point_1_position_);
  std::swap(ref_point_1_distance_, other->ref_point_1_distance_);
  std::swap(ref_point_2_position_, other->ref_point_2_position_);
  std::swap(ref_point_2_distance_, other->ref_point_2_distance_);
  std::swap(ref_point_1_validity_, other->ref_point_1_validity_);
  std::swap(ref_point_2_validity_, other->ref_point_2_validity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reference_76a::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reference_76a

// optional double ref_point_1_position = 1;
bool Reference_76a::has_ref_point_1_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Reference_76a::set_has_ref_point_1_position() {
  _has_bits_[0] |= 0x00000001u;
}
void Reference_76a::clear_has_ref_point_1_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void Reference_76a::clear_ref_point_1_position() {
  ref_point_1_position_ = 0;
  clear_has_ref_point_1_position();
}
double Reference_76a::ref_point_1_position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Reference_76a.ref_point_1_position)
  return ref_point_1_position_;
}
void Reference_76a::set_ref_point_1_position(double value) {
  set_has_ref_point_1_position();
  ref_point_1_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Reference_76a.ref_point_1_position)
}

// optional double ref_point_1_distance = 2;
bool Reference_76a::has_ref_point_1_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Reference_76a::set_has_ref_point_1_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void Reference_76a::clear_has_ref_point_1_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void Reference_76a::clear_ref_point_1_distance() {
  ref_point_1_distance_ = 0;
  clear_has_ref_point_1_distance();
}
double Reference_76a::ref_point_1_distance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Reference_76a.ref_point_1_distance)
  return ref_point_1_distance_;
}
void Reference_76a::set_ref_point_1_distance(double value) {
  set_has_ref_point_1_distance();
  ref_point_1_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Reference_76a.ref_point_1_distance)
}

// optional bool ref_point_1_validity = 3;
bool Reference_76a::has_ref_point_1_validity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Reference_76a::set_has_ref_point_1_validity() {
  _has_bits_[0] |= 0x00000010u;
}
void Reference_76a::clear_has_ref_point_1_validity() {
  _has_bits_[0] &= ~0x00000010u;
}
void Reference_76a::clear_ref_point_1_validity() {
  ref_point_1_validity_ = false;
  clear_has_ref_point_1_validity();
}
bool Reference_76a::ref_point_1_validity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Reference_76a.ref_point_1_validity)
  return ref_point_1_validity_;
}
void Reference_76a::set_ref_point_1_validity(bool value) {
  set_has_ref_point_1_validity();
  ref_point_1_validity_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Reference_76a.ref_point_1_validity)
}

// optional double ref_point_2_position = 4;
bool Reference_76a::has_ref_point_2_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Reference_76a::set_has_ref_point_2_position() {
  _has_bits_[0] |= 0x00000004u;
}
void Reference_76a::clear_has_ref_point_2_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void Reference_76a::clear_ref_point_2_position() {
  ref_point_2_position_ = 0;
  clear_has_ref_point_2_position();
}
double Reference_76a::ref_point_2_position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Reference_76a.ref_point_2_position)
  return ref_point_2_position_;
}
void Reference_76a::set_ref_point_2_position(double value) {
  set_has_ref_point_2_position();
  ref_point_2_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Reference_76a.ref_point_2_position)
}

// optional double ref_point_2_distance = 5;
bool Reference_76a::has_ref_point_2_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Reference_76a::set_has_ref_point_2_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void Reference_76a::clear_has_ref_point_2_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void Reference_76a::clear_ref_point_2_distance() {
  ref_point_2_distance_ = 0;
  clear_has_ref_point_2_distance();
}
double Reference_76a::ref_point_2_distance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Reference_76a.ref_point_2_distance)
  return ref_point_2_distance_;
}
void Reference_76a::set_ref_point_2_distance(double value) {
  set_has_ref_point_2_distance();
  ref_point_2_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Reference_76a.ref_point_2_distance)
}

// optional bool ref_point_2_validity = 6;
bool Reference_76a::has_ref_point_2_validity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Reference_76a::set_has_ref_point_2_validity() {
  _has_bits_[0] |= 0x00000020u;
}
void Reference_76a::clear_has_ref_point_2_validity() {
  _has_bits_[0] &= ~0x00000020u;
}
void Reference_76a::clear_ref_point_2_validity() {
  ref_point_2_validity_ = false;
  clear_has_ref_point_2_validity();
}
bool Reference_76a::ref_point_2_validity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Reference_76a.ref_point_2_validity)
  return ref_point_2_validity_;
}
void Reference_76a::set_ref_point_2_validity(bool value) {
  set_has_ref_point_2_validity();
  ref_point_2_validity_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Reference_76a.ref_point_2_validity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Details_738::kNumObstaclesFieldNumber;
const int Details_738::kTimestampFieldNumber;
const int Details_738::kApplicationVersionFieldNumber;
const int Details_738::kActiveVersionNumberSectionFieldNumber;
const int Details_738::kLeftCloseRangCutInFieldNumber;
const int Details_738::kRightCloseRangCutInFieldNumber;
const int Details_738::kGoFieldNumber;
const int Details_738::kProtocolVersionFieldNumber;
const int Details_738::kCloseCarFieldNumber;
const int Details_738::kFailsafeFieldNumber;
const int Details_738::kReserved10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Details_738::Details_738()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Details_738)
}
Details_738::Details_738(const Details_738& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_obstacles_, &from.num_obstacles_,
    reinterpret_cast<char*>(&reserved_10_) -
    reinterpret_cast<char*>(&num_obstacles_) + sizeof(reserved_10_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Details_738)
}

void Details_738::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&num_obstacles_, 0, reinterpret_cast<char*>(&reserved_10_) -
    reinterpret_cast<char*>(&num_obstacles_) + sizeof(reserved_10_));
}

Details_738::~Details_738() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Details_738)
  SharedDtor();
}

void Details_738::SharedDtor() {
}

void Details_738::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Details_738::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Details_738& Details_738::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Details_738* Details_738::New(::google::protobuf::Arena* arena) const {
  Details_738* n = new Details_738;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Details_738::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Details_738)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&num_obstacles_, 0, reinterpret_cast<char*>(&go_) -
      reinterpret_cast<char*>(&num_obstacles_) + sizeof(go_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&protocol_version_, 0, reinterpret_cast<char*>(&reserved_10_) -
      reinterpret_cast<char*>(&protocol_version_) + sizeof(reserved_10_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Details_738::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Details_738)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_obstacles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_num_obstacles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_obstacles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 application_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_application_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &application_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 active_version_number_section = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_active_version_number_section();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_version_number_section_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool left_close_rang_cut_in = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_left_close_rang_cut_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_close_rang_cut_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool right_close_rang_cut_in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_right_close_rang_cut_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_close_rang_cut_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 go = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_go();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &go_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 protocol_version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool close_car = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_close_car();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &close_car_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 failsafe = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_failsafe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failsafe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_10 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_reserved_10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Details_738)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Details_738)
  return false;
#undef DO_
}

void Details_738::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Details_738)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_obstacles = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_obstacles(), output);
  }

  // optional int32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timestamp(), output);
  }

  // optional int32 application_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->application_version(), output);
  }

  // optional int32 active_version_number_section = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->active_version_number_section(), output);
  }

  // optional bool left_close_rang_cut_in = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->left_close_rang_cut_in(), output);
  }

  // optional bool right_close_rang_cut_in = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->right_close_rang_cut_in(), output);
  }

  // optional int32 go = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->go(), output);
  }

  // optional int32 protocol_version = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->protocol_version(), output);
  }

  // optional bool close_car = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->close_car(), output);
  }

  // optional int32 failsafe = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->failsafe(), output);
  }

  // optional int32 reserved_10 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reserved_10(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Details_738)
}

::google::protobuf::uint8* Details_738::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Details_738)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_obstacles = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_obstacles(), target);
  }

  // optional int32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timestamp(), target);
  }

  // optional int32 application_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->application_version(), target);
  }

  // optional int32 active_version_number_section = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->active_version_number_section(), target);
  }

  // optional bool left_close_rang_cut_in = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->left_close_rang_cut_in(), target);
  }

  // optional bool right_close_rang_cut_in = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->right_close_rang_cut_in(), target);
  }

  // optional int32 go = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->go(), target);
  }

  // optional int32 protocol_version = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->protocol_version(), target);
  }

  // optional bool close_car = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->close_car(), target);
  }

  // optional int32 failsafe = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->failsafe(), target);
  }

  // optional int32 reserved_10 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->reserved_10(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Details_738)
  return target;
}

size_t Details_738::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Details_738)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 num_obstacles = 1;
    if (has_num_obstacles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_obstacles());
    }

    // optional int32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional int32 application_version = 3;
    if (has_application_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->application_version());
    }

    // optional int32 active_version_number_section = 4;
    if (has_active_version_number_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_version_number_section());
    }

    // optional bool left_close_rang_cut_in = 5;
    if (has_left_close_rang_cut_in()) {
      total_size += 1 + 1;
    }

    // optional bool right_close_rang_cut_in = 6;
    if (has_right_close_rang_cut_in()) {
      total_size += 1 + 1;
    }

    // optional bool close_car = 9;
    if (has_close_car()) {
      total_size += 1 + 1;
    }

    // optional int32 go = 7;
    if (has_go()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->go());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 protocol_version = 8;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocol_version());
    }

    // optional int32 failsafe = 10;
    if (has_failsafe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failsafe());
    }

    // optional int32 reserved_10 = 11;
    if (has_reserved_10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_10());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Details_738::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Details_738)
  GOOGLE_DCHECK_NE(&from, this);
  const Details_738* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Details_738>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Details_738)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Details_738)
    MergeFrom(*source);
  }
}

void Details_738::MergeFrom(const Details_738& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Details_738)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      num_obstacles_ = from.num_obstacles_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      application_version_ = from.application_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      active_version_number_section_ = from.active_version_number_section_;
    }
    if (cached_has_bits & 0x00000010u) {
      left_close_rang_cut_in_ = from.left_close_rang_cut_in_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_close_rang_cut_in_ = from.right_close_rang_cut_in_;
    }
    if (cached_has_bits & 0x00000040u) {
      close_car_ = from.close_car_;
    }
    if (cached_has_bits & 0x00000080u) {
      go_ = from.go_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      failsafe_ = from.failsafe_;
    }
    if (cached_has_bits & 0x00000400u) {
      reserved_10_ = from.reserved_10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Details_738::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Details_738)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Details_738::CopyFrom(const Details_738& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Details_738)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Details_738::IsInitialized() const {
  return true;
}

void Details_738::Swap(Details_738* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Details_738::InternalSwap(Details_738* other) {
  std::swap(num_obstacles_, other->num_obstacles_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(application_version_, other->application_version_);
  std::swap(active_version_number_section_, other->active_version_number_section_);
  std::swap(left_close_rang_cut_in_, other->left_close_rang_cut_in_);
  std::swap(right_close_rang_cut_in_, other->right_close_rang_cut_in_);
  std::swap(close_car_, other->close_car_);
  std::swap(go_, other->go_);
  std::swap(protocol_version_, other->protocol_version_);
  std::swap(failsafe_, other->failsafe_);
  std::swap(reserved_10_, other->reserved_10_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Details_738::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Details_738

// optional int32 num_obstacles = 1;
bool Details_738::has_num_obstacles() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Details_738::set_has_num_obstacles() {
  _has_bits_[0] |= 0x00000001u;
}
void Details_738::clear_has_num_obstacles() {
  _has_bits_[0] &= ~0x00000001u;
}
void Details_738::clear_num_obstacles() {
  num_obstacles_ = 0;
  clear_has_num_obstacles();
}
::google::protobuf::int32 Details_738::num_obstacles() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.num_obstacles)
  return num_obstacles_;
}
void Details_738::set_num_obstacles(::google::protobuf::int32 value) {
  set_has_num_obstacles();
  num_obstacles_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.num_obstacles)
}

// optional int32 timestamp = 2;
bool Details_738::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Details_738::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void Details_738::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void Details_738::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
::google::protobuf::int32 Details_738::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.timestamp)
  return timestamp_;
}
void Details_738::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.timestamp)
}

// optional int32 application_version = 3;
bool Details_738::has_application_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Details_738::set_has_application_version() {
  _has_bits_[0] |= 0x00000004u;
}
void Details_738::clear_has_application_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void Details_738::clear_application_version() {
  application_version_ = 0;
  clear_has_application_version();
}
::google::protobuf::int32 Details_738::application_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.application_version)
  return application_version_;
}
void Details_738::set_application_version(::google::protobuf::int32 value) {
  set_has_application_version();
  application_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.application_version)
}

// optional int32 active_version_number_section = 4;
bool Details_738::has_active_version_number_section() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Details_738::set_has_active_version_number_section() {
  _has_bits_[0] |= 0x00000008u;
}
void Details_738::clear_has_active_version_number_section() {
  _has_bits_[0] &= ~0x00000008u;
}
void Details_738::clear_active_version_number_section() {
  active_version_number_section_ = 0;
  clear_has_active_version_number_section();
}
::google::protobuf::int32 Details_738::active_version_number_section() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.active_version_number_section)
  return active_version_number_section_;
}
void Details_738::set_active_version_number_section(::google::protobuf::int32 value) {
  set_has_active_version_number_section();
  active_version_number_section_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.active_version_number_section)
}

// optional bool left_close_rang_cut_in = 5;
bool Details_738::has_left_close_rang_cut_in() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Details_738::set_has_left_close_rang_cut_in() {
  _has_bits_[0] |= 0x00000010u;
}
void Details_738::clear_has_left_close_rang_cut_in() {
  _has_bits_[0] &= ~0x00000010u;
}
void Details_738::clear_left_close_rang_cut_in() {
  left_close_rang_cut_in_ = false;
  clear_has_left_close_rang_cut_in();
}
bool Details_738::left_close_rang_cut_in() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.left_close_rang_cut_in)
  return left_close_rang_cut_in_;
}
void Details_738::set_left_close_rang_cut_in(bool value) {
  set_has_left_close_rang_cut_in();
  left_close_rang_cut_in_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.left_close_rang_cut_in)
}

// optional bool right_close_rang_cut_in = 6;
bool Details_738::has_right_close_rang_cut_in() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Details_738::set_has_right_close_rang_cut_in() {
  _has_bits_[0] |= 0x00000020u;
}
void Details_738::clear_has_right_close_rang_cut_in() {
  _has_bits_[0] &= ~0x00000020u;
}
void Details_738::clear_right_close_rang_cut_in() {
  right_close_rang_cut_in_ = false;
  clear_has_right_close_rang_cut_in();
}
bool Details_738::right_close_rang_cut_in() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.right_close_rang_cut_in)
  return right_close_rang_cut_in_;
}
void Details_738::set_right_close_rang_cut_in(bool value) {
  set_has_right_close_rang_cut_in();
  right_close_rang_cut_in_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.right_close_rang_cut_in)
}

// optional int32 go = 7;
bool Details_738::has_go() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Details_738::set_has_go() {
  _has_bits_[0] |= 0x00000080u;
}
void Details_738::clear_has_go() {
  _has_bits_[0] &= ~0x00000080u;
}
void Details_738::clear_go() {
  go_ = 0;
  clear_has_go();
}
::google::protobuf::int32 Details_738::go() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.go)
  return go_;
}
void Details_738::set_go(::google::protobuf::int32 value) {
  set_has_go();
  go_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.go)
}

// optional int32 protocol_version = 8;
bool Details_738::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Details_738::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000100u;
}
void Details_738::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000100u;
}
void Details_738::clear_protocol_version() {
  protocol_version_ = 0;
  clear_has_protocol_version();
}
::google::protobuf::int32 Details_738::protocol_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.protocol_version)
  return protocol_version_;
}
void Details_738::set_protocol_version(::google::protobuf::int32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.protocol_version)
}

// optional bool close_car = 9;
bool Details_738::has_close_car() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Details_738::set_has_close_car() {
  _has_bits_[0] |= 0x00000040u;
}
void Details_738::clear_has_close_car() {
  _has_bits_[0] &= ~0x00000040u;
}
void Details_738::clear_close_car() {
  close_car_ = false;
  clear_has_close_car();
}
bool Details_738::close_car() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.close_car)
  return close_car_;
}
void Details_738::set_close_car(bool value) {
  set_has_close_car();
  close_car_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.close_car)
}

// optional int32 failsafe = 10;
bool Details_738::has_failsafe() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Details_738::set_has_failsafe() {
  _has_bits_[0] |= 0x00000200u;
}
void Details_738::clear_has_failsafe() {
  _has_bits_[0] &= ~0x00000200u;
}
void Details_738::clear_failsafe() {
  failsafe_ = 0;
  clear_has_failsafe();
}
::google::protobuf::int32 Details_738::failsafe() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.failsafe)
  return failsafe_;
}
void Details_738::set_failsafe(::google::protobuf::int32 value) {
  set_has_failsafe();
  failsafe_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.failsafe)
}

// optional int32 reserved_10 = 11;
bool Details_738::has_reserved_10() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Details_738::set_has_reserved_10() {
  _has_bits_[0] |= 0x00000400u;
}
void Details_738::clear_has_reserved_10() {
  _has_bits_[0] &= ~0x00000400u;
}
void Details_738::clear_reserved_10() {
  reserved_10_ = 0;
  clear_has_reserved_10();
}
::google::protobuf::int32 Details_738::reserved_10() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.reserved_10)
  return reserved_10_;
}
void Details_738::set_reserved_10(::google::protobuf::int32 value) {
  set_has_reserved_10();
  reserved_10_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.reserved_10)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Next_76c::kLaneTypeFieldNumber;
const int Next_76c::kQualityFieldNumber;
const int Next_76c::kModelDegreeFieldNumber;
const int Next_76c::kPositionFieldNumber;
const int Next_76c::kCurvatureFieldNumber;
const int Next_76c::kCurvatureDerivativeFieldNumber;
const int Next_76c::kLaneMarkWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Next_76c::Next_76c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Next_76c)
}
Next_76c::Next_76c(const Next_76c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_type_, &from.lane_type_,
    reinterpret_cast<char*>(&model_degree_) -
    reinterpret_cast<char*>(&lane_type_) + sizeof(model_degree_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Next_76c)
}

void Next_76c::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lane_type_, 0, reinterpret_cast<char*>(&model_degree_) -
    reinterpret_cast<char*>(&lane_type_) + sizeof(model_degree_));
}

Next_76c::~Next_76c() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Next_76c)
  SharedDtor();
}

void Next_76c::SharedDtor() {
}

void Next_76c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Next_76c::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Next_76c& Next_76c::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Next_76c* Next_76c::New(::google::protobuf::Arena* arena) const {
  Next_76c* n = new Next_76c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Next_76c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Next_76c)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&lane_type_, 0, reinterpret_cast<char*>(&model_degree_) -
      reinterpret_cast<char*>(&lane_type_) + sizeof(model_degree_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Next_76c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Next_76c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lane_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lane_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 model_degree = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_model_degree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curvature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_curvature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curvature_derivative = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_curvature_derivative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_mark_width = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_lane_mark_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_mark_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Next_76c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Next_76c)
  return false;
#undef DO_
}

void Next_76c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Next_76c)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lane_type(), output);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->model_degree(), output);
  }

  // optional double position = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->position(), output);
  }

  // optional double curvature = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->curvature(), output);
  }

  // optional double curvature_derivative = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->curvature_derivative(), output);
  }

  // optional double lane_mark_width = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lane_mark_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Next_76c)
}

::google::protobuf::uint8* Next_76c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Next_76c)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lane_type(), target);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->model_degree(), target);
  }

  // optional double position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->position(), target);
  }

  // optional double curvature = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->curvature(), target);
  }

  // optional double curvature_derivative = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->curvature_derivative(), target);
  }

  // optional double lane_mark_width = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lane_mark_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Next_76c)
  return target;
}

size_t Next_76c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Next_76c)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 lane_type = 1;
    if (has_lane_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_type());
    }

    // optional int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional double position = 4;
    if (has_position()) {
      total_size += 1 + 8;
    }

    // optional double curvature = 5;
    if (has_curvature()) {
      total_size += 1 + 8;
    }

    // optional double curvature_derivative = 6;
    if (has_curvature_derivative()) {
      total_size += 1 + 8;
    }

    // optional double lane_mark_width = 7;
    if (has_lane_mark_width()) {
      total_size += 1 + 8;
    }

    // optional int32 model_degree = 3;
    if (has_model_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_degree());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Next_76c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Next_76c)
  GOOGLE_DCHECK_NE(&from, this);
  const Next_76c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Next_76c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Next_76c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Next_76c)
    MergeFrom(*source);
  }
}

void Next_76c::MergeFrom(const Next_76c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Next_76c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      lane_type_ = from.lane_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000008u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000010u) {
      curvature_derivative_ = from.curvature_derivative_;
    }
    if (cached_has_bits & 0x00000020u) {
      lane_mark_width_ = from.lane_mark_width_;
    }
    if (cached_has_bits & 0x00000040u) {
      model_degree_ = from.model_degree_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Next_76c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Next_76c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Next_76c::CopyFrom(const Next_76c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Next_76c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Next_76c::IsInitialized() const {
  return true;
}

void Next_76c::Swap(Next_76c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Next_76c::InternalSwap(Next_76c* other) {
  std::swap(lane_type_, other->lane_type_);
  std::swap(quality_, other->quality_);
  std::swap(position_, other->position_);
  std::swap(curvature_, other->curvature_);
  std::swap(curvature_derivative_, other->curvature_derivative_);
  std::swap(lane_mark_width_, other->lane_mark_width_);
  std::swap(model_degree_, other->model_degree_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Next_76c::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Next_76c

// optional int32 lane_type = 1;
bool Next_76c::has_lane_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Next_76c::set_has_lane_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Next_76c::clear_has_lane_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Next_76c::clear_lane_type() {
  lane_type_ = 0;
  clear_has_lane_type();
}
::google::protobuf::int32 Next_76c::lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.lane_type)
  return lane_type_;
}
void Next_76c::set_lane_type(::google::protobuf::int32 value) {
  set_has_lane_type();
  lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.lane_type)
}

// optional int32 quality = 2;
bool Next_76c::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Next_76c::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
void Next_76c::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
void Next_76c::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
::google::protobuf::int32 Next_76c::quality() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.quality)
  return quality_;
}
void Next_76c::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.quality)
}

// optional int32 model_degree = 3;
bool Next_76c::has_model_degree() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Next_76c::set_has_model_degree() {
  _has_bits_[0] |= 0x00000040u;
}
void Next_76c::clear_has_model_degree() {
  _has_bits_[0] &= ~0x00000040u;
}
void Next_76c::clear_model_degree() {
  model_degree_ = 0;
  clear_has_model_degree();
}
::google::protobuf::int32 Next_76c::model_degree() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.model_degree)
  return model_degree_;
}
void Next_76c::set_model_degree(::google::protobuf::int32 value) {
  set_has_model_degree();
  model_degree_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.model_degree)
}

// optional double position = 4;
bool Next_76c::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Next_76c::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void Next_76c::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void Next_76c::clear_position() {
  position_ = 0;
  clear_has_position();
}
double Next_76c::position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.position)
  return position_;
}
void Next_76c::set_position(double value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.position)
}

// optional double curvature = 5;
bool Next_76c::has_curvature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Next_76c::set_has_curvature() {
  _has_bits_[0] |= 0x00000008u;
}
void Next_76c::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000008u;
}
void Next_76c::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
double Next_76c::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.curvature)
  return curvature_;
}
void Next_76c::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.curvature)
}

// optional double curvature_derivative = 6;
bool Next_76c::has_curvature_derivative() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Next_76c::set_has_curvature_derivative() {
  _has_bits_[0] |= 0x00000010u;
}
void Next_76c::clear_has_curvature_derivative() {
  _has_bits_[0] &= ~0x00000010u;
}
void Next_76c::clear_curvature_derivative() {
  curvature_derivative_ = 0;
  clear_has_curvature_derivative();
}
double Next_76c::curvature_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.curvature_derivative)
  return curvature_derivative_;
}
void Next_76c::set_curvature_derivative(double value) {
  set_has_curvature_derivative();
  curvature_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.curvature_derivative)
}

// optional double lane_mark_width = 7;
bool Next_76c::has_lane_mark_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Next_76c::set_has_lane_mark_width() {
  _has_bits_[0] |= 0x00000020u;
}
void Next_76c::clear_has_lane_mark_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void Next_76c::clear_lane_mark_width() {
  lane_mark_width_ = 0;
  clear_has_lane_mark_width();
}
double Next_76c::lane_mark_width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.lane_mark_width)
  return lane_mark_width_;
}
void Next_76c::set_lane_mark_width(double value) {
  set_has_lane_mark_width();
  lane_mark_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.lane_mark_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Details_737::kLaneCurvatureFieldNumber;
const int Details_737::kLaneHeadingFieldNumber;
const int Details_737::kCaConstructionAreaFieldNumber;
const int Details_737::kRightLdwAvailabilityFieldNumber;
const int Details_737::kLeftLdwAvailabilityFieldNumber;
const int Details_737::kReserved1FieldNumber;
const int Details_737::kYawAngleFieldNumber;
const int Details_737::kPitchAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Details_737::Details_737()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Details_737)
}
Details_737::Details_737(const Details_737& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_curvature_, &from.lane_curvature_,
    reinterpret_cast<char*>(&reserved_1_) -
    reinterpret_cast<char*>(&lane_curvature_) + sizeof(reserved_1_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Details_737)
}

void Details_737::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lane_curvature_, 0, reinterpret_cast<char*>(&reserved_1_) -
    reinterpret_cast<char*>(&lane_curvature_) + sizeof(reserved_1_));
}

Details_737::~Details_737() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Details_737)
  SharedDtor();
}

void Details_737::SharedDtor() {
}

void Details_737::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Details_737::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Details_737& Details_737::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Details_737* Details_737::New(::google::protobuf::Arena* arena) const {
  Details_737* n = new Details_737;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Details_737::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Details_737)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&lane_curvature_, 0, reinterpret_cast<char*>(&reserved_1_) -
      reinterpret_cast<char*>(&lane_curvature_) + sizeof(reserved_1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Details_737::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Details_737)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lane_curvature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_lane_curvature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_lane_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ca_construction_area = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ca_construction_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ca_construction_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool right_ldw_availability = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_right_ldw_availability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_ldw_availability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool left_ldw_availability = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_left_ldw_availability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_ldw_availability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yaw_angle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_yaw_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pitch_angle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_pitch_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Details_737)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Details_737)
  return false;
#undef DO_
}

void Details_737::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Details_737)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lane_curvature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lane_curvature(), output);
  }

  // optional double lane_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lane_heading(), output);
  }

  // optional bool ca_construction_area = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ca_construction_area(), output);
  }

  // optional bool right_ldw_availability = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->right_ldw_availability(), output);
  }

  // optional bool left_ldw_availability = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->left_ldw_availability(), output);
  }

  // optional bool reserved_1 = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->reserved_1(), output);
  }

  // optional double yaw_angle = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->yaw_angle(), output);
  }

  // optional double pitch_angle = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pitch_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Details_737)
}

::google::protobuf::uint8* Details_737::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Details_737)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lane_curvature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lane_curvature(), target);
  }

  // optional double lane_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lane_heading(), target);
  }

  // optional bool ca_construction_area = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ca_construction_area(), target);
  }

  // optional bool right_ldw_availability = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->right_ldw_availability(), target);
  }

  // optional bool left_ldw_availability = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->left_ldw_availability(), target);
  }

  // optional bool reserved_1 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->reserved_1(), target);
  }

  // optional double yaw_angle = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->yaw_angle(), target);
  }

  // optional double pitch_angle = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pitch_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Details_737)
  return target;
}

size_t Details_737::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Details_737)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double lane_curvature = 1;
    if (has_lane_curvature()) {
      total_size += 1 + 8;
    }

    // optional double lane_heading = 2;
    if (has_lane_heading()) {
      total_size += 1 + 8;
    }

    // optional double yaw_angle = 7;
    if (has_yaw_angle()) {
      total_size += 1 + 8;
    }

    // optional double pitch_angle = 8;
    if (has_pitch_angle()) {
      total_size += 1 + 8;
    }

    // optional bool ca_construction_area = 3;
    if (has_ca_construction_area()) {
      total_size += 1 + 1;
    }

    // optional bool right_ldw_availability = 4;
    if (has_right_ldw_availability()) {
      total_size += 1 + 1;
    }

    // optional bool left_ldw_availability = 5;
    if (has_left_ldw_availability()) {
      total_size += 1 + 1;
    }

    // optional bool reserved_1 = 6;
    if (has_reserved_1()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Details_737::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Details_737)
  GOOGLE_DCHECK_NE(&from, this);
  const Details_737* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Details_737>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Details_737)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Details_737)
    MergeFrom(*source);
  }
}

void Details_737::MergeFrom(const Details_737& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Details_737)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      lane_curvature_ = from.lane_curvature_;
    }
    if (cached_has_bits & 0x00000002u) {
      lane_heading_ = from.lane_heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      yaw_angle_ = from.yaw_angle_;
    }
    if (cached_has_bits & 0x00000008u) {
      pitch_angle_ = from.pitch_angle_;
    }
    if (cached_has_bits & 0x00000010u) {
      ca_construction_area_ = from.ca_construction_area_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_ldw_availability_ = from.right_ldw_availability_;
    }
    if (cached_has_bits & 0x00000040u) {
      left_ldw_availability_ = from.left_ldw_availability_;
    }
    if (cached_has_bits & 0x00000080u) {
      reserved_1_ = from.reserved_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Details_737::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Details_737)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Details_737::CopyFrom(const Details_737& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Details_737)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Details_737::IsInitialized() const {
  return true;
}

void Details_737::Swap(Details_737* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Details_737::InternalSwap(Details_737* other) {
  std::swap(lane_curvature_, other->lane_curvature_);
  std::swap(lane_heading_, other->lane_heading_);
  std::swap(yaw_angle_, other->yaw_angle_);
  std::swap(pitch_angle_, other->pitch_angle_);
  std::swap(ca_construction_area_, other->ca_construction_area_);
  std::swap(right_ldw_availability_, other->right_ldw_availability_);
  std::swap(left_ldw_availability_, other->left_ldw_availability_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Details_737::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Details_737

// optional double lane_curvature = 1;
bool Details_737::has_lane_curvature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Details_737::set_has_lane_curvature() {
  _has_bits_[0] |= 0x00000001u;
}
void Details_737::clear_has_lane_curvature() {
  _has_bits_[0] &= ~0x00000001u;
}
void Details_737::clear_lane_curvature() {
  lane_curvature_ = 0;
  clear_has_lane_curvature();
}
double Details_737::lane_curvature() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.lane_curvature)
  return lane_curvature_;
}
void Details_737::set_lane_curvature(double value) {
  set_has_lane_curvature();
  lane_curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.lane_curvature)
}

// optional double lane_heading = 2;
bool Details_737::has_lane_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Details_737::set_has_lane_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void Details_737::clear_has_lane_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void Details_737::clear_lane_heading() {
  lane_heading_ = 0;
  clear_has_lane_heading();
}
double Details_737::lane_heading() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.lane_heading)
  return lane_heading_;
}
void Details_737::set_lane_heading(double value) {
  set_has_lane_heading();
  lane_heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.lane_heading)
}

// optional bool ca_construction_area = 3;
bool Details_737::has_ca_construction_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Details_737::set_has_ca_construction_area() {
  _has_bits_[0] |= 0x00000010u;
}
void Details_737::clear_has_ca_construction_area() {
  _has_bits_[0] &= ~0x00000010u;
}
void Details_737::clear_ca_construction_area() {
  ca_construction_area_ = false;
  clear_has_ca_construction_area();
}
bool Details_737::ca_construction_area() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.ca_construction_area)
  return ca_construction_area_;
}
void Details_737::set_ca_construction_area(bool value) {
  set_has_ca_construction_area();
  ca_construction_area_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.ca_construction_area)
}

// optional bool right_ldw_availability = 4;
bool Details_737::has_right_ldw_availability() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Details_737::set_has_right_ldw_availability() {
  _has_bits_[0] |= 0x00000020u;
}
void Details_737::clear_has_right_ldw_availability() {
  _has_bits_[0] &= ~0x00000020u;
}
void Details_737::clear_right_ldw_availability() {
  right_ldw_availability_ = false;
  clear_has_right_ldw_availability();
}
bool Details_737::right_ldw_availability() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.right_ldw_availability)
  return right_ldw_availability_;
}
void Details_737::set_right_ldw_availability(bool value) {
  set_has_right_ldw_availability();
  right_ldw_availability_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.right_ldw_availability)
}

// optional bool left_ldw_availability = 5;
bool Details_737::has_left_ldw_availability() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Details_737::set_has_left_ldw_availability() {
  _has_bits_[0] |= 0x00000040u;
}
void Details_737::clear_has_left_ldw_availability() {
  _has_bits_[0] &= ~0x00000040u;
}
void Details_737::clear_left_ldw_availability() {
  left_ldw_availability_ = false;
  clear_has_left_ldw_availability();
}
bool Details_737::left_ldw_availability() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.left_ldw_availability)
  return left_ldw_availability_;
}
void Details_737::set_left_ldw_availability(bool value) {
  set_has_left_ldw_availability();
  left_ldw_availability_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.left_ldw_availability)
}

// optional bool reserved_1 = 6;
bool Details_737::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Details_737::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000080u;
}
void Details_737::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000080u;
}
void Details_737::clear_reserved_1() {
  reserved_1_ = false;
  clear_has_reserved_1();
}
bool Details_737::reserved_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.reserved_1)
  return reserved_1_;
}
void Details_737::set_reserved_1(bool value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.reserved_1)
}

// optional double yaw_angle = 7;
bool Details_737::has_yaw_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Details_737::set_has_yaw_angle() {
  _has_bits_[0] |= 0x00000004u;
}
void Details_737::clear_has_yaw_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
void Details_737::clear_yaw_angle() {
  yaw_angle_ = 0;
  clear_has_yaw_angle();
}
double Details_737::yaw_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.yaw_angle)
  return yaw_angle_;
}
void Details_737::set_yaw_angle(double value) {
  set_has_yaw_angle();
  yaw_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.yaw_angle)
}

// optional double pitch_angle = 8;
bool Details_737::has_pitch_angle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Details_737::set_has_pitch_angle() {
  _has_bits_[0] |= 0x00000008u;
}
void Details_737::clear_has_pitch_angle() {
  _has_bits_[0] &= ~0x00000008u;
}
void Details_737::clear_pitch_angle() {
  pitch_angle_ = 0;
  clear_has_pitch_angle();
}
double Details_737::pitch_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.pitch_angle)
  return pitch_angle_;
}
void Details_737::set_pitch_angle(double value) {
  set_has_pitch_angle();
  pitch_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.pitch_angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lka_767::kHeadingAngleFieldNumber;
const int Lka_767::kViewRangeFieldNumber;
const int Lka_767::kViewRangeAvailabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lka_767::Lka_767()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Lka_767)
}
Lka_767::Lka_767(const Lka_767& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heading_angle_, &from.heading_angle_,
    reinterpret_cast<char*>(&view_range_availability_) -
    reinterpret_cast<char*>(&heading_angle_) + sizeof(view_range_availability_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Lka_767)
}

void Lka_767::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&heading_angle_, 0, reinterpret_cast<char*>(&view_range_availability_) -
    reinterpret_cast<char*>(&heading_angle_) + sizeof(view_range_availability_));
}

Lka_767::~Lka_767() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Lka_767)
  SharedDtor();
}

void Lka_767::SharedDtor() {
}

void Lka_767::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lka_767::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lka_767& Lka_767::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lka_767* Lka_767::New(::google::protobuf::Arena* arena) const {
  Lka_767* n = new Lka_767;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lka_767::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Lka_767)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&heading_angle_, 0, reinterpret_cast<char*>(&view_range_availability_) -
      reinterpret_cast<char*>(&heading_angle_) + sizeof(view_range_availability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lka_767::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Lka_767)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double heading_angle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_heading_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double view_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_view_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool view_range_availability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_view_range_availability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_range_availability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Lka_767)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Lka_767)
  return false;
#undef DO_
}

void Lka_767::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Lka_767)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->heading_angle(), output);
  }

  // optional double view_range = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->view_range(), output);
  }

  // optional bool view_range_availability = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->view_range_availability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Lka_767)
}

::google::protobuf::uint8* Lka_767::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Lka_767)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->heading_angle(), target);
  }

  // optional double view_range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->view_range(), target);
  }

  // optional bool view_range_availability = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->view_range_availability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Lka_767)
  return target;
}

size_t Lka_767::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Lka_767)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double heading_angle = 1;
    if (has_heading_angle()) {
      total_size += 1 + 8;
    }

    // optional double view_range = 2;
    if (has_view_range()) {
      total_size += 1 + 8;
    }

    // optional bool view_range_availability = 3;
    if (has_view_range_availability()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lka_767::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Lka_767)
  GOOGLE_DCHECK_NE(&from, this);
  const Lka_767* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lka_767>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Lka_767)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Lka_767)
    MergeFrom(*source);
  }
}

void Lka_767::MergeFrom(const Lka_767& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Lka_767)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      heading_angle_ = from.heading_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      view_range_ = from.view_range_;
    }
    if (cached_has_bits & 0x00000004u) {
      view_range_availability_ = from.view_range_availability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lka_767::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Lka_767)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lka_767::CopyFrom(const Lka_767& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Lka_767)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lka_767::IsInitialized() const {
  return true;
}

void Lka_767::Swap(Lka_767* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lka_767::InternalSwap(Lka_767* other) {
  std::swap(heading_angle_, other->heading_angle_);
  std::swap(view_range_, other->view_range_);
  std::swap(view_range_availability_, other->view_range_availability_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lka_767::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lka_767

// optional double heading_angle = 1;
bool Lka_767::has_heading_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Lka_767::set_has_heading_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void Lka_767::clear_has_heading_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void Lka_767::clear_heading_angle() {
  heading_angle_ = 0;
  clear_has_heading_angle();
}
double Lka_767::heading_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_767.heading_angle)
  return heading_angle_;
}
void Lka_767::set_heading_angle(double value) {
  set_has_heading_angle();
  heading_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_767.heading_angle)
}

// optional double view_range = 2;
bool Lka_767::has_view_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Lka_767::set_has_view_range() {
  _has_bits_[0] |= 0x00000002u;
}
void Lka_767::clear_has_view_range() {
  _has_bits_[0] &= ~0x00000002u;
}
void Lka_767::clear_view_range() {
  view_range_ = 0;
  clear_has_view_range();
}
double Lka_767::view_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_767.view_range)
  return view_range_;
}
void Lka_767::set_view_range(double value) {
  set_has_view_range();
  view_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_767.view_range)
}

// optional bool view_range_availability = 3;
bool Lka_767::has_view_range_availability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Lka_767::set_has_view_range_availability() {
  _has_bits_[0] |= 0x00000004u;
}
void Lka_767::clear_has_view_range_availability() {
  _has_bits_[0] &= ~0x00000004u;
}
void Lka_767::clear_view_range_availability() {
  view_range_availability_ = false;
  clear_has_view_range_availability();
}
bool Lka_767::view_range_availability() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_767.view_range_availability)
  return view_range_availability_;
}
void Lka_767::set_view_range_availability(bool value) {
  set_has_view_range_availability();
  view_range_availability_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_767.view_range_availability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lka_766::kLaneTypeFieldNumber;
const int Lka_766::kQualityFieldNumber;
const int Lka_766::kModelDegreeFieldNumber;
const int Lka_766::kPositionFieldNumber;
const int Lka_766::kCurvatureFieldNumber;
const int Lka_766::kCurvatureDerivativeFieldNumber;
const int Lka_766::kWidthLeftMarkingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lka_766::Lka_766()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Lka_766)
}
Lka_766::Lka_766(const Lka_766& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_type_, &from.lane_type_,
    reinterpret_cast<char*>(&model_degree_) -
    reinterpret_cast<char*>(&lane_type_) + sizeof(model_degree_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Lka_766)
}

void Lka_766::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lane_type_, 0, reinterpret_cast<char*>(&model_degree_) -
    reinterpret_cast<char*>(&lane_type_) + sizeof(model_degree_));
}

Lka_766::~Lka_766() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Lka_766)
  SharedDtor();
}

void Lka_766::SharedDtor() {
}

void Lka_766::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lka_766::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lka_766& Lka_766::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lka_766* Lka_766::New(::google::protobuf::Arena* arena) const {
  Lka_766* n = new Lka_766;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lka_766::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Lka_766)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&lane_type_, 0, reinterpret_cast<char*>(&model_degree_) -
      reinterpret_cast<char*>(&lane_type_) + sizeof(model_degree_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lka_766::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Lka_766)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lane_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lane_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 model_degree = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_model_degree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curvature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_curvature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curvature_derivative = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_curvature_derivative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width_left_marking = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_width_left_marking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_left_marking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Lka_766)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Lka_766)
  return false;
#undef DO_
}

void Lka_766::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Lka_766)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lane_type(), output);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->model_degree(), output);
  }

  // optional double position = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->position(), output);
  }

  // optional double curvature = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->curvature(), output);
  }

  // optional double curvature_derivative = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->curvature_derivative(), output);
  }

  // optional double width_left_marking = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->width_left_marking(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Lka_766)
}

::google::protobuf::uint8* Lka_766::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Lka_766)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lane_type(), target);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->model_degree(), target);
  }

  // optional double position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->position(), target);
  }

  // optional double curvature = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->curvature(), target);
  }

  // optional double curvature_derivative = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->curvature_derivative(), target);
  }

  // optional double width_left_marking = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->width_left_marking(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Lka_766)
  return target;
}

size_t Lka_766::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Lka_766)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 lane_type = 1;
    if (has_lane_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_type());
    }

    // optional int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional double position = 4;
    if (has_position()) {
      total_size += 1 + 8;
    }

    // optional double curvature = 5;
    if (has_curvature()) {
      total_size += 1 + 8;
    }

    // optional double curvature_derivative = 6;
    if (has_curvature_derivative()) {
      total_size += 1 + 8;
    }

    // optional double width_left_marking = 7;
    if (has_width_left_marking()) {
      total_size += 1 + 8;
    }

    // optional int32 model_degree = 3;
    if (has_model_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_degree());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lka_766::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Lka_766)
  GOOGLE_DCHECK_NE(&from, this);
  const Lka_766* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lka_766>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Lka_766)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Lka_766)
    MergeFrom(*source);
  }
}

void Lka_766::MergeFrom(const Lka_766& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Lka_766)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      lane_type_ = from.lane_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000008u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000010u) {
      curvature_derivative_ = from.curvature_derivative_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_left_marking_ = from.width_left_marking_;
    }
    if (cached_has_bits & 0x00000040u) {
      model_degree_ = from.model_degree_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lka_766::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Lka_766)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lka_766::CopyFrom(const Lka_766& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Lka_766)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lka_766::IsInitialized() const {
  return true;
}

void Lka_766::Swap(Lka_766* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lka_766::InternalSwap(Lka_766* other) {
  std::swap(lane_type_, other->lane_type_);
  std::swap(quality_, other->quality_);
  std::swap(position_, other->position_);
  std::swap(curvature_, other->curvature_);
  std::swap(curvature_derivative_, other->curvature_derivative_);
  std::swap(width_left_marking_, other->width_left_marking_);
  std::swap(model_degree_, other->model_degree_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lka_766::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lka_766

// optional int32 lane_type = 1;
bool Lka_766::has_lane_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Lka_766::set_has_lane_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Lka_766::clear_has_lane_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Lka_766::clear_lane_type() {
  lane_type_ = 0;
  clear_has_lane_type();
}
::google::protobuf::int32 Lka_766::lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.lane_type)
  return lane_type_;
}
void Lka_766::set_lane_type(::google::protobuf::int32 value) {
  set_has_lane_type();
  lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.lane_type)
}

// optional int32 quality = 2;
bool Lka_766::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Lka_766::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
void Lka_766::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
void Lka_766::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
::google::protobuf::int32 Lka_766::quality() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.quality)
  return quality_;
}
void Lka_766::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.quality)
}

// optional int32 model_degree = 3;
bool Lka_766::has_model_degree() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Lka_766::set_has_model_degree() {
  _has_bits_[0] |= 0x00000040u;
}
void Lka_766::clear_has_model_degree() {
  _has_bits_[0] &= ~0x00000040u;
}
void Lka_766::clear_model_degree() {
  model_degree_ = 0;
  clear_has_model_degree();
}
::google::protobuf::int32 Lka_766::model_degree() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.model_degree)
  return model_degree_;
}
void Lka_766::set_model_degree(::google::protobuf::int32 value) {
  set_has_model_degree();
  model_degree_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.model_degree)
}

// optional double position = 4;
bool Lka_766::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Lka_766::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void Lka_766::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void Lka_766::clear_position() {
  position_ = 0;
  clear_has_position();
}
double Lka_766::position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.position)
  return position_;
}
void Lka_766::set_position(double value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.position)
}

// optional double curvature = 5;
bool Lka_766::has_curvature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Lka_766::set_has_curvature() {
  _has_bits_[0] |= 0x00000008u;
}
void Lka_766::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000008u;
}
void Lka_766::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
double Lka_766::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.curvature)
  return curvature_;
}
void Lka_766::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.curvature)
}

// optional double curvature_derivative = 6;
bool Lka_766::has_curvature_derivative() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Lka_766::set_has_curvature_derivative() {
  _has_bits_[0] |= 0x00000010u;
}
void Lka_766::clear_has_curvature_derivative() {
  _has_bits_[0] &= ~0x00000010u;
}
void Lka_766::clear_curvature_derivative() {
  curvature_derivative_ = 0;
  clear_has_curvature_derivative();
}
double Lka_766::curvature_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.curvature_derivative)
  return curvature_derivative_;
}
void Lka_766::set_curvature_derivative(double value) {
  set_has_curvature_derivative();
  curvature_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.curvature_derivative)
}

// optional double width_left_marking = 7;
bool Lka_766::has_width_left_marking() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Lka_766::set_has_width_left_marking() {
  _has_bits_[0] |= 0x00000020u;
}
void Lka_766::clear_has_width_left_marking() {
  _has_bits_[0] &= ~0x00000020u;
}
void Lka_766::clear_width_left_marking() {
  width_left_marking_ = 0;
  clear_has_width_left_marking();
}
double Lka_766::width_left_marking() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.width_left_marking)
  return width_left_marking_;
}
void Lka_766::set_width_left_marking(double value) {
  set_has_width_left_marking();
  width_left_marking_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.width_left_marking)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Next_76d::kHeadingAngleFieldNumber;
const int Next_76d::kViewRangeFieldNumber;
const int Next_76d::kViewRangeAvailabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Next_76d::Next_76d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Next_76d)
}
Next_76d::Next_76d(const Next_76d& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heading_angle_, &from.heading_angle_,
    reinterpret_cast<char*>(&view_range_availability_) -
    reinterpret_cast<char*>(&heading_angle_) + sizeof(view_range_availability_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Next_76d)
}

void Next_76d::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&heading_angle_, 0, reinterpret_cast<char*>(&view_range_availability_) -
    reinterpret_cast<char*>(&heading_angle_) + sizeof(view_range_availability_));
}

Next_76d::~Next_76d() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Next_76d)
  SharedDtor();
}

void Next_76d::SharedDtor() {
}

void Next_76d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Next_76d::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Next_76d& Next_76d::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Next_76d* Next_76d::New(::google::protobuf::Arena* arena) const {
  Next_76d* n = new Next_76d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Next_76d::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Next_76d)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&heading_angle_, 0, reinterpret_cast<char*>(&view_range_availability_) -
      reinterpret_cast<char*>(&heading_angle_) + sizeof(view_range_availability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Next_76d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Next_76d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double heading_angle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_heading_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double view_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_view_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool view_range_availability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_view_range_availability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_range_availability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Next_76d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Next_76d)
  return false;
#undef DO_
}

void Next_76d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Next_76d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->heading_angle(), output);
  }

  // optional double view_range = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->view_range(), output);
  }

  // optional bool view_range_availability = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->view_range_availability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Next_76d)
}

::google::protobuf::uint8* Next_76d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Next_76d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->heading_angle(), target);
  }

  // optional double view_range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->view_range(), target);
  }

  // optional bool view_range_availability = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->view_range_availability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Next_76d)
  return target;
}

size_t Next_76d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Next_76d)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double heading_angle = 1;
    if (has_heading_angle()) {
      total_size += 1 + 8;
    }

    // optional double view_range = 2;
    if (has_view_range()) {
      total_size += 1 + 8;
    }

    // optional bool view_range_availability = 3;
    if (has_view_range_availability()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Next_76d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Next_76d)
  GOOGLE_DCHECK_NE(&from, this);
  const Next_76d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Next_76d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Next_76d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Next_76d)
    MergeFrom(*source);
  }
}

void Next_76d::MergeFrom(const Next_76d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Next_76d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      heading_angle_ = from.heading_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      view_range_ = from.view_range_;
    }
    if (cached_has_bits & 0x00000004u) {
      view_range_availability_ = from.view_range_availability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Next_76d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Next_76d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Next_76d::CopyFrom(const Next_76d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Next_76d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Next_76d::IsInitialized() const {
  return true;
}

void Next_76d::Swap(Next_76d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Next_76d::InternalSwap(Next_76d* other) {
  std::swap(heading_angle_, other->heading_angle_);
  std::swap(view_range_, other->view_range_);
  std::swap(view_range_availability_, other->view_range_availability_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Next_76d::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Next_76d

// optional double heading_angle = 1;
bool Next_76d::has_heading_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Next_76d::set_has_heading_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void Next_76d::clear_has_heading_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void Next_76d::clear_heading_angle() {
  heading_angle_ = 0;
  clear_has_heading_angle();
}
double Next_76d::heading_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76d.heading_angle)
  return heading_angle_;
}
void Next_76d::set_heading_angle(double value) {
  set_has_heading_angle();
  heading_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76d.heading_angle)
}

// optional double view_range = 2;
bool Next_76d::has_view_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Next_76d::set_has_view_range() {
  _has_bits_[0] |= 0x00000002u;
}
void Next_76d::clear_has_view_range() {
  _has_bits_[0] &= ~0x00000002u;
}
void Next_76d::clear_view_range() {
  view_range_ = 0;
  clear_has_view_range();
}
double Next_76d::view_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76d.view_range)
  return view_range_;
}
void Next_76d::set_view_range(double value) {
  set_has_view_range();
  view_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76d.view_range)
}

// optional bool view_range_availability = 3;
bool Next_76d::has_view_range_availability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Next_76d::set_has_view_range_availability() {
  _has_bits_[0] |= 0x00000004u;
}
void Next_76d::clear_has_view_range_availability() {
  _has_bits_[0] &= ~0x00000004u;
}
void Next_76d::clear_view_range_availability() {
  view_range_availability_ = false;
  clear_has_view_range_availability();
}
bool Next_76d::view_range_availability() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76d.view_range_availability)
  return view_range_availability_;
}
void Next_76d::set_view_range_availability(bool value) {
  set_has_view_range_availability();
  view_range_availability_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76d.view_range_availability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Details_739::kObstacleIdFieldNumber;
const int Details_739::kObstaclePosXFieldNumber;
const int Details_739::kReseved2FieldNumber;
const int Details_739::kObstaclePosYFieldNumber;
const int Details_739::kBlinkerInfoFieldNumber;
const int Details_739::kCutInAndOutFieldNumber;
const int Details_739::kObstacleRelVelXFieldNumber;
const int Details_739::kObstacleTypeFieldNumber;
const int Details_739::kReserved3FieldNumber;
const int Details_739::kObstacleStatusFieldNumber;
const int Details_739::kObstacleBrakeLightsFieldNumber;
const int Details_739::kReserved4FieldNumber;
const int Details_739::kObstacleValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Details_739::Details_739()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Details_739)
}
Details_739::Details_739(const Details_739& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&obstacle_pos_x_, &from.obstacle_pos_x_,
    reinterpret_cast<char*>(&obstacle_valid_) -
    reinterpret_cast<char*>(&obstacle_pos_x_) + sizeof(obstacle_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Details_739)
}

void Details_739::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&obstacle_pos_x_, 0, reinterpret_cast<char*>(&obstacle_valid_) -
    reinterpret_cast<char*>(&obstacle_pos_x_) + sizeof(obstacle_valid_));
}

Details_739::~Details_739() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Details_739)
  SharedDtor();
}

void Details_739::SharedDtor() {
}

void Details_739::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Details_739::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Details_739& Details_739::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Details_739* Details_739::New(::google::protobuf::Arena* arena) const {
  Details_739* n = new Details_739;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Details_739::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Details_739)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&obstacle_pos_x_, 0, reinterpret_cast<char*>(&obstacle_type_) -
      reinterpret_cast<char*>(&obstacle_pos_x_) + sizeof(obstacle_type_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&obstacle_status_, 0, reinterpret_cast<char*>(&obstacle_valid_) -
      reinterpret_cast<char*>(&obstacle_status_) + sizeof(obstacle_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Details_739::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Details_739)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 obstacle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_obstacle_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_pos_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_obstacle_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reseved_2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_reseved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reseved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_obstacle_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 blinker_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_blinker_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blinker_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cut_in_and_out = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_cut_in_and_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cut_in_and_out_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_rel_vel_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_obstacle_rel_vel_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_rel_vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obstacle_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_obstacle_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_3 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_reserved_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obstacle_status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_obstacle_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obstacle_brake_lights = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_obstacle_brake_lights();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obstacle_brake_lights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_4 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_reserved_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obstacle_valid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_obstacle_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Details_739)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Details_739)
  return false;
#undef DO_
}

void Details_739::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Details_739)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 obstacle_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obstacle_id(), output);
  }

  // optional double obstacle_pos_x = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->obstacle_pos_x(), output);
  }

  // optional int32 reseved_2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reseved_2(), output);
  }

  // optional double obstacle_pos_y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->obstacle_pos_y(), output);
  }

  // optional int32 blinker_info = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->blinker_info(), output);
  }

  // optional int32 cut_in_and_out = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cut_in_and_out(), output);
  }

  // optional double obstacle_rel_vel_x = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->obstacle_rel_vel_x(), output);
  }

  // optional int32 obstacle_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->obstacle_type(), output);
  }

  // optional bool reserved_3 = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->reserved_3(), output);
  }

  // optional int32 obstacle_status = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->obstacle_status(), output);
  }

  // optional bool obstacle_brake_lights = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->obstacle_brake_lights(), output);
  }

  // optional int32 reserved_4 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reserved_4(), output);
  }

  // optional int32 obstacle_valid = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->obstacle_valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Details_739)
}

::google::protobuf::uint8* Details_739::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Details_739)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 obstacle_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obstacle_id(), target);
  }

  // optional double obstacle_pos_x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->obstacle_pos_x(), target);
  }

  // optional int32 reseved_2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reseved_2(), target);
  }

  // optional double obstacle_pos_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->obstacle_pos_y(), target);
  }

  // optional int32 blinker_info = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->blinker_info(), target);
  }

  // optional int32 cut_in_and_out = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cut_in_and_out(), target);
  }

  // optional double obstacle_rel_vel_x = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->obstacle_rel_vel_x(), target);
  }

  // optional int32 obstacle_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->obstacle_type(), target);
  }

  // optional bool reserved_3 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->reserved_3(), target);
  }

  // optional int32 obstacle_status = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->obstacle_status(), target);
  }

  // optional bool obstacle_brake_lights = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->obstacle_brake_lights(), target);
  }

  // optional int32 reserved_4 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->reserved_4(), target);
  }

  // optional int32 obstacle_valid = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->obstacle_valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Details_739)
  return target;
}

size_t Details_739::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Details_739)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double obstacle_pos_x = 2;
    if (has_obstacle_pos_x()) {
      total_size += 1 + 8;
    }

    // optional int32 obstacle_id = 1;
    if (has_obstacle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacle_id());
    }

    // optional int32 reseved_2 = 3;
    if (has_reseved_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reseved_2());
    }

    // optional double obstacle_pos_y = 4;
    if (has_obstacle_pos_y()) {
      total_size += 1 + 8;
    }

    // optional int32 blinker_info = 5;
    if (has_blinker_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blinker_info());
    }

    // optional int32 cut_in_and_out = 6;
    if (has_cut_in_and_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cut_in_and_out());
    }

    // optional double obstacle_rel_vel_x = 7;
    if (has_obstacle_rel_vel_x()) {
      total_size += 1 + 8;
    }

    // optional int32 obstacle_type = 8;
    if (has_obstacle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacle_type());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 obstacle_status = 10;
    if (has_obstacle_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacle_status());
    }

    // optional bool reserved_3 = 9;
    if (has_reserved_3()) {
      total_size += 1 + 1;
    }

    // optional bool obstacle_brake_lights = 11;
    if (has_obstacle_brake_lights()) {
      total_size += 1 + 1;
    }

    // optional int32 reserved_4 = 12;
    if (has_reserved_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_4());
    }

    // optional int32 obstacle_valid = 13;
    if (has_obstacle_valid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacle_valid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Details_739::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Details_739)
  GOOGLE_DCHECK_NE(&from, this);
  const Details_739* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Details_739>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Details_739)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Details_739)
    MergeFrom(*source);
  }
}

void Details_739::MergeFrom(const Details_739& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Details_739)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      obstacle_pos_x_ = from.obstacle_pos_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      obstacle_id_ = from.obstacle_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      reseved_2_ = from.reseved_2_;
    }
    if (cached_has_bits & 0x00000008u) {
      obstacle_pos_y_ = from.obstacle_pos_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      blinker_info_ = from.blinker_info_;
    }
    if (cached_has_bits & 0x00000020u) {
      cut_in_and_out_ = from.cut_in_and_out_;
    }
    if (cached_has_bits & 0x00000040u) {
      obstacle_rel_vel_x_ = from.obstacle_rel_vel_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      obstacle_type_ = from.obstacle_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      obstacle_status_ = from.obstacle_status_;
    }
    if (cached_has_bits & 0x00000200u) {
      reserved_3_ = from.reserved_3_;
    }
    if (cached_has_bits & 0x00000400u) {
      obstacle_brake_lights_ = from.obstacle_brake_lights_;
    }
    if (cached_has_bits & 0x00000800u) {
      reserved_4_ = from.reserved_4_;
    }
    if (cached_has_bits & 0x00001000u) {
      obstacle_valid_ = from.obstacle_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Details_739::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Details_739)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Details_739::CopyFrom(const Details_739& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Details_739)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Details_739::IsInitialized() const {
  return true;
}

void Details_739::Swap(Details_739* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Details_739::InternalSwap(Details_739* other) {
  std::swap(obstacle_pos_x_, other->obstacle_pos_x_);
  std::swap(obstacle_id_, other->obstacle_id_);
  std::swap(reseved_2_, other->reseved_2_);
  std::swap(obstacle_pos_y_, other->obstacle_pos_y_);
  std::swap(blinker_info_, other->blinker_info_);
  std::swap(cut_in_and_out_, other->cut_in_and_out_);
  std::swap(obstacle_rel_vel_x_, other->obstacle_rel_vel_x_);
  std::swap(obstacle_type_, other->obstacle_type_);
  std::swap(obstacle_status_, other->obstacle_status_);
  std::swap(reserved_3_, other->reserved_3_);
  std::swap(obstacle_brake_lights_, other->obstacle_brake_lights_);
  std::swap(reserved_4_, other->reserved_4_);
  std::swap(obstacle_valid_, other->obstacle_valid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Details_739::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Details_739

// optional int32 obstacle_id = 1;
bool Details_739::has_obstacle_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Details_739::set_has_obstacle_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Details_739::clear_has_obstacle_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Details_739::clear_obstacle_id() {
  obstacle_id_ = 0;
  clear_has_obstacle_id();
}
::google::protobuf::int32 Details_739::obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_id)
  return obstacle_id_;
}
void Details_739::set_obstacle_id(::google::protobuf::int32 value) {
  set_has_obstacle_id();
  obstacle_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_id)
}

// optional double obstacle_pos_x = 2;
bool Details_739::has_obstacle_pos_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Details_739::set_has_obstacle_pos_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Details_739::clear_has_obstacle_pos_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Details_739::clear_obstacle_pos_x() {
  obstacle_pos_x_ = 0;
  clear_has_obstacle_pos_x();
}
double Details_739::obstacle_pos_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_pos_x)
  return obstacle_pos_x_;
}
void Details_739::set_obstacle_pos_x(double value) {
  set_has_obstacle_pos_x();
  obstacle_pos_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_pos_x)
}

// optional int32 reseved_2 = 3;
bool Details_739::has_reseved_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Details_739::set_has_reseved_2() {
  _has_bits_[0] |= 0x00000004u;
}
void Details_739::clear_has_reseved_2() {
  _has_bits_[0] &= ~0x00000004u;
}
void Details_739::clear_reseved_2() {
  reseved_2_ = 0;
  clear_has_reseved_2();
}
::google::protobuf::int32 Details_739::reseved_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.reseved_2)
  return reseved_2_;
}
void Details_739::set_reseved_2(::google::protobuf::int32 value) {
  set_has_reseved_2();
  reseved_2_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.reseved_2)
}

// optional double obstacle_pos_y = 4;
bool Details_739::has_obstacle_pos_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Details_739::set_has_obstacle_pos_y() {
  _has_bits_[0] |= 0x00000008u;
}
void Details_739::clear_has_obstacle_pos_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void Details_739::clear_obstacle_pos_y() {
  obstacle_pos_y_ = 0;
  clear_has_obstacle_pos_y();
}
double Details_739::obstacle_pos_y() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_pos_y)
  return obstacle_pos_y_;
}
void Details_739::set_obstacle_pos_y(double value) {
  set_has_obstacle_pos_y();
  obstacle_pos_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_pos_y)
}

// optional int32 blinker_info = 5;
bool Details_739::has_blinker_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Details_739::set_has_blinker_info() {
  _has_bits_[0] |= 0x00000010u;
}
void Details_739::clear_has_blinker_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void Details_739::clear_blinker_info() {
  blinker_info_ = 0;
  clear_has_blinker_info();
}
::google::protobuf::int32 Details_739::blinker_info() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.blinker_info)
  return blinker_info_;
}
void Details_739::set_blinker_info(::google::protobuf::int32 value) {
  set_has_blinker_info();
  blinker_info_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.blinker_info)
}

// optional int32 cut_in_and_out = 6;
bool Details_739::has_cut_in_and_out() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Details_739::set_has_cut_in_and_out() {
  _has_bits_[0] |= 0x00000020u;
}
void Details_739::clear_has_cut_in_and_out() {
  _has_bits_[0] &= ~0x00000020u;
}
void Details_739::clear_cut_in_and_out() {
  cut_in_and_out_ = 0;
  clear_has_cut_in_and_out();
}
::google::protobuf::int32 Details_739::cut_in_and_out() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.cut_in_and_out)
  return cut_in_and_out_;
}
void Details_739::set_cut_in_and_out(::google::protobuf::int32 value) {
  set_has_cut_in_and_out();
  cut_in_and_out_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.cut_in_and_out)
}

// optional double obstacle_rel_vel_x = 7;
bool Details_739::has_obstacle_rel_vel_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Details_739::set_has_obstacle_rel_vel_x() {
  _has_bits_[0] |= 0x00000040u;
}
void Details_739::clear_has_obstacle_rel_vel_x() {
  _has_bits_[0] &= ~0x00000040u;
}
void Details_739::clear_obstacle_rel_vel_x() {
  obstacle_rel_vel_x_ = 0;
  clear_has_obstacle_rel_vel_x();
}
double Details_739::obstacle_rel_vel_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_rel_vel_x)
  return obstacle_rel_vel_x_;
}
void Details_739::set_obstacle_rel_vel_x(double value) {
  set_has_obstacle_rel_vel_x();
  obstacle_rel_vel_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_rel_vel_x)
}

// optional int32 obstacle_type = 8;
bool Details_739::has_obstacle_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Details_739::set_has_obstacle_type() {
  _has_bits_[0] |= 0x00000080u;
}
void Details_739::clear_has_obstacle_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void Details_739::clear_obstacle_type() {
  obstacle_type_ = 0;
  clear_has_obstacle_type();
}
::google::protobuf::int32 Details_739::obstacle_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_type)
  return obstacle_type_;
}
void Details_739::set_obstacle_type(::google::protobuf::int32 value) {
  set_has_obstacle_type();
  obstacle_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_type)
}

// optional bool reserved_3 = 9;
bool Details_739::has_reserved_3() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Details_739::set_has_reserved_3() {
  _has_bits_[0] |= 0x00000200u;
}
void Details_739::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00000200u;
}
void Details_739::clear_reserved_3() {
  reserved_3_ = false;
  clear_has_reserved_3();
}
bool Details_739::reserved_3() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.reserved_3)
  return reserved_3_;
}
void Details_739::set_reserved_3(bool value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.reserved_3)
}

// optional int32 obstacle_status = 10;
bool Details_739::has_obstacle_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Details_739::set_has_obstacle_status() {
  _has_bits_[0] |= 0x00000100u;
}
void Details_739::clear_has_obstacle_status() {
  _has_bits_[0] &= ~0x00000100u;
}
void Details_739::clear_obstacle_status() {
  obstacle_status_ = 0;
  clear_has_obstacle_status();
}
::google::protobuf::int32 Details_739::obstacle_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_status)
  return obstacle_status_;
}
void Details_739::set_obstacle_status(::google::protobuf::int32 value) {
  set_has_obstacle_status();
  obstacle_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_status)
}

// optional bool obstacle_brake_lights = 11;
bool Details_739::has_obstacle_brake_lights() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Details_739::set_has_obstacle_brake_lights() {
  _has_bits_[0] |= 0x00000400u;
}
void Details_739::clear_has_obstacle_brake_lights() {
  _has_bits_[0] &= ~0x00000400u;
}
void Details_739::clear_obstacle_brake_lights() {
  obstacle_brake_lights_ = false;
  clear_has_obstacle_brake_lights();
}
bool Details_739::obstacle_brake_lights() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_brake_lights)
  return obstacle_brake_lights_;
}
void Details_739::set_obstacle_brake_lights(bool value) {
  set_has_obstacle_brake_lights();
  obstacle_brake_lights_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_brake_lights)
}

// optional int32 reserved_4 = 12;
bool Details_739::has_reserved_4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Details_739::set_has_reserved_4() {
  _has_bits_[0] |= 0x00000800u;
}
void Details_739::clear_has_reserved_4() {
  _has_bits_[0] &= ~0x00000800u;
}
void Details_739::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
::google::protobuf::int32 Details_739::reserved_4() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.reserved_4)
  return reserved_4_;
}
void Details_739::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.reserved_4)
}

// optional int32 obstacle_valid = 13;
bool Details_739::has_obstacle_valid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Details_739::set_has_obstacle_valid() {
  _has_bits_[0] |= 0x00001000u;
}
void Details_739::clear_has_obstacle_valid() {
  _has_bits_[0] &= ~0x00001000u;
}
void Details_739::clear_obstacle_valid() {
  obstacle_valid_ = 0;
  clear_has_obstacle_valid();
}
::google::protobuf::int32 Details_739::obstacle_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_valid)
  return obstacle_valid_;
}
void Details_739::set_obstacle_valid(::google::protobuf::int32 value) {
  set_has_obstacle_valid();
  obstacle_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_valid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Details_73a::kObstacleLengthFieldNumber;
const int Details_73a::kObstacleWidthFieldNumber;
const int Details_73a::kObstacleAgeFieldNumber;
const int Details_73a::kObstacleLaneFieldNumber;
const int Details_73a::kCipvFlagFieldNumber;
const int Details_73a::kReserved5FieldNumber;
const int Details_73a::kRadarPosXFieldNumber;
const int Details_73a::kRadarVelXFieldNumber;
const int Details_73a::kRadarMatchConfidenceFieldNumber;
const int Details_73a::kReserved6FieldNumber;
const int Details_73a::kMatchedRadarIdFieldNumber;
const int Details_73a::kReserved7FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Details_73a::Details_73a()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Details_73a)
}
Details_73a::Details_73a(const Details_73a& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&obstacle_length_, &from.obstacle_length_,
    reinterpret_cast<char*>(&matched_radar_id_) -
    reinterpret_cast<char*>(&obstacle_length_) + sizeof(matched_radar_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Details_73a)
}

void Details_73a::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&obstacle_length_, 0, reinterpret_cast<char*>(&matched_radar_id_) -
    reinterpret_cast<char*>(&obstacle_length_) + sizeof(matched_radar_id_));
}

Details_73a::~Details_73a() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Details_73a)
  SharedDtor();
}

void Details_73a::SharedDtor() {
}

void Details_73a::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Details_73a::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Details_73a& Details_73a::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Details_73a* Details_73a::New(::google::protobuf::Arena* arena) const {
  Details_73a* n = new Details_73a;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Details_73a::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Details_73a)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&obstacle_length_, 0, reinterpret_cast<char*>(&reserved_5_) -
      reinterpret_cast<char*>(&obstacle_length_) + sizeof(reserved_5_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&reserved_6_, 0, reinterpret_cast<char*>(&matched_radar_id_) -
      reinterpret_cast<char*>(&reserved_6_) + sizeof(matched_radar_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Details_73a::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Details_73a)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double obstacle_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_obstacle_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_obstacle_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obstacle_age = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_obstacle_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obstacle_lane = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_obstacle_lane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cipv_flag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_cipv_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cipv_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_5 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_reserved_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double radar_pos_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_radar_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radar_pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double radar_vel_x = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_radar_vel_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radar_vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 radar_match_confidence = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_radar_match_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radar_match_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_6 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_reserved_6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 matched_radar_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_matched_radar_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matched_radar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_7 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_reserved_7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Details_73a)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Details_73a)
  return false;
#undef DO_
}

void Details_73a::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Details_73a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double obstacle_length = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->obstacle_length(), output);
  }

  // optional double obstacle_width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->obstacle_width(), output);
  }

  // optional int32 obstacle_age = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->obstacle_age(), output);
  }

  // optional int32 obstacle_lane = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->obstacle_lane(), output);
  }

  // optional bool cipv_flag = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cipv_flag(), output);
  }

  // optional bool reserved_5 = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->reserved_5(), output);
  }

  // optional double radar_pos_x = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->radar_pos_x(), output);
  }

  // optional double radar_vel_x = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->radar_vel_x(), output);
  }

  // optional int32 radar_match_confidence = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->radar_match_confidence(), output);
  }

  // optional bool reserved_6 = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->reserved_6(), output);
  }

  // optional int32 matched_radar_id = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->matched_radar_id(), output);
  }

  // optional bool reserved_7 = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->reserved_7(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Details_73a)
}

::google::protobuf::uint8* Details_73a::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Details_73a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double obstacle_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->obstacle_length(), target);
  }

  // optional double obstacle_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->obstacle_width(), target);
  }

  // optional int32 obstacle_age = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->obstacle_age(), target);
  }

  // optional int32 obstacle_lane = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->obstacle_lane(), target);
  }

  // optional bool cipv_flag = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cipv_flag(), target);
  }

  // optional bool reserved_5 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->reserved_5(), target);
  }

  // optional double radar_pos_x = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->radar_pos_x(), target);
  }

  // optional double radar_vel_x = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->radar_vel_x(), target);
  }

  // optional int32 radar_match_confidence = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->radar_match_confidence(), target);
  }

  // optional bool reserved_6 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->reserved_6(), target);
  }

  // optional int32 matched_radar_id = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->matched_radar_id(), target);
  }

  // optional bool reserved_7 = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->reserved_7(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Details_73a)
  return target;
}

size_t Details_73a::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Details_73a)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double obstacle_length = 1;
    if (has_obstacle_length()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_width = 2;
    if (has_obstacle_width()) {
      total_size += 1 + 8;
    }

    // optional int32 obstacle_age = 3;
    if (has_obstacle_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacle_age());
    }

    // optional int32 obstacle_lane = 4;
    if (has_obstacle_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacle_lane());
    }

    // optional double radar_pos_x = 7;
    if (has_radar_pos_x()) {
      total_size += 1 + 8;
    }

    // optional double radar_vel_x = 8;
    if (has_radar_vel_x()) {
      total_size += 1 + 8;
    }

    // optional bool cipv_flag = 5;
    if (has_cipv_flag()) {
      total_size += 1 + 1;
    }

    // optional bool reserved_5 = 6;
    if (has_reserved_5()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool reserved_6 = 10;
    if (has_reserved_6()) {
      total_size += 1 + 1;
    }

    // optional bool reserved_7 = 12;
    if (has_reserved_7()) {
      total_size += 1 + 1;
    }

    // optional int32 radar_match_confidence = 9;
    if (has_radar_match_confidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radar_match_confidence());
    }

    // optional int32 matched_radar_id = 11;
    if (has_matched_radar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matched_radar_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Details_73a::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Details_73a)
  GOOGLE_DCHECK_NE(&from, this);
  const Details_73a* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Details_73a>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Details_73a)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Details_73a)
    MergeFrom(*source);
  }
}

void Details_73a::MergeFrom(const Details_73a& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Details_73a)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      obstacle_length_ = from.obstacle_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      obstacle_width_ = from.obstacle_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      obstacle_age_ = from.obstacle_age_;
    }
    if (cached_has_bits & 0x00000008u) {
      obstacle_lane_ = from.obstacle_lane_;
    }
    if (cached_has_bits & 0x00000010u) {
      radar_pos_x_ = from.radar_pos_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      radar_vel_x_ = from.radar_vel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      cipv_flag_ = from.cipv_flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      reserved_5_ = from.reserved_5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      reserved_6_ = from.reserved_6_;
    }
    if (cached_has_bits & 0x00000200u) {
      reserved_7_ = from.reserved_7_;
    }
    if (cached_has_bits & 0x00000400u) {
      radar_match_confidence_ = from.radar_match_confidence_;
    }
    if (cached_has_bits & 0x00000800u) {
      matched_radar_id_ = from.matched_radar_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Details_73a::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Details_73a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Details_73a::CopyFrom(const Details_73a& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Details_73a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Details_73a::IsInitialized() const {
  return true;
}

void Details_73a::Swap(Details_73a* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Details_73a::InternalSwap(Details_73a* other) {
  std::swap(obstacle_length_, other->obstacle_length_);
  std::swap(obstacle_width_, other->obstacle_width_);
  std::swap(obstacle_age_, other->obstacle_age_);
  std::swap(obstacle_lane_, other->obstacle_lane_);
  std::swap(radar_pos_x_, other->radar_pos_x_);
  std::swap(radar_vel_x_, other->radar_vel_x_);
  std::swap(cipv_flag_, other->cipv_flag_);
  std::swap(reserved_5_, other->reserved_5_);
  std::swap(reserved_6_, other->reserved_6_);
  std::swap(reserved_7_, other->reserved_7_);
  std::swap(radar_match_confidence_, other->radar_match_confidence_);
  std::swap(matched_radar_id_, other->matched_radar_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Details_73a::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Details_73a

// optional double obstacle_length = 1;
bool Details_73a::has_obstacle_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Details_73a::set_has_obstacle_length() {
  _has_bits_[0] |= 0x00000001u;
}
void Details_73a::clear_has_obstacle_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void Details_73a::clear_obstacle_length() {
  obstacle_length_ = 0;
  clear_has_obstacle_length();
}
double Details_73a::obstacle_length() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.obstacle_length)
  return obstacle_length_;
}
void Details_73a::set_obstacle_length(double value) {
  set_has_obstacle_length();
  obstacle_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.obstacle_length)
}

// optional double obstacle_width = 2;
bool Details_73a::has_obstacle_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Details_73a::set_has_obstacle_width() {
  _has_bits_[0] |= 0x00000002u;
}
void Details_73a::clear_has_obstacle_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void Details_73a::clear_obstacle_width() {
  obstacle_width_ = 0;
  clear_has_obstacle_width();
}
double Details_73a::obstacle_width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.obstacle_width)
  return obstacle_width_;
}
void Details_73a::set_obstacle_width(double value) {
  set_has_obstacle_width();
  obstacle_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.obstacle_width)
}

// optional int32 obstacle_age = 3;
bool Details_73a::has_obstacle_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Details_73a::set_has_obstacle_age() {
  _has_bits_[0] |= 0x00000004u;
}
void Details_73a::clear_has_obstacle_age() {
  _has_bits_[0] &= ~0x00000004u;
}
void Details_73a::clear_obstacle_age() {
  obstacle_age_ = 0;
  clear_has_obstacle_age();
}
::google::protobuf::int32 Details_73a::obstacle_age() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.obstacle_age)
  return obstacle_age_;
}
void Details_73a::set_obstacle_age(::google::protobuf::int32 value) {
  set_has_obstacle_age();
  obstacle_age_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.obstacle_age)
}

// optional int32 obstacle_lane = 4;
bool Details_73a::has_obstacle_lane() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Details_73a::set_has_obstacle_lane() {
  _has_bits_[0] |= 0x00000008u;
}
void Details_73a::clear_has_obstacle_lane() {
  _has_bits_[0] &= ~0x00000008u;
}
void Details_73a::clear_obstacle_lane() {
  obstacle_lane_ = 0;
  clear_has_obstacle_lane();
}
::google::protobuf::int32 Details_73a::obstacle_lane() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.obstacle_lane)
  return obstacle_lane_;
}
void Details_73a::set_obstacle_lane(::google::protobuf::int32 value) {
  set_has_obstacle_lane();
  obstacle_lane_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.obstacle_lane)
}

// optional bool cipv_flag = 5;
bool Details_73a::has_cipv_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Details_73a::set_has_cipv_flag() {
  _has_bits_[0] |= 0x00000040u;
}
void Details_73a::clear_has_cipv_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
void Details_73a::clear_cipv_flag() {
  cipv_flag_ = false;
  clear_has_cipv_flag();
}
bool Details_73a::cipv_flag() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.cipv_flag)
  return cipv_flag_;
}
void Details_73a::set_cipv_flag(bool value) {
  set_has_cipv_flag();
  cipv_flag_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.cipv_flag)
}

// optional bool reserved_5 = 6;
bool Details_73a::has_reserved_5() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Details_73a::set_has_reserved_5() {
  _has_bits_[0] |= 0x00000080u;
}
void Details_73a::clear_has_reserved_5() {
  _has_bits_[0] &= ~0x00000080u;
}
void Details_73a::clear_reserved_5() {
  reserved_5_ = false;
  clear_has_reserved_5();
}
bool Details_73a::reserved_5() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.reserved_5)
  return reserved_5_;
}
void Details_73a::set_reserved_5(bool value) {
  set_has_reserved_5();
  reserved_5_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.reserved_5)
}

// optional double radar_pos_x = 7;
bool Details_73a::has_radar_pos_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Details_73a::set_has_radar_pos_x() {
  _has_bits_[0] |= 0x00000010u;
}
void Details_73a::clear_has_radar_pos_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void Details_73a::clear_radar_pos_x() {
  radar_pos_x_ = 0;
  clear_has_radar_pos_x();
}
double Details_73a::radar_pos_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.radar_pos_x)
  return radar_pos_x_;
}
void Details_73a::set_radar_pos_x(double value) {
  set_has_radar_pos_x();
  radar_pos_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.radar_pos_x)
}

// optional double radar_vel_x = 8;
bool Details_73a::has_radar_vel_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Details_73a::set_has_radar_vel_x() {
  _has_bits_[0] |= 0x00000020u;
}
void Details_73a::clear_has_radar_vel_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void Details_73a::clear_radar_vel_x() {
  radar_vel_x_ = 0;
  clear_has_radar_vel_x();
}
double Details_73a::radar_vel_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.radar_vel_x)
  return radar_vel_x_;
}
void Details_73a::set_radar_vel_x(double value) {
  set_has_radar_vel_x();
  radar_vel_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.radar_vel_x)
}

// optional int32 radar_match_confidence = 9;
bool Details_73a::has_radar_match_confidence() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Details_73a::set_has_radar_match_confidence() {
  _has_bits_[0] |= 0x00000400u;
}
void Details_73a::clear_has_radar_match_confidence() {
  _has_bits_[0] &= ~0x00000400u;
}
void Details_73a::clear_radar_match_confidence() {
  radar_match_confidence_ = 0;
  clear_has_radar_match_confidence();
}
::google::protobuf::int32 Details_73a::radar_match_confidence() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.radar_match_confidence)
  return radar_match_confidence_;
}
void Details_73a::set_radar_match_confidence(::google::protobuf::int32 value) {
  set_has_radar_match_confidence();
  radar_match_confidence_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.radar_match_confidence)
}

// optional bool reserved_6 = 10;
bool Details_73a::has_reserved_6() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Details_73a::set_has_reserved_6() {
  _has_bits_[0] |= 0x00000100u;
}
void Details_73a::clear_has_reserved_6() {
  _has_bits_[0] &= ~0x00000100u;
}
void Details_73a::clear_reserved_6() {
  reserved_6_ = false;
  clear_has_reserved_6();
}
bool Details_73a::reserved_6() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.reserved_6)
  return reserved_6_;
}
void Details_73a::set_reserved_6(bool value) {
  set_has_reserved_6();
  reserved_6_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.reserved_6)
}

// optional int32 matched_radar_id = 11;
bool Details_73a::has_matched_radar_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Details_73a::set_has_matched_radar_id() {
  _has_bits_[0] |= 0x00000800u;
}
void Details_73a::clear_has_matched_radar_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void Details_73a::clear_matched_radar_id() {
  matched_radar_id_ = 0;
  clear_has_matched_radar_id();
}
::google::protobuf::int32 Details_73a::matched_radar_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.matched_radar_id)
  return matched_radar_id_;
}
void Details_73a::set_matched_radar_id(::google::protobuf::int32 value) {
  set_has_matched_radar_id();
  matched_radar_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.matched_radar_id)
}

// optional bool reserved_7 = 12;
bool Details_73a::has_reserved_7() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Details_73a::set_has_reserved_7() {
  _has_bits_[0] |= 0x00000200u;
}
void Details_73a::clear_has_reserved_7() {
  _has_bits_[0] &= ~0x00000200u;
}
void Details_73a::clear_reserved_7() {
  reserved_7_ = false;
  clear_has_reserved_7();
}
bool Details_73a::reserved_7() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.reserved_7)
  return reserved_7_;
}
void Details_73a::set_reserved_7(bool value) {
  set_has_reserved_7();
  reserved_7_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.reserved_7)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Details_73b::kObstacleAngleRateFieldNumber;
const int Details_73b::kObstacleScaleChangeFieldNumber;
const int Details_73b::kObjectAccelXFieldNumber;
const int Details_73b::kReserved8FieldNumber;
const int Details_73b::kObstacleReplacedFieldNumber;
const int Details_73b::kReserved9FieldNumber;
const int Details_73b::kObstacleAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Details_73b::Details_73b()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Details_73b)
}
Details_73b::Details_73b(const Details_73b& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&obstacle_angle_rate_, &from.obstacle_angle_rate_,
    reinterpret_cast<char*>(&reserved_9_) -
    reinterpret_cast<char*>(&obstacle_angle_rate_) + sizeof(reserved_9_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Details_73b)
}

void Details_73b::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&obstacle_angle_rate_, 0, reinterpret_cast<char*>(&reserved_9_) -
    reinterpret_cast<char*>(&obstacle_angle_rate_) + sizeof(reserved_9_));
}

Details_73b::~Details_73b() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Details_73b)
  SharedDtor();
}

void Details_73b::SharedDtor() {
}

void Details_73b::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Details_73b::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Details_73b& Details_73b::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Details_73b* Details_73b::New(::google::protobuf::Arena* arena) const {
  Details_73b* n = new Details_73b;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Details_73b::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Details_73b)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&obstacle_angle_rate_, 0, reinterpret_cast<char*>(&reserved_9_) -
      reinterpret_cast<char*>(&obstacle_angle_rate_) + sizeof(reserved_9_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Details_73b::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Details_73b)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double obstacle_angle_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_obstacle_angle_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_scale_change = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_obstacle_scale_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_scale_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double object_accel_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_object_accel_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &object_accel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_8 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_reserved_8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obstacle_replaced = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_obstacle_replaced();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obstacle_replaced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_9 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_reserved_9();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_9_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_angle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_obstacle_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Details_73b)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Details_73b)
  return false;
#undef DO_
}

void Details_73b::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Details_73b)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double obstacle_angle_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->obstacle_angle_rate(), output);
  }

  // optional double obstacle_scale_change = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->obstacle_scale_change(), output);
  }

  // optional double object_accel_x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->object_accel_x(), output);
  }

  // optional int32 reserved_8 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reserved_8(), output);
  }

  // optional bool obstacle_replaced = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->obstacle_replaced(), output);
  }

  // optional int32 reserved_9 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reserved_9(), output);
  }

  // optional double obstacle_angle = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->obstacle_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Details_73b)
}

::google::protobuf::uint8* Details_73b::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Details_73b)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double obstacle_angle_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->obstacle_angle_rate(), target);
  }

  // optional double obstacle_scale_change = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->obstacle_scale_change(), target);
  }

  // optional double object_accel_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->object_accel_x(), target);
  }

  // optional int32 reserved_8 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reserved_8(), target);
  }

  // optional bool obstacle_replaced = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->obstacle_replaced(), target);
  }

  // optional int32 reserved_9 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reserved_9(), target);
  }

  // optional double obstacle_angle = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->obstacle_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Details_73b)
  return target;
}

size_t Details_73b::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Details_73b)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double obstacle_angle_rate = 1;
    if (has_obstacle_angle_rate()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_scale_change = 2;
    if (has_obstacle_scale_change()) {
      total_size += 1 + 8;
    }

    // optional double object_accel_x = 3;
    if (has_object_accel_x()) {
      total_size += 1 + 8;
    }

    // optional int32 reserved_8 = 4;
    if (has_reserved_8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_8());
    }

    // optional bool obstacle_replaced = 5;
    if (has_obstacle_replaced()) {
      total_size += 1 + 1;
    }

    // optional double obstacle_angle = 7;
    if (has_obstacle_angle()) {
      total_size += 1 + 8;
    }

    // optional int32 reserved_9 = 6;
    if (has_reserved_9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_9());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Details_73b::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Details_73b)
  GOOGLE_DCHECK_NE(&from, this);
  const Details_73b* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Details_73b>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Details_73b)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Details_73b)
    MergeFrom(*source);
  }
}

void Details_73b::MergeFrom(const Details_73b& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Details_73b)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      obstacle_angle_rate_ = from.obstacle_angle_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      obstacle_scale_change_ = from.obstacle_scale_change_;
    }
    if (cached_has_bits & 0x00000004u) {
      object_accel_x_ = from.object_accel_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      reserved_8_ = from.reserved_8_;
    }
    if (cached_has_bits & 0x00000010u) {
      obstacle_replaced_ = from.obstacle_replaced_;
    }
    if (cached_has_bits & 0x00000020u) {
      obstacle_angle_ = from.obstacle_angle_;
    }
    if (cached_has_bits & 0x00000040u) {
      reserved_9_ = from.reserved_9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Details_73b::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Details_73b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Details_73b::CopyFrom(const Details_73b& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Details_73b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Details_73b::IsInitialized() const {
  return true;
}

void Details_73b::Swap(Details_73b* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Details_73b::InternalSwap(Details_73b* other) {
  std::swap(obstacle_angle_rate_, other->obstacle_angle_rate_);
  std::swap(obstacle_scale_change_, other->obstacle_scale_change_);
  std::swap(object_accel_x_, other->object_accel_x_);
  std::swap(reserved_8_, other->reserved_8_);
  std::swap(obstacle_replaced_, other->obstacle_replaced_);
  std::swap(obstacle_angle_, other->obstacle_angle_);
  std::swap(reserved_9_, other->reserved_9_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Details_73b::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Details_73b

// optional double obstacle_angle_rate = 1;
bool Details_73b::has_obstacle_angle_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Details_73b::set_has_obstacle_angle_rate() {
  _has_bits_[0] |= 0x00000001u;
}
void Details_73b::clear_has_obstacle_angle_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
void Details_73b::clear_obstacle_angle_rate() {
  obstacle_angle_rate_ = 0;
  clear_has_obstacle_angle_rate();
}
double Details_73b::obstacle_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.obstacle_angle_rate)
  return obstacle_angle_rate_;
}
void Details_73b::set_obstacle_angle_rate(double value) {
  set_has_obstacle_angle_rate();
  obstacle_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.obstacle_angle_rate)
}

// optional double obstacle_scale_change = 2;
bool Details_73b::has_obstacle_scale_change() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Details_73b::set_has_obstacle_scale_change() {
  _has_bits_[0] |= 0x00000002u;
}
void Details_73b::clear_has_obstacle_scale_change() {
  _has_bits_[0] &= ~0x00000002u;
}
void Details_73b::clear_obstacle_scale_change() {
  obstacle_scale_change_ = 0;
  clear_has_obstacle_scale_change();
}
double Details_73b::obstacle_scale_change() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.obstacle_scale_change)
  return obstacle_scale_change_;
}
void Details_73b::set_obstacle_scale_change(double value) {
  set_has_obstacle_scale_change();
  obstacle_scale_change_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.obstacle_scale_change)
}

// optional double object_accel_x = 3;
bool Details_73b::has_object_accel_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Details_73b::set_has_object_accel_x() {
  _has_bits_[0] |= 0x00000004u;
}
void Details_73b::clear_has_object_accel_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void Details_73b::clear_object_accel_x() {
  object_accel_x_ = 0;
  clear_has_object_accel_x();
}
double Details_73b::object_accel_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.object_accel_x)
  return object_accel_x_;
}
void Details_73b::set_object_accel_x(double value) {
  set_has_object_accel_x();
  object_accel_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.object_accel_x)
}

// optional int32 reserved_8 = 4;
bool Details_73b::has_reserved_8() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Details_73b::set_has_reserved_8() {
  _has_bits_[0] |= 0x00000008u;
}
void Details_73b::clear_has_reserved_8() {
  _has_bits_[0] &= ~0x00000008u;
}
void Details_73b::clear_reserved_8() {
  reserved_8_ = 0;
  clear_has_reserved_8();
}
::google::protobuf::int32 Details_73b::reserved_8() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.reserved_8)
  return reserved_8_;
}
void Details_73b::set_reserved_8(::google::protobuf::int32 value) {
  set_has_reserved_8();
  reserved_8_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.reserved_8)
}

// optional bool obstacle_replaced = 5;
bool Details_73b::has_obstacle_replaced() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Details_73b::set_has_obstacle_replaced() {
  _has_bits_[0] |= 0x00000010u;
}
void Details_73b::clear_has_obstacle_replaced() {
  _has_bits_[0] &= ~0x00000010u;
}
void Details_73b::clear_obstacle_replaced() {
  obstacle_replaced_ = false;
  clear_has_obstacle_replaced();
}
bool Details_73b::obstacle_replaced() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.obstacle_replaced)
  return obstacle_replaced_;
}
void Details_73b::set_obstacle_replaced(bool value) {
  set_has_obstacle_replaced();
  obstacle_replaced_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.obstacle_replaced)
}

// optional int32 reserved_9 = 6;
bool Details_73b::has_reserved_9() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Details_73b::set_has_reserved_9() {
  _has_bits_[0] |= 0x00000040u;
}
void Details_73b::clear_has_reserved_9() {
  _has_bits_[0] &= ~0x00000040u;
}
void Details_73b::clear_reserved_9() {
  reserved_9_ = 0;
  clear_has_reserved_9();
}
::google::protobuf::int32 Details_73b::reserved_9() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.reserved_9)
  return reserved_9_;
}
void Details_73b::set_reserved_9(::google::protobuf::int32 value) {
  set_has_reserved_9();
  reserved_9_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.reserved_9)
}

// optional double obstacle_angle = 7;
bool Details_73b::has_obstacle_angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Details_73b::set_has_obstacle_angle() {
  _has_bits_[0] |= 0x00000020u;
}
void Details_73b::clear_has_obstacle_angle() {
  _has_bits_[0] &= ~0x00000020u;
}
void Details_73b::clear_obstacle_angle() {
  obstacle_angle_ = 0;
  clear_has_obstacle_angle();
}
double Details_73b::obstacle_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.obstacle_angle)
  return obstacle_angle_;
}
void Details_73b::set_obstacle_angle(double value) {
  set_has_obstacle_angle();
  obstacle_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.obstacle_angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mobileye::kHeaderFieldNumber;
const int Mobileye::kAftermarket669FieldNumber;
const int Mobileye::kDetails737FieldNumber;
const int Mobileye::kDetails738FieldNumber;
const int Mobileye::kDetails739FieldNumber;
const int Mobileye::kDetails73AFieldNumber;
const int Mobileye::kDetails73BFieldNumber;
const int Mobileye::kLka766FieldNumber;
const int Mobileye::kLka767FieldNumber;
const int Mobileye::kLka768FieldNumber;
const int Mobileye::kLka769FieldNumber;
const int Mobileye::kReference76AFieldNumber;
const int Mobileye::kNum76BFieldNumber;
const int Mobileye::kNext76CFieldNumber;
const int Mobileye::kNext76DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mobileye::Mobileye()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Mobileye)
}
Mobileye::Mobileye(const Mobileye& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      details_739_(from.details_739_),
      details_73a_(from.details_73a_),
      details_73b_(from.details_73b_),
      next_76c_(from.next_76c_),
      next_76d_(from.next_76d_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_aftermarket_669()) {
    aftermarket_669_ = new ::apollo::drivers::Aftermarket_669(*from.aftermarket_669_);
  } else {
    aftermarket_669_ = NULL;
  }
  if (from.has_details_737()) {
    details_737_ = new ::apollo::drivers::Details_737(*from.details_737_);
  } else {
    details_737_ = NULL;
  }
  if (from.has_details_738()) {
    details_738_ = new ::apollo::drivers::Details_738(*from.details_738_);
  } else {
    details_738_ = NULL;
  }
  if (from.has_lka_766()) {
    lka_766_ = new ::apollo::drivers::Lka_766(*from.lka_766_);
  } else {
    lka_766_ = NULL;
  }
  if (from.has_lka_767()) {
    lka_767_ = new ::apollo::drivers::Lka_767(*from.lka_767_);
  } else {
    lka_767_ = NULL;
  }
  if (from.has_lka_768()) {
    lka_768_ = new ::apollo::drivers::Lka_768(*from.lka_768_);
  } else {
    lka_768_ = NULL;
  }
  if (from.has_lka_769()) {
    lka_769_ = new ::apollo::drivers::Lka_769(*from.lka_769_);
  } else {
    lka_769_ = NULL;
  }
  if (from.has_reference_76a()) {
    reference_76a_ = new ::apollo::drivers::Reference_76a(*from.reference_76a_);
  } else {
    reference_76a_ = NULL;
  }
  if (from.has_num_76b()) {
    num_76b_ = new ::apollo::drivers::Num_76b(*from.num_76b_);
  } else {
    num_76b_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Mobileye)
}

void Mobileye::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&num_76b_) -
    reinterpret_cast<char*>(&header_) + sizeof(num_76b_));
}

Mobileye::~Mobileye() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Mobileye)
  SharedDtor();
}

void Mobileye::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete aftermarket_669_;
  }
  if (this != internal_default_instance()) {
    delete details_737_;
  }
  if (this != internal_default_instance()) {
    delete details_738_;
  }
  if (this != internal_default_instance()) {
    delete lka_766_;
  }
  if (this != internal_default_instance()) {
    delete lka_767_;
  }
  if (this != internal_default_instance()) {
    delete lka_768_;
  }
  if (this != internal_default_instance()) {
    delete lka_769_;
  }
  if (this != internal_default_instance()) {
    delete reference_76a_;
  }
  if (this != internal_default_instance()) {
    delete num_76b_;
  }
}

void Mobileye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mobileye::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mobileye& Mobileye::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mobileye* Mobileye::New(::google::protobuf::Arena* arena) const {
  Mobileye* n = new Mobileye;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mobileye::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Mobileye)
  details_739_.Clear();
  details_73a_.Clear();
  details_73b_.Clear();
  next_76c_.Clear();
  next_76d_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::apollo::common::Header::Clear();
    }
    if (has_aftermarket_669()) {
      GOOGLE_DCHECK(aftermarket_669_ != NULL);
      aftermarket_669_->::apollo::drivers::Aftermarket_669::Clear();
    }
    if (has_details_737()) {
      GOOGLE_DCHECK(details_737_ != NULL);
      details_737_->::apollo::drivers::Details_737::Clear();
    }
    if (has_details_738()) {
      GOOGLE_DCHECK(details_738_ != NULL);
      details_738_->::apollo::drivers::Details_738::Clear();
    }
    if (has_lka_766()) {
      GOOGLE_DCHECK(lka_766_ != NULL);
      lka_766_->::apollo::drivers::Lka_766::Clear();
    }
    if (has_lka_767()) {
      GOOGLE_DCHECK(lka_767_ != NULL);
      lka_767_->::apollo::drivers::Lka_767::Clear();
    }
    if (has_lka_768()) {
      GOOGLE_DCHECK(lka_768_ != NULL);
      lka_768_->::apollo::drivers::Lka_768::Clear();
    }
    if (has_lka_769()) {
      GOOGLE_DCHECK(lka_769_ != NULL);
      lka_769_->::apollo::drivers::Lka_769::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_reference_76a()) {
      GOOGLE_DCHECK(reference_76a_ != NULL);
      reference_76a_->::apollo::drivers::Reference_76a::Clear();
    }
    if (has_num_76b()) {
      GOOGLE_DCHECK(num_76b_ != NULL);
      num_76b_->::apollo::drivers::Num_76b::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Mobileye::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Mobileye)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Aftermarket_669 aftermarket_669 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aftermarket_669()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Details_737 details_737 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details_737()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Details_738 details_738 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details_738()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.drivers.Details_739 details_739 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_details_739()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.drivers.Details_73a details_73a = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_details_73a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.drivers.Details_73b details_73b = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_details_73b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Lka_766 lka_766 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lka_766()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Lka_767 lka_767 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lka_767()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Lka_768 lka_768 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lka_768()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Lka_769 lka_769 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lka_769()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Reference_76a reference_76a = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reference_76a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.Num_76b num_76b = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_num_76b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.drivers.Next_76c next_76c = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_next_76c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.drivers.Next_76d next_76d = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_next_76d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Mobileye)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Mobileye)
  return false;
#undef DO_
}

void Mobileye::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Mobileye)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .apollo.drivers.Aftermarket_669 aftermarket_669 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->aftermarket_669_, output);
  }

  // optional .apollo.drivers.Details_737 details_737 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->details_737_, output);
  }

  // optional .apollo.drivers.Details_738 details_738 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->details_738_, output);
  }

  // repeated .apollo.drivers.Details_739 details_739 = 5;
  for (unsigned int i = 0, n = this->details_739_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->details_739(i), output);
  }

  // repeated .apollo.drivers.Details_73a details_73a = 6;
  for (unsigned int i = 0, n = this->details_73a_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->details_73a(i), output);
  }

  // repeated .apollo.drivers.Details_73b details_73b = 7;
  for (unsigned int i = 0, n = this->details_73b_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->details_73b(i), output);
  }

  // optional .apollo.drivers.Lka_766 lka_766 = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->lka_766_, output);
  }

  // optional .apollo.drivers.Lka_767 lka_767 = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->lka_767_, output);
  }

  // optional .apollo.drivers.Lka_768 lka_768 = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->lka_768_, output);
  }

  // optional .apollo.drivers.Lka_769 lka_769 = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->lka_769_, output);
  }

  // optional .apollo.drivers.Reference_76a reference_76a = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->reference_76a_, output);
  }

  // optional .apollo.drivers.Num_76b num_76b = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->num_76b_, output);
  }

  // repeated .apollo.drivers.Next_76c next_76c = 14;
  for (unsigned int i = 0, n = this->next_76c_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->next_76c(i), output);
  }

  // repeated .apollo.drivers.Next_76d next_76d = 15;
  for (unsigned int i = 0, n = this->next_76d_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->next_76d(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Mobileye)
}

::google::protobuf::uint8* Mobileye::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Mobileye)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional .apollo.drivers.Aftermarket_669 aftermarket_669 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->aftermarket_669_, deterministic, target);
  }

  // optional .apollo.drivers.Details_737 details_737 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->details_737_, deterministic, target);
  }

  // optional .apollo.drivers.Details_738 details_738 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->details_738_, deterministic, target);
  }

  // repeated .apollo.drivers.Details_739 details_739 = 5;
  for (unsigned int i = 0, n = this->details_739_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->details_739(i), deterministic, target);
  }

  // repeated .apollo.drivers.Details_73a details_73a = 6;
  for (unsigned int i = 0, n = this->details_73a_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->details_73a(i), deterministic, target);
  }

  // repeated .apollo.drivers.Details_73b details_73b = 7;
  for (unsigned int i = 0, n = this->details_73b_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->details_73b(i), deterministic, target);
  }

  // optional .apollo.drivers.Lka_766 lka_766 = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->lka_766_, deterministic, target);
  }

  // optional .apollo.drivers.Lka_767 lka_767 = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->lka_767_, deterministic, target);
  }

  // optional .apollo.drivers.Lka_768 lka_768 = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->lka_768_, deterministic, target);
  }

  // optional .apollo.drivers.Lka_769 lka_769 = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->lka_769_, deterministic, target);
  }

  // optional .apollo.drivers.Reference_76a reference_76a = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->reference_76a_, deterministic, target);
  }

  // optional .apollo.drivers.Num_76b num_76b = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->num_76b_, deterministic, target);
  }

  // repeated .apollo.drivers.Next_76c next_76c = 14;
  for (unsigned int i = 0, n = this->next_76c_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->next_76c(i), deterministic, target);
  }

  // repeated .apollo.drivers.Next_76d next_76d = 15;
  for (unsigned int i = 0, n = this->next_76d_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->next_76d(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Mobileye)
  return target;
}

size_t Mobileye::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Mobileye)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.drivers.Details_739 details_739 = 5;
  {
    unsigned int count = this->details_739_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details_739(i));
    }
  }

  // repeated .apollo.drivers.Details_73a details_73a = 6;
  {
    unsigned int count = this->details_73a_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details_73a(i));
    }
  }

  // repeated .apollo.drivers.Details_73b details_73b = 7;
  {
    unsigned int count = this->details_73b_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details_73b(i));
    }
  }

  // repeated .apollo.drivers.Next_76c next_76c = 14;
  {
    unsigned int count = this->next_76c_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_76c(i));
    }
  }

  // repeated .apollo.drivers.Next_76d next_76d = 15;
  {
    unsigned int count = this->next_76d_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_76d(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.drivers.Aftermarket_669 aftermarket_669 = 2;
    if (has_aftermarket_669()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->aftermarket_669_);
    }

    // optional .apollo.drivers.Details_737 details_737 = 3;
    if (has_details_737()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->details_737_);
    }

    // optional .apollo.drivers.Details_738 details_738 = 4;
    if (has_details_738()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->details_738_);
    }

    // optional .apollo.drivers.Lka_766 lka_766 = 8;
    if (has_lka_766()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lka_766_);
    }

    // optional .apollo.drivers.Lka_767 lka_767 = 9;
    if (has_lka_767()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lka_767_);
    }

    // optional .apollo.drivers.Lka_768 lka_768 = 10;
    if (has_lka_768()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lka_768_);
    }

    // optional .apollo.drivers.Lka_769 lka_769 = 11;
    if (has_lka_769()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lka_769_);
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .apollo.drivers.Reference_76a reference_76a = 12;
    if (has_reference_76a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reference_76a_);
    }

    // optional .apollo.drivers.Num_76b num_76b = 13;
    if (has_num_76b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->num_76b_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mobileye::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Mobileye)
  GOOGLE_DCHECK_NE(&from, this);
  const Mobileye* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mobileye>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Mobileye)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Mobileye)
    MergeFrom(*source);
  }
}

void Mobileye::MergeFrom(const Mobileye& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Mobileye)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  details_739_.MergeFrom(from.details_739_);
  details_73a_.MergeFrom(from.details_73a_);
  details_73b_.MergeFrom(from.details_73b_);
  next_76c_.MergeFrom(from.next_76c_);
  next_76d_.MergeFrom(from.next_76d_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_aftermarket_669()->::apollo::drivers::Aftermarket_669::MergeFrom(from.aftermarket_669());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_details_737()->::apollo::drivers::Details_737::MergeFrom(from.details_737());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_details_738()->::apollo::drivers::Details_738::MergeFrom(from.details_738());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_lka_766()->::apollo::drivers::Lka_766::MergeFrom(from.lka_766());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_lka_767()->::apollo::drivers::Lka_767::MergeFrom(from.lka_767());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_lka_768()->::apollo::drivers::Lka_768::MergeFrom(from.lka_768());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_lka_769()->::apollo::drivers::Lka_769::MergeFrom(from.lka_769());
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_reference_76a()->::apollo::drivers::Reference_76a::MergeFrom(from.reference_76a());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_num_76b()->::apollo::drivers::Num_76b::MergeFrom(from.num_76b());
    }
  }
}

void Mobileye::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Mobileye)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mobileye::CopyFrom(const Mobileye& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Mobileye)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mobileye::IsInitialized() const {
  return true;
}

void Mobileye::Swap(Mobileye* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mobileye::InternalSwap(Mobileye* other) {
  details_739_.InternalSwap(&other->details_739_);
  details_73a_.InternalSwap(&other->details_73a_);
  details_73b_.InternalSwap(&other->details_73b_);
  next_76c_.InternalSwap(&other->next_76c_);
  next_76d_.InternalSwap(&other->next_76d_);
  std::swap(header_, other->header_);
  std::swap(aftermarket_669_, other->aftermarket_669_);
  std::swap(details_737_, other->details_737_);
  std::swap(details_738_, other->details_738_);
  std::swap(lka_766_, other->lka_766_);
  std::swap(lka_767_, other->lka_767_);
  std::swap(lka_768_, other->lka_768_);
  std::swap(lka_769_, other->lka_769_);
  std::swap(reference_76a_, other->reference_76a_);
  std::swap(num_76b_, other->num_76b_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mobileye::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fmobileye_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mobileye

// optional .apollo.common.Header header = 1;
bool Mobileye::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Mobileye::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Mobileye::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Mobileye::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& Mobileye::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* Mobileye::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.header)
  return header_;
}
::apollo::common::Header* Mobileye::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Mobileye::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.header)
}

// optional .apollo.drivers.Aftermarket_669 aftermarket_669 = 2;
bool Mobileye::has_aftermarket_669() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Mobileye::set_has_aftermarket_669() {
  _has_bits_[0] |= 0x00000002u;
}
void Mobileye::clear_has_aftermarket_669() {
  _has_bits_[0] &= ~0x00000002u;
}
void Mobileye::clear_aftermarket_669() {
  if (aftermarket_669_ != NULL) aftermarket_669_->::apollo::drivers::Aftermarket_669::Clear();
  clear_has_aftermarket_669();
}
const ::apollo::drivers::Aftermarket_669& Mobileye::aftermarket_669() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.aftermarket_669)
  return aftermarket_669_ != NULL ? *aftermarket_669_
                         : *::apollo::drivers::Aftermarket_669::internal_default_instance();
}
::apollo::drivers::Aftermarket_669* Mobileye::mutable_aftermarket_669() {
  set_has_aftermarket_669();
  if (aftermarket_669_ == NULL) {
    aftermarket_669_ = new ::apollo::drivers::Aftermarket_669;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.aftermarket_669)
  return aftermarket_669_;
}
::apollo::drivers::Aftermarket_669* Mobileye::release_aftermarket_669() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.aftermarket_669)
  clear_has_aftermarket_669();
  ::apollo::drivers::Aftermarket_669* temp = aftermarket_669_;
  aftermarket_669_ = NULL;
  return temp;
}
void Mobileye::set_allocated_aftermarket_669(::apollo::drivers::Aftermarket_669* aftermarket_669) {
  delete aftermarket_669_;
  aftermarket_669_ = aftermarket_669;
  if (aftermarket_669) {
    set_has_aftermarket_669();
  } else {
    clear_has_aftermarket_669();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.aftermarket_669)
}

// optional .apollo.drivers.Details_737 details_737 = 3;
bool Mobileye::has_details_737() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Mobileye::set_has_details_737() {
  _has_bits_[0] |= 0x00000004u;
}
void Mobileye::clear_has_details_737() {
  _has_bits_[0] &= ~0x00000004u;
}
void Mobileye::clear_details_737() {
  if (details_737_ != NULL) details_737_->::apollo::drivers::Details_737::Clear();
  clear_has_details_737();
}
const ::apollo::drivers::Details_737& Mobileye::details_737() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.details_737)
  return details_737_ != NULL ? *details_737_
                         : *::apollo::drivers::Details_737::internal_default_instance();
}
::apollo::drivers::Details_737* Mobileye::mutable_details_737() {
  set_has_details_737();
  if (details_737_ == NULL) {
    details_737_ = new ::apollo::drivers::Details_737;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.details_737)
  return details_737_;
}
::apollo::drivers::Details_737* Mobileye::release_details_737() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.details_737)
  clear_has_details_737();
  ::apollo::drivers::Details_737* temp = details_737_;
  details_737_ = NULL;
  return temp;
}
void Mobileye::set_allocated_details_737(::apollo::drivers::Details_737* details_737) {
  delete details_737_;
  details_737_ = details_737;
  if (details_737) {
    set_has_details_737();
  } else {
    clear_has_details_737();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.details_737)
}

// optional .apollo.drivers.Details_738 details_738 = 4;
bool Mobileye::has_details_738() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Mobileye::set_has_details_738() {
  _has_bits_[0] |= 0x00000008u;
}
void Mobileye::clear_has_details_738() {
  _has_bits_[0] &= ~0x00000008u;
}
void Mobileye::clear_details_738() {
  if (details_738_ != NULL) details_738_->::apollo::drivers::Details_738::Clear();
  clear_has_details_738();
}
const ::apollo::drivers::Details_738& Mobileye::details_738() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.details_738)
  return details_738_ != NULL ? *details_738_
                         : *::apollo::drivers::Details_738::internal_default_instance();
}
::apollo::drivers::Details_738* Mobileye::mutable_details_738() {
  set_has_details_738();
  if (details_738_ == NULL) {
    details_738_ = new ::apollo::drivers::Details_738;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.details_738)
  return details_738_;
}
::apollo::drivers::Details_738* Mobileye::release_details_738() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.details_738)
  clear_has_details_738();
  ::apollo::drivers::Details_738* temp = details_738_;
  details_738_ = NULL;
  return temp;
}
void Mobileye::set_allocated_details_738(::apollo::drivers::Details_738* details_738) {
  delete details_738_;
  details_738_ = details_738;
  if (details_738) {
    set_has_details_738();
  } else {
    clear_has_details_738();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.details_738)
}

// repeated .apollo.drivers.Details_739 details_739 = 5;
int Mobileye::details_739_size() const {
  return details_739_.size();
}
void Mobileye::clear_details_739() {
  details_739_.Clear();
}
const ::apollo::drivers::Details_739& Mobileye::details_739(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.details_739)
  return details_739_.Get(index);
}
::apollo::drivers::Details_739* Mobileye::mutable_details_739(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.details_739)
  return details_739_.Mutable(index);
}
::apollo::drivers::Details_739* Mobileye::add_details_739() {
  // @@protoc_insertion_point(field_add:apollo.drivers.Mobileye.details_739)
  return details_739_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::drivers::Details_739 >*
Mobileye::mutable_details_739() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Mobileye.details_739)
  return &details_739_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::Details_739 >&
Mobileye::details_739() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Mobileye.details_739)
  return details_739_;
}

// repeated .apollo.drivers.Details_73a details_73a = 6;
int Mobileye::details_73a_size() const {
  return details_73a_.size();
}
void Mobileye::clear_details_73a() {
  details_73a_.Clear();
}
const ::apollo::drivers::Details_73a& Mobileye::details_73a(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.details_73a)
  return details_73a_.Get(index);
}
::apollo::drivers::Details_73a* Mobileye::mutable_details_73a(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.details_73a)
  return details_73a_.Mutable(index);
}
::apollo::drivers::Details_73a* Mobileye::add_details_73a() {
  // @@protoc_insertion_point(field_add:apollo.drivers.Mobileye.details_73a)
  return details_73a_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::drivers::Details_73a >*
Mobileye::mutable_details_73a() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Mobileye.details_73a)
  return &details_73a_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::Details_73a >&
Mobileye::details_73a() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Mobileye.details_73a)
  return details_73a_;
}

// repeated .apollo.drivers.Details_73b details_73b = 7;
int Mobileye::details_73b_size() const {
  return details_73b_.size();
}
void Mobileye::clear_details_73b() {
  details_73b_.Clear();
}
const ::apollo::drivers::Details_73b& Mobileye::details_73b(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.details_73b)
  return details_73b_.Get(index);
}
::apollo::drivers::Details_73b* Mobileye::mutable_details_73b(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.details_73b)
  return details_73b_.Mutable(index);
}
::apollo::drivers::Details_73b* Mobileye::add_details_73b() {
  // @@protoc_insertion_point(field_add:apollo.drivers.Mobileye.details_73b)
  return details_73b_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::drivers::Details_73b >*
Mobileye::mutable_details_73b() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Mobileye.details_73b)
  return &details_73b_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::Details_73b >&
Mobileye::details_73b() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Mobileye.details_73b)
  return details_73b_;
}

// optional .apollo.drivers.Lka_766 lka_766 = 8;
bool Mobileye::has_lka_766() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Mobileye::set_has_lka_766() {
  _has_bits_[0] |= 0x00000010u;
}
void Mobileye::clear_has_lka_766() {
  _has_bits_[0] &= ~0x00000010u;
}
void Mobileye::clear_lka_766() {
  if (lka_766_ != NULL) lka_766_->::apollo::drivers::Lka_766::Clear();
  clear_has_lka_766();
}
const ::apollo::drivers::Lka_766& Mobileye::lka_766() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.lka_766)
  return lka_766_ != NULL ? *lka_766_
                         : *::apollo::drivers::Lka_766::internal_default_instance();
}
::apollo::drivers::Lka_766* Mobileye::mutable_lka_766() {
  set_has_lka_766();
  if (lka_766_ == NULL) {
    lka_766_ = new ::apollo::drivers::Lka_766;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.lka_766)
  return lka_766_;
}
::apollo::drivers::Lka_766* Mobileye::release_lka_766() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.lka_766)
  clear_has_lka_766();
  ::apollo::drivers::Lka_766* temp = lka_766_;
  lka_766_ = NULL;
  return temp;
}
void Mobileye::set_allocated_lka_766(::apollo::drivers::Lka_766* lka_766) {
  delete lka_766_;
  lka_766_ = lka_766;
  if (lka_766) {
    set_has_lka_766();
  } else {
    clear_has_lka_766();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.lka_766)
}

// optional .apollo.drivers.Lka_767 lka_767 = 9;
bool Mobileye::has_lka_767() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Mobileye::set_has_lka_767() {
  _has_bits_[0] |= 0x00000020u;
}
void Mobileye::clear_has_lka_767() {
  _has_bits_[0] &= ~0x00000020u;
}
void Mobileye::clear_lka_767() {
  if (lka_767_ != NULL) lka_767_->::apollo::drivers::Lka_767::Clear();
  clear_has_lka_767();
}
const ::apollo::drivers::Lka_767& Mobileye::lka_767() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.lka_767)
  return lka_767_ != NULL ? *lka_767_
                         : *::apollo::drivers::Lka_767::internal_default_instance();
}
::apollo::drivers::Lka_767* Mobileye::mutable_lka_767() {
  set_has_lka_767();
  if (lka_767_ == NULL) {
    lka_767_ = new ::apollo::drivers::Lka_767;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.lka_767)
  return lka_767_;
}
::apollo::drivers::Lka_767* Mobileye::release_lka_767() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.lka_767)
  clear_has_lka_767();
  ::apollo::drivers::Lka_767* temp = lka_767_;
  lka_767_ = NULL;
  return temp;
}
void Mobileye::set_allocated_lka_767(::apollo::drivers::Lka_767* lka_767) {
  delete lka_767_;
  lka_767_ = lka_767;
  if (lka_767) {
    set_has_lka_767();
  } else {
    clear_has_lka_767();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.lka_767)
}

// optional .apollo.drivers.Lka_768 lka_768 = 10;
bool Mobileye::has_lka_768() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Mobileye::set_has_lka_768() {
  _has_bits_[0] |= 0x00000040u;
}
void Mobileye::clear_has_lka_768() {
  _has_bits_[0] &= ~0x00000040u;
}
void Mobileye::clear_lka_768() {
  if (lka_768_ != NULL) lka_768_->::apollo::drivers::Lka_768::Clear();
  clear_has_lka_768();
}
const ::apollo::drivers::Lka_768& Mobileye::lka_768() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.lka_768)
  return lka_768_ != NULL ? *lka_768_
                         : *::apollo::drivers::Lka_768::internal_default_instance();
}
::apollo::drivers::Lka_768* Mobileye::mutable_lka_768() {
  set_has_lka_768();
  if (lka_768_ == NULL) {
    lka_768_ = new ::apollo::drivers::Lka_768;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.lka_768)
  return lka_768_;
}
::apollo::drivers::Lka_768* Mobileye::release_lka_768() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.lka_768)
  clear_has_lka_768();
  ::apollo::drivers::Lka_768* temp = lka_768_;
  lka_768_ = NULL;
  return temp;
}
void Mobileye::set_allocated_lka_768(::apollo::drivers::Lka_768* lka_768) {
  delete lka_768_;
  lka_768_ = lka_768;
  if (lka_768) {
    set_has_lka_768();
  } else {
    clear_has_lka_768();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.lka_768)
}

// optional .apollo.drivers.Lka_769 lka_769 = 11;
bool Mobileye::has_lka_769() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Mobileye::set_has_lka_769() {
  _has_bits_[0] |= 0x00000080u;
}
void Mobileye::clear_has_lka_769() {
  _has_bits_[0] &= ~0x00000080u;
}
void Mobileye::clear_lka_769() {
  if (lka_769_ != NULL) lka_769_->::apollo::drivers::Lka_769::Clear();
  clear_has_lka_769();
}
const ::apollo::drivers::Lka_769& Mobileye::lka_769() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.lka_769)
  return lka_769_ != NULL ? *lka_769_
                         : *::apollo::drivers::Lka_769::internal_default_instance();
}
::apollo::drivers::Lka_769* Mobileye::mutable_lka_769() {
  set_has_lka_769();
  if (lka_769_ == NULL) {
    lka_769_ = new ::apollo::drivers::Lka_769;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.lka_769)
  return lka_769_;
}
::apollo::drivers::Lka_769* Mobileye::release_lka_769() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.lka_769)
  clear_has_lka_769();
  ::apollo::drivers::Lka_769* temp = lka_769_;
  lka_769_ = NULL;
  return temp;
}
void Mobileye::set_allocated_lka_769(::apollo::drivers::Lka_769* lka_769) {
  delete lka_769_;
  lka_769_ = lka_769;
  if (lka_769) {
    set_has_lka_769();
  } else {
    clear_has_lka_769();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.lka_769)
}

// optional .apollo.drivers.Reference_76a reference_76a = 12;
bool Mobileye::has_reference_76a() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Mobileye::set_has_reference_76a() {
  _has_bits_[0] |= 0x00000100u;
}
void Mobileye::clear_has_reference_76a() {
  _has_bits_[0] &= ~0x00000100u;
}
void Mobileye::clear_reference_76a() {
  if (reference_76a_ != NULL) reference_76a_->::apollo::drivers::Reference_76a::Clear();
  clear_has_reference_76a();
}
const ::apollo::drivers::Reference_76a& Mobileye::reference_76a() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.reference_76a)
  return reference_76a_ != NULL ? *reference_76a_
                         : *::apollo::drivers::Reference_76a::internal_default_instance();
}
::apollo::drivers::Reference_76a* Mobileye::mutable_reference_76a() {
  set_has_reference_76a();
  if (reference_76a_ == NULL) {
    reference_76a_ = new ::apollo::drivers::Reference_76a;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.reference_76a)
  return reference_76a_;
}
::apollo::drivers::Reference_76a* Mobileye::release_reference_76a() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.reference_76a)
  clear_has_reference_76a();
  ::apollo::drivers::Reference_76a* temp = reference_76a_;
  reference_76a_ = NULL;
  return temp;
}
void Mobileye::set_allocated_reference_76a(::apollo::drivers::Reference_76a* reference_76a) {
  delete reference_76a_;
  reference_76a_ = reference_76a;
  if (reference_76a) {
    set_has_reference_76a();
  } else {
    clear_has_reference_76a();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.reference_76a)
}

// optional .apollo.drivers.Num_76b num_76b = 13;
bool Mobileye::has_num_76b() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Mobileye::set_has_num_76b() {
  _has_bits_[0] |= 0x00000200u;
}
void Mobileye::clear_has_num_76b() {
  _has_bits_[0] &= ~0x00000200u;
}
void Mobileye::clear_num_76b() {
  if (num_76b_ != NULL) num_76b_->::apollo::drivers::Num_76b::Clear();
  clear_has_num_76b();
}
const ::apollo::drivers::Num_76b& Mobileye::num_76b() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.num_76b)
  return num_76b_ != NULL ? *num_76b_
                         : *::apollo::drivers::Num_76b::internal_default_instance();
}
::apollo::drivers::Num_76b* Mobileye::mutable_num_76b() {
  set_has_num_76b();
  if (num_76b_ == NULL) {
    num_76b_ = new ::apollo::drivers::Num_76b;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.num_76b)
  return num_76b_;
}
::apollo::drivers::Num_76b* Mobileye::release_num_76b() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.num_76b)
  clear_has_num_76b();
  ::apollo::drivers::Num_76b* temp = num_76b_;
  num_76b_ = NULL;
  return temp;
}
void Mobileye::set_allocated_num_76b(::apollo::drivers::Num_76b* num_76b) {
  delete num_76b_;
  num_76b_ = num_76b;
  if (num_76b) {
    set_has_num_76b();
  } else {
    clear_has_num_76b();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.num_76b)
}

// repeated .apollo.drivers.Next_76c next_76c = 14;
int Mobileye::next_76c_size() const {
  return next_76c_.size();
}
void Mobileye::clear_next_76c() {
  next_76c_.Clear();
}
const ::apollo::drivers::Next_76c& Mobileye::next_76c(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.next_76c)
  return next_76c_.Get(index);
}
::apollo::drivers::Next_76c* Mobileye::mutable_next_76c(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.next_76c)
  return next_76c_.Mutable(index);
}
::apollo::drivers::Next_76c* Mobileye::add_next_76c() {
  // @@protoc_insertion_point(field_add:apollo.drivers.Mobileye.next_76c)
  return next_76c_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::drivers::Next_76c >*
Mobileye::mutable_next_76c() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Mobileye.next_76c)
  return &next_76c_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::Next_76c >&
Mobileye::next_76c() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Mobileye.next_76c)
  return next_76c_;
}

// repeated .apollo.drivers.Next_76d next_76d = 15;
int Mobileye::next_76d_size() const {
  return next_76d_.size();
}
void Mobileye::clear_next_76d() {
  next_76d_.Clear();
}
const ::apollo::drivers::Next_76d& Mobileye::next_76d(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.next_76d)
  return next_76d_.Get(index);
}
::apollo::drivers::Next_76d* Mobileye::mutable_next_76d(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.next_76d)
  return next_76d_.Mutable(index);
}
::apollo::drivers::Next_76d* Mobileye::add_next_76d() {
  // @@protoc_insertion_point(field_add:apollo.drivers.Mobileye.next_76d)
  return next_76d_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::drivers::Next_76d >*
Mobileye::mutable_next_76d() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Mobileye.next_76d)
  return &next_76d_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::Next_76d >&
Mobileye::next_76d() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Mobileye.next_76d)
  return next_76d_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
