// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/conti_radar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/drivers/proto/conti_radar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
class ClusterListStatus_600DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClusterListStatus_600> {
} _ClusterListStatus_600_default_instance_;
class ObjectListStatus_60ADefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectListStatus_60A> {
} _ObjectListStatus_60A_default_instance_;
class RadarState_201DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RadarState_201> {
} _RadarState_201_default_instance_;
class ContiRadarObsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContiRadarObs> {
} _ContiRadarObs_default_instance_;
class ContiRadarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContiRadar> {
} _ContiRadar_default_instance_;

namespace protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterListStatus_600, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterListStatus_600, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterListStatus_600, near_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterListStatus_600, far_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterListStatus_600, meas_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterListStatus_600, interface_version_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectListStatus_60A, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectListStatus_60A, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectListStatus_60A, nof_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectListStatus_60A, meas_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectListStatus_60A, interface_version_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarState_201, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarState_201, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarState_201, max_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarState_201, radar_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarState_201, output_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarState_201, rcs_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarState_201, send_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarState_201, send_ext_info_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, clusterortrack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, obstacle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, longitude_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, lateral_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, longitude_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, lateral_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, rcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, dynprop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, longitude_dist_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, lateral_dist_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, longitude_vel_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, lateral_vel_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, probexist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, meas_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, longitude_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, lateral_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, oritation_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, longitude_accel_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, lateral_accel_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, oritation_angle_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarObs, obstacle_class_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  11,
  8,
  9,
  10,
  13,
  14,
  12,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadar, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadar, contiobs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadar, radar_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadar, cluster_list_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadar, object_list_status_),
  0,
  ~0u,
  1,
  2,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(ClusterListStatus_600)},
  { 13, 21, sizeof(ObjectListStatus_60A)},
  { 24, 35, sizeof(RadarState_201)},
  { 41, 70, sizeof(ContiRadarObs)},
  { 94, 104, sizeof(ContiRadar)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterListStatus_600_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectListStatus_60A_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RadarState_201_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContiRadarObs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContiRadar_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/drivers/proto/conti_radar.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _ClusterListStatus_600_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ObjectListStatus_60A_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RadarState_201_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ContiRadarObs_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ContiRadar_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::apollo::drivers::conti_radar::protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::InitDefaults();
  _ClusterListStatus_600_default_instance_.DefaultConstruct();
  _ObjectListStatus_60A_default_instance_.DefaultConstruct();
  _RadarState_201_default_instance_.DefaultConstruct();
  _ContiRadarObs_default_instance_.DefaultConstruct();
  _ContiRadar_default_instance_.DefaultConstruct();
  _ContiRadarObs_default_instance_.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _ContiRadar_default_instance_.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  _ContiRadar_default_instance_.get_mutable()->radar_state_ = const_cast< ::apollo::drivers::RadarState_201*>(
      ::apollo::drivers::RadarState_201::internal_default_instance());
  _ContiRadar_default_instance_.get_mutable()->cluster_list_status_ = const_cast< ::apollo::drivers::ClusterListStatus_600*>(
      ::apollo::drivers::ClusterListStatus_600::internal_default_instance());
  _ContiRadar_default_instance_.get_mutable()->object_list_status_ = const_cast< ::apollo::drivers::ObjectListStatus_60A*>(
      ::apollo::drivers::ObjectListStatus_60A::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'modules/drivers/proto/conti_radar.prot"
      "o\022\016apollo.drivers\032!modules/common/proto/"
      "header.proto\0328modules/drivers/conti_rada"
      "r/proto/conti_radar_conf.proto\"m\n\025Cluste"
      "rListStatus_600\022\017\n\004near\030\001 \001(\005:\0010\022\016\n\003far\030"
      "\002 \001(\005:\0010\022\030\n\014meas_counter\030\003 \001(\005:\002-1\022\031\n\021in"
      "terface_version\030\004 \001(\005\"c\n\024ObjectListStatu"
      "s_60A\022\026\n\013nof_objects\030\001 \001(\005:\0010\022\030\n\014meas_co"
      "unter\030\002 \001(\005:\002-1\022\031\n\021interface_version\030\003 \001"
      "(\005\"\346\001\n\016RadarState_201\022\024\n\014max_distance\030\001 "
      "\001(\r\022\023\n\013radar_power\030\002 \001(\r\022;\n\013output_type\030"
      "\003 \001(\0162&.apollo.drivers.conti_radar.Outpu"
      "tType\022\?\n\rrcs_threshold\030\004 \001(\0162(.apollo.dr"
      "ivers.conti_radar.RcsThreshold\022\024\n\014send_q"
      "uality\030\005 \001(\010\022\025\n\rsend_ext_info\030\006 \001(\010\"\301\004\n\r"
      "ContiRadarObs\022%\n\006header\030\001 \001(\0132\025.apollo.c"
      "ommon.Header\022\026\n\016clusterortrack\030\002 \001(\010\022\023\n\013"
      "obstacle_id\030\003 \001(\005\022\026\n\016longitude_dist\030\004 \002("
      "\001\022\024\n\014lateral_dist\030\005 \002(\001\022\025\n\rlongitude_vel"
      "\030\006 \002(\001\022\023\n\013lateral_vel\030\007 \002(\001\022\013\n\003rcs\030\010 \001(\001"
      "\022\017\n\007dynprop\030\t \001(\005\022\032\n\022longitude_dist_rms\030"
      "\n \001(\001\022\030\n\020lateral_dist_rms\030\013 \001(\001\022\031\n\021longi"
      "tude_vel_rms\030\014 \001(\001\022\027\n\017lateral_vel_rms\030\r "
      "\001(\001\022\021\n\tprobexist\030\016 \001(\001\022\022\n\nmeas_state\030\017 \001"
      "(\005\022\027\n\017longitude_accel\030\020 \001(\001\022\025\n\rlateral_a"
      "ccel\030\021 \001(\001\022\027\n\017oritation_angle\030\022 \001(\001\022\033\n\023l"
      "ongitude_accel_rms\030\023 \001(\001\022\031\n\021lateral_acce"
      "l_rms\030\024 \001(\001\022\033\n\023oritation_angle_rms\030\025 \001(\001"
      "\022\016\n\006length\030\026 \001(\001\022\r\n\005width\030\027 \001(\001\022\026\n\016obsta"
      "cle_class\030\030 \001(\005\"\237\002\n\nContiRadar\022%\n\006header"
      "\030\001 \001(\0132\025.apollo.common.Header\022/\n\010contiob"
      "s\030\002 \003(\0132\035.apollo.drivers.ContiRadarObs\0223"
      "\n\013radar_state\030\003 \001(\0132\036.apollo.drivers.Rad"
      "arState_201\022B\n\023cluster_list_status\030\004 \001(\013"
      "2%.apollo.drivers.ClusterListStatus_600\022"
      "@\n\022object_list_status\030\005 \001(\0132$.apollo.dri"
      "vers.ObjectListStatus_60A"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1465);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/proto/conti_radar.proto", &protobuf_RegisterTypes);
  ::apollo::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::apollo::drivers::conti_radar::protobuf_modules_2fdrivers_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterListStatus_600::kNearFieldNumber;
const int ClusterListStatus_600::kFarFieldNumber;
const int ClusterListStatus_600::kMeasCounterFieldNumber;
const int ClusterListStatus_600::kInterfaceVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterListStatus_600::ClusterListStatus_600()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.ClusterListStatus_600)
}
ClusterListStatus_600::ClusterListStatus_600(const ClusterListStatus_600& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&near_, &from.near_,
    reinterpret_cast<char*>(&meas_counter_) -
    reinterpret_cast<char*>(&near_) + sizeof(meas_counter_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.ClusterListStatus_600)
}

void ClusterListStatus_600::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&near_, 0, reinterpret_cast<char*>(&interface_version_) -
    reinterpret_cast<char*>(&near_) + sizeof(interface_version_));
  meas_counter_ = -1;
}

ClusterListStatus_600::~ClusterListStatus_600() {
  // @@protoc_insertion_point(destructor:apollo.drivers.ClusterListStatus_600)
  SharedDtor();
}

void ClusterListStatus_600::SharedDtor() {
}

void ClusterListStatus_600::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterListStatus_600::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusterListStatus_600& ClusterListStatus_600::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterListStatus_600* ClusterListStatus_600::New(::google::protobuf::Arena* arena) const {
  ClusterListStatus_600* n = new ClusterListStatus_600;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterListStatus_600::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.ClusterListStatus_600)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&near_, 0, reinterpret_cast<char*>(&interface_version_) -
      reinterpret_cast<char*>(&near_) + sizeof(interface_version_));
    meas_counter_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClusterListStatus_600::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.ClusterListStatus_600)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 near = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_near();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &near_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 far = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_far();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &far_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 meas_counter = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_meas_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meas_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 interface_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_interface_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interface_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.ClusterListStatus_600)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.ClusterListStatus_600)
  return false;
#undef DO_
}

void ClusterListStatus_600::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.ClusterListStatus_600)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 near = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->near(), output);
  }

  // optional int32 far = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->far(), output);
  }

  // optional int32 meas_counter = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->meas_counter(), output);
  }

  // optional int32 interface_version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->interface_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.ClusterListStatus_600)
}

::google::protobuf::uint8* ClusterListStatus_600::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.ClusterListStatus_600)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 near = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->near(), target);
  }

  // optional int32 far = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->far(), target);
  }

  // optional int32 meas_counter = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->meas_counter(), target);
  }

  // optional int32 interface_version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->interface_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.ClusterListStatus_600)
  return target;
}

size_t ClusterListStatus_600::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.ClusterListStatus_600)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 near = 1 [default = 0];
    if (has_near()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->near());
    }

    // optional int32 far = 2 [default = 0];
    if (has_far()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->far());
    }

    // optional int32 interface_version = 4;
    if (has_interface_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interface_version());
    }

    // optional int32 meas_counter = 3 [default = -1];
    if (has_meas_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meas_counter());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterListStatus_600::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.ClusterListStatus_600)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterListStatus_600* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterListStatus_600>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.ClusterListStatus_600)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.ClusterListStatus_600)
    MergeFrom(*source);
  }
}

void ClusterListStatus_600::MergeFrom(const ClusterListStatus_600& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.ClusterListStatus_600)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      near_ = from.near_;
    }
    if (cached_has_bits & 0x00000002u) {
      far_ = from.far_;
    }
    if (cached_has_bits & 0x00000004u) {
      interface_version_ = from.interface_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      meas_counter_ = from.meas_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClusterListStatus_600::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.ClusterListStatus_600)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterListStatus_600::CopyFrom(const ClusterListStatus_600& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.ClusterListStatus_600)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterListStatus_600::IsInitialized() const {
  return true;
}

void ClusterListStatus_600::Swap(ClusterListStatus_600* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterListStatus_600::InternalSwap(ClusterListStatus_600* other) {
  std::swap(near_, other->near_);
  std::swap(far_, other->far_);
  std::swap(interface_version_, other->interface_version_);
  std::swap(meas_counter_, other->meas_counter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterListStatus_600::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterListStatus_600

// optional int32 near = 1 [default = 0];
bool ClusterListStatus_600::has_near() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClusterListStatus_600::set_has_near() {
  _has_bits_[0] |= 0x00000001u;
}
void ClusterListStatus_600::clear_has_near() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClusterListStatus_600::clear_near() {
  near_ = 0;
  clear_has_near();
}
::google::protobuf::int32 ClusterListStatus_600::near() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ClusterListStatus_600.near)
  return near_;
}
void ClusterListStatus_600::set_near(::google::protobuf::int32 value) {
  set_has_near();
  near_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ClusterListStatus_600.near)
}

// optional int32 far = 2 [default = 0];
bool ClusterListStatus_600::has_far() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClusterListStatus_600::set_has_far() {
  _has_bits_[0] |= 0x00000002u;
}
void ClusterListStatus_600::clear_has_far() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClusterListStatus_600::clear_far() {
  far_ = 0;
  clear_has_far();
}
::google::protobuf::int32 ClusterListStatus_600::far() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ClusterListStatus_600.far)
  return far_;
}
void ClusterListStatus_600::set_far(::google::protobuf::int32 value) {
  set_has_far();
  far_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ClusterListStatus_600.far)
}

// optional int32 meas_counter = 3 [default = -1];
bool ClusterListStatus_600::has_meas_counter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClusterListStatus_600::set_has_meas_counter() {
  _has_bits_[0] |= 0x00000008u;
}
void ClusterListStatus_600::clear_has_meas_counter() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClusterListStatus_600::clear_meas_counter() {
  meas_counter_ = -1;
  clear_has_meas_counter();
}
::google::protobuf::int32 ClusterListStatus_600::meas_counter() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ClusterListStatus_600.meas_counter)
  return meas_counter_;
}
void ClusterListStatus_600::set_meas_counter(::google::protobuf::int32 value) {
  set_has_meas_counter();
  meas_counter_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ClusterListStatus_600.meas_counter)
}

// optional int32 interface_version = 4;
bool ClusterListStatus_600::has_interface_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClusterListStatus_600::set_has_interface_version() {
  _has_bits_[0] |= 0x00000004u;
}
void ClusterListStatus_600::clear_has_interface_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClusterListStatus_600::clear_interface_version() {
  interface_version_ = 0;
  clear_has_interface_version();
}
::google::protobuf::int32 ClusterListStatus_600::interface_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ClusterListStatus_600.interface_version)
  return interface_version_;
}
void ClusterListStatus_600::set_interface_version(::google::protobuf::int32 value) {
  set_has_interface_version();
  interface_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ClusterListStatus_600.interface_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectListStatus_60A::kNofObjectsFieldNumber;
const int ObjectListStatus_60A::kMeasCounterFieldNumber;
const int ObjectListStatus_60A::kInterfaceVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectListStatus_60A::ObjectListStatus_60A()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.ObjectListStatus_60A)
}
ObjectListStatus_60A::ObjectListStatus_60A(const ObjectListStatus_60A& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nof_objects_, &from.nof_objects_,
    reinterpret_cast<char*>(&meas_counter_) -
    reinterpret_cast<char*>(&nof_objects_) + sizeof(meas_counter_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.ObjectListStatus_60A)
}

void ObjectListStatus_60A::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nof_objects_, 0, reinterpret_cast<char*>(&interface_version_) -
    reinterpret_cast<char*>(&nof_objects_) + sizeof(interface_version_));
  meas_counter_ = -1;
}

ObjectListStatus_60A::~ObjectListStatus_60A() {
  // @@protoc_insertion_point(destructor:apollo.drivers.ObjectListStatus_60A)
  SharedDtor();
}

void ObjectListStatus_60A::SharedDtor() {
}

void ObjectListStatus_60A::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectListStatus_60A::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectListStatus_60A& ObjectListStatus_60A::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectListStatus_60A* ObjectListStatus_60A::New(::google::protobuf::Arena* arena) const {
  ObjectListStatus_60A* n = new ObjectListStatus_60A;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectListStatus_60A::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.ObjectListStatus_60A)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&nof_objects_, 0, reinterpret_cast<char*>(&interface_version_) -
      reinterpret_cast<char*>(&nof_objects_) + sizeof(interface_version_));
    meas_counter_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectListStatus_60A::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.ObjectListStatus_60A)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nof_objects = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_nof_objects();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nof_objects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 meas_counter = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_meas_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meas_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 interface_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_interface_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interface_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.ObjectListStatus_60A)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.ObjectListStatus_60A)
  return false;
#undef DO_
}

void ObjectListStatus_60A::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.ObjectListStatus_60A)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nof_objects = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nof_objects(), output);
  }

  // optional int32 meas_counter = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->meas_counter(), output);
  }

  // optional int32 interface_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->interface_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.ObjectListStatus_60A)
}

::google::protobuf::uint8* ObjectListStatus_60A::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.ObjectListStatus_60A)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nof_objects = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nof_objects(), target);
  }

  // optional int32 meas_counter = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->meas_counter(), target);
  }

  // optional int32 interface_version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->interface_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.ObjectListStatus_60A)
  return target;
}

size_t ObjectListStatus_60A::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.ObjectListStatus_60A)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 nof_objects = 1 [default = 0];
    if (has_nof_objects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nof_objects());
    }

    // optional int32 interface_version = 3;
    if (has_interface_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interface_version());
    }

    // optional int32 meas_counter = 2 [default = -1];
    if (has_meas_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meas_counter());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectListStatus_60A::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.ObjectListStatus_60A)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectListStatus_60A* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectListStatus_60A>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.ObjectListStatus_60A)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.ObjectListStatus_60A)
    MergeFrom(*source);
  }
}

void ObjectListStatus_60A::MergeFrom(const ObjectListStatus_60A& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.ObjectListStatus_60A)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      nof_objects_ = from.nof_objects_;
    }
    if (cached_has_bits & 0x00000002u) {
      interface_version_ = from.interface_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      meas_counter_ = from.meas_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectListStatus_60A::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.ObjectListStatus_60A)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectListStatus_60A::CopyFrom(const ObjectListStatus_60A& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.ObjectListStatus_60A)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectListStatus_60A::IsInitialized() const {
  return true;
}

void ObjectListStatus_60A::Swap(ObjectListStatus_60A* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectListStatus_60A::InternalSwap(ObjectListStatus_60A* other) {
  std::swap(nof_objects_, other->nof_objects_);
  std::swap(interface_version_, other->interface_version_);
  std::swap(meas_counter_, other->meas_counter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectListStatus_60A::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectListStatus_60A

// optional int32 nof_objects = 1 [default = 0];
bool ObjectListStatus_60A::has_nof_objects() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectListStatus_60A::set_has_nof_objects() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectListStatus_60A::clear_has_nof_objects() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectListStatus_60A::clear_nof_objects() {
  nof_objects_ = 0;
  clear_has_nof_objects();
}
::google::protobuf::int32 ObjectListStatus_60A::nof_objects() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ObjectListStatus_60A.nof_objects)
  return nof_objects_;
}
void ObjectListStatus_60A::set_nof_objects(::google::protobuf::int32 value) {
  set_has_nof_objects();
  nof_objects_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ObjectListStatus_60A.nof_objects)
}

// optional int32 meas_counter = 2 [default = -1];
bool ObjectListStatus_60A::has_meas_counter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObjectListStatus_60A::set_has_meas_counter() {
  _has_bits_[0] |= 0x00000004u;
}
void ObjectListStatus_60A::clear_has_meas_counter() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObjectListStatus_60A::clear_meas_counter() {
  meas_counter_ = -1;
  clear_has_meas_counter();
}
::google::protobuf::int32 ObjectListStatus_60A::meas_counter() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ObjectListStatus_60A.meas_counter)
  return meas_counter_;
}
void ObjectListStatus_60A::set_meas_counter(::google::protobuf::int32 value) {
  set_has_meas_counter();
  meas_counter_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ObjectListStatus_60A.meas_counter)
}

// optional int32 interface_version = 3;
bool ObjectListStatus_60A::has_interface_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectListStatus_60A::set_has_interface_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectListStatus_60A::clear_has_interface_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectListStatus_60A::clear_interface_version() {
  interface_version_ = 0;
  clear_has_interface_version();
}
::google::protobuf::int32 ObjectListStatus_60A::interface_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ObjectListStatus_60A.interface_version)
  return interface_version_;
}
void ObjectListStatus_60A::set_interface_version(::google::protobuf::int32 value) {
  set_has_interface_version();
  interface_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ObjectListStatus_60A.interface_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarState_201::kMaxDistanceFieldNumber;
const int RadarState_201::kRadarPowerFieldNumber;
const int RadarState_201::kOutputTypeFieldNumber;
const int RadarState_201::kRcsThresholdFieldNumber;
const int RadarState_201::kSendQualityFieldNumber;
const int RadarState_201::kSendExtInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarState_201::RadarState_201()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RadarState_201)
}
RadarState_201::RadarState_201(const RadarState_201& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_distance_, &from.max_distance_,
    reinterpret_cast<char*>(&send_ext_info_) -
    reinterpret_cast<char*>(&max_distance_) + sizeof(send_ext_info_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RadarState_201)
}

void RadarState_201::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&max_distance_, 0, reinterpret_cast<char*>(&send_ext_info_) -
    reinterpret_cast<char*>(&max_distance_) + sizeof(send_ext_info_));
}

RadarState_201::~RadarState_201() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RadarState_201)
  SharedDtor();
}

void RadarState_201::SharedDtor() {
}

void RadarState_201::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarState_201::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RadarState_201& RadarState_201::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::InitDefaults();
  return *internal_default_instance();
}

RadarState_201* RadarState_201::New(::google::protobuf::Arena* arena) const {
  RadarState_201* n = new RadarState_201;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarState_201::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RadarState_201)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&max_distance_, 0, reinterpret_cast<char*>(&send_ext_info_) -
      reinterpret_cast<char*>(&max_distance_) + sizeof(send_ext_info_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RadarState_201::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.RadarState_201)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_distance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_max_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radar_power = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_radar_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radar_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.conti_radar.OutputType output_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::conti_radar::OutputType_IsValid(value)) {
            set_output_type(static_cast< ::apollo::drivers::conti_radar::OutputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::conti_radar::RcsThreshold_IsValid(value)) {
            set_rcs_threshold(static_cast< ::apollo::drivers::conti_radar::RcsThreshold >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_quality = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_send_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_ext_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_send_ext_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_ext_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.RadarState_201)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.RadarState_201)
  return false;
#undef DO_
}

void RadarState_201::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.RadarState_201)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_distance(), output);
  }

  // optional uint32 radar_power = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->radar_power(), output);
  }

  // optional .apollo.drivers.conti_radar.OutputType output_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->output_type(), output);
  }

  // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->rcs_threshold(), output);
  }

  // optional bool send_quality = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->send_quality(), output);
  }

  // optional bool send_ext_info = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->send_ext_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.RadarState_201)
}

::google::protobuf::uint8* RadarState_201::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RadarState_201)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_distance(), target);
  }

  // optional uint32 radar_power = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->radar_power(), target);
  }

  // optional .apollo.drivers.conti_radar.OutputType output_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->output_type(), target);
  }

  // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->rcs_threshold(), target);
  }

  // optional bool send_quality = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->send_quality(), target);
  }

  // optional bool send_ext_info = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->send_ext_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RadarState_201)
  return target;
}

size_t RadarState_201::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RadarState_201)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 max_distance = 1;
    if (has_max_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_distance());
    }

    // optional uint32 radar_power = 2;
    if (has_radar_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radar_power());
    }

    // optional .apollo.drivers.conti_radar.OutputType output_type = 3;
    if (has_output_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_type());
    }

    // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 4;
    if (has_rcs_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rcs_threshold());
    }

    // optional bool send_quality = 5;
    if (has_send_quality()) {
      total_size += 1 + 1;
    }

    // optional bool send_ext_info = 6;
    if (has_send_ext_info()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarState_201::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RadarState_201)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarState_201* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarState_201>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RadarState_201)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RadarState_201)
    MergeFrom(*source);
  }
}

void RadarState_201::MergeFrom(const RadarState_201& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RadarState_201)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      max_distance_ = from.max_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      radar_power_ = from.radar_power_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_type_ = from.output_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      rcs_threshold_ = from.rcs_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      send_quality_ = from.send_quality_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ext_info_ = from.send_ext_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarState_201::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RadarState_201)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarState_201::CopyFrom(const RadarState_201& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RadarState_201)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarState_201::IsInitialized() const {
  return true;
}

void RadarState_201::Swap(RadarState_201* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarState_201::InternalSwap(RadarState_201* other) {
  std::swap(max_distance_, other->max_distance_);
  std::swap(radar_power_, other->radar_power_);
  std::swap(output_type_, other->output_type_);
  std::swap(rcs_threshold_, other->rcs_threshold_);
  std::swap(send_quality_, other->send_quality_);
  std::swap(send_ext_info_, other->send_ext_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarState_201::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarState_201

// optional uint32 max_distance = 1;
bool RadarState_201::has_max_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarState_201::set_has_max_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarState_201::clear_has_max_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarState_201::clear_max_distance() {
  max_distance_ = 0u;
  clear_has_max_distance();
}
::google::protobuf::uint32 RadarState_201::max_distance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarState_201.max_distance)
  return max_distance_;
}
void RadarState_201::set_max_distance(::google::protobuf::uint32 value) {
  set_has_max_distance();
  max_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarState_201.max_distance)
}

// optional uint32 radar_power = 2;
bool RadarState_201::has_radar_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarState_201::set_has_radar_power() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarState_201::clear_has_radar_power() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarState_201::clear_radar_power() {
  radar_power_ = 0u;
  clear_has_radar_power();
}
::google::protobuf::uint32 RadarState_201::radar_power() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarState_201.radar_power)
  return radar_power_;
}
void RadarState_201::set_radar_power(::google::protobuf::uint32 value) {
  set_has_radar_power();
  radar_power_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarState_201.radar_power)
}

// optional .apollo.drivers.conti_radar.OutputType output_type = 3;
bool RadarState_201::has_output_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RadarState_201::set_has_output_type() {
  _has_bits_[0] |= 0x00000004u;
}
void RadarState_201::clear_has_output_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void RadarState_201::clear_output_type() {
  output_type_ = 0;
  clear_has_output_type();
}
::apollo::drivers::conti_radar::OutputType RadarState_201::output_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarState_201.output_type)
  return static_cast< ::apollo::drivers::conti_radar::OutputType >(output_type_);
}
void RadarState_201::set_output_type(::apollo::drivers::conti_radar::OutputType value) {
  assert(::apollo::drivers::conti_radar::OutputType_IsValid(value));
  set_has_output_type();
  output_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarState_201.output_type)
}

// optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 4;
bool RadarState_201::has_rcs_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RadarState_201::set_has_rcs_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void RadarState_201::clear_has_rcs_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void RadarState_201::clear_rcs_threshold() {
  rcs_threshold_ = 0;
  clear_has_rcs_threshold();
}
::apollo::drivers::conti_radar::RcsThreshold RadarState_201::rcs_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarState_201.rcs_threshold)
  return static_cast< ::apollo::drivers::conti_radar::RcsThreshold >(rcs_threshold_);
}
void RadarState_201::set_rcs_threshold(::apollo::drivers::conti_radar::RcsThreshold value) {
  assert(::apollo::drivers::conti_radar::RcsThreshold_IsValid(value));
  set_has_rcs_threshold();
  rcs_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarState_201.rcs_threshold)
}

// optional bool send_quality = 5;
bool RadarState_201::has_send_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RadarState_201::set_has_send_quality() {
  _has_bits_[0] |= 0x00000010u;
}
void RadarState_201::clear_has_send_quality() {
  _has_bits_[0] &= ~0x00000010u;
}
void RadarState_201::clear_send_quality() {
  send_quality_ = false;
  clear_has_send_quality();
}
bool RadarState_201::send_quality() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarState_201.send_quality)
  return send_quality_;
}
void RadarState_201::set_send_quality(bool value) {
  set_has_send_quality();
  send_quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarState_201.send_quality)
}

// optional bool send_ext_info = 6;
bool RadarState_201::has_send_ext_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RadarState_201::set_has_send_ext_info() {
  _has_bits_[0] |= 0x00000020u;
}
void RadarState_201::clear_has_send_ext_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void RadarState_201::clear_send_ext_info() {
  send_ext_info_ = false;
  clear_has_send_ext_info();
}
bool RadarState_201::send_ext_info() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarState_201.send_ext_info)
  return send_ext_info_;
}
void RadarState_201::set_send_ext_info(bool value) {
  set_has_send_ext_info();
  send_ext_info_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarState_201.send_ext_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContiRadarObs::kHeaderFieldNumber;
const int ContiRadarObs::kClusterortrackFieldNumber;
const int ContiRadarObs::kObstacleIdFieldNumber;
const int ContiRadarObs::kLongitudeDistFieldNumber;
const int ContiRadarObs::kLateralDistFieldNumber;
const int ContiRadarObs::kLongitudeVelFieldNumber;
const int ContiRadarObs::kLateralVelFieldNumber;
const int ContiRadarObs::kRcsFieldNumber;
const int ContiRadarObs::kDynpropFieldNumber;
const int ContiRadarObs::kLongitudeDistRmsFieldNumber;
const int ContiRadarObs::kLateralDistRmsFieldNumber;
const int ContiRadarObs::kLongitudeVelRmsFieldNumber;
const int ContiRadarObs::kLateralVelRmsFieldNumber;
const int ContiRadarObs::kProbexistFieldNumber;
const int ContiRadarObs::kMeasStateFieldNumber;
const int ContiRadarObs::kLongitudeAccelFieldNumber;
const int ContiRadarObs::kLateralAccelFieldNumber;
const int ContiRadarObs::kOritationAngleFieldNumber;
const int ContiRadarObs::kLongitudeAccelRmsFieldNumber;
const int ContiRadarObs::kLateralAccelRmsFieldNumber;
const int ContiRadarObs::kOritationAngleRmsFieldNumber;
const int ContiRadarObs::kLengthFieldNumber;
const int ContiRadarObs::kWidthFieldNumber;
const int ContiRadarObs::kObstacleClassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContiRadarObs::ContiRadarObs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.ContiRadarObs)
}
ContiRadarObs::ContiRadarObs(const ContiRadarObs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&clusterortrack_, &from.clusterortrack_,
    reinterpret_cast<char*>(&obstacle_class_) -
    reinterpret_cast<char*>(&clusterortrack_) + sizeof(obstacle_class_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.ContiRadarObs)
}

void ContiRadarObs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&obstacle_class_) -
    reinterpret_cast<char*>(&header_) + sizeof(obstacle_class_));
}

ContiRadarObs::~ContiRadarObs() {
  // @@protoc_insertion_point(destructor:apollo.drivers.ContiRadarObs)
  SharedDtor();
}

void ContiRadarObs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ContiRadarObs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContiRadarObs::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContiRadarObs& ContiRadarObs::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContiRadarObs* ContiRadarObs::New(::google::protobuf::Arena* arena) const {
  ContiRadarObs* n = new ContiRadarObs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContiRadarObs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.ContiRadarObs)
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::apollo::common::Header::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&clusterortrack_, 0, reinterpret_cast<char*>(&rcs_) -
      reinterpret_cast<char*>(&clusterortrack_) + sizeof(rcs_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&longitude_dist_rms_, 0, reinterpret_cast<char*>(&longitude_accel_) -
      reinterpret_cast<char*>(&longitude_dist_rms_) + sizeof(longitude_accel_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&lateral_accel_, 0, reinterpret_cast<char*>(&obstacle_class_) -
      reinterpret_cast<char*>(&lateral_accel_) + sizeof(obstacle_class_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContiRadarObs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.ContiRadarObs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clusterortrack = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_clusterortrack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clusterortrack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obstacle_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_obstacle_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude_dist = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_longitude_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double lateral_dist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_lateral_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude_vel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_longitude_vel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double lateral_vel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_lateral_vel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rcs = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_rcs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dynprop = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_dynprop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dynprop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_dist_rms = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_longitude_dist_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_dist_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_dist_rms = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_lateral_dist_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_dist_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_vel_rms = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_longitude_vel_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_vel_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_vel_rms = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_lateral_vel_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_vel_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double probexist = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_probexist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probexist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 meas_state = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_meas_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meas_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_accel = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_longitude_accel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_accel = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_lateral_accel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double oritation_angle = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_oritation_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &oritation_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_accel_rms = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {
          set_has_longitude_accel_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_accel_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_accel_rms = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_lateral_accel_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_accel_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double oritation_angle_rms = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u)) {
          set_has_oritation_angle_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &oritation_angle_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obstacle_class = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_obstacle_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.ContiRadarObs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.ContiRadarObs)
  return false;
#undef DO_
}

void ContiRadarObs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.ContiRadarObs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional bool clusterortrack = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clusterortrack(), output);
  }

  // optional int32 obstacle_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->obstacle_id(), output);
  }

  // required double longitude_dist = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude_dist(), output);
  }

  // required double lateral_dist = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lateral_dist(), output);
  }

  // required double longitude_vel = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->longitude_vel(), output);
  }

  // required double lateral_vel = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lateral_vel(), output);
  }

  // optional double rcs = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->rcs(), output);
  }

  // optional int32 dynprop = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dynprop(), output);
  }

  // optional double longitude_dist_rms = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->longitude_dist_rms(), output);
  }

  // optional double lateral_dist_rms = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->lateral_dist_rms(), output);
  }

  // optional double longitude_vel_rms = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->longitude_vel_rms(), output);
  }

  // optional double lateral_vel_rms = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->lateral_vel_rms(), output);
  }

  // optional double probexist = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->probexist(), output);
  }

  // optional int32 meas_state = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->meas_state(), output);
  }

  // optional double longitude_accel = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->longitude_accel(), output);
  }

  // optional double lateral_accel = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->lateral_accel(), output);
  }

  // optional double oritation_angle = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->oritation_angle(), output);
  }

  // optional double longitude_accel_rms = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->longitude_accel_rms(), output);
  }

  // optional double lateral_accel_rms = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->lateral_accel_rms(), output);
  }

  // optional double oritation_angle_rms = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->oritation_angle_rms(), output);
  }

  // optional double length = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->length(), output);
  }

  // optional double width = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->width(), output);
  }

  // optional int32 obstacle_class = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->obstacle_class(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.ContiRadarObs)
}

::google::protobuf::uint8* ContiRadarObs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.ContiRadarObs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional bool clusterortrack = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clusterortrack(), target);
  }

  // optional int32 obstacle_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->obstacle_id(), target);
  }

  // required double longitude_dist = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude_dist(), target);
  }

  // required double lateral_dist = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lateral_dist(), target);
  }

  // required double longitude_vel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->longitude_vel(), target);
  }

  // required double lateral_vel = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lateral_vel(), target);
  }

  // optional double rcs = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->rcs(), target);
  }

  // optional int32 dynprop = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dynprop(), target);
  }

  // optional double longitude_dist_rms = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->longitude_dist_rms(), target);
  }

  // optional double lateral_dist_rms = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->lateral_dist_rms(), target);
  }

  // optional double longitude_vel_rms = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->longitude_vel_rms(), target);
  }

  // optional double lateral_vel_rms = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->lateral_vel_rms(), target);
  }

  // optional double probexist = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->probexist(), target);
  }

  // optional int32 meas_state = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->meas_state(), target);
  }

  // optional double longitude_accel = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->longitude_accel(), target);
  }

  // optional double lateral_accel = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->lateral_accel(), target);
  }

  // optional double oritation_angle = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->oritation_angle(), target);
  }

  // optional double longitude_accel_rms = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->longitude_accel_rms(), target);
  }

  // optional double lateral_accel_rms = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->lateral_accel_rms(), target);
  }

  // optional double oritation_angle_rms = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->oritation_angle_rms(), target);
  }

  // optional double length = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->length(), target);
  }

  // optional double width = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->width(), target);
  }

  // optional int32 obstacle_class = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->obstacle_class(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.ContiRadarObs)
  return target;
}

size_t ContiRadarObs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:apollo.drivers.ContiRadarObs)
  size_t total_size = 0;

  if (has_longitude_dist()) {
    // required double longitude_dist = 4;
    total_size += 1 + 8;
  }

  if (has_lateral_dist()) {
    // required double lateral_dist = 5;
    total_size += 1 + 8;
  }

  if (has_longitude_vel()) {
    // required double longitude_vel = 6;
    total_size += 1 + 8;
  }

  if (has_lateral_vel()) {
    // required double lateral_vel = 7;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ContiRadarObs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.ContiRadarObs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000078) ^ 0x00000078) == 0) {  // All required fields are present.
    // required double longitude_dist = 4;
    total_size += 1 + 8;

    // required double lateral_dist = 5;
    total_size += 1 + 8;

    // required double longitude_vel = 6;
    total_size += 1 + 8;

    // required double lateral_vel = 7;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional bool clusterortrack = 2;
    if (has_clusterortrack()) {
      total_size += 1 + 1;
    }

    // optional int32 obstacle_id = 3;
    if (has_obstacle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacle_id());
    }

  }
  // optional double rcs = 8;
  if (has_rcs()) {
    total_size += 1 + 8;
  }

  if (_has_bits_[8 / 32] & 65280u) {
    // optional double longitude_dist_rms = 10;
    if (has_longitude_dist_rms()) {
      total_size += 1 + 8;
    }

    // optional double lateral_dist_rms = 11;
    if (has_lateral_dist_rms()) {
      total_size += 1 + 8;
    }

    // optional double longitude_vel_rms = 12;
    if (has_longitude_vel_rms()) {
      total_size += 1 + 8;
    }

    // optional int32 dynprop = 9;
    if (has_dynprop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dynprop());
    }

    // optional int32 meas_state = 15;
    if (has_meas_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meas_state());
    }

    // optional double lateral_vel_rms = 13;
    if (has_lateral_vel_rms()) {
      total_size += 1 + 8;
    }

    // optional double probexist = 14;
    if (has_probexist()) {
      total_size += 1 + 8;
    }

    // optional double longitude_accel = 16;
    if (has_longitude_accel()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double lateral_accel = 17;
    if (has_lateral_accel()) {
      total_size += 2 + 8;
    }

    // optional double oritation_angle = 18;
    if (has_oritation_angle()) {
      total_size += 2 + 8;
    }

    // optional double longitude_accel_rms = 19;
    if (has_longitude_accel_rms()) {
      total_size += 2 + 8;
    }

    // optional double lateral_accel_rms = 20;
    if (has_lateral_accel_rms()) {
      total_size += 2 + 8;
    }

    // optional double oritation_angle_rms = 21;
    if (has_oritation_angle_rms()) {
      total_size += 2 + 8;
    }

    // optional double length = 22;
    if (has_length()) {
      total_size += 2 + 8;
    }

    // optional double width = 23;
    if (has_width()) {
      total_size += 2 + 8;
    }

    // optional int32 obstacle_class = 24;
    if (has_obstacle_class()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacle_class());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContiRadarObs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.ContiRadarObs)
  GOOGLE_DCHECK_NE(&from, this);
  const ContiRadarObs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContiRadarObs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.ContiRadarObs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.ContiRadarObs)
    MergeFrom(*source);
  }
}

void ContiRadarObs::MergeFrom(const ContiRadarObs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.ContiRadarObs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      clusterortrack_ = from.clusterortrack_;
    }
    if (cached_has_bits & 0x00000004u) {
      obstacle_id_ = from.obstacle_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      longitude_dist_ = from.longitude_dist_;
    }
    if (cached_has_bits & 0x00000010u) {
      lateral_dist_ = from.lateral_dist_;
    }
    if (cached_has_bits & 0x00000020u) {
      longitude_vel_ = from.longitude_vel_;
    }
    if (cached_has_bits & 0x00000040u) {
      lateral_vel_ = from.lateral_vel_;
    }
    if (cached_has_bits & 0x00000080u) {
      rcs_ = from.rcs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      longitude_dist_rms_ = from.longitude_dist_rms_;
    }
    if (cached_has_bits & 0x00000200u) {
      lateral_dist_rms_ = from.lateral_dist_rms_;
    }
    if (cached_has_bits & 0x00000400u) {
      longitude_vel_rms_ = from.longitude_vel_rms_;
    }
    if (cached_has_bits & 0x00000800u) {
      dynprop_ = from.dynprop_;
    }
    if (cached_has_bits & 0x00001000u) {
      meas_state_ = from.meas_state_;
    }
    if (cached_has_bits & 0x00002000u) {
      lateral_vel_rms_ = from.lateral_vel_rms_;
    }
    if (cached_has_bits & 0x00004000u) {
      probexist_ = from.probexist_;
    }
    if (cached_has_bits & 0x00008000u) {
      longitude_accel_ = from.longitude_accel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      lateral_accel_ = from.lateral_accel_;
    }
    if (cached_has_bits & 0x00020000u) {
      oritation_angle_ = from.oritation_angle_;
    }
    if (cached_has_bits & 0x00040000u) {
      longitude_accel_rms_ = from.longitude_accel_rms_;
    }
    if (cached_has_bits & 0x00080000u) {
      lateral_accel_rms_ = from.lateral_accel_rms_;
    }
    if (cached_has_bits & 0x00100000u) {
      oritation_angle_rms_ = from.oritation_angle_rms_;
    }
    if (cached_has_bits & 0x00200000u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00400000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00800000u) {
      obstacle_class_ = from.obstacle_class_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContiRadarObs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.ContiRadarObs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContiRadarObs::CopyFrom(const ContiRadarObs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.ContiRadarObs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContiRadarObs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000078) != 0x00000078) return false;
  return true;
}

void ContiRadarObs::Swap(ContiRadarObs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContiRadarObs::InternalSwap(ContiRadarObs* other) {
  std::swap(header_, other->header_);
  std::swap(clusterortrack_, other->clusterortrack_);
  std::swap(obstacle_id_, other->obstacle_id_);
  std::swap(longitude_dist_, other->longitude_dist_);
  std::swap(lateral_dist_, other->lateral_dist_);
  std::swap(longitude_vel_, other->longitude_vel_);
  std::swap(lateral_vel_, other->lateral_vel_);
  std::swap(rcs_, other->rcs_);
  std::swap(longitude_dist_rms_, other->longitude_dist_rms_);
  std::swap(lateral_dist_rms_, other->lateral_dist_rms_);
  std::swap(longitude_vel_rms_, other->longitude_vel_rms_);
  std::swap(dynprop_, other->dynprop_);
  std::swap(meas_state_, other->meas_state_);
  std::swap(lateral_vel_rms_, other->lateral_vel_rms_);
  std::swap(probexist_, other->probexist_);
  std::swap(longitude_accel_, other->longitude_accel_);
  std::swap(lateral_accel_, other->lateral_accel_);
  std::swap(oritation_angle_, other->oritation_angle_);
  std::swap(longitude_accel_rms_, other->longitude_accel_rms_);
  std::swap(lateral_accel_rms_, other->lateral_accel_rms_);
  std::swap(oritation_angle_rms_, other->oritation_angle_rms_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(obstacle_class_, other->obstacle_class_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContiRadarObs::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContiRadarObs

// optional .apollo.common.Header header = 1;
bool ContiRadarObs::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContiRadarObs::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void ContiRadarObs::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContiRadarObs::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& ContiRadarObs::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* ContiRadarObs::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.ContiRadarObs.header)
  return header_;
}
::apollo::common::Header* ContiRadarObs::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.ContiRadarObs.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void ContiRadarObs::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.ContiRadarObs.header)
}

// optional bool clusterortrack = 2;
bool ContiRadarObs::has_clusterortrack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContiRadarObs::set_has_clusterortrack() {
  _has_bits_[0] |= 0x00000002u;
}
void ContiRadarObs::clear_has_clusterortrack() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContiRadarObs::clear_clusterortrack() {
  clusterortrack_ = false;
  clear_has_clusterortrack();
}
bool ContiRadarObs::clusterortrack() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.clusterortrack)
  return clusterortrack_;
}
void ContiRadarObs::set_clusterortrack(bool value) {
  set_has_clusterortrack();
  clusterortrack_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.clusterortrack)
}

// optional int32 obstacle_id = 3;
bool ContiRadarObs::has_obstacle_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContiRadarObs::set_has_obstacle_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ContiRadarObs::clear_has_obstacle_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContiRadarObs::clear_obstacle_id() {
  obstacle_id_ = 0;
  clear_has_obstacle_id();
}
::google::protobuf::int32 ContiRadarObs::obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.obstacle_id)
  return obstacle_id_;
}
void ContiRadarObs::set_obstacle_id(::google::protobuf::int32 value) {
  set_has_obstacle_id();
  obstacle_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.obstacle_id)
}

// required double longitude_dist = 4;
bool ContiRadarObs::has_longitude_dist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ContiRadarObs::set_has_longitude_dist() {
  _has_bits_[0] |= 0x00000008u;
}
void ContiRadarObs::clear_has_longitude_dist() {
  _has_bits_[0] &= ~0x00000008u;
}
void ContiRadarObs::clear_longitude_dist() {
  longitude_dist_ = 0;
  clear_has_longitude_dist();
}
double ContiRadarObs::longitude_dist() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.longitude_dist)
  return longitude_dist_;
}
void ContiRadarObs::set_longitude_dist(double value) {
  set_has_longitude_dist();
  longitude_dist_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.longitude_dist)
}

// required double lateral_dist = 5;
bool ContiRadarObs::has_lateral_dist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ContiRadarObs::set_has_lateral_dist() {
  _has_bits_[0] |= 0x00000010u;
}
void ContiRadarObs::clear_has_lateral_dist() {
  _has_bits_[0] &= ~0x00000010u;
}
void ContiRadarObs::clear_lateral_dist() {
  lateral_dist_ = 0;
  clear_has_lateral_dist();
}
double ContiRadarObs::lateral_dist() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.lateral_dist)
  return lateral_dist_;
}
void ContiRadarObs::set_lateral_dist(double value) {
  set_has_lateral_dist();
  lateral_dist_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.lateral_dist)
}

// required double longitude_vel = 6;
bool ContiRadarObs::has_longitude_vel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ContiRadarObs::set_has_longitude_vel() {
  _has_bits_[0] |= 0x00000020u;
}
void ContiRadarObs::clear_has_longitude_vel() {
  _has_bits_[0] &= ~0x00000020u;
}
void ContiRadarObs::clear_longitude_vel() {
  longitude_vel_ = 0;
  clear_has_longitude_vel();
}
double ContiRadarObs::longitude_vel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.longitude_vel)
  return longitude_vel_;
}
void ContiRadarObs::set_longitude_vel(double value) {
  set_has_longitude_vel();
  longitude_vel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.longitude_vel)
}

// required double lateral_vel = 7;
bool ContiRadarObs::has_lateral_vel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ContiRadarObs::set_has_lateral_vel() {
  _has_bits_[0] |= 0x00000040u;
}
void ContiRadarObs::clear_has_lateral_vel() {
  _has_bits_[0] &= ~0x00000040u;
}
void ContiRadarObs::clear_lateral_vel() {
  lateral_vel_ = 0;
  clear_has_lateral_vel();
}
double ContiRadarObs::lateral_vel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.lateral_vel)
  return lateral_vel_;
}
void ContiRadarObs::set_lateral_vel(double value) {
  set_has_lateral_vel();
  lateral_vel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.lateral_vel)
}

// optional double rcs = 8;
bool ContiRadarObs::has_rcs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ContiRadarObs::set_has_rcs() {
  _has_bits_[0] |= 0x00000080u;
}
void ContiRadarObs::clear_has_rcs() {
  _has_bits_[0] &= ~0x00000080u;
}
void ContiRadarObs::clear_rcs() {
  rcs_ = 0;
  clear_has_rcs();
}
double ContiRadarObs::rcs() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.rcs)
  return rcs_;
}
void ContiRadarObs::set_rcs(double value) {
  set_has_rcs();
  rcs_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.rcs)
}

// optional int32 dynprop = 9;
bool ContiRadarObs::has_dynprop() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ContiRadarObs::set_has_dynprop() {
  _has_bits_[0] |= 0x00000800u;
}
void ContiRadarObs::clear_has_dynprop() {
  _has_bits_[0] &= ~0x00000800u;
}
void ContiRadarObs::clear_dynprop() {
  dynprop_ = 0;
  clear_has_dynprop();
}
::google::protobuf::int32 ContiRadarObs::dynprop() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.dynprop)
  return dynprop_;
}
void ContiRadarObs::set_dynprop(::google::protobuf::int32 value) {
  set_has_dynprop();
  dynprop_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.dynprop)
}

// optional double longitude_dist_rms = 10;
bool ContiRadarObs::has_longitude_dist_rms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ContiRadarObs::set_has_longitude_dist_rms() {
  _has_bits_[0] |= 0x00000100u;
}
void ContiRadarObs::clear_has_longitude_dist_rms() {
  _has_bits_[0] &= ~0x00000100u;
}
void ContiRadarObs::clear_longitude_dist_rms() {
  longitude_dist_rms_ = 0;
  clear_has_longitude_dist_rms();
}
double ContiRadarObs::longitude_dist_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.longitude_dist_rms)
  return longitude_dist_rms_;
}
void ContiRadarObs::set_longitude_dist_rms(double value) {
  set_has_longitude_dist_rms();
  longitude_dist_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.longitude_dist_rms)
}

// optional double lateral_dist_rms = 11;
bool ContiRadarObs::has_lateral_dist_rms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ContiRadarObs::set_has_lateral_dist_rms() {
  _has_bits_[0] |= 0x00000200u;
}
void ContiRadarObs::clear_has_lateral_dist_rms() {
  _has_bits_[0] &= ~0x00000200u;
}
void ContiRadarObs::clear_lateral_dist_rms() {
  lateral_dist_rms_ = 0;
  clear_has_lateral_dist_rms();
}
double ContiRadarObs::lateral_dist_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.lateral_dist_rms)
  return lateral_dist_rms_;
}
void ContiRadarObs::set_lateral_dist_rms(double value) {
  set_has_lateral_dist_rms();
  lateral_dist_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.lateral_dist_rms)
}

// optional double longitude_vel_rms = 12;
bool ContiRadarObs::has_longitude_vel_rms() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ContiRadarObs::set_has_longitude_vel_rms() {
  _has_bits_[0] |= 0x00000400u;
}
void ContiRadarObs::clear_has_longitude_vel_rms() {
  _has_bits_[0] &= ~0x00000400u;
}
void ContiRadarObs::clear_longitude_vel_rms() {
  longitude_vel_rms_ = 0;
  clear_has_longitude_vel_rms();
}
double ContiRadarObs::longitude_vel_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.longitude_vel_rms)
  return longitude_vel_rms_;
}
void ContiRadarObs::set_longitude_vel_rms(double value) {
  set_has_longitude_vel_rms();
  longitude_vel_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.longitude_vel_rms)
}

// optional double lateral_vel_rms = 13;
bool ContiRadarObs::has_lateral_vel_rms() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ContiRadarObs::set_has_lateral_vel_rms() {
  _has_bits_[0] |= 0x00002000u;
}
void ContiRadarObs::clear_has_lateral_vel_rms() {
  _has_bits_[0] &= ~0x00002000u;
}
void ContiRadarObs::clear_lateral_vel_rms() {
  lateral_vel_rms_ = 0;
  clear_has_lateral_vel_rms();
}
double ContiRadarObs::lateral_vel_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.lateral_vel_rms)
  return lateral_vel_rms_;
}
void ContiRadarObs::set_lateral_vel_rms(double value) {
  set_has_lateral_vel_rms();
  lateral_vel_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.lateral_vel_rms)
}

// optional double probexist = 14;
bool ContiRadarObs::has_probexist() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ContiRadarObs::set_has_probexist() {
  _has_bits_[0] |= 0x00004000u;
}
void ContiRadarObs::clear_has_probexist() {
  _has_bits_[0] &= ~0x00004000u;
}
void ContiRadarObs::clear_probexist() {
  probexist_ = 0;
  clear_has_probexist();
}
double ContiRadarObs::probexist() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.probexist)
  return probexist_;
}
void ContiRadarObs::set_probexist(double value) {
  set_has_probexist();
  probexist_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.probexist)
}

// optional int32 meas_state = 15;
bool ContiRadarObs::has_meas_state() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ContiRadarObs::set_has_meas_state() {
  _has_bits_[0] |= 0x00001000u;
}
void ContiRadarObs::clear_has_meas_state() {
  _has_bits_[0] &= ~0x00001000u;
}
void ContiRadarObs::clear_meas_state() {
  meas_state_ = 0;
  clear_has_meas_state();
}
::google::protobuf::int32 ContiRadarObs::meas_state() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.meas_state)
  return meas_state_;
}
void ContiRadarObs::set_meas_state(::google::protobuf::int32 value) {
  set_has_meas_state();
  meas_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.meas_state)
}

// optional double longitude_accel = 16;
bool ContiRadarObs::has_longitude_accel() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ContiRadarObs::set_has_longitude_accel() {
  _has_bits_[0] |= 0x00008000u;
}
void ContiRadarObs::clear_has_longitude_accel() {
  _has_bits_[0] &= ~0x00008000u;
}
void ContiRadarObs::clear_longitude_accel() {
  longitude_accel_ = 0;
  clear_has_longitude_accel();
}
double ContiRadarObs::longitude_accel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.longitude_accel)
  return longitude_accel_;
}
void ContiRadarObs::set_longitude_accel(double value) {
  set_has_longitude_accel();
  longitude_accel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.longitude_accel)
}

// optional double lateral_accel = 17;
bool ContiRadarObs::has_lateral_accel() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ContiRadarObs::set_has_lateral_accel() {
  _has_bits_[0] |= 0x00010000u;
}
void ContiRadarObs::clear_has_lateral_accel() {
  _has_bits_[0] &= ~0x00010000u;
}
void ContiRadarObs::clear_lateral_accel() {
  lateral_accel_ = 0;
  clear_has_lateral_accel();
}
double ContiRadarObs::lateral_accel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.lateral_accel)
  return lateral_accel_;
}
void ContiRadarObs::set_lateral_accel(double value) {
  set_has_lateral_accel();
  lateral_accel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.lateral_accel)
}

// optional double oritation_angle = 18;
bool ContiRadarObs::has_oritation_angle() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ContiRadarObs::set_has_oritation_angle() {
  _has_bits_[0] |= 0x00020000u;
}
void ContiRadarObs::clear_has_oritation_angle() {
  _has_bits_[0] &= ~0x00020000u;
}
void ContiRadarObs::clear_oritation_angle() {
  oritation_angle_ = 0;
  clear_has_oritation_angle();
}
double ContiRadarObs::oritation_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.oritation_angle)
  return oritation_angle_;
}
void ContiRadarObs::set_oritation_angle(double value) {
  set_has_oritation_angle();
  oritation_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.oritation_angle)
}

// optional double longitude_accel_rms = 19;
bool ContiRadarObs::has_longitude_accel_rms() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ContiRadarObs::set_has_longitude_accel_rms() {
  _has_bits_[0] |= 0x00040000u;
}
void ContiRadarObs::clear_has_longitude_accel_rms() {
  _has_bits_[0] &= ~0x00040000u;
}
void ContiRadarObs::clear_longitude_accel_rms() {
  longitude_accel_rms_ = 0;
  clear_has_longitude_accel_rms();
}
double ContiRadarObs::longitude_accel_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.longitude_accel_rms)
  return longitude_accel_rms_;
}
void ContiRadarObs::set_longitude_accel_rms(double value) {
  set_has_longitude_accel_rms();
  longitude_accel_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.longitude_accel_rms)
}

// optional double lateral_accel_rms = 20;
bool ContiRadarObs::has_lateral_accel_rms() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ContiRadarObs::set_has_lateral_accel_rms() {
  _has_bits_[0] |= 0x00080000u;
}
void ContiRadarObs::clear_has_lateral_accel_rms() {
  _has_bits_[0] &= ~0x00080000u;
}
void ContiRadarObs::clear_lateral_accel_rms() {
  lateral_accel_rms_ = 0;
  clear_has_lateral_accel_rms();
}
double ContiRadarObs::lateral_accel_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.lateral_accel_rms)
  return lateral_accel_rms_;
}
void ContiRadarObs::set_lateral_accel_rms(double value) {
  set_has_lateral_accel_rms();
  lateral_accel_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.lateral_accel_rms)
}

// optional double oritation_angle_rms = 21;
bool ContiRadarObs::has_oritation_angle_rms() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ContiRadarObs::set_has_oritation_angle_rms() {
  _has_bits_[0] |= 0x00100000u;
}
void ContiRadarObs::clear_has_oritation_angle_rms() {
  _has_bits_[0] &= ~0x00100000u;
}
void ContiRadarObs::clear_oritation_angle_rms() {
  oritation_angle_rms_ = 0;
  clear_has_oritation_angle_rms();
}
double ContiRadarObs::oritation_angle_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.oritation_angle_rms)
  return oritation_angle_rms_;
}
void ContiRadarObs::set_oritation_angle_rms(double value) {
  set_has_oritation_angle_rms();
  oritation_angle_rms_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.oritation_angle_rms)
}

// optional double length = 22;
bool ContiRadarObs::has_length() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ContiRadarObs::set_has_length() {
  _has_bits_[0] |= 0x00200000u;
}
void ContiRadarObs::clear_has_length() {
  _has_bits_[0] &= ~0x00200000u;
}
void ContiRadarObs::clear_length() {
  length_ = 0;
  clear_has_length();
}
double ContiRadarObs::length() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.length)
  return length_;
}
void ContiRadarObs::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.length)
}

// optional double width = 23;
bool ContiRadarObs::has_width() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ContiRadarObs::set_has_width() {
  _has_bits_[0] |= 0x00400000u;
}
void ContiRadarObs::clear_has_width() {
  _has_bits_[0] &= ~0x00400000u;
}
void ContiRadarObs::clear_width() {
  width_ = 0;
  clear_has_width();
}
double ContiRadarObs::width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.width)
  return width_;
}
void ContiRadarObs::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.width)
}

// optional int32 obstacle_class = 24;
bool ContiRadarObs::has_obstacle_class() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ContiRadarObs::set_has_obstacle_class() {
  _has_bits_[0] |= 0x00800000u;
}
void ContiRadarObs::clear_has_obstacle_class() {
  _has_bits_[0] &= ~0x00800000u;
}
void ContiRadarObs::clear_obstacle_class() {
  obstacle_class_ = 0;
  clear_has_obstacle_class();
}
::google::protobuf::int32 ContiRadarObs::obstacle_class() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadarObs.obstacle_class)
  return obstacle_class_;
}
void ContiRadarObs::set_obstacle_class(::google::protobuf::int32 value) {
  set_has_obstacle_class();
  obstacle_class_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.ContiRadarObs.obstacle_class)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContiRadar::kHeaderFieldNumber;
const int ContiRadar::kContiobsFieldNumber;
const int ContiRadar::kRadarStateFieldNumber;
const int ContiRadar::kClusterListStatusFieldNumber;
const int ContiRadar::kObjectListStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContiRadar::ContiRadar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.ContiRadar)
}
ContiRadar::ContiRadar(const ContiRadar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      contiobs_(from.contiobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_radar_state()) {
    radar_state_ = new ::apollo::drivers::RadarState_201(*from.radar_state_);
  } else {
    radar_state_ = NULL;
  }
  if (from.has_cluster_list_status()) {
    cluster_list_status_ = new ::apollo::drivers::ClusterListStatus_600(*from.cluster_list_status_);
  } else {
    cluster_list_status_ = NULL;
  }
  if (from.has_object_list_status()) {
    object_list_status_ = new ::apollo::drivers::ObjectListStatus_60A(*from.object_list_status_);
  } else {
    object_list_status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.ContiRadar)
}

void ContiRadar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&object_list_status_) -
    reinterpret_cast<char*>(&header_) + sizeof(object_list_status_));
}

ContiRadar::~ContiRadar() {
  // @@protoc_insertion_point(destructor:apollo.drivers.ContiRadar)
  SharedDtor();
}

void ContiRadar::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete radar_state_;
  }
  if (this != internal_default_instance()) {
    delete cluster_list_status_;
  }
  if (this != internal_default_instance()) {
    delete object_list_status_;
  }
}

void ContiRadar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContiRadar::descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContiRadar& ContiRadar::default_instance() {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContiRadar* ContiRadar::New(::google::protobuf::Arena* arena) const {
  ContiRadar* n = new ContiRadar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContiRadar::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.ContiRadar)
  contiobs_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::apollo::common::Header::Clear();
    }
    if (has_radar_state()) {
      GOOGLE_DCHECK(radar_state_ != NULL);
      radar_state_->::apollo::drivers::RadarState_201::Clear();
    }
    if (has_cluster_list_status()) {
      GOOGLE_DCHECK(cluster_list_status_ != NULL);
      cluster_list_status_->::apollo::drivers::ClusterListStatus_600::Clear();
    }
    if (has_object_list_status()) {
      GOOGLE_DCHECK(object_list_status_ != NULL);
      object_list_status_->::apollo::drivers::ObjectListStatus_60A::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContiRadar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.ContiRadar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.drivers.ContiRadarObs contiobs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contiobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.RadarState_201 radar_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radar_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.ClusterListStatus_600 cluster_list_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster_list_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.ObjectListStatus_60A object_list_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object_list_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.ContiRadar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.ContiRadar)
  return false;
#undef DO_
}

void ContiRadar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.ContiRadar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .apollo.drivers.ContiRadarObs contiobs = 2;
  for (unsigned int i = 0, n = this->contiobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contiobs(i), output);
  }

  // optional .apollo.drivers.RadarState_201 radar_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->radar_state_, output);
  }

  // optional .apollo.drivers.ClusterListStatus_600 cluster_list_status = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cluster_list_status_, output);
  }

  // optional .apollo.drivers.ObjectListStatus_60A object_list_status = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->object_list_status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.ContiRadar)
}

::google::protobuf::uint8* ContiRadar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.ContiRadar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .apollo.drivers.ContiRadarObs contiobs = 2;
  for (unsigned int i = 0, n = this->contiobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->contiobs(i), deterministic, target);
  }

  // optional .apollo.drivers.RadarState_201 radar_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->radar_state_, deterministic, target);
  }

  // optional .apollo.drivers.ClusterListStatus_600 cluster_list_status = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->cluster_list_status_, deterministic, target);
  }

  // optional .apollo.drivers.ObjectListStatus_60A object_list_status = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->object_list_status_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.ContiRadar)
  return target;
}

size_t ContiRadar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.ContiRadar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.drivers.ContiRadarObs contiobs = 2;
  {
    unsigned int count = this->contiobs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contiobs(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .apollo.drivers.RadarState_201 radar_state = 3;
    if (has_radar_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->radar_state_);
    }

    // optional .apollo.drivers.ClusterListStatus_600 cluster_list_status = 4;
    if (has_cluster_list_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cluster_list_status_);
    }

    // optional .apollo.drivers.ObjectListStatus_60A object_list_status = 5;
    if (has_object_list_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->object_list_status_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContiRadar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.ContiRadar)
  GOOGLE_DCHECK_NE(&from, this);
  const ContiRadar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContiRadar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.ContiRadar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.ContiRadar)
    MergeFrom(*source);
  }
}

void ContiRadar::MergeFrom(const ContiRadar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.ContiRadar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contiobs_.MergeFrom(from.contiobs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_radar_state()->::apollo::drivers::RadarState_201::MergeFrom(from.radar_state());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cluster_list_status()->::apollo::drivers::ClusterListStatus_600::MergeFrom(from.cluster_list_status());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_object_list_status()->::apollo::drivers::ObjectListStatus_60A::MergeFrom(from.object_list_status());
    }
  }
}

void ContiRadar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.ContiRadar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContiRadar::CopyFrom(const ContiRadar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.ContiRadar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContiRadar::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->contiobs())) return false;
  return true;
}

void ContiRadar::Swap(ContiRadar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContiRadar::InternalSwap(ContiRadar* other) {
  contiobs_.InternalSwap(&other->contiobs_);
  std::swap(header_, other->header_);
  std::swap(radar_state_, other->radar_state_);
  std::swap(cluster_list_status_, other->cluster_list_status_);
  std::swap(object_list_status_, other->object_list_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContiRadar::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContiRadar

// optional .apollo.common.Header header = 1;
bool ContiRadar::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContiRadar::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void ContiRadar::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContiRadar::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
const ::apollo::common::Header& ContiRadar::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadar.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
::apollo::common::Header* ContiRadar::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.ContiRadar.header)
  return header_;
}
::apollo::common::Header* ContiRadar::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.ContiRadar.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void ContiRadar::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.ContiRadar.header)
}

// repeated .apollo.drivers.ContiRadarObs contiobs = 2;
int ContiRadar::contiobs_size() const {
  return contiobs_.size();
}
void ContiRadar::clear_contiobs() {
  contiobs_.Clear();
}
const ::apollo::drivers::ContiRadarObs& ContiRadar::contiobs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadar.contiobs)
  return contiobs_.Get(index);
}
::apollo::drivers::ContiRadarObs* ContiRadar::mutable_contiobs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.ContiRadar.contiobs)
  return contiobs_.Mutable(index);
}
::apollo::drivers::ContiRadarObs* ContiRadar::add_contiobs() {
  // @@protoc_insertion_point(field_add:apollo.drivers.ContiRadar.contiobs)
  return contiobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::drivers::ContiRadarObs >*
ContiRadar::mutable_contiobs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.ContiRadar.contiobs)
  return &contiobs_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::ContiRadarObs >&
ContiRadar::contiobs() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.ContiRadar.contiobs)
  return contiobs_;
}

// optional .apollo.drivers.RadarState_201 radar_state = 3;
bool ContiRadar::has_radar_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContiRadar::set_has_radar_state() {
  _has_bits_[0] |= 0x00000002u;
}
void ContiRadar::clear_has_radar_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContiRadar::clear_radar_state() {
  if (radar_state_ != NULL) radar_state_->::apollo::drivers::RadarState_201::Clear();
  clear_has_radar_state();
}
const ::apollo::drivers::RadarState_201& ContiRadar::radar_state() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadar.radar_state)
  return radar_state_ != NULL ? *radar_state_
                         : *::apollo::drivers::RadarState_201::internal_default_instance();
}
::apollo::drivers::RadarState_201* ContiRadar::mutable_radar_state() {
  set_has_radar_state();
  if (radar_state_ == NULL) {
    radar_state_ = new ::apollo::drivers::RadarState_201;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.ContiRadar.radar_state)
  return radar_state_;
}
::apollo::drivers::RadarState_201* ContiRadar::release_radar_state() {
  // @@protoc_insertion_point(field_release:apollo.drivers.ContiRadar.radar_state)
  clear_has_radar_state();
  ::apollo::drivers::RadarState_201* temp = radar_state_;
  radar_state_ = NULL;
  return temp;
}
void ContiRadar::set_allocated_radar_state(::apollo::drivers::RadarState_201* radar_state) {
  delete radar_state_;
  radar_state_ = radar_state;
  if (radar_state) {
    set_has_radar_state();
  } else {
    clear_has_radar_state();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.ContiRadar.radar_state)
}

// optional .apollo.drivers.ClusterListStatus_600 cluster_list_status = 4;
bool ContiRadar::has_cluster_list_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContiRadar::set_has_cluster_list_status() {
  _has_bits_[0] |= 0x00000004u;
}
void ContiRadar::clear_has_cluster_list_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContiRadar::clear_cluster_list_status() {
  if (cluster_list_status_ != NULL) cluster_list_status_->::apollo::drivers::ClusterListStatus_600::Clear();
  clear_has_cluster_list_status();
}
const ::apollo::drivers::ClusterListStatus_600& ContiRadar::cluster_list_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadar.cluster_list_status)
  return cluster_list_status_ != NULL ? *cluster_list_status_
                         : *::apollo::drivers::ClusterListStatus_600::internal_default_instance();
}
::apollo::drivers::ClusterListStatus_600* ContiRadar::mutable_cluster_list_status() {
  set_has_cluster_list_status();
  if (cluster_list_status_ == NULL) {
    cluster_list_status_ = new ::apollo::drivers::ClusterListStatus_600;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.ContiRadar.cluster_list_status)
  return cluster_list_status_;
}
::apollo::drivers::ClusterListStatus_600* ContiRadar::release_cluster_list_status() {
  // @@protoc_insertion_point(field_release:apollo.drivers.ContiRadar.cluster_list_status)
  clear_has_cluster_list_status();
  ::apollo::drivers::ClusterListStatus_600* temp = cluster_list_status_;
  cluster_list_status_ = NULL;
  return temp;
}
void ContiRadar::set_allocated_cluster_list_status(::apollo::drivers::ClusterListStatus_600* cluster_list_status) {
  delete cluster_list_status_;
  cluster_list_status_ = cluster_list_status;
  if (cluster_list_status) {
    set_has_cluster_list_status();
  } else {
    clear_has_cluster_list_status();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.ContiRadar.cluster_list_status)
}

// optional .apollo.drivers.ObjectListStatus_60A object_list_status = 5;
bool ContiRadar::has_object_list_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ContiRadar::set_has_object_list_status() {
  _has_bits_[0] |= 0x00000008u;
}
void ContiRadar::clear_has_object_list_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void ContiRadar::clear_object_list_status() {
  if (object_list_status_ != NULL) object_list_status_->::apollo::drivers::ObjectListStatus_60A::Clear();
  clear_has_object_list_status();
}
const ::apollo::drivers::ObjectListStatus_60A& ContiRadar::object_list_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.ContiRadar.object_list_status)
  return object_list_status_ != NULL ? *object_list_status_
                         : *::apollo::drivers::ObjectListStatus_60A::internal_default_instance();
}
::apollo::drivers::ObjectListStatus_60A* ContiRadar::mutable_object_list_status() {
  set_has_object_list_status();
  if (object_list_status_ == NULL) {
    object_list_status_ = new ::apollo::drivers::ObjectListStatus_60A;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.ContiRadar.object_list_status)
  return object_list_status_;
}
::apollo::drivers::ObjectListStatus_60A* ContiRadar::release_object_list_status() {
  // @@protoc_insertion_point(field_release:apollo.drivers.ContiRadar.object_list_status)
  clear_has_object_list_status();
  ::apollo::drivers::ObjectListStatus_60A* temp = object_list_status_;
  object_list_status_ = NULL;
  return temp;
}
void ContiRadar::set_allocated_object_list_status(::apollo::drivers::ObjectListStatus_60A* object_list_status) {
  delete object_list_status_;
  object_list_status_ = object_list_status;
  if (object_list_status) {
    set_has_object_list_status();
  } else {
    clear_has_object_list_status();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.ContiRadar.object_list_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
