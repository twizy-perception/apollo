// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/obstacle/lidar/segmentation/cnnseg/proto/cnnseg.proto

#ifndef PROTOBUF_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto__INCLUDED
#define PROTOBUF_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace apollo {
namespace perception {
namespace cnnseg {
class CNNSegParam;
class CNNSegParamDefaultTypeInternal;
extern CNNSegParamDefaultTypeInternal _CNNSegParam_default_instance_;
class FeatureParam;
class FeatureParamDefaultTypeInternal;
extern FeatureParamDefaultTypeInternal _FeatureParam_default_instance_;
class NetworkParam;
class NetworkParamDefaultTypeInternal;
extern NetworkParamDefaultTypeInternal _NetworkParam_default_instance_;
}  // namespace cnnseg
}  // namespace perception
}  // namespace apollo

namespace apollo {
namespace perception {
namespace cnnseg {

namespace protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto

// ===================================================================

class CNNSegParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.cnnseg.CNNSegParam) */ {
 public:
  CNNSegParam();
  virtual ~CNNSegParam();

  CNNSegParam(const CNNSegParam& from);

  inline CNNSegParam& operator=(const CNNSegParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CNNSegParam& default_instance();

  static inline const CNNSegParam* internal_default_instance() {
    return reinterpret_cast<const CNNSegParam*>(
               &_CNNSegParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CNNSegParam* other);

  // implements Message ----------------------------------------------

  inline CNNSegParam* New() const PROTOBUF_FINAL { return New(NULL); }

  CNNSegParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CNNSegParam& from);
  void MergeFrom(const CNNSegParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CNNSegParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .apollo.perception.cnnseg.NetworkParam network_param = 1;
  bool has_network_param() const;
  void clear_network_param();
  static const int kNetworkParamFieldNumber = 1;
  const ::apollo::perception::cnnseg::NetworkParam& network_param() const;
  ::apollo::perception::cnnseg::NetworkParam* mutable_network_param();
  ::apollo::perception::cnnseg::NetworkParam* release_network_param();
  void set_allocated_network_param(::apollo::perception::cnnseg::NetworkParam* network_param);

  // required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
  bool has_feature_param() const;
  void clear_feature_param();
  static const int kFeatureParamFieldNumber = 2;
  const ::apollo::perception::cnnseg::FeatureParam& feature_param() const;
  ::apollo::perception::cnnseg::FeatureParam* mutable_feature_param();
  ::apollo::perception::cnnseg::FeatureParam* release_feature_param();
  void set_allocated_feature_param(::apollo::perception::cnnseg::FeatureParam* feature_param);

  // optional bool use_all_grids_for_clustering = 12 [default = false];
  bool has_use_all_grids_for_clustering() const;
  void clear_use_all_grids_for_clustering();
  static const int kUseAllGridsForClusteringFieldNumber = 12;
  bool use_all_grids_for_clustering() const;
  void set_use_all_grids_for_clustering(bool value);

  // optional bool use_full_cloud = 31 [default = false];
  bool has_use_full_cloud() const;
  void clear_use_full_cloud();
  static const int kUseFullCloudFieldNumber = 31;
  bool use_full_cloud() const;
  void set_use_full_cloud(bool value);

  // optional uint32 gpu_id = 41 [default = 0];
  bool has_gpu_id() const;
  void clear_gpu_id();
  static const int kGpuIdFieldNumber = 41;
  ::google::protobuf::uint32 gpu_id() const;
  void set_gpu_id(::google::protobuf::uint32 value);

  // optional float objectness_thresh = 11 [default = 0.5];
  bool has_objectness_thresh() const;
  void clear_objectness_thresh();
  static const int kObjectnessThreshFieldNumber = 11;
  float objectness_thresh() const;
  void set_objectness_thresh(float value);

  // optional float confidence_thresh = 13 [default = 0.1];
  bool has_confidence_thresh() const;
  void clear_confidence_thresh();
  static const int kConfidenceThreshFieldNumber = 13;
  float confidence_thresh() const;
  void set_confidence_thresh(float value);

  // optional float height_thresh = 14 [default = 0.5];
  bool has_height_thresh() const;
  void clear_height_thresh();
  static const int kHeightThreshFieldNumber = 14;
  float height_thresh() const;
  void set_height_thresh(float value);

  // optional uint32 min_pts_num = 15 [default = 3];
  bool has_min_pts_num() const;
  void clear_min_pts_num();
  static const int kMinPtsNumFieldNumber = 15;
  ::google::protobuf::uint32 min_pts_num() const;
  void set_min_pts_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.cnnseg.CNNSegParam)
 private:
  void set_has_network_param();
  void clear_has_network_param();
  void set_has_feature_param();
  void clear_has_feature_param();
  void set_has_objectness_thresh();
  void clear_has_objectness_thresh();
  void set_has_use_all_grids_for_clustering();
  void clear_has_use_all_grids_for_clustering();
  void set_has_confidence_thresh();
  void clear_has_confidence_thresh();
  void set_has_height_thresh();
  void clear_has_height_thresh();
  void set_has_min_pts_num();
  void clear_has_min_pts_num();
  void set_has_use_full_cloud();
  void clear_has_use_full_cloud();
  void set_has_gpu_id();
  void clear_has_gpu_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::apollo::perception::cnnseg::NetworkParam* network_param_;
  ::apollo::perception::cnnseg::FeatureParam* feature_param_;
  bool use_all_grids_for_clustering_;
  bool use_full_cloud_;
  ::google::protobuf::uint32 gpu_id_;
  float objectness_thresh_;
  float confidence_thresh_;
  float height_thresh_;
  ::google::protobuf::uint32 min_pts_num_;
  friend struct protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.cnnseg.NetworkParam) */ {
 public:
  NetworkParam();
  virtual ~NetworkParam();

  NetworkParam(const NetworkParam& from);

  inline NetworkParam& operator=(const NetworkParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkParam& default_instance();

  static inline const NetworkParam* internal_default_instance() {
    return reinterpret_cast<const NetworkParam*>(
               &_NetworkParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(NetworkParam* other);

  // implements Message ----------------------------------------------

  inline NetworkParam* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetworkParam& from);
  void MergeFrom(const NetworkParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetworkParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string instance_pt_blob = 1 [default = "instance_pt"];
  bool has_instance_pt_blob() const;
  void clear_instance_pt_blob();
  static const int kInstancePtBlobFieldNumber = 1;
  const ::std::string& instance_pt_blob() const;
  void set_instance_pt_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_pt_blob(::std::string&& value);
  #endif
  void set_instance_pt_blob(const char* value);
  void set_instance_pt_blob(const char* value, size_t size);
  ::std::string* mutable_instance_pt_blob();
  ::std::string* release_instance_pt_blob();
  void set_allocated_instance_pt_blob(::std::string* instance_pt_blob);

  // optional string category_pt_blob = 2 [default = "category_score"];
  bool has_category_pt_blob() const;
  void clear_category_pt_blob();
  static const int kCategoryPtBlobFieldNumber = 2;
  const ::std::string& category_pt_blob() const;
  void set_category_pt_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_category_pt_blob(::std::string&& value);
  #endif
  void set_category_pt_blob(const char* value);
  void set_category_pt_blob(const char* value, size_t size);
  ::std::string* mutable_category_pt_blob();
  ::std::string* release_category_pt_blob();
  void set_allocated_category_pt_blob(::std::string* category_pt_blob);

  // optional string confidence_pt_blob = 3 [default = "confidence_score"];
  bool has_confidence_pt_blob() const;
  void clear_confidence_pt_blob();
  static const int kConfidencePtBlobFieldNumber = 3;
  const ::std::string& confidence_pt_blob() const;
  void set_confidence_pt_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_confidence_pt_blob(::std::string&& value);
  #endif
  void set_confidence_pt_blob(const char* value);
  void set_confidence_pt_blob(const char* value, size_t size);
  ::std::string* mutable_confidence_pt_blob();
  ::std::string* release_confidence_pt_blob();
  void set_allocated_confidence_pt_blob(::std::string* confidence_pt_blob);

  // optional string height_pt_blob = 4 [default = "height_pt"];
  bool has_height_pt_blob() const;
  void clear_height_pt_blob();
  static const int kHeightPtBlobFieldNumber = 4;
  const ::std::string& height_pt_blob() const;
  void set_height_pt_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_height_pt_blob(::std::string&& value);
  #endif
  void set_height_pt_blob(const char* value);
  void set_height_pt_blob(const char* value, size_t size);
  ::std::string* mutable_height_pt_blob();
  ::std::string* release_height_pt_blob();
  void set_allocated_height_pt_blob(::std::string* height_pt_blob);

  // optional string feature_blob = 5 [default = "data"];
  bool has_feature_blob() const;
  void clear_feature_blob();
  static const int kFeatureBlobFieldNumber = 5;
  const ::std::string& feature_blob() const;
  void set_feature_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_feature_blob(::std::string&& value);
  #endif
  void set_feature_blob(const char* value);
  void set_feature_blob(const char* value, size_t size);
  ::std::string* mutable_feature_blob();
  ::std::string* release_feature_blob();
  void set_allocated_feature_blob(::std::string* feature_blob);

  // optional string class_pt_blob = 6 [default = "class_score"];
  bool has_class_pt_blob() const;
  void clear_class_pt_blob();
  static const int kClassPtBlobFieldNumber = 6;
  const ::std::string& class_pt_blob() const;
  void set_class_pt_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_class_pt_blob(::std::string&& value);
  #endif
  void set_class_pt_blob(const char* value);
  void set_class_pt_blob(const char* value, size_t size);
  ::std::string* mutable_class_pt_blob();
  ::std::string* release_class_pt_blob();
  void set_allocated_class_pt_blob(::std::string* class_pt_blob);

  // @@protoc_insertion_point(class_scope:apollo.perception.cnnseg.NetworkParam)
 private:
  void set_has_instance_pt_blob();
  void clear_has_instance_pt_blob();
  void set_has_category_pt_blob();
  void clear_has_category_pt_blob();
  void set_has_confidence_pt_blob();
  void clear_has_confidence_pt_blob();
  void set_has_height_pt_blob();
  void clear_has_height_pt_blob();
  void set_has_feature_blob();
  void clear_has_feature_blob();
  void set_has_class_pt_blob();
  void clear_has_class_pt_blob();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_instance_pt_blob_;
  ::google::protobuf::internal::ArenaStringPtr instance_pt_blob_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_category_pt_blob_;
  ::google::protobuf::internal::ArenaStringPtr category_pt_blob_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_confidence_pt_blob_;
  ::google::protobuf::internal::ArenaStringPtr confidence_pt_blob_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_height_pt_blob_;
  ::google::protobuf::internal::ArenaStringPtr height_pt_blob_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_feature_blob_;
  ::google::protobuf::internal::ArenaStringPtr feature_blob_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_class_pt_blob_;
  ::google::protobuf::internal::ArenaStringPtr class_pt_blob_;
  friend struct protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FeatureParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.cnnseg.FeatureParam) */ {
 public:
  FeatureParam();
  virtual ~FeatureParam();

  FeatureParam(const FeatureParam& from);

  inline FeatureParam& operator=(const FeatureParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureParam& default_instance();

  static inline const FeatureParam* internal_default_instance() {
    return reinterpret_cast<const FeatureParam*>(
               &_FeatureParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FeatureParam* other);

  // implements Message ----------------------------------------------

  inline FeatureParam* New() const PROTOBUF_FINAL { return New(NULL); }

  FeatureParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FeatureParam& from);
  void MergeFrom(const FeatureParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FeatureParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float max_height = 32 [default = 5];
  bool has_max_height() const;
  void clear_max_height();
  static const int kMaxHeightFieldNumber = 32;
  float max_height() const;
  void set_max_height(float value);

  // optional uint32 point_cloud_range = 26 [default = 60];
  bool has_point_cloud_range() const;
  void clear_point_cloud_range();
  static const int kPointCloudRangeFieldNumber = 26;
  ::google::protobuf::uint32 point_cloud_range() const;
  void set_point_cloud_range(::google::protobuf::uint32 value);

  // optional uint32 width = 27 [default = 512];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 27;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 28 [default = 512];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 28;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional float min_height = 31 [default = -5];
  bool has_min_height() const;
  void clear_min_height();
  static const int kMinHeightFieldNumber = 31;
  float min_height() const;
  void set_min_height(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.cnnseg.FeatureParam)
 private:
  void set_has_point_cloud_range();
  void clear_has_point_cloud_range();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_min_height();
  void clear_has_min_height();
  void set_has_max_height();
  void clear_has_max_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float max_height_;
  ::google::protobuf::uint32 point_cloud_range_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  float min_height_;
  friend struct protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CNNSegParam

// required .apollo.perception.cnnseg.NetworkParam network_param = 1;
inline bool CNNSegParam::has_network_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CNNSegParam::set_has_network_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CNNSegParam::clear_has_network_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CNNSegParam::clear_network_param() {
  if (network_param_ != NULL) network_param_->::apollo::perception::cnnseg::NetworkParam::Clear();
  clear_has_network_param();
}
inline const ::apollo::perception::cnnseg::NetworkParam& CNNSegParam::network_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.network_param)
  return network_param_ != NULL ? *network_param_
                         : *::apollo::perception::cnnseg::NetworkParam::internal_default_instance();
}
inline ::apollo::perception::cnnseg::NetworkParam* CNNSegParam::mutable_network_param() {
  set_has_network_param();
  if (network_param_ == NULL) {
    network_param_ = new ::apollo::perception::cnnseg::NetworkParam;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.CNNSegParam.network_param)
  return network_param_;
}
inline ::apollo::perception::cnnseg::NetworkParam* CNNSegParam::release_network_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.CNNSegParam.network_param)
  clear_has_network_param();
  ::apollo::perception::cnnseg::NetworkParam* temp = network_param_;
  network_param_ = NULL;
  return temp;
}
inline void CNNSegParam::set_allocated_network_param(::apollo::perception::cnnseg::NetworkParam* network_param) {
  delete network_param_;
  network_param_ = network_param;
  if (network_param) {
    set_has_network_param();
  } else {
    clear_has_network_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.CNNSegParam.network_param)
}

// required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
inline bool CNNSegParam::has_feature_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CNNSegParam::set_has_feature_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CNNSegParam::clear_has_feature_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CNNSegParam::clear_feature_param() {
  if (feature_param_ != NULL) feature_param_->::apollo::perception::cnnseg::FeatureParam::Clear();
  clear_has_feature_param();
}
inline const ::apollo::perception::cnnseg::FeatureParam& CNNSegParam::feature_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.feature_param)
  return feature_param_ != NULL ? *feature_param_
                         : *::apollo::perception::cnnseg::FeatureParam::internal_default_instance();
}
inline ::apollo::perception::cnnseg::FeatureParam* CNNSegParam::mutable_feature_param() {
  set_has_feature_param();
  if (feature_param_ == NULL) {
    feature_param_ = new ::apollo::perception::cnnseg::FeatureParam;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.CNNSegParam.feature_param)
  return feature_param_;
}
inline ::apollo::perception::cnnseg::FeatureParam* CNNSegParam::release_feature_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.CNNSegParam.feature_param)
  clear_has_feature_param();
  ::apollo::perception::cnnseg::FeatureParam* temp = feature_param_;
  feature_param_ = NULL;
  return temp;
}
inline void CNNSegParam::set_allocated_feature_param(::apollo::perception::cnnseg::FeatureParam* feature_param) {
  delete feature_param_;
  feature_param_ = feature_param;
  if (feature_param) {
    set_has_feature_param();
  } else {
    clear_has_feature_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.CNNSegParam.feature_param)
}

// optional float objectness_thresh = 11 [default = 0.5];
inline bool CNNSegParam::has_objectness_thresh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CNNSegParam::set_has_objectness_thresh() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CNNSegParam::clear_has_objectness_thresh() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CNNSegParam::clear_objectness_thresh() {
  objectness_thresh_ = 0.5f;
  clear_has_objectness_thresh();
}
inline float CNNSegParam::objectness_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.objectness_thresh)
  return objectness_thresh_;
}
inline void CNNSegParam::set_objectness_thresh(float value) {
  set_has_objectness_thresh();
  objectness_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.objectness_thresh)
}

// optional bool use_all_grids_for_clustering = 12 [default = false];
inline bool CNNSegParam::has_use_all_grids_for_clustering() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CNNSegParam::set_has_use_all_grids_for_clustering() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CNNSegParam::clear_has_use_all_grids_for_clustering() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CNNSegParam::clear_use_all_grids_for_clustering() {
  use_all_grids_for_clustering_ = false;
  clear_has_use_all_grids_for_clustering();
}
inline bool CNNSegParam::use_all_grids_for_clustering() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.use_all_grids_for_clustering)
  return use_all_grids_for_clustering_;
}
inline void CNNSegParam::set_use_all_grids_for_clustering(bool value) {
  set_has_use_all_grids_for_clustering();
  use_all_grids_for_clustering_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.use_all_grids_for_clustering)
}

// optional float confidence_thresh = 13 [default = 0.1];
inline bool CNNSegParam::has_confidence_thresh() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CNNSegParam::set_has_confidence_thresh() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CNNSegParam::clear_has_confidence_thresh() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CNNSegParam::clear_confidence_thresh() {
  confidence_thresh_ = 0.1f;
  clear_has_confidence_thresh();
}
inline float CNNSegParam::confidence_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.confidence_thresh)
  return confidence_thresh_;
}
inline void CNNSegParam::set_confidence_thresh(float value) {
  set_has_confidence_thresh();
  confidence_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.confidence_thresh)
}

// optional float height_thresh = 14 [default = 0.5];
inline bool CNNSegParam::has_height_thresh() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CNNSegParam::set_has_height_thresh() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CNNSegParam::clear_has_height_thresh() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CNNSegParam::clear_height_thresh() {
  height_thresh_ = 0.5f;
  clear_has_height_thresh();
}
inline float CNNSegParam::height_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.height_thresh)
  return height_thresh_;
}
inline void CNNSegParam::set_height_thresh(float value) {
  set_has_height_thresh();
  height_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.height_thresh)
}

// optional uint32 min_pts_num = 15 [default = 3];
inline bool CNNSegParam::has_min_pts_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CNNSegParam::set_has_min_pts_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CNNSegParam::clear_has_min_pts_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CNNSegParam::clear_min_pts_num() {
  min_pts_num_ = 3u;
  clear_has_min_pts_num();
}
inline ::google::protobuf::uint32 CNNSegParam::min_pts_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.min_pts_num)
  return min_pts_num_;
}
inline void CNNSegParam::set_min_pts_num(::google::protobuf::uint32 value) {
  set_has_min_pts_num();
  min_pts_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.min_pts_num)
}

// optional bool use_full_cloud = 31 [default = false];
inline bool CNNSegParam::has_use_full_cloud() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CNNSegParam::set_has_use_full_cloud() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CNNSegParam::clear_has_use_full_cloud() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CNNSegParam::clear_use_full_cloud() {
  use_full_cloud_ = false;
  clear_has_use_full_cloud();
}
inline bool CNNSegParam::use_full_cloud() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.use_full_cloud)
  return use_full_cloud_;
}
inline void CNNSegParam::set_use_full_cloud(bool value) {
  set_has_use_full_cloud();
  use_full_cloud_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.use_full_cloud)
}

// optional uint32 gpu_id = 41 [default = 0];
inline bool CNNSegParam::has_gpu_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CNNSegParam::set_has_gpu_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CNNSegParam::clear_has_gpu_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CNNSegParam::clear_gpu_id() {
  gpu_id_ = 0u;
  clear_has_gpu_id();
}
inline ::google::protobuf::uint32 CNNSegParam::gpu_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.gpu_id)
  return gpu_id_;
}
inline void CNNSegParam::set_gpu_id(::google::protobuf::uint32 value) {
  set_has_gpu_id();
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.gpu_id)
}

// -------------------------------------------------------------------

// NetworkParam

// optional string instance_pt_blob = 1 [default = "instance_pt"];
inline bool NetworkParam::has_instance_pt_blob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkParam::set_has_instance_pt_blob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkParam::clear_has_instance_pt_blob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkParam::clear_instance_pt_blob() {
  instance_pt_blob_.ClearToDefaultNoArena(&NetworkParam::_default_instance_pt_blob_.get());
  clear_has_instance_pt_blob();
}
inline const ::std::string& NetworkParam::instance_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
  return instance_pt_blob_.GetNoArena();
}
inline void NetworkParam::set_instance_pt_blob(const ::std::string& value) {
  set_has_instance_pt_blob();
  instance_pt_blob_.SetNoArena(&NetworkParam::_default_instance_pt_blob_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_instance_pt_blob(::std::string&& value) {
  set_has_instance_pt_blob();
  instance_pt_blob_.SetNoArena(
    &NetworkParam::_default_instance_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
}
#endif
inline void NetworkParam::set_instance_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_instance_pt_blob();
  instance_pt_blob_.SetNoArena(&NetworkParam::_default_instance_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
}
inline void NetworkParam::set_instance_pt_blob(const char* value, size_t size) {
  set_has_instance_pt_blob();
  instance_pt_blob_.SetNoArena(&NetworkParam::_default_instance_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
}
inline ::std::string* NetworkParam::mutable_instance_pt_blob() {
  set_has_instance_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
  return instance_pt_blob_.MutableNoArena(&NetworkParam::_default_instance_pt_blob_.get());
}
inline ::std::string* NetworkParam::release_instance_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
  clear_has_instance_pt_blob();
  return instance_pt_blob_.ReleaseNoArena(&NetworkParam::_default_instance_pt_blob_.get());
}
inline void NetworkParam::set_allocated_instance_pt_blob(::std::string* instance_pt_blob) {
  if (instance_pt_blob != NULL) {
    set_has_instance_pt_blob();
  } else {
    clear_has_instance_pt_blob();
  }
  instance_pt_blob_.SetAllocatedNoArena(&NetworkParam::_default_instance_pt_blob_.get(), instance_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
}

// optional string category_pt_blob = 2 [default = "category_score"];
inline bool NetworkParam::has_category_pt_blob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkParam::set_has_category_pt_blob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkParam::clear_has_category_pt_blob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkParam::clear_category_pt_blob() {
  category_pt_blob_.ClearToDefaultNoArena(&NetworkParam::_default_category_pt_blob_.get());
  clear_has_category_pt_blob();
}
inline const ::std::string& NetworkParam::category_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
  return category_pt_blob_.GetNoArena();
}
inline void NetworkParam::set_category_pt_blob(const ::std::string& value) {
  set_has_category_pt_blob();
  category_pt_blob_.SetNoArena(&NetworkParam::_default_category_pt_blob_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_category_pt_blob(::std::string&& value) {
  set_has_category_pt_blob();
  category_pt_blob_.SetNoArena(
    &NetworkParam::_default_category_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
}
#endif
inline void NetworkParam::set_category_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category_pt_blob();
  category_pt_blob_.SetNoArena(&NetworkParam::_default_category_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
}
inline void NetworkParam::set_category_pt_blob(const char* value, size_t size) {
  set_has_category_pt_blob();
  category_pt_blob_.SetNoArena(&NetworkParam::_default_category_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
}
inline ::std::string* NetworkParam::mutable_category_pt_blob() {
  set_has_category_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
  return category_pt_blob_.MutableNoArena(&NetworkParam::_default_category_pt_blob_.get());
}
inline ::std::string* NetworkParam::release_category_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
  clear_has_category_pt_blob();
  return category_pt_blob_.ReleaseNoArena(&NetworkParam::_default_category_pt_blob_.get());
}
inline void NetworkParam::set_allocated_category_pt_blob(::std::string* category_pt_blob) {
  if (category_pt_blob != NULL) {
    set_has_category_pt_blob();
  } else {
    clear_has_category_pt_blob();
  }
  category_pt_blob_.SetAllocatedNoArena(&NetworkParam::_default_category_pt_blob_.get(), category_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
}

// optional string confidence_pt_blob = 3 [default = "confidence_score"];
inline bool NetworkParam::has_confidence_pt_blob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkParam::set_has_confidence_pt_blob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkParam::clear_has_confidence_pt_blob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkParam::clear_confidence_pt_blob() {
  confidence_pt_blob_.ClearToDefaultNoArena(&NetworkParam::_default_confidence_pt_blob_.get());
  clear_has_confidence_pt_blob();
}
inline const ::std::string& NetworkParam::confidence_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
  return confidence_pt_blob_.GetNoArena();
}
inline void NetworkParam::set_confidence_pt_blob(const ::std::string& value) {
  set_has_confidence_pt_blob();
  confidence_pt_blob_.SetNoArena(&NetworkParam::_default_confidence_pt_blob_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_confidence_pt_blob(::std::string&& value) {
  set_has_confidence_pt_blob();
  confidence_pt_blob_.SetNoArena(
    &NetworkParam::_default_confidence_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
}
#endif
inline void NetworkParam::set_confidence_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_confidence_pt_blob();
  confidence_pt_blob_.SetNoArena(&NetworkParam::_default_confidence_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
}
inline void NetworkParam::set_confidence_pt_blob(const char* value, size_t size) {
  set_has_confidence_pt_blob();
  confidence_pt_blob_.SetNoArena(&NetworkParam::_default_confidence_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
}
inline ::std::string* NetworkParam::mutable_confidence_pt_blob() {
  set_has_confidence_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
  return confidence_pt_blob_.MutableNoArena(&NetworkParam::_default_confidence_pt_blob_.get());
}
inline ::std::string* NetworkParam::release_confidence_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
  clear_has_confidence_pt_blob();
  return confidence_pt_blob_.ReleaseNoArena(&NetworkParam::_default_confidence_pt_blob_.get());
}
inline void NetworkParam::set_allocated_confidence_pt_blob(::std::string* confidence_pt_blob) {
  if (confidence_pt_blob != NULL) {
    set_has_confidence_pt_blob();
  } else {
    clear_has_confidence_pt_blob();
  }
  confidence_pt_blob_.SetAllocatedNoArena(&NetworkParam::_default_confidence_pt_blob_.get(), confidence_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
}

// optional string height_pt_blob = 4 [default = "height_pt"];
inline bool NetworkParam::has_height_pt_blob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkParam::set_has_height_pt_blob() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetworkParam::clear_has_height_pt_blob() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetworkParam::clear_height_pt_blob() {
  height_pt_blob_.ClearToDefaultNoArena(&NetworkParam::_default_height_pt_blob_.get());
  clear_has_height_pt_blob();
}
inline const ::std::string& NetworkParam::height_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
  return height_pt_blob_.GetNoArena();
}
inline void NetworkParam::set_height_pt_blob(const ::std::string& value) {
  set_has_height_pt_blob();
  height_pt_blob_.SetNoArena(&NetworkParam::_default_height_pt_blob_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_height_pt_blob(::std::string&& value) {
  set_has_height_pt_blob();
  height_pt_blob_.SetNoArena(
    &NetworkParam::_default_height_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
}
#endif
inline void NetworkParam::set_height_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_height_pt_blob();
  height_pt_blob_.SetNoArena(&NetworkParam::_default_height_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
}
inline void NetworkParam::set_height_pt_blob(const char* value, size_t size) {
  set_has_height_pt_blob();
  height_pt_blob_.SetNoArena(&NetworkParam::_default_height_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
}
inline ::std::string* NetworkParam::mutable_height_pt_blob() {
  set_has_height_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
  return height_pt_blob_.MutableNoArena(&NetworkParam::_default_height_pt_blob_.get());
}
inline ::std::string* NetworkParam::release_height_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
  clear_has_height_pt_blob();
  return height_pt_blob_.ReleaseNoArena(&NetworkParam::_default_height_pt_blob_.get());
}
inline void NetworkParam::set_allocated_height_pt_blob(::std::string* height_pt_blob) {
  if (height_pt_blob != NULL) {
    set_has_height_pt_blob();
  } else {
    clear_has_height_pt_blob();
  }
  height_pt_blob_.SetAllocatedNoArena(&NetworkParam::_default_height_pt_blob_.get(), height_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
}

// optional string feature_blob = 5 [default = "data"];
inline bool NetworkParam::has_feature_blob() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetworkParam::set_has_feature_blob() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetworkParam::clear_has_feature_blob() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetworkParam::clear_feature_blob() {
  feature_blob_.ClearToDefaultNoArena(&NetworkParam::_default_feature_blob_.get());
  clear_has_feature_blob();
}
inline const ::std::string& NetworkParam::feature_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.feature_blob)
  return feature_blob_.GetNoArena();
}
inline void NetworkParam::set_feature_blob(const ::std::string& value) {
  set_has_feature_blob();
  feature_blob_.SetNoArena(&NetworkParam::_default_feature_blob_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.feature_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_feature_blob(::std::string&& value) {
  set_has_feature_blob();
  feature_blob_.SetNoArena(
    &NetworkParam::_default_feature_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.cnnseg.NetworkParam.feature_blob)
}
#endif
inline void NetworkParam::set_feature_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_feature_blob();
  feature_blob_.SetNoArena(&NetworkParam::_default_feature_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnnseg.NetworkParam.feature_blob)
}
inline void NetworkParam::set_feature_blob(const char* value, size_t size) {
  set_has_feature_blob();
  feature_blob_.SetNoArena(&NetworkParam::_default_feature_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnnseg.NetworkParam.feature_blob)
}
inline ::std::string* NetworkParam::mutable_feature_blob() {
  set_has_feature_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.feature_blob)
  return feature_blob_.MutableNoArena(&NetworkParam::_default_feature_blob_.get());
}
inline ::std::string* NetworkParam::release_feature_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.feature_blob)
  clear_has_feature_blob();
  return feature_blob_.ReleaseNoArena(&NetworkParam::_default_feature_blob_.get());
}
inline void NetworkParam::set_allocated_feature_blob(::std::string* feature_blob) {
  if (feature_blob != NULL) {
    set_has_feature_blob();
  } else {
    clear_has_feature_blob();
  }
  feature_blob_.SetAllocatedNoArena(&NetworkParam::_default_feature_blob_.get(), feature_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.feature_blob)
}

// optional string class_pt_blob = 6 [default = "class_score"];
inline bool NetworkParam::has_class_pt_blob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetworkParam::set_has_class_pt_blob() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetworkParam::clear_has_class_pt_blob() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetworkParam::clear_class_pt_blob() {
  class_pt_blob_.ClearToDefaultNoArena(&NetworkParam::_default_class_pt_blob_.get());
  clear_has_class_pt_blob();
}
inline const ::std::string& NetworkParam::class_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
  return class_pt_blob_.GetNoArena();
}
inline void NetworkParam::set_class_pt_blob(const ::std::string& value) {
  set_has_class_pt_blob();
  class_pt_blob_.SetNoArena(&NetworkParam::_default_class_pt_blob_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_class_pt_blob(::std::string&& value) {
  set_has_class_pt_blob();
  class_pt_blob_.SetNoArena(
    &NetworkParam::_default_class_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
}
#endif
inline void NetworkParam::set_class_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_class_pt_blob();
  class_pt_blob_.SetNoArena(&NetworkParam::_default_class_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
}
inline void NetworkParam::set_class_pt_blob(const char* value, size_t size) {
  set_has_class_pt_blob();
  class_pt_blob_.SetNoArena(&NetworkParam::_default_class_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
}
inline ::std::string* NetworkParam::mutable_class_pt_blob() {
  set_has_class_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
  return class_pt_blob_.MutableNoArena(&NetworkParam::_default_class_pt_blob_.get());
}
inline ::std::string* NetworkParam::release_class_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
  clear_has_class_pt_blob();
  return class_pt_blob_.ReleaseNoArena(&NetworkParam::_default_class_pt_blob_.get());
}
inline void NetworkParam::set_allocated_class_pt_blob(::std::string* class_pt_blob) {
  if (class_pt_blob != NULL) {
    set_has_class_pt_blob();
  } else {
    clear_has_class_pt_blob();
  }
  class_pt_blob_.SetAllocatedNoArena(&NetworkParam::_default_class_pt_blob_.get(), class_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
}

// -------------------------------------------------------------------

// FeatureParam

// optional uint32 point_cloud_range = 26 [default = 60];
inline bool FeatureParam::has_point_cloud_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureParam::set_has_point_cloud_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureParam::clear_has_point_cloud_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureParam::clear_point_cloud_range() {
  point_cloud_range_ = 60u;
  clear_has_point_cloud_range();
}
inline ::google::protobuf::uint32 FeatureParam::point_cloud_range() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.point_cloud_range)
  return point_cloud_range_;
}
inline void FeatureParam::set_point_cloud_range(::google::protobuf::uint32 value) {
  set_has_point_cloud_range();
  point_cloud_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.point_cloud_range)
}

// optional uint32 width = 27 [default = 512];
inline bool FeatureParam::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeatureParam::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeatureParam::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeatureParam::clear_width() {
  width_ = 512u;
  clear_has_width();
}
inline ::google::protobuf::uint32 FeatureParam::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.width)
  return width_;
}
inline void FeatureParam::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.width)
}

// optional uint32 height = 28 [default = 512];
inline bool FeatureParam::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeatureParam::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeatureParam::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeatureParam::clear_height() {
  height_ = 512u;
  clear_has_height();
}
inline ::google::protobuf::uint32 FeatureParam::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.height)
  return height_;
}
inline void FeatureParam::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.height)
}

// optional float min_height = 31 [default = -5];
inline bool FeatureParam::has_min_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FeatureParam::set_has_min_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FeatureParam::clear_has_min_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FeatureParam::clear_min_height() {
  min_height_ = -5;
  clear_has_min_height();
}
inline float FeatureParam::min_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.min_height)
  return min_height_;
}
inline void FeatureParam::set_min_height(float value) {
  set_has_min_height();
  min_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.min_height)
}

// optional float max_height = 32 [default = 5];
inline bool FeatureParam::has_max_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureParam::set_has_max_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureParam::clear_has_max_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureParam::clear_max_height() {
  max_height_ = 5;
  clear_has_max_height();
}
inline float FeatureParam::max_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.max_height)
  return max_height_;
}
inline void FeatureParam::set_max_height(float value) {
  set_has_max_height();
  max_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.max_height)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace cnnseg
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto__INCLUDED
