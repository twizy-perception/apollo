// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/obstacle/lidar/segmentation/cnnseg/proto/cnnseg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/perception/obstacle/lidar/segmentation/cnnseg/proto/cnnseg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace cnnseg {
class CNNSegParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CNNSegParam> {
} _CNNSegParam_default_instance_;
class NetworkParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkParam> {
} _NetworkParam_default_instance_;
class FeatureParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FeatureParam> {
} _FeatureParam_default_instance_;

namespace protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNNSegParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNNSegParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNNSegParam, network_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNNSegParam, feature_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNNSegParam, objectness_thresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNNSegParam, use_all_grids_for_clustering_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNNSegParam, confidence_thresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNNSegParam, height_thresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNNSegParam, min_pts_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNNSegParam, use_full_cloud_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNNSegParam, gpu_id_),
  0,
  1,
  5,
  2,
  6,
  7,
  8,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, instance_pt_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, category_pt_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, confidence_pt_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, height_pt_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, feature_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, class_pt_blob_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureParam, point_cloud_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureParam, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureParam, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureParam, min_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureParam, max_height_),
  1,
  2,
  3,
  4,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 14, sizeof(CNNSegParam)},
  { 23, 34, sizeof(NetworkParam)},
  { 40, 50, sizeof(FeatureParam)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CNNSegParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetworkParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FeatureParam_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/perception/obstacle/lidar/segmentation/cnnseg/proto/cnnseg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _CNNSegParam_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _NetworkParam_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  NetworkParam::_default_instance_pt_blob_.Shutdown();
  NetworkParam::_default_category_pt_blob_.Shutdown();
  NetworkParam::_default_confidence_pt_blob_.Shutdown();
  NetworkParam::_default_height_pt_blob_.Shutdown();
  NetworkParam::_default_feature_blob_.Shutdown();
  NetworkParam::_default_class_pt_blob_.Shutdown();
  _FeatureParam_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CNNSegParam_default_instance_.DefaultConstruct();
  NetworkParam::_default_instance_pt_blob_.DefaultConstruct();
  *NetworkParam::_default_instance_pt_blob_.get_mutable() = ::std::string("instance_pt", 11);
  NetworkParam::_default_category_pt_blob_.DefaultConstruct();
  *NetworkParam::_default_category_pt_blob_.get_mutable() = ::std::string("category_score", 14);
  NetworkParam::_default_confidence_pt_blob_.DefaultConstruct();
  *NetworkParam::_default_confidence_pt_blob_.get_mutable() = ::std::string("confidence_score", 16);
  NetworkParam::_default_height_pt_blob_.DefaultConstruct();
  *NetworkParam::_default_height_pt_blob_.get_mutable() = ::std::string("height_pt", 9);
  NetworkParam::_default_feature_blob_.DefaultConstruct();
  *NetworkParam::_default_feature_blob_.get_mutable() = ::std::string("data", 4);
  NetworkParam::_default_class_pt_blob_.DefaultConstruct();
  *NetworkParam::_default_class_pt_blob_.get_mutable() = ::std::string("class_score", 11);
  _NetworkParam_default_instance_.DefaultConstruct();
  _FeatureParam_default_instance_.DefaultConstruct();
  _CNNSegParam_default_instance_.get_mutable()->network_param_ = const_cast< ::apollo::perception::cnnseg::NetworkParam*>(
      ::apollo::perception::cnnseg::NetworkParam::internal_default_instance());
  _CNNSegParam_default_instance_.get_mutable()->feature_param_ = const_cast< ::apollo::perception::cnnseg::FeatureParam*>(
      ::apollo::perception::cnnseg::FeatureParam::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\nHmodules/perception/obstacle/lidar/segm"
      "entation/cnnseg/proto/cnnseg.proto\022\030apol"
      "lo.perception.cnnseg\"\336\002\n\013CNNSegParam\022=\n\r"
      "network_param\030\001 \002(\0132&.apollo.perception."
      "cnnseg.NetworkParam\022=\n\rfeature_param\030\002 \002"
      "(\0132&.apollo.perception.cnnseg.FeaturePar"
      "am\022\036\n\021objectness_thresh\030\013 \001(\002:\0030.5\022+\n\034us"
      "e_all_grids_for_clustering\030\014 \001(\010:\005false\022"
      "\036\n\021confidence_thresh\030\r \001(\002:\0030.1\022\032\n\rheigh"
      "t_thresh\030\016 \001(\002:\0030.5\022\026\n\013min_pts_num\030\017 \001(\r"
      ":\0013\022\035\n\016use_full_cloud\030\037 \001(\010:\005false\022\021\n\006gp"
      "u_id\030) \001(\r:\0010\"\360\001\n\014NetworkParam\022%\n\020instan"
      "ce_pt_blob\030\001 \001(\t:\013instance_pt\022(\n\020categor"
      "y_pt_blob\030\002 \001(\t:\016category_score\022,\n\022confi"
      "dence_pt_blob\030\003 \001(\t:\020confidence_score\022!\n"
      "\016height_pt_blob\030\004 \001(\t:\theight_pt\022\032\n\014feat"
      "ure_blob\030\005 \001(\t:\004data\022\"\n\rclass_pt_blob\030\006 "
      "\001(\t:\013class_score\"\205\001\n\014FeatureParam\022\035\n\021poi"
      "nt_cloud_range\030\032 \001(\r:\00260\022\022\n\005width\030\033 \001(\r:"
      "\003512\022\023\n\006height\030\034 \001(\r:\003512\022\026\n\nmin_height\030"
      "\037 \001(\002:\002-5\022\025\n\nmax_height\030  \001(\002:\0015"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 832);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/perception/obstacle/lidar/segmentation/cnnseg/proto/cnnseg.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNNSegParam::kNetworkParamFieldNumber;
const int CNNSegParam::kFeatureParamFieldNumber;
const int CNNSegParam::kObjectnessThreshFieldNumber;
const int CNNSegParam::kUseAllGridsForClusteringFieldNumber;
const int CNNSegParam::kConfidenceThreshFieldNumber;
const int CNNSegParam::kHeightThreshFieldNumber;
const int CNNSegParam::kMinPtsNumFieldNumber;
const int CNNSegParam::kUseFullCloudFieldNumber;
const int CNNSegParam::kGpuIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNNSegParam::CNNSegParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.cnnseg.CNNSegParam)
}
CNNSegParam::CNNSegParam(const CNNSegParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_network_param()) {
    network_param_ = new ::apollo::perception::cnnseg::NetworkParam(*from.network_param_);
  } else {
    network_param_ = NULL;
  }
  if (from.has_feature_param()) {
    feature_param_ = new ::apollo::perception::cnnseg::FeatureParam(*from.feature_param_);
  } else {
    feature_param_ = NULL;
  }
  ::memcpy(&use_all_grids_for_clustering_, &from.use_all_grids_for_clustering_,
    reinterpret_cast<char*>(&min_pts_num_) -
    reinterpret_cast<char*>(&use_all_grids_for_clustering_) + sizeof(min_pts_num_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.cnnseg.CNNSegParam)
}

void CNNSegParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&network_param_, 0, reinterpret_cast<char*>(&gpu_id_) -
    reinterpret_cast<char*>(&network_param_) + sizeof(gpu_id_));
  objectness_thresh_ = 0.5f;
  confidence_thresh_ = 0.1f;
  height_thresh_ = 0.5f;
  min_pts_num_ = 3u;
}

CNNSegParam::~CNNSegParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.cnnseg.CNNSegParam)
  SharedDtor();
}

void CNNSegParam::SharedDtor() {
  if (this != internal_default_instance()) {
    delete network_param_;
  }
  if (this != internal_default_instance()) {
    delete feature_param_;
  }
}

void CNNSegParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNNSegParam::descriptor() {
  protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNNSegParam& CNNSegParam::default_instance() {
  protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

CNNSegParam* CNNSegParam::New(::google::protobuf::Arena* arena) const {
  CNNSegParam* n = new CNNSegParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNNSegParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.cnnseg.CNNSegParam)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_network_param()) {
      GOOGLE_DCHECK(network_param_ != NULL);
      network_param_->::apollo::perception::cnnseg::NetworkParam::Clear();
    }
    if (has_feature_param()) {
      GOOGLE_DCHECK(feature_param_ != NULL);
      feature_param_->::apollo::perception::cnnseg::FeatureParam::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&use_all_grids_for_clustering_, 0, reinterpret_cast<char*>(&gpu_id_) -
      reinterpret_cast<char*>(&use_all_grids_for_clustering_) + sizeof(gpu_id_));
    objectness_thresh_ = 0.5f;
    confidence_thresh_ = 0.1f;
    height_thresh_ = 0.5f;
  }
  min_pts_num_ = 3u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNNSegParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.cnnseg.CNNSegParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .apollo.perception.cnnseg.NetworkParam network_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feature_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float objectness_thresh = 11 [default = 0.5];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_objectness_thresh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &objectness_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_all_grids_for_clustering = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_use_all_grids_for_clustering();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_all_grids_for_clustering_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float confidence_thresh = 13 [default = 0.1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_confidence_thresh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height_thresh = 14 [default = 0.5];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_height_thresh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_pts_num = 15 [default = 3];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_min_pts_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_pts_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_full_cloud = 31 [default = false];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_use_full_cloud();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_full_cloud_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gpu_id = 41 [default = 0];
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(328u)) {
          set_has_gpu_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpu_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.cnnseg.CNNSegParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.cnnseg.CNNSegParam)
  return false;
#undef DO_
}

void CNNSegParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.cnnseg.CNNSegParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .apollo.perception.cnnseg.NetworkParam network_param = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->network_param_, output);
  }

  // required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->feature_param_, output);
  }

  // optional float objectness_thresh = 11 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->objectness_thresh(), output);
  }

  // optional bool use_all_grids_for_clustering = 12 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_all_grids_for_clustering(), output);
  }

  // optional float confidence_thresh = 13 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->confidence_thresh(), output);
  }

  // optional float height_thresh = 14 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->height_thresh(), output);
  }

  // optional uint32 min_pts_num = 15 [default = 3];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->min_pts_num(), output);
  }

  // optional bool use_full_cloud = 31 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->use_full_cloud(), output);
  }

  // optional uint32 gpu_id = 41 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->gpu_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.cnnseg.CNNSegParam)
}

::google::protobuf::uint8* CNNSegParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.cnnseg.CNNSegParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .apollo.perception.cnnseg.NetworkParam network_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->network_param_, deterministic, target);
  }

  // required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->feature_param_, deterministic, target);
  }

  // optional float objectness_thresh = 11 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->objectness_thresh(), target);
  }

  // optional bool use_all_grids_for_clustering = 12 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_all_grids_for_clustering(), target);
  }

  // optional float confidence_thresh = 13 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->confidence_thresh(), target);
  }

  // optional float height_thresh = 14 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->height_thresh(), target);
  }

  // optional uint32 min_pts_num = 15 [default = 3];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->min_pts_num(), target);
  }

  // optional bool use_full_cloud = 31 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->use_full_cloud(), target);
  }

  // optional uint32 gpu_id = 41 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->gpu_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.cnnseg.CNNSegParam)
  return target;
}

size_t CNNSegParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:apollo.perception.cnnseg.CNNSegParam)
  size_t total_size = 0;

  if (has_network_param()) {
    // required .apollo.perception.cnnseg.NetworkParam network_param = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->network_param_);
  }

  if (has_feature_param()) {
    // required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->feature_param_);
  }

  return total_size;
}
size_t CNNSegParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.cnnseg.CNNSegParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .apollo.perception.cnnseg.NetworkParam network_param = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->network_param_);

    // required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->feature_param_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 252u) {
    // optional bool use_all_grids_for_clustering = 12 [default = false];
    if (has_use_all_grids_for_clustering()) {
      total_size += 1 + 1;
    }

    // optional bool use_full_cloud = 31 [default = false];
    if (has_use_full_cloud()) {
      total_size += 2 + 1;
    }

    // optional uint32 gpu_id = 41 [default = 0];
    if (has_gpu_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpu_id());
    }

    // optional float objectness_thresh = 11 [default = 0.5];
    if (has_objectness_thresh()) {
      total_size += 1 + 4;
    }

    // optional float confidence_thresh = 13 [default = 0.1];
    if (has_confidence_thresh()) {
      total_size += 1 + 4;
    }

    // optional float height_thresh = 14 [default = 0.5];
    if (has_height_thresh()) {
      total_size += 1 + 4;
    }

  }
  // optional uint32 min_pts_num = 15 [default = 3];
  if (has_min_pts_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min_pts_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNNSegParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.cnnseg.CNNSegParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CNNSegParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNNSegParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.cnnseg.CNNSegParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.cnnseg.CNNSegParam)
    MergeFrom(*source);
  }
}

void CNNSegParam::MergeFrom(const CNNSegParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.cnnseg.CNNSegParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_network_param()->::apollo::perception::cnnseg::NetworkParam::MergeFrom(from.network_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_feature_param()->::apollo::perception::cnnseg::FeatureParam::MergeFrom(from.feature_param());
    }
    if (cached_has_bits & 0x00000004u) {
      use_all_grids_for_clustering_ = from.use_all_grids_for_clustering_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_full_cloud_ = from.use_full_cloud_;
    }
    if (cached_has_bits & 0x00000010u) {
      gpu_id_ = from.gpu_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      objectness_thresh_ = from.objectness_thresh_;
    }
    if (cached_has_bits & 0x00000040u) {
      confidence_thresh_ = from.confidence_thresh_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_thresh_ = from.height_thresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_min_pts_num(from.min_pts_num());
  }
}

void CNNSegParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.cnnseg.CNNSegParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNNSegParam::CopyFrom(const CNNSegParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.cnnseg.CNNSegParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNNSegParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CNNSegParam::Swap(CNNSegParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNNSegParam::InternalSwap(CNNSegParam* other) {
  std::swap(network_param_, other->network_param_);
  std::swap(feature_param_, other->feature_param_);
  std::swap(use_all_grids_for_clustering_, other->use_all_grids_for_clustering_);
  std::swap(use_full_cloud_, other->use_full_cloud_);
  std::swap(gpu_id_, other->gpu_id_);
  std::swap(objectness_thresh_, other->objectness_thresh_);
  std::swap(confidence_thresh_, other->confidence_thresh_);
  std::swap(height_thresh_, other->height_thresh_);
  std::swap(min_pts_num_, other->min_pts_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNNSegParam::GetMetadata() const {
  protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CNNSegParam

// required .apollo.perception.cnnseg.NetworkParam network_param = 1;
bool CNNSegParam::has_network_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CNNSegParam::set_has_network_param() {
  _has_bits_[0] |= 0x00000001u;
}
void CNNSegParam::clear_has_network_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void CNNSegParam::clear_network_param() {
  if (network_param_ != NULL) network_param_->::apollo::perception::cnnseg::NetworkParam::Clear();
  clear_has_network_param();
}
const ::apollo::perception::cnnseg::NetworkParam& CNNSegParam::network_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.network_param)
  return network_param_ != NULL ? *network_param_
                         : *::apollo::perception::cnnseg::NetworkParam::internal_default_instance();
}
::apollo::perception::cnnseg::NetworkParam* CNNSegParam::mutable_network_param() {
  set_has_network_param();
  if (network_param_ == NULL) {
    network_param_ = new ::apollo::perception::cnnseg::NetworkParam;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.CNNSegParam.network_param)
  return network_param_;
}
::apollo::perception::cnnseg::NetworkParam* CNNSegParam::release_network_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.CNNSegParam.network_param)
  clear_has_network_param();
  ::apollo::perception::cnnseg::NetworkParam* temp = network_param_;
  network_param_ = NULL;
  return temp;
}
void CNNSegParam::set_allocated_network_param(::apollo::perception::cnnseg::NetworkParam* network_param) {
  delete network_param_;
  network_param_ = network_param;
  if (network_param) {
    set_has_network_param();
  } else {
    clear_has_network_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.CNNSegParam.network_param)
}

// required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
bool CNNSegParam::has_feature_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CNNSegParam::set_has_feature_param() {
  _has_bits_[0] |= 0x00000002u;
}
void CNNSegParam::clear_has_feature_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void CNNSegParam::clear_feature_param() {
  if (feature_param_ != NULL) feature_param_->::apollo::perception::cnnseg::FeatureParam::Clear();
  clear_has_feature_param();
}
const ::apollo::perception::cnnseg::FeatureParam& CNNSegParam::feature_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.feature_param)
  return feature_param_ != NULL ? *feature_param_
                         : *::apollo::perception::cnnseg::FeatureParam::internal_default_instance();
}
::apollo::perception::cnnseg::FeatureParam* CNNSegParam::mutable_feature_param() {
  set_has_feature_param();
  if (feature_param_ == NULL) {
    feature_param_ = new ::apollo::perception::cnnseg::FeatureParam;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.CNNSegParam.feature_param)
  return feature_param_;
}
::apollo::perception::cnnseg::FeatureParam* CNNSegParam::release_feature_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.CNNSegParam.feature_param)
  clear_has_feature_param();
  ::apollo::perception::cnnseg::FeatureParam* temp = feature_param_;
  feature_param_ = NULL;
  return temp;
}
void CNNSegParam::set_allocated_feature_param(::apollo::perception::cnnseg::FeatureParam* feature_param) {
  delete feature_param_;
  feature_param_ = feature_param;
  if (feature_param) {
    set_has_feature_param();
  } else {
    clear_has_feature_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.CNNSegParam.feature_param)
}

// optional float objectness_thresh = 11 [default = 0.5];
bool CNNSegParam::has_objectness_thresh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CNNSegParam::set_has_objectness_thresh() {
  _has_bits_[0] |= 0x00000020u;
}
void CNNSegParam::clear_has_objectness_thresh() {
  _has_bits_[0] &= ~0x00000020u;
}
void CNNSegParam::clear_objectness_thresh() {
  objectness_thresh_ = 0.5f;
  clear_has_objectness_thresh();
}
float CNNSegParam::objectness_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.objectness_thresh)
  return objectness_thresh_;
}
void CNNSegParam::set_objectness_thresh(float value) {
  set_has_objectness_thresh();
  objectness_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.objectness_thresh)
}

// optional bool use_all_grids_for_clustering = 12 [default = false];
bool CNNSegParam::has_use_all_grids_for_clustering() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CNNSegParam::set_has_use_all_grids_for_clustering() {
  _has_bits_[0] |= 0x00000004u;
}
void CNNSegParam::clear_has_use_all_grids_for_clustering() {
  _has_bits_[0] &= ~0x00000004u;
}
void CNNSegParam::clear_use_all_grids_for_clustering() {
  use_all_grids_for_clustering_ = false;
  clear_has_use_all_grids_for_clustering();
}
bool CNNSegParam::use_all_grids_for_clustering() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.use_all_grids_for_clustering)
  return use_all_grids_for_clustering_;
}
void CNNSegParam::set_use_all_grids_for_clustering(bool value) {
  set_has_use_all_grids_for_clustering();
  use_all_grids_for_clustering_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.use_all_grids_for_clustering)
}

// optional float confidence_thresh = 13 [default = 0.1];
bool CNNSegParam::has_confidence_thresh() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CNNSegParam::set_has_confidence_thresh() {
  _has_bits_[0] |= 0x00000040u;
}
void CNNSegParam::clear_has_confidence_thresh() {
  _has_bits_[0] &= ~0x00000040u;
}
void CNNSegParam::clear_confidence_thresh() {
  confidence_thresh_ = 0.1f;
  clear_has_confidence_thresh();
}
float CNNSegParam::confidence_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.confidence_thresh)
  return confidence_thresh_;
}
void CNNSegParam::set_confidence_thresh(float value) {
  set_has_confidence_thresh();
  confidence_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.confidence_thresh)
}

// optional float height_thresh = 14 [default = 0.5];
bool CNNSegParam::has_height_thresh() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CNNSegParam::set_has_height_thresh() {
  _has_bits_[0] |= 0x00000080u;
}
void CNNSegParam::clear_has_height_thresh() {
  _has_bits_[0] &= ~0x00000080u;
}
void CNNSegParam::clear_height_thresh() {
  height_thresh_ = 0.5f;
  clear_has_height_thresh();
}
float CNNSegParam::height_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.height_thresh)
  return height_thresh_;
}
void CNNSegParam::set_height_thresh(float value) {
  set_has_height_thresh();
  height_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.height_thresh)
}

// optional uint32 min_pts_num = 15 [default = 3];
bool CNNSegParam::has_min_pts_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CNNSegParam::set_has_min_pts_num() {
  _has_bits_[0] |= 0x00000100u;
}
void CNNSegParam::clear_has_min_pts_num() {
  _has_bits_[0] &= ~0x00000100u;
}
void CNNSegParam::clear_min_pts_num() {
  min_pts_num_ = 3u;
  clear_has_min_pts_num();
}
::google::protobuf::uint32 CNNSegParam::min_pts_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.min_pts_num)
  return min_pts_num_;
}
void CNNSegParam::set_min_pts_num(::google::protobuf::uint32 value) {
  set_has_min_pts_num();
  min_pts_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.min_pts_num)
}

// optional bool use_full_cloud = 31 [default = false];
bool CNNSegParam::has_use_full_cloud() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CNNSegParam::set_has_use_full_cloud() {
  _has_bits_[0] |= 0x00000008u;
}
void CNNSegParam::clear_has_use_full_cloud() {
  _has_bits_[0] &= ~0x00000008u;
}
void CNNSegParam::clear_use_full_cloud() {
  use_full_cloud_ = false;
  clear_has_use_full_cloud();
}
bool CNNSegParam::use_full_cloud() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.use_full_cloud)
  return use_full_cloud_;
}
void CNNSegParam::set_use_full_cloud(bool value) {
  set_has_use_full_cloud();
  use_full_cloud_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.use_full_cloud)
}

// optional uint32 gpu_id = 41 [default = 0];
bool CNNSegParam::has_gpu_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CNNSegParam::set_has_gpu_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CNNSegParam::clear_has_gpu_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CNNSegParam::clear_gpu_id() {
  gpu_id_ = 0u;
  clear_has_gpu_id();
}
::google::protobuf::uint32 CNNSegParam::gpu_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.gpu_id)
  return gpu_id_;
}
void CNNSegParam::set_gpu_id(::google::protobuf::uint32 value) {
  set_has_gpu_id();
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.gpu_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_instance_pt_blob_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_category_pt_blob_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_confidence_pt_blob_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_height_pt_blob_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_feature_blob_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_class_pt_blob_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkParam::kInstancePtBlobFieldNumber;
const int NetworkParam::kCategoryPtBlobFieldNumber;
const int NetworkParam::kConfidencePtBlobFieldNumber;
const int NetworkParam::kHeightPtBlobFieldNumber;
const int NetworkParam::kFeatureBlobFieldNumber;
const int NetworkParam::kClassPtBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkParam::NetworkParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.cnnseg.NetworkParam)
}
NetworkParam::NetworkParam(const NetworkParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_pt_blob_.UnsafeSetDefault(&NetworkParam::_default_instance_pt_blob_.get());
  if (from.has_instance_pt_blob()) {
    instance_pt_blob_.AssignWithDefault(&NetworkParam::_default_instance_pt_blob_.get(), from.instance_pt_blob_);
  }
  category_pt_blob_.UnsafeSetDefault(&NetworkParam::_default_category_pt_blob_.get());
  if (from.has_category_pt_blob()) {
    category_pt_blob_.AssignWithDefault(&NetworkParam::_default_category_pt_blob_.get(), from.category_pt_blob_);
  }
  confidence_pt_blob_.UnsafeSetDefault(&NetworkParam::_default_confidence_pt_blob_.get());
  if (from.has_confidence_pt_blob()) {
    confidence_pt_blob_.AssignWithDefault(&NetworkParam::_default_confidence_pt_blob_.get(), from.confidence_pt_blob_);
  }
  height_pt_blob_.UnsafeSetDefault(&NetworkParam::_default_height_pt_blob_.get());
  if (from.has_height_pt_blob()) {
    height_pt_blob_.AssignWithDefault(&NetworkParam::_default_height_pt_blob_.get(), from.height_pt_blob_);
  }
  feature_blob_.UnsafeSetDefault(&NetworkParam::_default_feature_blob_.get());
  if (from.has_feature_blob()) {
    feature_blob_.AssignWithDefault(&NetworkParam::_default_feature_blob_.get(), from.feature_blob_);
  }
  class_pt_blob_.UnsafeSetDefault(&NetworkParam::_default_class_pt_blob_.get());
  if (from.has_class_pt_blob()) {
    class_pt_blob_.AssignWithDefault(&NetworkParam::_default_class_pt_blob_.get(), from.class_pt_blob_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.cnnseg.NetworkParam)
}

void NetworkParam::SharedCtor() {
  _cached_size_ = 0;
  instance_pt_blob_.UnsafeSetDefault(&NetworkParam::_default_instance_pt_blob_.get());
  category_pt_blob_.UnsafeSetDefault(&NetworkParam::_default_category_pt_blob_.get());
  confidence_pt_blob_.UnsafeSetDefault(&NetworkParam::_default_confidence_pt_blob_.get());
  height_pt_blob_.UnsafeSetDefault(&NetworkParam::_default_height_pt_blob_.get());
  feature_blob_.UnsafeSetDefault(&NetworkParam::_default_feature_blob_.get());
  class_pt_blob_.UnsafeSetDefault(&NetworkParam::_default_class_pt_blob_.get());
}

NetworkParam::~NetworkParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.cnnseg.NetworkParam)
  SharedDtor();
}

void NetworkParam::SharedDtor() {
  instance_pt_blob_.DestroyNoArena(&NetworkParam::_default_instance_pt_blob_.get());
  category_pt_blob_.DestroyNoArena(&NetworkParam::_default_category_pt_blob_.get());
  confidence_pt_blob_.DestroyNoArena(&NetworkParam::_default_confidence_pt_blob_.get());
  height_pt_blob_.DestroyNoArena(&NetworkParam::_default_height_pt_blob_.get());
  feature_blob_.DestroyNoArena(&NetworkParam::_default_feature_blob_.get());
  class_pt_blob_.DestroyNoArena(&NetworkParam::_default_class_pt_blob_.get());
}

void NetworkParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkParam::descriptor() {
  protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkParam& NetworkParam::default_instance() {
  protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkParam* NetworkParam::New(::google::protobuf::Arena* arena) const {
  NetworkParam* n = new NetworkParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.cnnseg.NetworkParam)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_instance_pt_blob()) {
      GOOGLE_DCHECK(!instance_pt_blob_.IsDefault(&NetworkParam::_default_instance_pt_blob_.get()));
      (*instance_pt_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_instance_pt_blob_.get());
    }
    if (has_category_pt_blob()) {
      GOOGLE_DCHECK(!category_pt_blob_.IsDefault(&NetworkParam::_default_category_pt_blob_.get()));
      (*category_pt_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_category_pt_blob_.get());
    }
    if (has_confidence_pt_blob()) {
      GOOGLE_DCHECK(!confidence_pt_blob_.IsDefault(&NetworkParam::_default_confidence_pt_blob_.get()));
      (*confidence_pt_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_confidence_pt_blob_.get());
    }
    if (has_height_pt_blob()) {
      GOOGLE_DCHECK(!height_pt_blob_.IsDefault(&NetworkParam::_default_height_pt_blob_.get()));
      (*height_pt_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_height_pt_blob_.get());
    }
    if (has_feature_blob()) {
      GOOGLE_DCHECK(!feature_blob_.IsDefault(&NetworkParam::_default_feature_blob_.get()));
      (*feature_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_feature_blob_.get());
    }
    if (has_class_pt_blob()) {
      GOOGLE_DCHECK(!class_pt_blob_.IsDefault(&NetworkParam::_default_class_pt_blob_.get()));
      (*class_pt_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_class_pt_blob_.get());
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.cnnseg.NetworkParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instance_pt_blob = 1 [default = "instance_pt"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_pt_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instance_pt_blob().data(), this->instance_pt_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.cnnseg.NetworkParam.instance_pt_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string category_pt_blob = 2 [default = "category_score"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category_pt_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category_pt_blob().data(), this->category_pt_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.cnnseg.NetworkParam.category_pt_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string confidence_pt_blob = 3 [default = "confidence_score"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confidence_pt_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confidence_pt_blob().data(), this->confidence_pt_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.cnnseg.NetworkParam.confidence_pt_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string height_pt_blob = 4 [default = "height_pt"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_height_pt_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->height_pt_blob().data(), this->height_pt_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.cnnseg.NetworkParam.height_pt_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string feature_blob = 5 [default = "data"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feature_blob().data(), this->feature_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.cnnseg.NetworkParam.feature_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string class_pt_blob = 6 [default = "class_score"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_pt_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_pt_blob().data(), this->class_pt_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.cnnseg.NetworkParam.class_pt_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.cnnseg.NetworkParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.cnnseg.NetworkParam)
  return false;
#undef DO_
}

void NetworkParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.cnnseg.NetworkParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string instance_pt_blob = 1 [default = "instance_pt"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instance_pt_blob().data(), this->instance_pt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.instance_pt_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instance_pt_blob(), output);
  }

  // optional string category_pt_blob = 2 [default = "category_score"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category_pt_blob().data(), this->category_pt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.category_pt_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category_pt_blob(), output);
  }

  // optional string confidence_pt_blob = 3 [default = "confidence_score"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confidence_pt_blob().data(), this->confidence_pt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.confidence_pt_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->confidence_pt_blob(), output);
  }

  // optional string height_pt_blob = 4 [default = "height_pt"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->height_pt_blob().data(), this->height_pt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.height_pt_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->height_pt_blob(), output);
  }

  // optional string feature_blob = 5 [default = "data"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature_blob().data(), this->feature_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.feature_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->feature_blob(), output);
  }

  // optional string class_pt_blob = 6 [default = "class_score"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_pt_blob().data(), this->class_pt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.class_pt_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->class_pt_blob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.cnnseg.NetworkParam)
}

::google::protobuf::uint8* NetworkParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.cnnseg.NetworkParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string instance_pt_blob = 1 [default = "instance_pt"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instance_pt_blob().data(), this->instance_pt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.instance_pt_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instance_pt_blob(), target);
  }

  // optional string category_pt_blob = 2 [default = "category_score"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category_pt_blob().data(), this->category_pt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.category_pt_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->category_pt_blob(), target);
  }

  // optional string confidence_pt_blob = 3 [default = "confidence_score"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confidence_pt_blob().data(), this->confidence_pt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.confidence_pt_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->confidence_pt_blob(), target);
  }

  // optional string height_pt_blob = 4 [default = "height_pt"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->height_pt_blob().data(), this->height_pt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.height_pt_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->height_pt_blob(), target);
  }

  // optional string feature_blob = 5 [default = "data"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature_blob().data(), this->feature_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.feature_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->feature_blob(), target);
  }

  // optional string class_pt_blob = 6 [default = "class_score"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_pt_blob().data(), this->class_pt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.class_pt_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->class_pt_blob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.cnnseg.NetworkParam)
  return target;
}

size_t NetworkParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.cnnseg.NetworkParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string instance_pt_blob = 1 [default = "instance_pt"];
    if (has_instance_pt_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instance_pt_blob());
    }

    // optional string category_pt_blob = 2 [default = "category_score"];
    if (has_category_pt_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category_pt_blob());
    }

    // optional string confidence_pt_blob = 3 [default = "confidence_score"];
    if (has_confidence_pt_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confidence_pt_blob());
    }

    // optional string height_pt_blob = 4 [default = "height_pt"];
    if (has_height_pt_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->height_pt_blob());
    }

    // optional string feature_blob = 5 [default = "data"];
    if (has_feature_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feature_blob());
    }

    // optional string class_pt_blob = 6 [default = "class_score"];
    if (has_class_pt_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_pt_blob());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.cnnseg.NetworkParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.cnnseg.NetworkParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.cnnseg.NetworkParam)
    MergeFrom(*source);
  }
}

void NetworkParam::MergeFrom(const NetworkParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.cnnseg.NetworkParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_instance_pt_blob();
      instance_pt_blob_.AssignWithDefault(&NetworkParam::_default_instance_pt_blob_.get(), from.instance_pt_blob_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_category_pt_blob();
      category_pt_blob_.AssignWithDefault(&NetworkParam::_default_category_pt_blob_.get(), from.category_pt_blob_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_confidence_pt_blob();
      confidence_pt_blob_.AssignWithDefault(&NetworkParam::_default_confidence_pt_blob_.get(), from.confidence_pt_blob_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_height_pt_blob();
      height_pt_blob_.AssignWithDefault(&NetworkParam::_default_height_pt_blob_.get(), from.height_pt_blob_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_feature_blob();
      feature_blob_.AssignWithDefault(&NetworkParam::_default_feature_blob_.get(), from.feature_blob_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_class_pt_blob();
      class_pt_blob_.AssignWithDefault(&NetworkParam::_default_class_pt_blob_.get(), from.class_pt_blob_);
    }
  }
}

void NetworkParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.cnnseg.NetworkParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParam::CopyFrom(const NetworkParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.cnnseg.NetworkParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParam::IsInitialized() const {
  return true;
}

void NetworkParam::Swap(NetworkParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkParam::InternalSwap(NetworkParam* other) {
  instance_pt_blob_.Swap(&other->instance_pt_blob_);
  category_pt_blob_.Swap(&other->category_pt_blob_);
  confidence_pt_blob_.Swap(&other->confidence_pt_blob_);
  height_pt_blob_.Swap(&other->height_pt_blob_);
  feature_blob_.Swap(&other->feature_blob_);
  class_pt_blob_.Swap(&other->class_pt_blob_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkParam::GetMetadata() const {
  protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkParam

// optional string instance_pt_blob = 1 [default = "instance_pt"];
bool NetworkParam::has_instance_pt_blob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkParam::set_has_instance_pt_blob() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkParam::clear_has_instance_pt_blob() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkParam::clear_instance_pt_blob() {
  instance_pt_blob_.ClearToDefaultNoArena(&NetworkParam::_default_instance_pt_blob_.get());
  clear_has_instance_pt_blob();
}
const ::std::string& NetworkParam::instance_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
  return instance_pt_blob_.GetNoArena();
}
void NetworkParam::set_instance_pt_blob(const ::std::string& value) {
  set_has_instance_pt_blob();
  instance_pt_blob_.SetNoArena(&NetworkParam::_default_instance_pt_blob_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
}
#if LANG_CXX11
void NetworkParam::set_instance_pt_blob(::std::string&& value) {
  set_has_instance_pt_blob();
  instance_pt_blob_.SetNoArena(
    &NetworkParam::_default_instance_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
}
#endif
void NetworkParam::set_instance_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_instance_pt_blob();
  instance_pt_blob_.SetNoArena(&NetworkParam::_default_instance_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
}
void NetworkParam::set_instance_pt_blob(const char* value, size_t size) {
  set_has_instance_pt_blob();
  instance_pt_blob_.SetNoArena(&NetworkParam::_default_instance_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
}
::std::string* NetworkParam::mutable_instance_pt_blob() {
  set_has_instance_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
  return instance_pt_blob_.MutableNoArena(&NetworkParam::_default_instance_pt_blob_.get());
}
::std::string* NetworkParam::release_instance_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
  clear_has_instance_pt_blob();
  return instance_pt_blob_.ReleaseNoArena(&NetworkParam::_default_instance_pt_blob_.get());
}
void NetworkParam::set_allocated_instance_pt_blob(::std::string* instance_pt_blob) {
  if (instance_pt_blob != NULL) {
    set_has_instance_pt_blob();
  } else {
    clear_has_instance_pt_blob();
  }
  instance_pt_blob_.SetAllocatedNoArena(&NetworkParam::_default_instance_pt_blob_.get(), instance_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
}

// optional string category_pt_blob = 2 [default = "category_score"];
bool NetworkParam::has_category_pt_blob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkParam::set_has_category_pt_blob() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkParam::clear_has_category_pt_blob() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkParam::clear_category_pt_blob() {
  category_pt_blob_.ClearToDefaultNoArena(&NetworkParam::_default_category_pt_blob_.get());
  clear_has_category_pt_blob();
}
const ::std::string& NetworkParam::category_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
  return category_pt_blob_.GetNoArena();
}
void NetworkParam::set_category_pt_blob(const ::std::string& value) {
  set_has_category_pt_blob();
  category_pt_blob_.SetNoArena(&NetworkParam::_default_category_pt_blob_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
}
#if LANG_CXX11
void NetworkParam::set_category_pt_blob(::std::string&& value) {
  set_has_category_pt_blob();
  category_pt_blob_.SetNoArena(
    &NetworkParam::_default_category_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
}
#endif
void NetworkParam::set_category_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category_pt_blob();
  category_pt_blob_.SetNoArena(&NetworkParam::_default_category_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
}
void NetworkParam::set_category_pt_blob(const char* value, size_t size) {
  set_has_category_pt_blob();
  category_pt_blob_.SetNoArena(&NetworkParam::_default_category_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
}
::std::string* NetworkParam::mutable_category_pt_blob() {
  set_has_category_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
  return category_pt_blob_.MutableNoArena(&NetworkParam::_default_category_pt_blob_.get());
}
::std::string* NetworkParam::release_category_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
  clear_has_category_pt_blob();
  return category_pt_blob_.ReleaseNoArena(&NetworkParam::_default_category_pt_blob_.get());
}
void NetworkParam::set_allocated_category_pt_blob(::std::string* category_pt_blob) {
  if (category_pt_blob != NULL) {
    set_has_category_pt_blob();
  } else {
    clear_has_category_pt_blob();
  }
  category_pt_blob_.SetAllocatedNoArena(&NetworkParam::_default_category_pt_blob_.get(), category_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
}

// optional string confidence_pt_blob = 3 [default = "confidence_score"];
bool NetworkParam::has_confidence_pt_blob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkParam::set_has_confidence_pt_blob() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkParam::clear_has_confidence_pt_blob() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkParam::clear_confidence_pt_blob() {
  confidence_pt_blob_.ClearToDefaultNoArena(&NetworkParam::_default_confidence_pt_blob_.get());
  clear_has_confidence_pt_blob();
}
const ::std::string& NetworkParam::confidence_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
  return confidence_pt_blob_.GetNoArena();
}
void NetworkParam::set_confidence_pt_blob(const ::std::string& value) {
  set_has_confidence_pt_blob();
  confidence_pt_blob_.SetNoArena(&NetworkParam::_default_confidence_pt_blob_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
}
#if LANG_CXX11
void NetworkParam::set_confidence_pt_blob(::std::string&& value) {
  set_has_confidence_pt_blob();
  confidence_pt_blob_.SetNoArena(
    &NetworkParam::_default_confidence_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
}
#endif
void NetworkParam::set_confidence_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_confidence_pt_blob();
  confidence_pt_blob_.SetNoArena(&NetworkParam::_default_confidence_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
}
void NetworkParam::set_confidence_pt_blob(const char* value, size_t size) {
  set_has_confidence_pt_blob();
  confidence_pt_blob_.SetNoArena(&NetworkParam::_default_confidence_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
}
::std::string* NetworkParam::mutable_confidence_pt_blob() {
  set_has_confidence_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
  return confidence_pt_blob_.MutableNoArena(&NetworkParam::_default_confidence_pt_blob_.get());
}
::std::string* NetworkParam::release_confidence_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
  clear_has_confidence_pt_blob();
  return confidence_pt_blob_.ReleaseNoArena(&NetworkParam::_default_confidence_pt_blob_.get());
}
void NetworkParam::set_allocated_confidence_pt_blob(::std::string* confidence_pt_blob) {
  if (confidence_pt_blob != NULL) {
    set_has_confidence_pt_blob();
  } else {
    clear_has_confidence_pt_blob();
  }
  confidence_pt_blob_.SetAllocatedNoArena(&NetworkParam::_default_confidence_pt_blob_.get(), confidence_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
}

// optional string height_pt_blob = 4 [default = "height_pt"];
bool NetworkParam::has_height_pt_blob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetworkParam::set_has_height_pt_blob() {
  _has_bits_[0] |= 0x00000008u;
}
void NetworkParam::clear_has_height_pt_blob() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetworkParam::clear_height_pt_blob() {
  height_pt_blob_.ClearToDefaultNoArena(&NetworkParam::_default_height_pt_blob_.get());
  clear_has_height_pt_blob();
}
const ::std::string& NetworkParam::height_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
  return height_pt_blob_.GetNoArena();
}
void NetworkParam::set_height_pt_blob(const ::std::string& value) {
  set_has_height_pt_blob();
  height_pt_blob_.SetNoArena(&NetworkParam::_default_height_pt_blob_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
}
#if LANG_CXX11
void NetworkParam::set_height_pt_blob(::std::string&& value) {
  set_has_height_pt_blob();
  height_pt_blob_.SetNoArena(
    &NetworkParam::_default_height_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
}
#endif
void NetworkParam::set_height_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_height_pt_blob();
  height_pt_blob_.SetNoArena(&NetworkParam::_default_height_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
}
void NetworkParam::set_height_pt_blob(const char* value, size_t size) {
  set_has_height_pt_blob();
  height_pt_blob_.SetNoArena(&NetworkParam::_default_height_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
}
::std::string* NetworkParam::mutable_height_pt_blob() {
  set_has_height_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
  return height_pt_blob_.MutableNoArena(&NetworkParam::_default_height_pt_blob_.get());
}
::std::string* NetworkParam::release_height_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
  clear_has_height_pt_blob();
  return height_pt_blob_.ReleaseNoArena(&NetworkParam::_default_height_pt_blob_.get());
}
void NetworkParam::set_allocated_height_pt_blob(::std::string* height_pt_blob) {
  if (height_pt_blob != NULL) {
    set_has_height_pt_blob();
  } else {
    clear_has_height_pt_blob();
  }
  height_pt_blob_.SetAllocatedNoArena(&NetworkParam::_default_height_pt_blob_.get(), height_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
}

// optional string feature_blob = 5 [default = "data"];
bool NetworkParam::has_feature_blob() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetworkParam::set_has_feature_blob() {
  _has_bits_[0] |= 0x00000010u;
}
void NetworkParam::clear_has_feature_blob() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetworkParam::clear_feature_blob() {
  feature_blob_.ClearToDefaultNoArena(&NetworkParam::_default_feature_blob_.get());
  clear_has_feature_blob();
}
const ::std::string& NetworkParam::feature_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.feature_blob)
  return feature_blob_.GetNoArena();
}
void NetworkParam::set_feature_blob(const ::std::string& value) {
  set_has_feature_blob();
  feature_blob_.SetNoArena(&NetworkParam::_default_feature_blob_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.feature_blob)
}
#if LANG_CXX11
void NetworkParam::set_feature_blob(::std::string&& value) {
  set_has_feature_blob();
  feature_blob_.SetNoArena(
    &NetworkParam::_default_feature_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.cnnseg.NetworkParam.feature_blob)
}
#endif
void NetworkParam::set_feature_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_feature_blob();
  feature_blob_.SetNoArena(&NetworkParam::_default_feature_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnnseg.NetworkParam.feature_blob)
}
void NetworkParam::set_feature_blob(const char* value, size_t size) {
  set_has_feature_blob();
  feature_blob_.SetNoArena(&NetworkParam::_default_feature_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnnseg.NetworkParam.feature_blob)
}
::std::string* NetworkParam::mutable_feature_blob() {
  set_has_feature_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.feature_blob)
  return feature_blob_.MutableNoArena(&NetworkParam::_default_feature_blob_.get());
}
::std::string* NetworkParam::release_feature_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.feature_blob)
  clear_has_feature_blob();
  return feature_blob_.ReleaseNoArena(&NetworkParam::_default_feature_blob_.get());
}
void NetworkParam::set_allocated_feature_blob(::std::string* feature_blob) {
  if (feature_blob != NULL) {
    set_has_feature_blob();
  } else {
    clear_has_feature_blob();
  }
  feature_blob_.SetAllocatedNoArena(&NetworkParam::_default_feature_blob_.get(), feature_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.feature_blob)
}

// optional string class_pt_blob = 6 [default = "class_score"];
bool NetworkParam::has_class_pt_blob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NetworkParam::set_has_class_pt_blob() {
  _has_bits_[0] |= 0x00000020u;
}
void NetworkParam::clear_has_class_pt_blob() {
  _has_bits_[0] &= ~0x00000020u;
}
void NetworkParam::clear_class_pt_blob() {
  class_pt_blob_.ClearToDefaultNoArena(&NetworkParam::_default_class_pt_blob_.get());
  clear_has_class_pt_blob();
}
const ::std::string& NetworkParam::class_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
  return class_pt_blob_.GetNoArena();
}
void NetworkParam::set_class_pt_blob(const ::std::string& value) {
  set_has_class_pt_blob();
  class_pt_blob_.SetNoArena(&NetworkParam::_default_class_pt_blob_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
}
#if LANG_CXX11
void NetworkParam::set_class_pt_blob(::std::string&& value) {
  set_has_class_pt_blob();
  class_pt_blob_.SetNoArena(
    &NetworkParam::_default_class_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
}
#endif
void NetworkParam::set_class_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_class_pt_blob();
  class_pt_blob_.SetNoArena(&NetworkParam::_default_class_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
}
void NetworkParam::set_class_pt_blob(const char* value, size_t size) {
  set_has_class_pt_blob();
  class_pt_blob_.SetNoArena(&NetworkParam::_default_class_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
}
::std::string* NetworkParam::mutable_class_pt_blob() {
  set_has_class_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
  return class_pt_blob_.MutableNoArena(&NetworkParam::_default_class_pt_blob_.get());
}
::std::string* NetworkParam::release_class_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
  clear_has_class_pt_blob();
  return class_pt_blob_.ReleaseNoArena(&NetworkParam::_default_class_pt_blob_.get());
}
void NetworkParam::set_allocated_class_pt_blob(::std::string* class_pt_blob) {
  if (class_pt_blob != NULL) {
    set_has_class_pt_blob();
  } else {
    clear_has_class_pt_blob();
  }
  class_pt_blob_.SetAllocatedNoArena(&NetworkParam::_default_class_pt_blob_.get(), class_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureParam::kPointCloudRangeFieldNumber;
const int FeatureParam::kWidthFieldNumber;
const int FeatureParam::kHeightFieldNumber;
const int FeatureParam::kMinHeightFieldNumber;
const int FeatureParam::kMaxHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureParam::FeatureParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.cnnseg.FeatureParam)
}
FeatureParam::FeatureParam(const FeatureParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_height_, &from.max_height_,
    reinterpret_cast<char*>(&min_height_) -
    reinterpret_cast<char*>(&max_height_) + sizeof(min_height_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.cnnseg.FeatureParam)
}

void FeatureParam::SharedCtor() {
  _cached_size_ = 0;
  max_height_ = 5;
  point_cloud_range_ = 60u;
  width_ = 512u;
  height_ = 512u;
  min_height_ = -5;
}

FeatureParam::~FeatureParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.cnnseg.FeatureParam)
  SharedDtor();
}

void FeatureParam::SharedDtor() {
}

void FeatureParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureParam::descriptor() {
  protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeatureParam& FeatureParam::default_instance() {
  protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeatureParam* FeatureParam::New(::google::protobuf::Arena* arena) const {
  FeatureParam* n = new FeatureParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.cnnseg.FeatureParam)
  if (_has_bits_[0 / 32] & 31u) {
    max_height_ = 5;
    point_cloud_range_ = 60u;
    width_ = 512u;
    height_ = 512u;
    min_height_ = -5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FeatureParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.cnnseg.FeatureParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 point_cloud_range = 26 [default = 60];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_point_cloud_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_cloud_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 27 [default = 512];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 28 [default = 512];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_height = 31 [default = -5];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u)) {
          set_has_min_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_height = 32 [default = 5];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(261u)) {
          set_has_max_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.cnnseg.FeatureParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.cnnseg.FeatureParam)
  return false;
#undef DO_
}

void FeatureParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.cnnseg.FeatureParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 point_cloud_range = 26 [default = 60];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->point_cloud_range(), output);
  }

  // optional uint32 width = 27 [default = 512];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->width(), output);
  }

  // optional uint32 height = 28 [default = 512];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->height(), output);
  }

  // optional float min_height = 31 [default = -5];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->min_height(), output);
  }

  // optional float max_height = 32 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->max_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.cnnseg.FeatureParam)
}

::google::protobuf::uint8* FeatureParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.cnnseg.FeatureParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 point_cloud_range = 26 [default = 60];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->point_cloud_range(), target);
  }

  // optional uint32 width = 27 [default = 512];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->width(), target);
  }

  // optional uint32 height = 28 [default = 512];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->height(), target);
  }

  // optional float min_height = 31 [default = -5];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->min_height(), target);
  }

  // optional float max_height = 32 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->max_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.cnnseg.FeatureParam)
  return target;
}

size_t FeatureParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.cnnseg.FeatureParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional float max_height = 32 [default = 5];
    if (has_max_height()) {
      total_size += 2 + 4;
    }

    // optional uint32 point_cloud_range = 26 [default = 60];
    if (has_point_cloud_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point_cloud_range());
    }

    // optional uint32 width = 27 [default = 512];
    if (has_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 28 [default = 512];
    if (has_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional float min_height = 31 [default = -5];
    if (has_min_height()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.cnnseg.FeatureParam)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.cnnseg.FeatureParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.cnnseg.FeatureParam)
    MergeFrom(*source);
  }
}

void FeatureParam::MergeFrom(const FeatureParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.cnnseg.FeatureParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      max_height_ = from.max_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      point_cloud_range_ = from.point_cloud_range_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_height_ = from.min_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FeatureParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.cnnseg.FeatureParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureParam::CopyFrom(const FeatureParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.cnnseg.FeatureParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureParam::IsInitialized() const {
  return true;
}

void FeatureParam::Swap(FeatureParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureParam::InternalSwap(FeatureParam* other) {
  std::swap(max_height_, other->max_height_);
  std::swap(point_cloud_range_, other->point_cloud_range_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(min_height_, other->min_height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureParam::GetMetadata() const {
  protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureParam

// optional uint32 point_cloud_range = 26 [default = 60];
bool FeatureParam::has_point_cloud_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeatureParam::set_has_point_cloud_range() {
  _has_bits_[0] |= 0x00000002u;
}
void FeatureParam::clear_has_point_cloud_range() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeatureParam::clear_point_cloud_range() {
  point_cloud_range_ = 60u;
  clear_has_point_cloud_range();
}
::google::protobuf::uint32 FeatureParam::point_cloud_range() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.point_cloud_range)
  return point_cloud_range_;
}
void FeatureParam::set_point_cloud_range(::google::protobuf::uint32 value) {
  set_has_point_cloud_range();
  point_cloud_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.point_cloud_range)
}

// optional uint32 width = 27 [default = 512];
bool FeatureParam::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FeatureParam::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void FeatureParam::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void FeatureParam::clear_width() {
  width_ = 512u;
  clear_has_width();
}
::google::protobuf::uint32 FeatureParam::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.width)
  return width_;
}
void FeatureParam::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.width)
}

// optional uint32 height = 28 [default = 512];
bool FeatureParam::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FeatureParam::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void FeatureParam::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void FeatureParam::clear_height() {
  height_ = 512u;
  clear_has_height();
}
::google::protobuf::uint32 FeatureParam::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.height)
  return height_;
}
void FeatureParam::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.height)
}

// optional float min_height = 31 [default = -5];
bool FeatureParam::has_min_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FeatureParam::set_has_min_height() {
  _has_bits_[0] |= 0x00000010u;
}
void FeatureParam::clear_has_min_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void FeatureParam::clear_min_height() {
  min_height_ = -5;
  clear_has_min_height();
}
float FeatureParam::min_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.min_height)
  return min_height_;
}
void FeatureParam::set_min_height(float value) {
  set_has_min_height();
  min_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.min_height)
}

// optional float max_height = 32 [default = 5];
bool FeatureParam::has_max_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeatureParam::set_has_max_height() {
  _has_bits_[0] |= 0x00000001u;
}
void FeatureParam::clear_has_max_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeatureParam::clear_max_height() {
  max_height_ = 5;
  clear_has_max_height();
}
float FeatureParam::max_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.max_height)
  return max_height_;
}
void FeatureParam::set_max_height(float value) {
  set_has_max_height();
  max_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.max_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cnnseg
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
