// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/calibration/republish_msg/proto/relative_odometry.proto

#ifndef PROTOBUF_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto__INCLUDED
#define PROTOBUF_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
namespace apollo {
namespace calibration {
namespace republish_msg {
class RelativeOdometry;
class RelativeOdometryDefaultTypeInternal;
extern RelativeOdometryDefaultTypeInternal _RelativeOdometry_default_instance_;
}  // namespace republish_msg
}  // namespace calibration
namespace common {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointENU;
class PointENUDefaultTypeInternal;
extern PointENUDefaultTypeInternal _PointENU_default_instance_;
class PointLLH;
class PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
}  // namespace common
}  // namespace apollo

namespace apollo {
namespace calibration {
namespace republish_msg {

namespace protobuf_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto

// ===================================================================

class RelativeOdometry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.calibration.republish_msg.RelativeOdometry) */ {
 public:
  RelativeOdometry();
  virtual ~RelativeOdometry();

  RelativeOdometry(const RelativeOdometry& from);

  inline RelativeOdometry& operator=(const RelativeOdometry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelativeOdometry& default_instance();

  static inline const RelativeOdometry* internal_default_instance() {
    return reinterpret_cast<const RelativeOdometry*>(
               &_RelativeOdometry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RelativeOdometry* other);

  // implements Message ----------------------------------------------

  inline RelativeOdometry* New() const PROTOBUF_FINAL { return New(NULL); }

  RelativeOdometry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RelativeOdometry& from);
  void MergeFrom(const RelativeOdometry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RelativeOdometry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.common.PointENU position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::apollo::common::PointENU& position() const;
  ::apollo::common::PointENU* mutable_position();
  ::apollo::common::PointENU* release_position();
  void set_allocated_position(::apollo::common::PointENU* position);

  // optional .apollo.common.Quaternion orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  const ::apollo::common::Quaternion& orientation() const;
  ::apollo::common::Quaternion* mutable_orientation();
  ::apollo::common::Quaternion* release_orientation();
  void set_allocated_orientation(::apollo::common::Quaternion* orientation);

  // optional uint32 position_type = 4;
  bool has_position_type() const;
  void clear_position_type();
  static const int kPositionTypeFieldNumber = 4;
  ::google::protobuf::uint32 position_type() const;
  void set_position_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.calibration.republish_msg.RelativeOdometry)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_position();
  void clear_has_position();
  void set_has_orientation();
  void clear_has_orientation();
  void set_has_position_type();
  void clear_has_position_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  ::apollo::common::PointENU* position_;
  ::apollo::common::Quaternion* orientation_;
  ::google::protobuf::uint32 position_type_;
  friend struct protobuf_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RelativeOdometry

// optional .apollo.common.Header header = 1;
inline bool RelativeOdometry::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelativeOdometry::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelativeOdometry::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelativeOdometry::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& RelativeOdometry::header() const {
  // @@protoc_insertion_point(field_get:apollo.calibration.republish_msg.RelativeOdometry.header)
  return header_ != NULL ? *header_
                         : *::apollo::common::Header::internal_default_instance();
}
inline ::apollo::common::Header* RelativeOdometry::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.calibration.republish_msg.RelativeOdometry.header)
  return header_;
}
inline ::apollo::common::Header* RelativeOdometry::release_header() {
  // @@protoc_insertion_point(field_release:apollo.calibration.republish_msg.RelativeOdometry.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RelativeOdometry::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.calibration.republish_msg.RelativeOdometry.header)
}

// optional .apollo.common.PointENU position = 2;
inline bool RelativeOdometry::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelativeOdometry::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelativeOdometry::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelativeOdometry::clear_position() {
  if (position_ != NULL) position_->::apollo::common::PointENU::Clear();
  clear_has_position();
}
inline const ::apollo::common::PointENU& RelativeOdometry::position() const {
  // @@protoc_insertion_point(field_get:apollo.calibration.republish_msg.RelativeOdometry.position)
  return position_ != NULL ? *position_
                         : *::apollo::common::PointENU::internal_default_instance();
}
inline ::apollo::common::PointENU* RelativeOdometry::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.calibration.republish_msg.RelativeOdometry.position)
  return position_;
}
inline ::apollo::common::PointENU* RelativeOdometry::release_position() {
  // @@protoc_insertion_point(field_release:apollo.calibration.republish_msg.RelativeOdometry.position)
  clear_has_position();
  ::apollo::common::PointENU* temp = position_;
  position_ = NULL;
  return temp;
}
inline void RelativeOdometry::set_allocated_position(::apollo::common::PointENU* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.calibration.republish_msg.RelativeOdometry.position)
}

// optional .apollo.common.Quaternion orientation = 3;
inline bool RelativeOdometry::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelativeOdometry::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelativeOdometry::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelativeOdometry::clear_orientation() {
  if (orientation_ != NULL) orientation_->::apollo::common::Quaternion::Clear();
  clear_has_orientation();
}
inline const ::apollo::common::Quaternion& RelativeOdometry::orientation() const {
  // @@protoc_insertion_point(field_get:apollo.calibration.republish_msg.RelativeOdometry.orientation)
  return orientation_ != NULL ? *orientation_
                         : *::apollo::common::Quaternion::internal_default_instance();
}
inline ::apollo::common::Quaternion* RelativeOdometry::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::apollo::common::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:apollo.calibration.republish_msg.RelativeOdometry.orientation)
  return orientation_;
}
inline ::apollo::common::Quaternion* RelativeOdometry::release_orientation() {
  // @@protoc_insertion_point(field_release:apollo.calibration.republish_msg.RelativeOdometry.orientation)
  clear_has_orientation();
  ::apollo::common::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void RelativeOdometry::set_allocated_orientation(::apollo::common::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.calibration.republish_msg.RelativeOdometry.orientation)
}

// optional uint32 position_type = 4;
inline bool RelativeOdometry::has_position_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelativeOdometry::set_has_position_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelativeOdometry::clear_has_position_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelativeOdometry::clear_position_type() {
  position_type_ = 0u;
  clear_has_position_type();
}
inline ::google::protobuf::uint32 RelativeOdometry::position_type() const {
  // @@protoc_insertion_point(field_get:apollo.calibration.republish_msg.RelativeOdometry.position_type)
  return position_type_;
}
inline void RelativeOdometry::set_position_type(::google::protobuf::uint32 value) {
  set_has_position_type();
  position_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.calibration.republish_msg.RelativeOdometry.position_type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace republish_msg
}  // namespace calibration
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto__INCLUDED
